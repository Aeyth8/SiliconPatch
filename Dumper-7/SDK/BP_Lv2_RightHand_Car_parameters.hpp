#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Lv2_RightHand_Car

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_Lv2_RightHand_Car.BP_Lv2_RightHand_Car_C.ExecuteUbergraph_BP_Lv2_RightHand_Car
// 0x0030 (0x0030 - 0x0000)
struct BP_Lv2_RightHand_Car_C_ExecuteUbergraph_BP_Lv2_RightHand_Car final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimBP_CarlHand_C*                     K2Node_DynamicCast_AsAnim_BP_Carl_Hand;            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimBP_CarlHand_C*                     K2Node_DynamicCast_AsAnim_BP_Carl_Hand1;           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Lv2_RightHand_Car_C_ExecuteUbergraph_BP_Lv2_RightHand_Car) == 0x000008, "Wrong alignment on BP_Lv2_RightHand_Car_C_ExecuteUbergraph_BP_Lv2_RightHand_Car");
static_assert(sizeof(BP_Lv2_RightHand_Car_C_ExecuteUbergraph_BP_Lv2_RightHand_Car) == 0x000030, "Wrong size on BP_Lv2_RightHand_Car_C_ExecuteUbergraph_BP_Lv2_RightHand_Car");
static_assert(offsetof(BP_Lv2_RightHand_Car_C_ExecuteUbergraph_BP_Lv2_RightHand_Car, EntryPoint) == 0x000000, "Member 'BP_Lv2_RightHand_Car_C_ExecuteUbergraph_BP_Lv2_RightHand_Car::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Lv2_RightHand_Car_C_ExecuteUbergraph_BP_Lv2_RightHand_Car, CallFunc_GetAnimInstance_ReturnValue) == 0x000008, "Member 'BP_Lv2_RightHand_Car_C_ExecuteUbergraph_BP_Lv2_RightHand_Car::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_RightHand_Car_C_ExecuteUbergraph_BP_Lv2_RightHand_Car, K2Node_DynamicCast_AsAnim_BP_Carl_Hand) == 0x000010, "Member 'BP_Lv2_RightHand_Car_C_ExecuteUbergraph_BP_Lv2_RightHand_Car::K2Node_DynamicCast_AsAnim_BP_Carl_Hand' has a wrong offset!");
static_assert(offsetof(BP_Lv2_RightHand_Car_C_ExecuteUbergraph_BP_Lv2_RightHand_Car, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_Lv2_RightHand_Car_C_ExecuteUbergraph_BP_Lv2_RightHand_Car::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Lv2_RightHand_Car_C_ExecuteUbergraph_BP_Lv2_RightHand_Car, K2Node_DynamicCast_AsAnim_BP_Carl_Hand1) == 0x000020, "Member 'BP_Lv2_RightHand_Car_C_ExecuteUbergraph_BP_Lv2_RightHand_Car::K2Node_DynamicCast_AsAnim_BP_Carl_Hand1' has a wrong offset!");
static_assert(offsetof(BP_Lv2_RightHand_Car_C_ExecuteUbergraph_BP_Lv2_RightHand_Car, K2Node_DynamicCast_bSuccess1) == 0x000028, "Member 'BP_Lv2_RightHand_Car_C_ExecuteUbergraph_BP_Lv2_RightHand_Car::K2Node_DynamicCast_bSuccess1' has a wrong offset!");

// Function BP_Lv2_RightHand_Car.BP_Lv2_RightHand_Car_C.Clpi
// 0x0150 (0x0150 - 0x0000)
struct BP_Lv2_RightHand_Car_C_Clpi final
{
public:
	class USceneComponent*                        NewParam;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0020(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x00C8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_Lv2_RightHand_Car_C_Clpi) == 0x000008, "Wrong alignment on BP_Lv2_RightHand_Car_C_Clpi");
static_assert(sizeof(BP_Lv2_RightHand_Car_C_Clpi) == 0x000150, "Wrong size on BP_Lv2_RightHand_Car_C_Clpi");
static_assert(offsetof(BP_Lv2_RightHand_Car_C_Clpi, NewParam) == 0x000000, "Member 'BP_Lv2_RightHand_Car_C_Clpi::NewParam' has a wrong offset!");
static_assert(offsetof(BP_Lv2_RightHand_Car_C_Clpi, CallFunc_Add_VectorVector_ReturnValue) == 0x000008, "Member 'BP_Lv2_RightHand_Car_C_Clpi::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_RightHand_Car_C_Clpi, CallFunc_BreakVector_X) == 0x000014, "Member 'BP_Lv2_RightHand_Car_C_Clpi::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_Lv2_RightHand_Car_C_Clpi, CallFunc_BreakVector_Y) == 0x000018, "Member 'BP_Lv2_RightHand_Car_C_Clpi::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_Lv2_RightHand_Car_C_Clpi, CallFunc_BreakVector_Z) == 0x00001C, "Member 'BP_Lv2_RightHand_Car_C_Clpi::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_Lv2_RightHand_Car_C_Clpi, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000020, "Member 'BP_Lv2_RightHand_Car_C_Clpi::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_Lv2_RightHand_Car_C_Clpi, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0000A8, "Member 'BP_Lv2_RightHand_Car_C_Clpi::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_RightHand_Car_C_Clpi, CallFunc_MakeVector_ReturnValue) == 0x0000AC, "Member 'BP_Lv2_RightHand_Car_C_Clpi::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_RightHand_Car_C_Clpi, CallFunc_ComposeRotators_ReturnValue) == 0x0000B8, "Member 'BP_Lv2_RightHand_Car_C_Clpi::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_RightHand_Car_C_Clpi, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x0000C8, "Member 'BP_Lv2_RightHand_Car_C_Clpi::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");

}

