#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AttackDrone

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_NPC_Base_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AttackDrone.BP_AttackDrone_C
// 0x0130 (0x09E0 - 0x08B0)
class ABP_AttackDrone_C : public ABP_NPC_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AttackDrone_C;                   // 0x08B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UParticleSystemComponent*               ParticleSystem1;                                   // 0x08B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene1;                                            // 0x08C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Failed;                                            // 0x08C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               EngineLeft;                                        // 0x08D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Engine;                                            // 0x08D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        shield;                                            // 0x08E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x08E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere;                                            // 0x08F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               ParticleSystem;                                    // 0x08F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_0_NewTrack_0_ABD698AF4C8FA38D6AA11389CA351609; // 0x0900(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0_0__Direction_ABD698AF4C8FA38D6AA11389CA351609; // 0x0904(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_905[0x3];                                      // 0x0905(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0_0;                                      // 0x0908(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetLocation;                                    // 0x0910(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91C[0x4];                                      // 0x091C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimBP_AttackDrone_C*                  AnimBP;                                            // 0x0920(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldFly;                                         // 0x0928(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_929[0x7];                                      // 0x0929(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_HelicopterPath_C*                   CurrentSpline;                                     // 0x0930(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_HelicopterPath_C*                   SplinePath_1;                                      // 0x0938(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_HelicopterPath_C*                   SplinePath_2;                                      // 0x0940(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_HelicopterPath_C*                   SplinePath_3;                                      // 0x0948(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Stage;                                             // 0x0950(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DTime;                                             // 0x0954(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Distance;                                          // 0x0958(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PointIndex;                                        // 0x095C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TempLocation;                                      // 0x0960(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLeft;                                            // 0x096C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_96D[0x3];                                      // 0x096D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABPWpnBase_C*                           MachineGun;                                        // 0x0970(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	float                                         MissileSpeed;                                      // 0x0978(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MissileIntervalMini;                               // 0x097C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MissileIntervalMax;                                // 0x0980(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurnSpeed;                                         // 0x0984(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_CharacterBase_C*                    Player;                                            // 0x0988(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               ShieldParticle;                                    // 0x0990(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDebug;                                           // 0x0998(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          IsMissileLoop;                                     // 0x0999(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsShowUp;                                          // 0x099A(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_99B[0x5];                                      // 0x099B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 MissleStartLocation;                               // 0x09A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         MissleTargetLocation;                              // 0x09A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	float                                         SilentTime;                                        // 0x09B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SetSilentTime;                                     // 0x09BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldDoCheck;                                     // 0x09C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9C1[0x3];                                      // 0x09C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HP;                                                // 0x09C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Max_HP;                                            // 0x09C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBreakShield;                                     // 0x09CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsFirstMissile;                                    // 0x09CD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9CE[0x2];                                      // 0x09CE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           TempBoneList;                                      // 0x09D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)

public:
	void ExecuteUbergraph_BP_AttackDrone(int32 EntryPoint);
	void OnSilent();
	void PlaySound(int32 Index_0);
	void SetActorVisible(bool Value);
	void DoSetPlayer(class ABP_CharacterBase_C* Target);
	void OnSetPlayer();
	void HitSheild(const struct FVector& ImpactPoint, const struct FVector& Normal, bool IsRPG);
	void OnMachineGunShoot(int32 DeadlyBulletNum, const struct FVector& TargetPoint, bool IsUseOffset, bool IsSpecial);
	void OnShowPrepare();
	void ShowUpDone();
	void OnShootMissile();
	void BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ResetAll();
	void SetPoint(int32 Index_0);
	void StartStage(int32 Stage_0);
	void StartFlying();
	void Timeline_0_0__UpdateFunc();
	void Timeline_0_0__FinishedFunc();
	void FaceToTarget();
	void FaceTorTargetLocation();
	void GetPlayerHead(bool* Success, class UBoxComponent** BoxHead);
	void GetLocationAlongSpline(class USplineComponent* Spline, struct FVector* Location, bool* SplineFinish);
	void GetTargetLocationSide(const struct FVector& Start, const struct FVector& End, const struct FVector& Target, bool* IsLeft_0, float* Delta);
	void CanMachineGunFire(bool* Angle, bool* CoolDown);
	void ShootMissile();
	void SetPlayer();
	void OnRep_MachineGun();
	void GetConstraintBone(TArray<class FName>* Constraints);
	void CheatDamge(float Damge);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveAnyDamage(float Damage_0, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceiveBeginPlay();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AttackDrone_C">();
	}
	static class ABP_AttackDrone_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AttackDrone_C>();
	}
};
static_assert(alignof(ABP_AttackDrone_C) == 0x000010, "Wrong alignment on ABP_AttackDrone_C");
static_assert(sizeof(ABP_AttackDrone_C) == 0x0009E0, "Wrong size on ABP_AttackDrone_C");
static_assert(offsetof(ABP_AttackDrone_C, UberGraphFrame_BP_AttackDrone_C) == 0x0008B0, "Member 'ABP_AttackDrone_C::UberGraphFrame_BP_AttackDrone_C' has a wrong offset!");
static_assert(offsetof(ABP_AttackDrone_C, ParticleSystem1) == 0x0008B8, "Member 'ABP_AttackDrone_C::ParticleSystem1' has a wrong offset!");
static_assert(offsetof(ABP_AttackDrone_C, Scene1) == 0x0008C0, "Member 'ABP_AttackDrone_C::Scene1' has a wrong offset!");
static_assert(offsetof(ABP_AttackDrone_C, Failed) == 0x0008C8, "Member 'ABP_AttackDrone_C::Failed' has a wrong offset!");
static_assert(offsetof(ABP_AttackDrone_C, EngineLeft) == 0x0008D0, "Member 'ABP_AttackDrone_C::EngineLeft' has a wrong offset!");
static_assert(offsetof(ABP_AttackDrone_C, Engine) == 0x0008D8, "Member 'ABP_AttackDrone_C::Engine' has a wrong offset!");
static_assert(offsetof(ABP_AttackDrone_C, shield) == 0x0008E0, "Member 'ABP_AttackDrone_C::shield' has a wrong offset!");
static_assert(offsetof(ABP_AttackDrone_C, Scene) == 0x0008E8, "Member 'ABP_AttackDrone_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_AttackDrone_C, Sphere) == 0x0008F0, "Member 'ABP_AttackDrone_C::Sphere' has a wrong offset!");
static_assert(offsetof(ABP_AttackDrone_C, ParticleSystem) == 0x0008F8, "Member 'ABP_AttackDrone_C::ParticleSystem' has a wrong offset!");
static_assert(offsetof(ABP_AttackDrone_C, Timeline_0_0_NewTrack_0_ABD698AF4C8FA38D6AA11389CA351609) == 0x000900, "Member 'ABP_AttackDrone_C::Timeline_0_0_NewTrack_0_ABD698AF4C8FA38D6AA11389CA351609' has a wrong offset!");
static_assert(offsetof(ABP_AttackDrone_C, Timeline_0_0__Direction_ABD698AF4C8FA38D6AA11389CA351609) == 0x000904, "Member 'ABP_AttackDrone_C::Timeline_0_0__Direction_ABD698AF4C8FA38D6AA11389CA351609' has a wrong offset!");
static_assert(offsetof(ABP_AttackDrone_C, Timeline_0_0) == 0x000908, "Member 'ABP_AttackDrone_C::Timeline_0_0' has a wrong offset!");
static_assert(offsetof(ABP_AttackDrone_C, TargetLocation) == 0x000910, "Member 'ABP_AttackDrone_C::TargetLocation' has a wrong offset!");
static_assert(offsetof(ABP_AttackDrone_C, AnimBP) == 0x000920, "Member 'ABP_AttackDrone_C::AnimBP' has a wrong offset!");
static_assert(offsetof(ABP_AttackDrone_C, ShouldFly) == 0x000928, "Member 'ABP_AttackDrone_C::ShouldFly' has a wrong offset!");
static_assert(offsetof(ABP_AttackDrone_C, CurrentSpline) == 0x000930, "Member 'ABP_AttackDrone_C::CurrentSpline' has a wrong offset!");
static_assert(offsetof(ABP_AttackDrone_C, SplinePath_1) == 0x000938, "Member 'ABP_AttackDrone_C::SplinePath_1' has a wrong offset!");
static_assert(offsetof(ABP_AttackDrone_C, SplinePath_2) == 0x000940, "Member 'ABP_AttackDrone_C::SplinePath_2' has a wrong offset!");
static_assert(offsetof(ABP_AttackDrone_C, SplinePath_3) == 0x000948, "Member 'ABP_AttackDrone_C::SplinePath_3' has a wrong offset!");
static_assert(offsetof(ABP_AttackDrone_C, Stage) == 0x000950, "Member 'ABP_AttackDrone_C::Stage' has a wrong offset!");
static_assert(offsetof(ABP_AttackDrone_C, DTime) == 0x000954, "Member 'ABP_AttackDrone_C::DTime' has a wrong offset!");
static_assert(offsetof(ABP_AttackDrone_C, Distance) == 0x000958, "Member 'ABP_AttackDrone_C::Distance' has a wrong offset!");
static_assert(offsetof(ABP_AttackDrone_C, PointIndex) == 0x00095C, "Member 'ABP_AttackDrone_C::PointIndex' has a wrong offset!");
static_assert(offsetof(ABP_AttackDrone_C, TempLocation) == 0x000960, "Member 'ABP_AttackDrone_C::TempLocation' has a wrong offset!");
static_assert(offsetof(ABP_AttackDrone_C, IsLeft) == 0x00096C, "Member 'ABP_AttackDrone_C::IsLeft' has a wrong offset!");
static_assert(offsetof(ABP_AttackDrone_C, MachineGun) == 0x000970, "Member 'ABP_AttackDrone_C::MachineGun' has a wrong offset!");
static_assert(offsetof(ABP_AttackDrone_C, MissileSpeed) == 0x000978, "Member 'ABP_AttackDrone_C::MissileSpeed' has a wrong offset!");
static_assert(offsetof(ABP_AttackDrone_C, MissileIntervalMini) == 0x00097C, "Member 'ABP_AttackDrone_C::MissileIntervalMini' has a wrong offset!");
static_assert(offsetof(ABP_AttackDrone_C, MissileIntervalMax) == 0x000980, "Member 'ABP_AttackDrone_C::MissileIntervalMax' has a wrong offset!");
static_assert(offsetof(ABP_AttackDrone_C, TurnSpeed) == 0x000984, "Member 'ABP_AttackDrone_C::TurnSpeed' has a wrong offset!");
static_assert(offsetof(ABP_AttackDrone_C, Player) == 0x000988, "Member 'ABP_AttackDrone_C::Player' has a wrong offset!");
static_assert(offsetof(ABP_AttackDrone_C, ShieldParticle) == 0x000990, "Member 'ABP_AttackDrone_C::ShieldParticle' has a wrong offset!");
static_assert(offsetof(ABP_AttackDrone_C, IsDebug) == 0x000998, "Member 'ABP_AttackDrone_C::IsDebug' has a wrong offset!");
static_assert(offsetof(ABP_AttackDrone_C, IsMissileLoop) == 0x000999, "Member 'ABP_AttackDrone_C::IsMissileLoop' has a wrong offset!");
static_assert(offsetof(ABP_AttackDrone_C, IsShowUp) == 0x00099A, "Member 'ABP_AttackDrone_C::IsShowUp' has a wrong offset!");
static_assert(offsetof(ABP_AttackDrone_C, MissleStartLocation) == 0x0009A0, "Member 'ABP_AttackDrone_C::MissleStartLocation' has a wrong offset!");
static_assert(offsetof(ABP_AttackDrone_C, MissleTargetLocation) == 0x0009A8, "Member 'ABP_AttackDrone_C::MissleTargetLocation' has a wrong offset!");
static_assert(offsetof(ABP_AttackDrone_C, SilentTime) == 0x0009B8, "Member 'ABP_AttackDrone_C::SilentTime' has a wrong offset!");
static_assert(offsetof(ABP_AttackDrone_C, SetSilentTime) == 0x0009BC, "Member 'ABP_AttackDrone_C::SetSilentTime' has a wrong offset!");
static_assert(offsetof(ABP_AttackDrone_C, ShouldDoCheck) == 0x0009C0, "Member 'ABP_AttackDrone_C::ShouldDoCheck' has a wrong offset!");
static_assert(offsetof(ABP_AttackDrone_C, HP) == 0x0009C4, "Member 'ABP_AttackDrone_C::HP' has a wrong offset!");
static_assert(offsetof(ABP_AttackDrone_C, Max_HP) == 0x0009C8, "Member 'ABP_AttackDrone_C::Max_HP' has a wrong offset!");
static_assert(offsetof(ABP_AttackDrone_C, IsBreakShield) == 0x0009CC, "Member 'ABP_AttackDrone_C::IsBreakShield' has a wrong offset!");
static_assert(offsetof(ABP_AttackDrone_C, IsFirstMissile) == 0x0009CD, "Member 'ABP_AttackDrone_C::IsFirstMissile' has a wrong offset!");
static_assert(offsetof(ABP_AttackDrone_C, TempBoneList) == 0x0009D0, "Member 'ABP_AttackDrone_C::TempBoneList' has a wrong offset!");

}

