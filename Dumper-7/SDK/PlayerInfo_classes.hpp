#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PlayerInfo

#include "Basic.hpp"

#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass PlayerInfo.PlayerInfo_C
// 0x0028 (0x0230 - 0x0208)
class UPlayerInfo_C final : public UUserWidget
{
public:
	class UImage*                                 avtar;                                             // 0x0208(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                bg;                                                // 0x0210(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Name_0;                                            // 0x0218(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             rank;                                              // 0x0220(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Score;                                             // 0x0228(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	void SetRankInfo(const class FText& _rank);
	void SetNameInfo(const class FText& _name);
	void SetScoreInfo(const class FText& _score);
	void setAvatarInfo(struct FSlateBrush& InBrush);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"PlayerInfo_C">();
	}
	static class UPlayerInfo_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlayerInfo_C>();
	}
};
static_assert(alignof(UPlayerInfo_C) == 0x000008, "Wrong alignment on UPlayerInfo_C");
static_assert(sizeof(UPlayerInfo_C) == 0x000230, "Wrong size on UPlayerInfo_C");
static_assert(offsetof(UPlayerInfo_C, avtar) == 0x000208, "Member 'UPlayerInfo_C::avtar' has a wrong offset!");
static_assert(offsetof(UPlayerInfo_C, bg) == 0x000210, "Member 'UPlayerInfo_C::bg' has a wrong offset!");
static_assert(offsetof(UPlayerInfo_C, Name_0) == 0x000218, "Member 'UPlayerInfo_C::Name_0' has a wrong offset!");
static_assert(offsetof(UPlayerInfo_C, rank) == 0x000220, "Member 'UPlayerInfo_C::rank' has a wrong offset!");
static_assert(offsetof(UPlayerInfo_C, Score) == 0x000228, "Member 'UPlayerInfo_C::Score' has a wrong offset!");

}

