#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Wpn_Knife

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function Wpn_Knife.Wpn_Knife_C.ExecuteUbergraph_Wpn_Knife
// 0x0120 (0x0120 - 0x0000)
struct Wpn_Knife_C_ExecuteUbergraph_Wpn_Knife final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsFromRightHand;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Hand;                                 // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue1;     // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0040(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult; // 0x0098(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Wpn_Knife_C_ExecuteUbergraph_Wpn_Knife) == 0x000010, "Wrong alignment on Wpn_Knife_C_ExecuteUbergraph_Wpn_Knife");
static_assert(sizeof(Wpn_Knife_C_ExecuteUbergraph_Wpn_Knife) == 0x000120, "Wrong size on Wpn_Knife_C_ExecuteUbergraph_Wpn_Knife");
static_assert(offsetof(Wpn_Knife_C_ExecuteUbergraph_Wpn_Knife, EntryPoint) == 0x000000, "Member 'Wpn_Knife_C_ExecuteUbergraph_Wpn_Knife::EntryPoint' has a wrong offset!");
static_assert(offsetof(Wpn_Knife_C_ExecuteUbergraph_Wpn_Knife, K2Node_Event_IsFromRightHand) == 0x000004, "Member 'Wpn_Knife_C_ExecuteUbergraph_Wpn_Knife::K2Node_Event_IsFromRightHand' has a wrong offset!");
static_assert(offsetof(Wpn_Knife_C_ExecuteUbergraph_Wpn_Knife, K2Node_Event_Hand) == 0x000008, "Member 'Wpn_Knife_C_ExecuteUbergraph_Wpn_Knife::K2Node_Event_Hand' has a wrong offset!");
static_assert(offsetof(Wpn_Knife_C_ExecuteUbergraph_Wpn_Knife, K2Node_Event_DeltaSeconds) == 0x000010, "Member 'Wpn_Knife_C_ExecuteUbergraph_Wpn_Knife::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(Wpn_Knife_C_ExecuteUbergraph_Wpn_Knife, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000014, "Member 'Wpn_Knife_C_ExecuteUbergraph_Wpn_Knife::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Knife_C_ExecuteUbergraph_Wpn_Knife, CallFunc_K2_GetComponentLocation_ReturnValue1) == 0x000020, "Member 'Wpn_Knife_C_ExecuteUbergraph_Wpn_Knife::CallFunc_K2_GetComponentLocation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(Wpn_Knife_C_ExecuteUbergraph_Wpn_Knife, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00002C, "Member 'Wpn_Knife_C_ExecuteUbergraph_Wpn_Knife::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Knife_C_ExecuteUbergraph_Wpn_Knife, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000040, "Member 'Wpn_Knife_C_ExecuteUbergraph_Wpn_Knife::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Knife_C_ExecuteUbergraph_Wpn_Knife, CallFunc_BreakTransform_Location) == 0x000070, "Member 'Wpn_Knife_C_ExecuteUbergraph_Wpn_Knife::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(Wpn_Knife_C_ExecuteUbergraph_Wpn_Knife, CallFunc_BreakTransform_Rotation) == 0x00007C, "Member 'Wpn_Knife_C_ExecuteUbergraph_Wpn_Knife::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(Wpn_Knife_C_ExecuteUbergraph_Wpn_Knife, CallFunc_BreakTransform_Scale) == 0x000088, "Member 'Wpn_Knife_C_ExecuteUbergraph_Wpn_Knife::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(Wpn_Knife_C_ExecuteUbergraph_Wpn_Knife, CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult) == 0x000098, "Member 'Wpn_Knife_C_ExecuteUbergraph_Wpn_Knife::CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult' has a wrong offset!");

// Function Wpn_Knife.Wpn_Knife_C.OnLineTriggerPull
// 0x0010 (0x0010 - 0x0000)
struct Wpn_Knife_C_OnLineTriggerPull final
{
public:
	bool                                          IsFromRightHand;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 hand;                                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wpn_Knife_C_OnLineTriggerPull) == 0x000008, "Wrong alignment on Wpn_Knife_C_OnLineTriggerPull");
static_assert(sizeof(Wpn_Knife_C_OnLineTriggerPull) == 0x000010, "Wrong size on Wpn_Knife_C_OnLineTriggerPull");
static_assert(offsetof(Wpn_Knife_C_OnLineTriggerPull, IsFromRightHand) == 0x000000, "Member 'Wpn_Knife_C_OnLineTriggerPull::IsFromRightHand' has a wrong offset!");
static_assert(offsetof(Wpn_Knife_C_OnLineTriggerPull, hand) == 0x000008, "Member 'Wpn_Knife_C_OnLineTriggerPull::hand' has a wrong offset!");

// Function Wpn_Knife.Wpn_Knife_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct Wpn_Knife_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wpn_Knife_C_ReceiveTick) == 0x000004, "Wrong alignment on Wpn_Knife_C_ReceiveTick");
static_assert(sizeof(Wpn_Knife_C_ReceiveTick) == 0x000004, "Wrong size on Wpn_Knife_C_ReceiveTick");
static_assert(offsetof(Wpn_Knife_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'Wpn_Knife_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

}

