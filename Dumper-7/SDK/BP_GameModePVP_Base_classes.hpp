#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GameModePVP_Base

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "SiliconRising_structs.hpp"
#include "SiliconRising_classes.hpp"
#include "Enum_Winner_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GameModePVP_Base.BP_GameModePVP_Base_C
// 0x0150 (0x0528 - 0x03D8)
class ABP_GameModePVP_Base_C final : public AMercenary2_PVP_GameMode
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x03E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         AICount;                                           // 0x03E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3EC[0x4];                                      // 0x03EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_CharacterPVP_Base_C*>        Chars;                                             // 0x03F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	class ABP_PVP_StartPosition_C*                TempTarget;                                        // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         CharsArray;                                        // 0x0408(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                          ShouldGiveToken;                                   // 0x0418(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_419[0x7];                                      // 0x0419(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_CharacterPVP_Base_C*                TempChar;                                          // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 TeamA;                                             // 0x0428(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<int32>                                 TeamB;                                             // 0x0438(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	UMulticastDelegateProperty_                   OnStartGame;                                       // 0x0448(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnShutdown;                                        // 0x0458(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         RndIndex;                                          // 0x0468(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46C[0x4];                                      // 0x046C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PVP_Center_Prop_C*                  CenterPipe;                                        // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PlayerConnect;                                     // 0x0478(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsGameStart;                                       // 0x047C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_47D[0x3];                                      // 0x047D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CharType;                                          // 0x0480(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsATeam;                                           // 0x0484(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsCenterPipeShowUp;                                // 0x0485(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_486[0x2];                                      // 0x0486(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CharTypeTmp;                                       // 0x0488(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         StartPlayerCount;                                  // 0x048C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TmpRnd;                                            // 0x0490(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_494[0x4];                                      // 0x0494(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PVP_LoaderServerConnection_C*       ServerConnection;                                  // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FYYMsgReqAckRoomInfo                   RoomInfo;                                          // 0x04A0(0x0080)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsInit;                                            // 0x0520(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          StartCheckPlayer;                                  // 0x0521(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsAnyPlayerInGame;                                 // 0x0522(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AtleastOnePlayerJoined;                            // 0x0523(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_GameModePVP_Base(int32 EntryPoint);
	void CustomEvent_0();
	void SpawnAllCharacters();
	void FakeBeginPlay();
	void OnRoomInfo(const struct FYYMsgReqAckRoomInfo& RoomInfo_0);
	void Evt_NewPlayerConnect(class APlayerController* NewPlayerController, const class FString& RoomName, const class FString& RoomID, const class FString& PlayerID);
	void ShowWinnerAnimation();
	void SetStartGame(bool Value);
	void ShowUpEnd();
	void Shutdown();
	void Start();
	void InitGameMode(bool Start);
	void TakeToken();
	void ReceiveTick(float DeltaSeconds);
	void K2_OnLogout(class AController* ExitingController);
	void K2_PostLogin(class APlayerController* NewPlayer);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void GetStartTransform(const class FString& Tag, class ABP_PVP_StartPosition_C** Target);
	void GenerateRandomArray(int32 Mini, int32 Max, TArray<int32>* Array);
	void GetCharEnumFromInt(int32 Index_0, Enum_Winner* Char);
	void CreateFakeRoomInfo(class ABP_PlayerControllerPVP_Base_C* Controller, int32 Index_0, struct FYYMsgReqAckRoomInfo* Out);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GameModePVP_Base_C">();
	}
	static class ABP_GameModePVP_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_GameModePVP_Base_C>();
	}
};
static_assert(alignof(ABP_GameModePVP_Base_C) == 0x000008, "Wrong alignment on ABP_GameModePVP_Base_C");
static_assert(sizeof(ABP_GameModePVP_Base_C) == 0x000528, "Wrong size on ABP_GameModePVP_Base_C");
static_assert(offsetof(ABP_GameModePVP_Base_C, UberGraphFrame) == 0x0003D8, "Member 'ABP_GameModePVP_Base_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_GameModePVP_Base_C, DefaultSceneRoot) == 0x0003E0, "Member 'ABP_GameModePVP_Base_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_GameModePVP_Base_C, AICount) == 0x0003E8, "Member 'ABP_GameModePVP_Base_C::AICount' has a wrong offset!");
static_assert(offsetof(ABP_GameModePVP_Base_C, Chars) == 0x0003F0, "Member 'ABP_GameModePVP_Base_C::Chars' has a wrong offset!");
static_assert(offsetof(ABP_GameModePVP_Base_C, TempTarget) == 0x000400, "Member 'ABP_GameModePVP_Base_C::TempTarget' has a wrong offset!");
static_assert(offsetof(ABP_GameModePVP_Base_C, CharsArray) == 0x000408, "Member 'ABP_GameModePVP_Base_C::CharsArray' has a wrong offset!");
static_assert(offsetof(ABP_GameModePVP_Base_C, ShouldGiveToken) == 0x000418, "Member 'ABP_GameModePVP_Base_C::ShouldGiveToken' has a wrong offset!");
static_assert(offsetof(ABP_GameModePVP_Base_C, TempChar) == 0x000420, "Member 'ABP_GameModePVP_Base_C::TempChar' has a wrong offset!");
static_assert(offsetof(ABP_GameModePVP_Base_C, TeamA) == 0x000428, "Member 'ABP_GameModePVP_Base_C::TeamA' has a wrong offset!");
static_assert(offsetof(ABP_GameModePVP_Base_C, TeamB) == 0x000438, "Member 'ABP_GameModePVP_Base_C::TeamB' has a wrong offset!");
static_assert(offsetof(ABP_GameModePVP_Base_C, OnStartGame) == 0x000448, "Member 'ABP_GameModePVP_Base_C::OnStartGame' has a wrong offset!");
static_assert(offsetof(ABP_GameModePVP_Base_C, OnShutdown) == 0x000458, "Member 'ABP_GameModePVP_Base_C::OnShutdown' has a wrong offset!");
static_assert(offsetof(ABP_GameModePVP_Base_C, RndIndex) == 0x000468, "Member 'ABP_GameModePVP_Base_C::RndIndex' has a wrong offset!");
static_assert(offsetof(ABP_GameModePVP_Base_C, CenterPipe) == 0x000470, "Member 'ABP_GameModePVP_Base_C::CenterPipe' has a wrong offset!");
static_assert(offsetof(ABP_GameModePVP_Base_C, PlayerConnect) == 0x000478, "Member 'ABP_GameModePVP_Base_C::PlayerConnect' has a wrong offset!");
static_assert(offsetof(ABP_GameModePVP_Base_C, IsGameStart) == 0x00047C, "Member 'ABP_GameModePVP_Base_C::IsGameStart' has a wrong offset!");
static_assert(offsetof(ABP_GameModePVP_Base_C, CharType) == 0x000480, "Member 'ABP_GameModePVP_Base_C::CharType' has a wrong offset!");
static_assert(offsetof(ABP_GameModePVP_Base_C, IsATeam) == 0x000484, "Member 'ABP_GameModePVP_Base_C::IsATeam' has a wrong offset!");
static_assert(offsetof(ABP_GameModePVP_Base_C, IsCenterPipeShowUp) == 0x000485, "Member 'ABP_GameModePVP_Base_C::IsCenterPipeShowUp' has a wrong offset!");
static_assert(offsetof(ABP_GameModePVP_Base_C, CharTypeTmp) == 0x000488, "Member 'ABP_GameModePVP_Base_C::CharTypeTmp' has a wrong offset!");
static_assert(offsetof(ABP_GameModePVP_Base_C, StartPlayerCount) == 0x00048C, "Member 'ABP_GameModePVP_Base_C::StartPlayerCount' has a wrong offset!");
static_assert(offsetof(ABP_GameModePVP_Base_C, TmpRnd) == 0x000490, "Member 'ABP_GameModePVP_Base_C::TmpRnd' has a wrong offset!");
static_assert(offsetof(ABP_GameModePVP_Base_C, ServerConnection) == 0x000498, "Member 'ABP_GameModePVP_Base_C::ServerConnection' has a wrong offset!");
static_assert(offsetof(ABP_GameModePVP_Base_C, RoomInfo) == 0x0004A0, "Member 'ABP_GameModePVP_Base_C::RoomInfo' has a wrong offset!");
static_assert(offsetof(ABP_GameModePVP_Base_C, IsInit) == 0x000520, "Member 'ABP_GameModePVP_Base_C::IsInit' has a wrong offset!");
static_assert(offsetof(ABP_GameModePVP_Base_C, StartCheckPlayer) == 0x000521, "Member 'ABP_GameModePVP_Base_C::StartCheckPlayer' has a wrong offset!");
static_assert(offsetof(ABP_GameModePVP_Base_C, IsAnyPlayerInGame) == 0x000522, "Member 'ABP_GameModePVP_Base_C::IsAnyPlayerInGame' has a wrong offset!");
static_assert(offsetof(ABP_GameModePVP_Base_C, AtleastOnePlayerJoined) == 0x000523, "Member 'ABP_GameModePVP_Base_C::AtleastOnePlayerJoined' has a wrong offset!");

}

