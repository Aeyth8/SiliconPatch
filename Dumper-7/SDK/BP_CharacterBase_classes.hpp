#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CharacterBase

#include "Basic.hpp"

#include "InputCore_structs.hpp"
#include "Enum_Language_structs.hpp"
#include "Enum_TurnMode_structs.hpp"
#include "Enum_Achievement_structs.hpp"
#include "SiliconRising_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "Enum_PlayMode_structs.hpp"
#include "Enum_ControllerType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CharacterBase.BP_CharacterBase_C
// 0x0590 (0x0CD0 - 0x0740)
class ABP_CharacterBase_C : public ACharacter
{
public:
	uint8                                         Pad_738[0x8];                                      // 0x0738(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0740(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   BonusTips;                                         // 0x0748(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Video;                                             // 0x0750(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   ReloadTips_3;                                      // 0x0758(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene2;                                            // 0x0760(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Video_Bonus;                                       // 0x0768(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   ReloadTips_2;                                      // 0x0770(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        FootStep;                                          // 0x0778(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 ClipInfront;                                       // 0x0780(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       LeftClipNumber;                                    // 0x0788(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        CapsuleChild;                                      // 0x0790(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   FireTips;                                          // 0x0798(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   TeleportTips;                                      // 0x07A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      Capsule;                                           // 0x07A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        ClipRoot;                                          // 0x07B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetInteractionComponent*            WidgetInteraction;                                 // 0x07B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        UI_Left;                                           // 0x07C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        UI_Right;                                          // 0x07C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Index_Controller;                                  // 0x07D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMer2AchievementComponent_C*            Mer2AchievementComponent;                          // 0x07D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UVRNotificationsComponent*              VRNotifications;                                   // 0x07E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       CustomDepthUI;                                     // 0x07E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        CustomUI;                                          // 0x07F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cosmos_Controller;                                 // 0x07F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UApplicationLifecycleComponent*         ApplicationLifecycle;                              // 0x0800(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Oculus_Rift_S;                                     // 0x0808(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   WMR_Controller;                                    // 0x0810(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   OculusControllerMesh;                              // 0x0818(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x0820(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   ViveControllerMesh;                                // 0x0828(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Ring;                                              // 0x0830(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Skip;                                              // 0x0838(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   CheatWar;                                          // 0x0840(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Particle;                                          // 0x0848(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       VerifyGame;                                        // 0x0850(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       GameOverTip;                                       // 0x0858(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       GameDeathTip;                                      // 0x0860(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       CheatWarnnig;                                      // 0x0868(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        GameHUD;                                           // 0x0870(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   ReloadTips;                                        // 0x0878(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene1;                                            // 0x0880(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        TipsFollow;                                        // 0x0888(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       Loading;                                           // 0x0890(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        loadingRoot;                                       // 0x0898(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x08A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        handNode;                                          // 0x08A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        HandRoot;                                          // 0x08B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Mesh2P;                                            // 0x08B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        LeftHandPoint;                                     // 0x08C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        RightHandPoint;                                    // 0x08C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UKRVRMotionController_C*                MotionController_Left;                             // 0x08D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UKRVRMotionController_C*                MotionController_Right;                            // 0x08D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UKRVRCamera_C*                          ReplicatedVRCamera;                                // 0x08E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   HealSphere;                                        // 0x08E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   DamageSphere;                                      // 0x08F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  PostProcess1;                                      // 0x08F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       SpectatorUI;                                       // 0x0900(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BoxBody;                                           // 0x0908(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BoxHead;                                           // 0x0910(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        BGM;                                               // 0x0918(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       AvoidSphere;                                       // 0x0920(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Root;                                              // 0x0928(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USteamVRChaperoneComponent*             SteamVRChaperone;                                  // 0x0930(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         HealEffectTimeline_NewTrack_0_74D6338B4D82E3AECE870FA5448EEF66; // 0x0938(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            HealEffectTimeline__Direction_74D6338B4D82E3AECE870FA5448EEF66; // 0x093C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_93D[0x3];                                      // 0x093D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     HealEffectTimeline;                                // 0x0940(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DamegEffectTimeline_NewTrack_0_F4F526144275C97E95090A8A2D83A09B; // 0x0948(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            DamegEffectTimeline__Direction_F4F526144275C97E95090A8A2D83A09B; // 0x094C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94D[0x3];                                      // 0x094D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     DamegEffectTimeline;                               // 0x0950(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_SwitchCover_NewTrack_2_CEDBF9924E8BBCBA80F681B51262CAB5; // 0x0958(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_SwitchCover__Direction_CEDBF9924E8BBCBA80F681B51262CAB5; // 0x095C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_95D[0x3];                                      // 0x095D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_SwitchCover;                              // 0x0960(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaTime;                                         // 0x0968(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GunOffset;                                         // 0x096C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BaseTurnRate;                                      // 0x0978(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BaseLookUpRate;                                    // 0x097C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UsingMotionControllers_;                           // 0x0980(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_981[0x7];                                      // 0x0981(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_PlayerSwitchPoint_C*>        SwitchPoint;                                       // 0x0988(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	float                                         SwitchCoolDown;                                    // 0x0998(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SwitchTargetTime;                                  // 0x099C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SwitchCoolDownDeltaTime;                           // 0x09A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSwitching;                                       // 0x09A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9A5[0x3];                                      // 0x09A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TestHeight;                                        // 0x09A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetLoction;                                     // 0x09AC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABPWeaponBase_C*                        CurrentWeapon_R;                                   // 0x09B8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABPWeaponBase_C*                        CurrentWeapon_L;                                   // 0x09C0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerSubstitute_C*                 Substitute;                                        // 0x09C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               TargetRotation;                                    // 0x09D0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsSwitchTarget;                                    // 0x09DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9DD[0x3];                                      // 0x09DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerSwitchPoint_C*                TempPoint;                                         // 0x09E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultPlayerHeight;                               // 0x09E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9EC[0x4];                                      // 0x09EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFirstPersonHUDWidget_C*                HUDWidget;                                         // 0x09F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsUndead;                                          // 0x09F8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_9F9[0x3];                                      // 0x09F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HealRepMini;                                       // 0x09FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HealRepRatio;                                      // 0x0A00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HealRepInterval;                                   // 0x0A04(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurHealRepInterval;                                // 0x0A08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A0C[0x4];                                      // 0x0A0C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABPDefaultHand_C*                       BPHandL;                                           // 0x0A10(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	class ABPDefaultHand_C*                       BPHandR;                                           // 0x0A18(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 weaponOwner;                                       // 0x0A20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 weaponOwnerL;                                      // 0x0A28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                PostProcess;                                       // 0x0A30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DamageSphereMI;                                    // 0x0A38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLoading;                                         // 0x0A40(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A41[0x7];                                      // 0x0A41(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               HealSphereMI;                                      // 0x0A48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USoundBase*>                     HitSound;                                          // 0x0A50(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	bool                                          IsDead;                                            // 0x0A60(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A61[0x7];                                      // 0x0A61(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   LevelStart;                                        // 0x0A68(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsMissionFailed;                                   // 0x0A78(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A79[0x3];                                      // 0x0A79(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MouseInputSense;                                   // 0x0A7C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   TutorialTriggerPress;                              // 0x0A80(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          lsNoTutorialTriggerKey_;                           // 0x0A90(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A91[0x7];                                      // 0x0A91(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   TutorialTriggerPressL;                             // 0x0A98(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          lsNoTutorialGripKey_;                              // 0x0AA8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AA9[0x7];                                      // 0x0AA9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   TutorialGripPress;                                 // 0x0AB0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   TutorialGripPressL;                                // 0x0AC0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   LogoFinished;                                      // 0x0AD0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class ABPHttpUtilities_C*                     mBpHttpInstance;                                   // 0x0AE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   MCDead;                                            // 0x0AE8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UMediaPlayer*                           MediaPlayer;                                       // 0x0AF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   MCCenter;                                          // 0x0B00(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FTransform                             RecoilToTransform;                                 // 0x0B10(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class FName                                   MultiplayerMap;                                    // 0x0B40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCrouch;                                          // 0x0B48(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsInitWeapon;                                      // 0x0B49(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B4A[0x2];                                      // 0x0B4A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetLoctionRep;                                  // 0x0B4C(0x000C)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               TargetRotationRep;                                 // 0x0B58(0x000C)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	float                                         HealthPoint;                                       // 0x0B64(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxHealthPoint;                                    // 0x0B68(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         deadCount;                                         // 0x0B6C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanShoot;                                          // 0x0B70(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AllDead;                                           // 0x0B71(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsCheat;                                           // 0x0B72(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsGameOver;                                        // 0x0B73(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B74[0x4];                                      // 0x0B74(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   TutorialFireRight;                                 // 0x0B78(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   TutorialFireLeft;                                  // 0x0B88(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UAudioComponent*                        SlowMotion;                                        // 0x0B98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTeleport;                                        // 0x0BA0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BA1[0x7];                                      // 0x0BA1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   TutorialTeleportRight;                             // 0x0BA8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   TutorialTeleportLeft;                              // 0x0BB8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UMaterialInstanceDynamic*               CheatWarnningMI;                                   // 0x0BC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   SkipTelephone;                                     // 0x0BD0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsCouldSkipTelephone;                              // 0x0BE0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsPressFire;                                       // 0x0BE1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BE2[0x2];                                      // 0x0BE2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PressTime;                                         // 0x0BE4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               SkipMI;                                            // 0x0BE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsShowIGM;                                         // 0x0BF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsShowLeaderboard;                                 // 0x0BF1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BF2[0x6];                                      // 0x0BF2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UIGM_C*                                 IGM_Widget;                                        // 0x0BF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               IGMRot;                                            // 0x0C00(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                IGMLoc;                                            // 0x0C0C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_IGM_C*                              IGMActor;                                          // 0x0C18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   OnShowSpectatorLeaderboard;                        // 0x0C20(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         CurrentLevelNumber;                                // 0x0C30(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C34[0x4];                                      // 0x0C34(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnFinishedToBeContinue;                            // 0x0C38(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UClass*                                 LeftHandType;                                      // 0x0C48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 RightHandType;                                     // 0x0C50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DominantHandLeft;                                  // 0x0C58(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C59[0x3];                                      // 0x0C59(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LeftClipNum;                                       // 0x0C5C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABPWeaponBase_C*                        CurrentWeaponHidden_R;                             // 0x0C60(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABPWeaponBase_C*                        CurrentWeaponHidden_L;                             // 0x0C68(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULeftClipNumber_C*                      LeftClipNumberUI;                                  // 0x0C70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsClipInHand;                                      // 0x0C78(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          P_IsPullingBolt_L;                                 // 0x0C79(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          P_IsPullingBolt_R;                                 // 0x0C7A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C7B[0x1];                                      // 0x0C7B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                P_ControllerPullTemp;                              // 0x0C7C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          P_IsCouldPullingBolt;                              // 0x0C88(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C89[0x7];                                      // 0x0C89(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AWpn_Clip_C*                            P_ClipLeft;                                        // 0x0C90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWpn_Clip_C*                            P_ClipRight;                                       // 0x0C98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          P_IsCouldPickClip_L;                               // 0x0CA0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          P_IsCouldPickClip_R;                               // 0x0CA1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsSpawnLeftWeapon;                                 // 0x0CA2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsSpawnRightWeapon;                                // 0x0CA3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsHandHoldWeapon_L;                                // 0x0CA4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsHandHoldWeapon_R;                                // 0x0CA5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsWeaponTutorialDone;                              // 0x0CA6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsCouldFreeMove;                                   // 0x0CA7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsLightOn;                                         // 0x0CA8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CA9[0x7];                                      // 0x0CA9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AWpn_Clip_C*                            BackupClipActor;                                   // 0x0CB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EItemTypes                                    DefaultWeapon;                                     // 0x0CB8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_PlayMode                                 PlayMode;                                          // 0x0CB9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_TurnMode                                 TurnMode;                                          // 0x0CBA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CBB[0x1];                                      // 0x0CBB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SmoothTurnSpeed_Slow;                              // 0x0CBC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SmoothTurnSpeed_Mid;                               // 0x0CC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SmoothTurnSpeed_Fast;                              // 0x0CC4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayBGM;                                           // 0x0CC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ReloadTips_Mark;                                   // 0x0CC9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          BonusTips_Mark;                                    // 0x0CCA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_CharacterBase(int32 EntryPoint);
	void OnBonus();
	void EnableBonusTips();
	void OnHitAnyBonus();
	void ShowBonusTips(bool Show);
	void ShowPullBoltTips(bool Show);
	void SwitchPlayerFlashLight(bool On);
	void OnReleaseBothHand();
	void HighlightClip(bool Value);
	void ShowFireTips(bool Show);
	void SetInifinite(bool IsRightHand);
	void SendScoreNow();
	void CustomEvent_10();
	void ShowToBeContinue();
	void CustomEvent_9();
	void CustomEvent_10000(TArray<struct FLeaderBoardData>& LeaderBoardData);
	void OnSendScoreRightNow(bool IsPass, int32 LevelNumber);
	void GameOverRightNow(int32 LevelNumber);
	void GameOverOnlyShowTips();
	void CustomEvent_8();
	void SendPlayerID(const class FString& ID, const class FString& nickName, bool IsServer);
	void MulticastDebugString(const class FString& inString, bool PrintToScreen, bool PrintToLog, const struct FLinearColor& TextColor, float Duration, bool IsServer);
	void CustomEvent_7(const class FString& inString, bool PrintToScreen, bool PrintToLog, const struct FLinearColor& TextColor, float Duration);
	void LevelJumpLogic(bool IsPass);
	void ReceivePossessed(class AController* NewController);
	void OnSetSkipProgressMulticast(float Progress);
	void OnSetSkip();
	void AllFadeOut();
	void AllFadeIn();
	void OnDoSkip();
	void ReloadLeftRelease();
	void ReloadLeftPress();
	void ReloadRightRelease();
	void ReloadRightPress();
	void CustomEvent_6();
	void CustomEvent_5();
	void CustomEvent_4();
	void ShowLeaderboard();
	void CustomEvent_1(TArray<struct FLeaderBoardData>& LeaderBoardData);
	void OnShowSkip(bool Show);
	void OnSetSkipProgress(float Progress);
	void OnSendScore(bool IsPass, int32 LevelNumber);
	void ApplyTipsLanguage();
	void ShowTeleportTips(bool Show);
	void ShowReloadTips(bool Show);
	void OnVerifyGameFailed();
	void SetGameOver();
	void OnPlayMotionSound(bool IsPlay);
	void SetCheat(bool Value);
	void ComputeScore(float Accuracy, float Progress, int32 Bonus, int32 Kill, int32 AreaScore, int32 HeadShot, int32 BulletScore);
	void CheatOnDead();
	void ShowDeadPostprocess(bool Show);
	void DeadLogic();
	void SetMultiplayer();
	void OnSetManCenter();
	void CustomEvent_0();
	void GameOver(int32 LevelNumber, bool RightNow);
	void CheckTutorial();
	void ControllerTriggerRightRelease();
	void ControllerTriggerLeftRelease();
	void ControllerTriggerLeftPress();
	void ControllerTriggerRightPress();
	void ReleaseFireL();
	void FireL();
	void CheckPlungerNpc(class AActor* _hitActor, const struct FVector& _hitPos);
	void MissionFail(const class FString& txt);
	void BndEvt__BoxHead_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnLevelStart();
	void OnDead();
	void ReleaseFireR();
	void FireR();
	void ReloadL();
	void ReloadR();
	void OnHealEffect();
	void OnDamgeEffect();
	void LaserDamge(float Damage, class AActor* Causor);
	void ReceiveRadialDamage(float DamageReceived, const class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void AddHealth(float AddHP);
	void Evt_GetItem(bool IsRightHand, EItemTypes ItemType, const struct FTransform& StartTransform, class AActor* CurrentItemActor, class AActor* ItemActor);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void InpAxisEvt_MoveRight_K2Node_InputAxisEvent_192(float AxisValue);
	void InpAxisEvt_MoveForward_K2Node_InputAxisEvent_181(float AxisValue);
	void InpAxisEvt_LookUp_K2Node_InputAxisEvent_172(float AxisValue);
	void InpAxisEvt_Turn_K2Node_InputAxisEvent_157(float AxisValue);
	void TeleportRight();
	void TeleportLeft();
	void StopSwitchCover(bool IsStop);
	void OnSwitchCover(bool IsLeft);
	void TickFootStep();
	void RefreshBGM();
	void BindOnInsertCip();
	void OnDisableReloadTipc(class AWpn_Clip_C* Clip, bool IsDelay);
	void CheatSpawnWeapon(bool IsRight, EItemTypes WeaponType);
	void SkipWave();
	void OnSetUnDead();
	void UpdateClipMesh(class ABPWeaponBase_C* Weapon);
	void OnInitCurWeapon();
	void OnResumeBGM();
	void OnPauseBGM();
	void OnPlayBossBGM();
	void OnPlayNormalBGM();
	void OnPlayHelicopterBGM();
	void OnShowDebugLine(bool Value);
	void OnCameraFadeOut(float _Dt);
	void OnCameraFadeIn(float _Dt);
	void OnHapticEffect(class UHapticFeedbackEffect_Base* HapticEffect, EControllerHand hand, float Scale, bool Loop);
	void UpdateHandWeaponType(bool IsRight, EItemTypes WeaponType);
	void RightMenuPress();
	void LeftMenuPress();
	void ShowUI(bool IsShow);
	void OnIGMTick();
	void OnReleaseIGMKey();
	void OnPressIGMKey();
	void OnShowIGM();
	void CustomEvent_3();
	void CustomEvent_2();
	void CustomEvent();
	void Resuse();
	void UnlockAchievement(Enum_Achievement Achievement);
	void OnGripButton_Right_Pressed();
	void OnGripButton_Right_Released();
	void OnGripButton_Left_Released();
	void OnGripButton_Left_Pressed();
	void OnPullBoltEvent(class ABPDefaultHand_C* GunHand, class ABPDefaultHand_C* PullHand, class ABPWeaponBase_C* HideWeapon, class ABPWeaponBase_C* GunToPull, bool IsPull, bool RightHand);
	void SpawnClipToHold(bool IsLeft);
	void BndEvt__Capsule_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__Capsule_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void TickCheck();
	void OnSuccess_093E6CA54970C44F79A315B35CCB2800();
	void OnFailure_093E6CA54970C44F79A315B35CCB2800();
	void InpActEvt_Fire_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_Fire_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpActEvt_Decimal_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_NumPadZero_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void InpActEvt_NumPadTwo_K2Node_InputKeyEvent_2(const struct FKey& Key);
	void InpActEvt_NumPadOne_K2Node_InputKeyEvent_3(const struct FKey& Key);
	void InpActEvt_NumPadNine_K2Node_InputKeyEvent_4(const struct FKey& Key);
	void InpActEvt_NumPadSeven_K2Node_InputKeyEvent_5(const struct FKey& Key);
	void InpActEvt_NumPadSix_K2Node_InputKeyEvent_6(const struct FKey& Key);
	void InpActEvt_NumPadFour_K2Node_InputKeyEvent_7(const struct FKey& Key);
	void InpActEvt_NumPadFive_K2Node_InputKeyEvent_8(const struct FKey& Key);
	void InpActEvt_NumPadEight_K2Node_InputKeyEvent_9(const struct FKey& Key);
	void InpActEvt_Fire_L_K2Node_InputActionEvent_2(const struct FKey& Key);
	void InpActEvt_Fire_L_K2Node_InputActionEvent_3(const struct FKey& Key);
	void InpActEvt_Jump_K2Node_InputActionEvent_4(const struct FKey& Key);
	void InpActEvt_Jump_K2Node_InputActionEvent_5(const struct FKey& Key);
	void InpActEvt_M_K2Node_InputKeyEvent_10(const struct FKey& Key);
	void InpActEvt_Seven_K2Node_InputKeyEvent_11(const struct FKey& Key);
	void InpActEvt_L_K2Node_InputKeyEvent_12(const struct FKey& Key);
	void InpActEvt_Six_K2Node_InputKeyEvent_13(const struct FKey& Key);
	void InpActEvt_Five_K2Node_InputKeyEvent_14(const struct FKey& Key);
	void InpActEvt_Four_K2Node_InputKeyEvent_15(const struct FKey& Key);
	void InpActEvt_E_K2Node_InputKeyEvent_16(const struct FKey& Key);
	void InpActEvt_Q_K2Node_InputKeyEvent_17(const struct FKey& Key);
	void InpActEvt_F12_K2Node_InputKeyEvent_18(const struct FKey& Key);
	void InpActEvt_C_K2Node_InputKeyEvent_19(const struct FKey& Key);
	void InpActEvt_V_K2Node_InputKeyEvent_20(const struct FKey& Key);
	void InpActEvt_RightBracket_K2Node_InputKeyEvent_21(const struct FKey& Key);
	void InpActEvt_LeftBracket_K2Node_InputKeyEvent_22(const struct FKey& Key);
	void InpActEvt_NumPadTwo_K2Node_InputKeyEvent_23(const struct FKey& Key);
	void InpActEvt_NumPadOne_K2Node_InputKeyEvent_24(const struct FKey& Key);
	void InpActEvt_Three_K2Node_InputKeyEvent_25(const struct FKey& Key);
	void InpActEvt_Two_K2Node_InputKeyEvent_26(const struct FKey& Key);
	void InpActEvt_One_K2Node_InputKeyEvent_27(const struct FKey& Key);
	void InpActEvt_U_K2Node_InputKeyEvent_28(const struct FKey& Key);
	void InpActEvt_Crouch_K2Node_InputActionEvent_6(const struct FKey& Key);
	void InpActEvt_Crouch_K2Node_InputActionEvent_7(const struct FKey& Key);
	void InpActEvt_Tab_K2Node_InputKeyEvent_29(const struct FKey& Key);
	void InpActEvt_J_K2Node_InputKeyEvent_30(const struct FKey& Key);
	void InpActEvt_Y_K2Node_InputKeyEvent_31(const struct FKey& Key);
	void InpActEvt_T_K2Node_InputKeyEvent_32(const struct FKey& Key);
	void InpActEvt_Delete_K2Node_InputKeyEvent_33(const struct FKey& Key);
	void InpActEvt_InGameMenu_L_K2Node_InputActionEvent_8(const struct FKey& Key);
	void InpActEvt_InGameMenu_K2Node_InputActionEvent_9(const struct FKey& Key);
	void InpActEvt_Reload_L_K2Node_InputActionEvent_10(const struct FKey& Key);
	void InpActEvt_Reload_L_K2Node_InputActionEvent_11(const struct FKey& Key);
	void InpActEvt_TeleportRight_K2Node_InputActionEvent_12(const struct FKey& Key);
	void InpActEvt_TeleportLeft_K2Node_InputActionEvent_13(const struct FKey& Key);
	void InpActEvt_Reload_K2Node_InputActionEvent_14(const struct FKey& Key);
	void InpActEvt_Reload_K2Node_InputActionEvent_15(const struct FKey& Key);
	void InpActEvt_GripButton_R_K2Node_InputActionEvent_16(const struct FKey& Key);
	void InpActEvt_GripButton_R_K2Node_InputActionEvent_17(const struct FKey& Key);
	void InpActEvt_GripButton_L_K2Node_InputActionEvent_18(const struct FKey& Key);
	void InpActEvt_GripButton_L_K2Node_InputActionEvent_19(const struct FKey& Key);
	void HealEffectTimeline__UpdateFunc();
	void HealEffectTimeline__FinishedFunc();
	void DamegEffectTimeline__UpdateFunc();
	void DamegEffectTimeline__FinishedFunc();
	void Timeline_SwitchCover__UpdateFunc();
	void Timeline_SwitchCover__FinishedFunc();
	void UserConstructionScript();
	void PickUpItem(class AActor* self2);
	void InitCurWeapon();
	void SetHeldItem_R(class AActor* InputPin, bool IsHideOld);
	void GetAimPos(struct FVector* AimPos);
	void DetectInteractionItem(bool IsRightHand, class ABPWeaponBase_C** PointedWeapon);
	struct FTransform GetWeaponAttachNode_R();
	void IsCurWeaponValid(class ABPWeaponBase_C** Weapon, bool* IsValid);
	void GetSwitchPoint(bool IsLeft, TArray<class ABP_PlayerSwitchPoint_C*>* NewParam);
	void GetClosetPoint(TArray<class ABP_PlayerSwitchPoint_C*>& PointList, class ABP_PlayerSwitchPoint_C** TargetPoint);
	void SetSwitchCoveToken(class ABP_PlayerSwitchPoint_C* Target);
	void CheckSwitchCD(bool* isOK);
	struct FTransform GetWeaponAttachNode_L();
	void SetHeldItem_L(class AActor* InputPin, bool IsHideOld);
	void SpawnWeapon(bool IsRight, EItemTypes WeaponType);
	void HealRepCheck();
	void CheckWeaponBulletCount(EItemTypes DefaultWeapon_0);
	void DropWeapon(class ABPWeaponBase_C* Weapon, bool DestroyOld);
	void InitHand();
	void InitDamageSphere();
	void UpdateDamageHp();
	void UpdateHandUI();
	void PlayHelicopterBGM();
	void PlayNormalBGM();
	void PlayBossBGM();
	void StopBGM();
	void GetCameraTargetPoint(struct FVector* Location);
	void DodgeCheck();
	void ChangeMouseInputSence(float _param);
	void OnRep_IsUndead();
	void GetAllPlayerCharacter(TArray<class ACharacter*>* Array);
	void TeleportTarget(const struct FVector& _pos, const struct FVector& _forward);
	void lsSkipTutorai_(bool* lsSkipTutorail);
	void SetManCenter();
	void ShowGameOverTips(bool _visible);
	void EnableGravity(bool bGravityEnabled);
	void ShowGameStartTips(bool _visible);
	void OnRep_TargetRotationRep();
	void OnRep_TargetLoctionRep();
	void CalculateScores(class APlayerController* Controller_0, bool IsPass, float* Accuracy, float* Progress, int32* Bonus, int32* Kill, int32* TotalScore, int32* HeadShot, int32* BulletScore);
	void CheckCheat();
	void ShowGameDeathTips(bool Visible);
	void UpdateLaser(class UWidgetInteractionComponent* WidgetInteraction_0, float Sickness);
	void ClearCheckPoint();
	void OnRep_BPHandL();
	void OnRep_BPHandR();
	void CheckTargetSwitchPoint(class ABP_PlayerSwitchPoint_C** TargetPoint, bool* IsWaveChoice);
	void OpenVideo(class UMediaPlayer* Player, class UMediaSource* MediaSource);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CharacterBase_C">();
	}
	static class ABP_CharacterBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_CharacterBase_C>();
	}
};
static_assert(alignof(ABP_CharacterBase_C) == 0x000010, "Wrong alignment on ABP_CharacterBase_C");
static_assert(sizeof(ABP_CharacterBase_C) == 0x000CD0, "Wrong size on ABP_CharacterBase_C");
static_assert(offsetof(ABP_CharacterBase_C, UberGraphFrame) == 0x000740, "Member 'ABP_CharacterBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, BonusTips) == 0x000748, "Member 'ABP_CharacterBase_C::BonusTips' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, Video) == 0x000750, "Member 'ABP_CharacterBase_C::Video' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, ReloadTips_3) == 0x000758, "Member 'ABP_CharacterBase_C::ReloadTips_3' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, Scene2) == 0x000760, "Member 'ABP_CharacterBase_C::Scene2' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, Video_Bonus) == 0x000768, "Member 'ABP_CharacterBase_C::Video_Bonus' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, ReloadTips_2) == 0x000770, "Member 'ABP_CharacterBase_C::ReloadTips_2' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, FootStep) == 0x000778, "Member 'ABP_CharacterBase_C::FootStep' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, ClipInfront) == 0x000780, "Member 'ABP_CharacterBase_C::ClipInfront' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, LeftClipNumber) == 0x000788, "Member 'ABP_CharacterBase_C::LeftClipNumber' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, CapsuleChild) == 0x000790, "Member 'ABP_CharacterBase_C::CapsuleChild' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, FireTips) == 0x000798, "Member 'ABP_CharacterBase_C::FireTips' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, TeleportTips) == 0x0007A0, "Member 'ABP_CharacterBase_C::TeleportTips' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, Capsule) == 0x0007A8, "Member 'ABP_CharacterBase_C::Capsule' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, ClipRoot) == 0x0007B0, "Member 'ABP_CharacterBase_C::ClipRoot' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, WidgetInteraction) == 0x0007B8, "Member 'ABP_CharacterBase_C::WidgetInteraction' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, UI_Left) == 0x0007C0, "Member 'ABP_CharacterBase_C::UI_Left' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, UI_Right) == 0x0007C8, "Member 'ABP_CharacterBase_C::UI_Right' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, Index_Controller) == 0x0007D0, "Member 'ABP_CharacterBase_C::Index_Controller' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, Mer2AchievementComponent) == 0x0007D8, "Member 'ABP_CharacterBase_C::Mer2AchievementComponent' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, VRNotifications) == 0x0007E0, "Member 'ABP_CharacterBase_C::VRNotifications' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, CustomDepthUI) == 0x0007E8, "Member 'ABP_CharacterBase_C::CustomDepthUI' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, CustomUI) == 0x0007F0, "Member 'ABP_CharacterBase_C::CustomUI' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, Cosmos_Controller) == 0x0007F8, "Member 'ABP_CharacterBase_C::Cosmos_Controller' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, ApplicationLifecycle) == 0x000800, "Member 'ABP_CharacterBase_C::ApplicationLifecycle' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, Oculus_Rift_S) == 0x000808, "Member 'ABP_CharacterBase_C::Oculus_Rift_S' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, WMR_Controller) == 0x000810, "Member 'ABP_CharacterBase_C::WMR_Controller' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, OculusControllerMesh) == 0x000818, "Member 'ABP_CharacterBase_C::OculusControllerMesh' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, StaticMesh) == 0x000820, "Member 'ABP_CharacterBase_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, ViveControllerMesh) == 0x000828, "Member 'ABP_CharacterBase_C::ViveControllerMesh' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, Ring) == 0x000830, "Member 'ABP_CharacterBase_C::Ring' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, Skip) == 0x000838, "Member 'ABP_CharacterBase_C::Skip' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, CheatWar) == 0x000840, "Member 'ABP_CharacterBase_C::CheatWar' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, Particle) == 0x000848, "Member 'ABP_CharacterBase_C::Particle' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, VerifyGame) == 0x000850, "Member 'ABP_CharacterBase_C::VerifyGame' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, GameOverTip) == 0x000858, "Member 'ABP_CharacterBase_C::GameOverTip' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, GameDeathTip) == 0x000860, "Member 'ABP_CharacterBase_C::GameDeathTip' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, CheatWarnnig) == 0x000868, "Member 'ABP_CharacterBase_C::CheatWarnnig' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, GameHUD) == 0x000870, "Member 'ABP_CharacterBase_C::GameHUD' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, ReloadTips) == 0x000878, "Member 'ABP_CharacterBase_C::ReloadTips' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, Scene1) == 0x000880, "Member 'ABP_CharacterBase_C::Scene1' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, TipsFollow) == 0x000888, "Member 'ABP_CharacterBase_C::TipsFollow' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, Loading) == 0x000890, "Member 'ABP_CharacterBase_C::Loading' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, loadingRoot) == 0x000898, "Member 'ABP_CharacterBase_C::loadingRoot' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, Scene) == 0x0008A0, "Member 'ABP_CharacterBase_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, handNode) == 0x0008A8, "Member 'ABP_CharacterBase_C::handNode' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, HandRoot) == 0x0008B0, "Member 'ABP_CharacterBase_C::HandRoot' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, Mesh2P) == 0x0008B8, "Member 'ABP_CharacterBase_C::Mesh2P' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, LeftHandPoint) == 0x0008C0, "Member 'ABP_CharacterBase_C::LeftHandPoint' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, RightHandPoint) == 0x0008C8, "Member 'ABP_CharacterBase_C::RightHandPoint' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, MotionController_Left) == 0x0008D0, "Member 'ABP_CharacterBase_C::MotionController_Left' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, MotionController_Right) == 0x0008D8, "Member 'ABP_CharacterBase_C::MotionController_Right' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, ReplicatedVRCamera) == 0x0008E0, "Member 'ABP_CharacterBase_C::ReplicatedVRCamera' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, HealSphere) == 0x0008E8, "Member 'ABP_CharacterBase_C::HealSphere' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, DamageSphere) == 0x0008F0, "Member 'ABP_CharacterBase_C::DamageSphere' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, PostProcess1) == 0x0008F8, "Member 'ABP_CharacterBase_C::PostProcess1' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, SpectatorUI) == 0x000900, "Member 'ABP_CharacterBase_C::SpectatorUI' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, BoxBody) == 0x000908, "Member 'ABP_CharacterBase_C::BoxBody' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, BoxHead) == 0x000910, "Member 'ABP_CharacterBase_C::BoxHead' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, BGM) == 0x000918, "Member 'ABP_CharacterBase_C::BGM' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, AvoidSphere) == 0x000920, "Member 'ABP_CharacterBase_C::AvoidSphere' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, Root) == 0x000928, "Member 'ABP_CharacterBase_C::Root' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, SteamVRChaperone) == 0x000930, "Member 'ABP_CharacterBase_C::SteamVRChaperone' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, HealEffectTimeline_NewTrack_0_74D6338B4D82E3AECE870FA5448EEF66) == 0x000938, "Member 'ABP_CharacterBase_C::HealEffectTimeline_NewTrack_0_74D6338B4D82E3AECE870FA5448EEF66' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, HealEffectTimeline__Direction_74D6338B4D82E3AECE870FA5448EEF66) == 0x00093C, "Member 'ABP_CharacterBase_C::HealEffectTimeline__Direction_74D6338B4D82E3AECE870FA5448EEF66' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, HealEffectTimeline) == 0x000940, "Member 'ABP_CharacterBase_C::HealEffectTimeline' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, DamegEffectTimeline_NewTrack_0_F4F526144275C97E95090A8A2D83A09B) == 0x000948, "Member 'ABP_CharacterBase_C::DamegEffectTimeline_NewTrack_0_F4F526144275C97E95090A8A2D83A09B' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, DamegEffectTimeline__Direction_F4F526144275C97E95090A8A2D83A09B) == 0x00094C, "Member 'ABP_CharacterBase_C::DamegEffectTimeline__Direction_F4F526144275C97E95090A8A2D83A09B' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, DamegEffectTimeline) == 0x000950, "Member 'ABP_CharacterBase_C::DamegEffectTimeline' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, Timeline_SwitchCover_NewTrack_2_CEDBF9924E8BBCBA80F681B51262CAB5) == 0x000958, "Member 'ABP_CharacterBase_C::Timeline_SwitchCover_NewTrack_2_CEDBF9924E8BBCBA80F681B51262CAB5' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, Timeline_SwitchCover__Direction_CEDBF9924E8BBCBA80F681B51262CAB5) == 0x00095C, "Member 'ABP_CharacterBase_C::Timeline_SwitchCover__Direction_CEDBF9924E8BBCBA80F681B51262CAB5' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, Timeline_SwitchCover) == 0x000960, "Member 'ABP_CharacterBase_C::Timeline_SwitchCover' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, DeltaTime) == 0x000968, "Member 'ABP_CharacterBase_C::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, GunOffset) == 0x00096C, "Member 'ABP_CharacterBase_C::GunOffset' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, BaseTurnRate) == 0x000978, "Member 'ABP_CharacterBase_C::BaseTurnRate' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, BaseLookUpRate) == 0x00097C, "Member 'ABP_CharacterBase_C::BaseLookUpRate' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, UsingMotionControllers_) == 0x000980, "Member 'ABP_CharacterBase_C::UsingMotionControllers_' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, SwitchPoint) == 0x000988, "Member 'ABP_CharacterBase_C::SwitchPoint' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, SwitchCoolDown) == 0x000998, "Member 'ABP_CharacterBase_C::SwitchCoolDown' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, SwitchTargetTime) == 0x00099C, "Member 'ABP_CharacterBase_C::SwitchTargetTime' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, SwitchCoolDownDeltaTime) == 0x0009A0, "Member 'ABP_CharacterBase_C::SwitchCoolDownDeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, IsSwitching) == 0x0009A4, "Member 'ABP_CharacterBase_C::IsSwitching' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, TestHeight) == 0x0009A8, "Member 'ABP_CharacterBase_C::TestHeight' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, TargetLoction) == 0x0009AC, "Member 'ABP_CharacterBase_C::TargetLoction' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, CurrentWeapon_R) == 0x0009B8, "Member 'ABP_CharacterBase_C::CurrentWeapon_R' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, CurrentWeapon_L) == 0x0009C0, "Member 'ABP_CharacterBase_C::CurrentWeapon_L' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, Substitute) == 0x0009C8, "Member 'ABP_CharacterBase_C::Substitute' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, TargetRotation) == 0x0009D0, "Member 'ABP_CharacterBase_C::TargetRotation' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, IsSwitchTarget) == 0x0009DC, "Member 'ABP_CharacterBase_C::IsSwitchTarget' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, TempPoint) == 0x0009E0, "Member 'ABP_CharacterBase_C::TempPoint' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, DefaultPlayerHeight) == 0x0009E8, "Member 'ABP_CharacterBase_C::DefaultPlayerHeight' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, HUDWidget) == 0x0009F0, "Member 'ABP_CharacterBase_C::HUDWidget' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, IsUndead) == 0x0009F8, "Member 'ABP_CharacterBase_C::IsUndead' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, HealRepMini) == 0x0009FC, "Member 'ABP_CharacterBase_C::HealRepMini' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, HealRepRatio) == 0x000A00, "Member 'ABP_CharacterBase_C::HealRepRatio' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, HealRepInterval) == 0x000A04, "Member 'ABP_CharacterBase_C::HealRepInterval' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, CurHealRepInterval) == 0x000A08, "Member 'ABP_CharacterBase_C::CurHealRepInterval' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, BPHandL) == 0x000A10, "Member 'ABP_CharacterBase_C::BPHandL' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, BPHandR) == 0x000A18, "Member 'ABP_CharacterBase_C::BPHandR' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, weaponOwner) == 0x000A20, "Member 'ABP_CharacterBase_C::weaponOwner' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, weaponOwnerL) == 0x000A28, "Member 'ABP_CharacterBase_C::weaponOwnerL' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, PostProcess) == 0x000A30, "Member 'ABP_CharacterBase_C::PostProcess' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, DamageSphereMI) == 0x000A38, "Member 'ABP_CharacterBase_C::DamageSphereMI' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, IsLoading) == 0x000A40, "Member 'ABP_CharacterBase_C::IsLoading' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, HealSphereMI) == 0x000A48, "Member 'ABP_CharacterBase_C::HealSphereMI' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, HitSound) == 0x000A50, "Member 'ABP_CharacterBase_C::HitSound' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, IsDead) == 0x000A60, "Member 'ABP_CharacterBase_C::IsDead' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, LevelStart) == 0x000A68, "Member 'ABP_CharacterBase_C::LevelStart' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, IsMissionFailed) == 0x000A78, "Member 'ABP_CharacterBase_C::IsMissionFailed' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, MouseInputSense) == 0x000A7C, "Member 'ABP_CharacterBase_C::MouseInputSense' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, TutorialTriggerPress) == 0x000A80, "Member 'ABP_CharacterBase_C::TutorialTriggerPress' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, lsNoTutorialTriggerKey_) == 0x000A90, "Member 'ABP_CharacterBase_C::lsNoTutorialTriggerKey_' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, TutorialTriggerPressL) == 0x000A98, "Member 'ABP_CharacterBase_C::TutorialTriggerPressL' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, lsNoTutorialGripKey_) == 0x000AA8, "Member 'ABP_CharacterBase_C::lsNoTutorialGripKey_' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, TutorialGripPress) == 0x000AB0, "Member 'ABP_CharacterBase_C::TutorialGripPress' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, TutorialGripPressL) == 0x000AC0, "Member 'ABP_CharacterBase_C::TutorialGripPressL' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, LogoFinished) == 0x000AD0, "Member 'ABP_CharacterBase_C::LogoFinished' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, mBpHttpInstance) == 0x000AE0, "Member 'ABP_CharacterBase_C::mBpHttpInstance' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, MCDead) == 0x000AE8, "Member 'ABP_CharacterBase_C::MCDead' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, MediaPlayer) == 0x000AF8, "Member 'ABP_CharacterBase_C::MediaPlayer' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, MCCenter) == 0x000B00, "Member 'ABP_CharacterBase_C::MCCenter' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, RecoilToTransform) == 0x000B10, "Member 'ABP_CharacterBase_C::RecoilToTransform' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, MultiplayerMap) == 0x000B40, "Member 'ABP_CharacterBase_C::MultiplayerMap' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, IsCrouch) == 0x000B48, "Member 'ABP_CharacterBase_C::IsCrouch' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, IsInitWeapon) == 0x000B49, "Member 'ABP_CharacterBase_C::IsInitWeapon' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, TargetLoctionRep) == 0x000B4C, "Member 'ABP_CharacterBase_C::TargetLoctionRep' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, TargetRotationRep) == 0x000B58, "Member 'ABP_CharacterBase_C::TargetRotationRep' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, HealthPoint) == 0x000B64, "Member 'ABP_CharacterBase_C::HealthPoint' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, MaxHealthPoint) == 0x000B68, "Member 'ABP_CharacterBase_C::MaxHealthPoint' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, deadCount) == 0x000B6C, "Member 'ABP_CharacterBase_C::deadCount' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, CanShoot) == 0x000B70, "Member 'ABP_CharacterBase_C::CanShoot' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, AllDead) == 0x000B71, "Member 'ABP_CharacterBase_C::AllDead' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, IsCheat) == 0x000B72, "Member 'ABP_CharacterBase_C::IsCheat' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, IsGameOver) == 0x000B73, "Member 'ABP_CharacterBase_C::IsGameOver' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, TutorialFireRight) == 0x000B78, "Member 'ABP_CharacterBase_C::TutorialFireRight' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, TutorialFireLeft) == 0x000B88, "Member 'ABP_CharacterBase_C::TutorialFireLeft' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, SlowMotion) == 0x000B98, "Member 'ABP_CharacterBase_C::SlowMotion' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, IsTeleport) == 0x000BA0, "Member 'ABP_CharacterBase_C::IsTeleport' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, TutorialTeleportRight) == 0x000BA8, "Member 'ABP_CharacterBase_C::TutorialTeleportRight' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, TutorialTeleportLeft) == 0x000BB8, "Member 'ABP_CharacterBase_C::TutorialTeleportLeft' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, CheatWarnningMI) == 0x000BC8, "Member 'ABP_CharacterBase_C::CheatWarnningMI' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, SkipTelephone) == 0x000BD0, "Member 'ABP_CharacterBase_C::SkipTelephone' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, IsCouldSkipTelephone) == 0x000BE0, "Member 'ABP_CharacterBase_C::IsCouldSkipTelephone' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, IsPressFire) == 0x000BE1, "Member 'ABP_CharacterBase_C::IsPressFire' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, PressTime) == 0x000BE4, "Member 'ABP_CharacterBase_C::PressTime' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, SkipMI) == 0x000BE8, "Member 'ABP_CharacterBase_C::SkipMI' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, IsShowIGM) == 0x000BF0, "Member 'ABP_CharacterBase_C::IsShowIGM' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, IsShowLeaderboard) == 0x000BF1, "Member 'ABP_CharacterBase_C::IsShowLeaderboard' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, IGM_Widget) == 0x000BF8, "Member 'ABP_CharacterBase_C::IGM_Widget' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, IGMRot) == 0x000C00, "Member 'ABP_CharacterBase_C::IGMRot' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, IGMLoc) == 0x000C0C, "Member 'ABP_CharacterBase_C::IGMLoc' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, IGMActor) == 0x000C18, "Member 'ABP_CharacterBase_C::IGMActor' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, OnShowSpectatorLeaderboard) == 0x000C20, "Member 'ABP_CharacterBase_C::OnShowSpectatorLeaderboard' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, CurrentLevelNumber) == 0x000C30, "Member 'ABP_CharacterBase_C::CurrentLevelNumber' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, OnFinishedToBeContinue) == 0x000C38, "Member 'ABP_CharacterBase_C::OnFinishedToBeContinue' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, LeftHandType) == 0x000C48, "Member 'ABP_CharacterBase_C::LeftHandType' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, RightHandType) == 0x000C50, "Member 'ABP_CharacterBase_C::RightHandType' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, DominantHandLeft) == 0x000C58, "Member 'ABP_CharacterBase_C::DominantHandLeft' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, LeftClipNum) == 0x000C5C, "Member 'ABP_CharacterBase_C::LeftClipNum' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, CurrentWeaponHidden_R) == 0x000C60, "Member 'ABP_CharacterBase_C::CurrentWeaponHidden_R' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, CurrentWeaponHidden_L) == 0x000C68, "Member 'ABP_CharacterBase_C::CurrentWeaponHidden_L' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, LeftClipNumberUI) == 0x000C70, "Member 'ABP_CharacterBase_C::LeftClipNumberUI' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, IsClipInHand) == 0x000C78, "Member 'ABP_CharacterBase_C::IsClipInHand' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, P_IsPullingBolt_L) == 0x000C79, "Member 'ABP_CharacterBase_C::P_IsPullingBolt_L' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, P_IsPullingBolt_R) == 0x000C7A, "Member 'ABP_CharacterBase_C::P_IsPullingBolt_R' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, P_ControllerPullTemp) == 0x000C7C, "Member 'ABP_CharacterBase_C::P_ControllerPullTemp' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, P_IsCouldPullingBolt) == 0x000C88, "Member 'ABP_CharacterBase_C::P_IsCouldPullingBolt' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, P_ClipLeft) == 0x000C90, "Member 'ABP_CharacterBase_C::P_ClipLeft' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, P_ClipRight) == 0x000C98, "Member 'ABP_CharacterBase_C::P_ClipRight' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, P_IsCouldPickClip_L) == 0x000CA0, "Member 'ABP_CharacterBase_C::P_IsCouldPickClip_L' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, P_IsCouldPickClip_R) == 0x000CA1, "Member 'ABP_CharacterBase_C::P_IsCouldPickClip_R' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, IsSpawnLeftWeapon) == 0x000CA2, "Member 'ABP_CharacterBase_C::IsSpawnLeftWeapon' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, IsSpawnRightWeapon) == 0x000CA3, "Member 'ABP_CharacterBase_C::IsSpawnRightWeapon' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, IsHandHoldWeapon_L) == 0x000CA4, "Member 'ABP_CharacterBase_C::IsHandHoldWeapon_L' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, IsHandHoldWeapon_R) == 0x000CA5, "Member 'ABP_CharacterBase_C::IsHandHoldWeapon_R' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, IsWeaponTutorialDone) == 0x000CA6, "Member 'ABP_CharacterBase_C::IsWeaponTutorialDone' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, IsCouldFreeMove) == 0x000CA7, "Member 'ABP_CharacterBase_C::IsCouldFreeMove' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, IsLightOn) == 0x000CA8, "Member 'ABP_CharacterBase_C::IsLightOn' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, BackupClipActor) == 0x000CB0, "Member 'ABP_CharacterBase_C::BackupClipActor' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, DefaultWeapon) == 0x000CB8, "Member 'ABP_CharacterBase_C::DefaultWeapon' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, PlayMode) == 0x000CB9, "Member 'ABP_CharacterBase_C::PlayMode' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, TurnMode) == 0x000CBA, "Member 'ABP_CharacterBase_C::TurnMode' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, SmoothTurnSpeed_Slow) == 0x000CBC, "Member 'ABP_CharacterBase_C::SmoothTurnSpeed_Slow' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, SmoothTurnSpeed_Mid) == 0x000CC0, "Member 'ABP_CharacterBase_C::SmoothTurnSpeed_Mid' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, SmoothTurnSpeed_Fast) == 0x000CC4, "Member 'ABP_CharacterBase_C::SmoothTurnSpeed_Fast' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, PlayBGM) == 0x000CC8, "Member 'ABP_CharacterBase_C::PlayBGM' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, ReloadTips_Mark) == 0x000CC9, "Member 'ABP_CharacterBase_C::ReloadTips_Mark' has a wrong offset!");
static_assert(offsetof(ABP_CharacterBase_C, BonusTips_Mark) == 0x000CCA, "Member 'ABP_CharacterBase_C::BonusTips_Mark' has a wrong offset!");

}

