#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MixedRealityCaptureFramework

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "HeadMountedDisplay_structs.hpp"
#include "OpenCVLensDistortion_structs.hpp"


namespace SDK
{

// ScriptStruct MixedRealityCaptureFramework.MrcVideoProcessingParams
// 0x00A0 (0x00A0 - 0x0000)
struct FMrcVideoProcessingParams final
{
public:
	TMap<class FName, float>                      MaterialScalarParams;                              // 0x0000(0x0050)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FName, struct FLinearColor>        MaterialVectorParams;                              // 0x0050(0x0050)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMrcVideoProcessingParams) == 0x000008, "Wrong alignment on FMrcVideoProcessingParams");
static_assert(sizeof(FMrcVideoProcessingParams) == 0x0000A0, "Wrong size on FMrcVideoProcessingParams");
static_assert(offsetof(FMrcVideoProcessingParams, MaterialScalarParams) == 0x000000, "Member 'FMrcVideoProcessingParams::MaterialScalarParams' has a wrong offset!");
static_assert(offsetof(FMrcVideoProcessingParams, MaterialVectorParams) == 0x000050, "Member 'FMrcVideoProcessingParams::MaterialVectorParams' has a wrong offset!");

// ScriptStruct MixedRealityCaptureFramework.MrcVideoCaptureFeedIndex
// 0x0018 (0x0018 - 0x0000)
struct FMrcVideoCaptureFeedIndex final
{
public:
	class FString                                 DeviceURL;                                         // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StreamIndex;                                       // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FormatIndex;                                       // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMrcVideoCaptureFeedIndex) == 0x000008, "Wrong alignment on FMrcVideoCaptureFeedIndex");
static_assert(sizeof(FMrcVideoCaptureFeedIndex) == 0x000018, "Wrong size on FMrcVideoCaptureFeedIndex");
static_assert(offsetof(FMrcVideoCaptureFeedIndex, DeviceURL) == 0x000000, "Member 'FMrcVideoCaptureFeedIndex::DeviceURL' has a wrong offset!");
static_assert(offsetof(FMrcVideoCaptureFeedIndex, StreamIndex) == 0x000010, "Member 'FMrcVideoCaptureFeedIndex::StreamIndex' has a wrong offset!");
static_assert(offsetof(FMrcVideoCaptureFeedIndex, FormatIndex) == 0x000014, "Member 'FMrcVideoCaptureFeedIndex::FormatIndex' has a wrong offset!");

// ScriptStruct MixedRealityCaptureFramework.MrcCompositingSaveData
// 0x00C0 (0x00C0 - 0x0000)
struct FMrcCompositingSaveData final
{
public:
	struct FMrcVideoCaptureFeedIndex              CaptureDeviceURL;                                  // 0x0000(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         DepthOffset;                                       // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TrackingLatency;                                   // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMrcVideoProcessingParams              VideoProcessingParams;                             // 0x0020(0x00A0)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMrcCompositingSaveData) == 0x000008, "Wrong alignment on FMrcCompositingSaveData");
static_assert(sizeof(FMrcCompositingSaveData) == 0x0000C0, "Wrong size on FMrcCompositingSaveData");
static_assert(offsetof(FMrcCompositingSaveData, CaptureDeviceURL) == 0x000000, "Member 'FMrcCompositingSaveData::CaptureDeviceURL' has a wrong offset!");
static_assert(offsetof(FMrcCompositingSaveData, DepthOffset) == 0x000018, "Member 'FMrcCompositingSaveData::DepthOffset' has a wrong offset!");
static_assert(offsetof(FMrcCompositingSaveData, TrackingLatency) == 0x00001C, "Member 'FMrcCompositingSaveData::TrackingLatency' has a wrong offset!");
static_assert(offsetof(FMrcCompositingSaveData, VideoProcessingParams) == 0x000020, "Member 'FMrcCompositingSaveData::VideoProcessingParams' has a wrong offset!");

// ScriptStruct MixedRealityCaptureFramework.MrcGarbageMatteSaveData
// 0x0030 (0x0030 - 0x0000)
struct FMrcGarbageMatteSaveData final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMrcGarbageMatteSaveData) == 0x000010, "Wrong alignment on FMrcGarbageMatteSaveData");
static_assert(sizeof(FMrcGarbageMatteSaveData) == 0x000030, "Wrong size on FMrcGarbageMatteSaveData");
static_assert(offsetof(FMrcGarbageMatteSaveData, Transform) == 0x000000, "Member 'FMrcGarbageMatteSaveData::Transform' has a wrong offset!");

// ScriptStruct MixedRealityCaptureFramework.MrcAlignmentSaveData
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FMrcAlignmentSaveData final
{
public:
	struct FVector                                CameraOrigin;                                      // 0x0000(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Orientation;                                       // 0x000C(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   TrackingAttachmentId;                              // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHMDTrackingOrigin                            TrackingOrigin;                                    // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMrcAlignmentSaveData) == 0x000008, "Wrong alignment on FMrcAlignmentSaveData");
static_assert(sizeof(FMrcAlignmentSaveData) == 0x000028, "Wrong size on FMrcAlignmentSaveData");
static_assert(offsetof(FMrcAlignmentSaveData, CameraOrigin) == 0x000000, "Member 'FMrcAlignmentSaveData::CameraOrigin' has a wrong offset!");
static_assert(offsetof(FMrcAlignmentSaveData, Orientation) == 0x00000C, "Member 'FMrcAlignmentSaveData::Orientation' has a wrong offset!");
static_assert(offsetof(FMrcAlignmentSaveData, TrackingAttachmentId) == 0x000018, "Member 'FMrcAlignmentSaveData::TrackingAttachmentId' has a wrong offset!");
static_assert(offsetof(FMrcAlignmentSaveData, TrackingOrigin) == 0x000020, "Member 'FMrcAlignmentSaveData::TrackingOrigin' has a wrong offset!");

// ScriptStruct MixedRealityCaptureFramework.MrcLensCalibrationData
// 0x0038 (0x0038 - 0x0000)
struct FMrcLensCalibrationData final
{
public:
	float                                         FOV;                                               // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOpenCVLensDistortionParameters        DistortionParameters;                              // 0x0004(0x0034)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMrcLensCalibrationData) == 0x000004, "Wrong alignment on FMrcLensCalibrationData");
static_assert(sizeof(FMrcLensCalibrationData) == 0x000038, "Wrong size on FMrcLensCalibrationData");
static_assert(offsetof(FMrcLensCalibrationData, FOV) == 0x000000, "Member 'FMrcLensCalibrationData::FOV' has a wrong offset!");
static_assert(offsetof(FMrcLensCalibrationData, DistortionParameters) == 0x000004, "Member 'FMrcLensCalibrationData::DistortionParameters' has a wrong offset!");

}

