#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTT_CircleStrafe

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BTT_CircleStrafe.BTT_CircleStrafe_C.ExecuteUbergraph_BTT_CircleStrafe
// 0x0078 (0x0078 - 0x0000)
struct BTT_CircleStrafe_C_ExecuteUbergraph_BTT_CircleStrafe final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_OwnerActor;                           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AIC_C*                              K2Node_DynamicCast_AsBP_AIC;                       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class AActor*                                 K2Node_Event_OwnerActor1;                          // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRightVector_ReturnValue;               // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RandomBool_ReturnValue;                   // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E[0x2];                                       // 0x006E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_CircleStrafe_C_ExecuteUbergraph_BTT_CircleStrafe) == 0x000008, "Wrong alignment on BTT_CircleStrafe_C_ExecuteUbergraph_BTT_CircleStrafe");
static_assert(sizeof(BTT_CircleStrafe_C_ExecuteUbergraph_BTT_CircleStrafe) == 0x000078, "Wrong size on BTT_CircleStrafe_C_ExecuteUbergraph_BTT_CircleStrafe");
static_assert(offsetof(BTT_CircleStrafe_C_ExecuteUbergraph_BTT_CircleStrafe, EntryPoint) == 0x000000, "Member 'BTT_CircleStrafe_C_ExecuteUbergraph_BTT_CircleStrafe::EntryPoint' has a wrong offset!");
static_assert(offsetof(BTT_CircleStrafe_C_ExecuteUbergraph_BTT_CircleStrafe, K2Node_Event_OwnerActor) == 0x000008, "Member 'BTT_CircleStrafe_C_ExecuteUbergraph_BTT_CircleStrafe::K2Node_Event_OwnerActor' has a wrong offset!");
static_assert(offsetof(BTT_CircleStrafe_C_ExecuteUbergraph_BTT_CircleStrafe, K2Node_DynamicCast_AsBP_AIC) == 0x000010, "Member 'BTT_CircleStrafe_C_ExecuteUbergraph_BTT_CircleStrafe::K2Node_DynamicCast_AsBP_AIC' has a wrong offset!");
static_assert(offsetof(BTT_CircleStrafe_C_ExecuteUbergraph_BTT_CircleStrafe, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BTT_CircleStrafe_C_ExecuteUbergraph_BTT_CircleStrafe::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BTT_CircleStrafe_C_ExecuteUbergraph_BTT_CircleStrafe, CallFunc_K2_GetActorRotation_ReturnValue) == 0x00001C, "Member 'BTT_CircleStrafe_C_ExecuteUbergraph_BTT_CircleStrafe::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_CircleStrafe_C_ExecuteUbergraph_BTT_CircleStrafe, CallFunc_K2_GetPawn_ReturnValue) == 0x000028, "Member 'BTT_CircleStrafe_C_ExecuteUbergraph_BTT_CircleStrafe::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_CircleStrafe_C_ExecuteUbergraph_BTT_CircleStrafe, CallFunc_BreakRotator_Roll) == 0x000030, "Member 'BTT_CircleStrafe_C_ExecuteUbergraph_BTT_CircleStrafe::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BTT_CircleStrafe_C_ExecuteUbergraph_BTT_CircleStrafe, CallFunc_BreakRotator_Pitch) == 0x000034, "Member 'BTT_CircleStrafe_C_ExecuteUbergraph_BTT_CircleStrafe::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BTT_CircleStrafe_C_ExecuteUbergraph_BTT_CircleStrafe, CallFunc_BreakRotator_Yaw) == 0x000038, "Member 'BTT_CircleStrafe_C_ExecuteUbergraph_BTT_CircleStrafe::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BTT_CircleStrafe_C_ExecuteUbergraph_BTT_CircleStrafe, CallFunc_MakeRotator_ReturnValue) == 0x00003C, "Member 'BTT_CircleStrafe_C_ExecuteUbergraph_BTT_CircleStrafe::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_CircleStrafe_C_ExecuteUbergraph_BTT_CircleStrafe, K2Node_Event_OwnerActor1) == 0x000048, "Member 'BTT_CircleStrafe_C_ExecuteUbergraph_BTT_CircleStrafe::K2Node_Event_OwnerActor1' has a wrong offset!");
static_assert(offsetof(BTT_CircleStrafe_C_ExecuteUbergraph_BTT_CircleStrafe, K2Node_Event_DeltaSeconds) == 0x000050, "Member 'BTT_CircleStrafe_C_ExecuteUbergraph_BTT_CircleStrafe::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BTT_CircleStrafe_C_ExecuteUbergraph_BTT_CircleStrafe, CallFunc_GetForwardVector_ReturnValue) == 0x000054, "Member 'BTT_CircleStrafe_C_ExecuteUbergraph_BTT_CircleStrafe::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_CircleStrafe_C_ExecuteUbergraph_BTT_CircleStrafe, CallFunc_GetRightVector_ReturnValue) == 0x000060, "Member 'BTT_CircleStrafe_C_ExecuteUbergraph_BTT_CircleStrafe::CallFunc_GetRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_CircleStrafe_C_ExecuteUbergraph_BTT_CircleStrafe, CallFunc_RandomBool_ReturnValue) == 0x00006C, "Member 'BTT_CircleStrafe_C_ExecuteUbergraph_BTT_CircleStrafe::CallFunc_RandomBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_CircleStrafe_C_ExecuteUbergraph_BTT_CircleStrafe, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00006D, "Member 'BTT_CircleStrafe_C_ExecuteUbergraph_BTT_CircleStrafe::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_CircleStrafe_C_ExecuteUbergraph_BTT_CircleStrafe, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000070, "Member 'BTT_CircleStrafe_C_ExecuteUbergraph_BTT_CircleStrafe::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");

// Function BTT_CircleStrafe.BTT_CircleStrafe_C.ReceiveExecute
// 0x0008 (0x0008 - 0x0000)
struct BTT_CircleStrafe_C_ReceiveExecute final
{
public:
	class AActor*                                 OwnerActor;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_CircleStrafe_C_ReceiveExecute) == 0x000008, "Wrong alignment on BTT_CircleStrafe_C_ReceiveExecute");
static_assert(sizeof(BTT_CircleStrafe_C_ReceiveExecute) == 0x000008, "Wrong size on BTT_CircleStrafe_C_ReceiveExecute");
static_assert(offsetof(BTT_CircleStrafe_C_ReceiveExecute, OwnerActor) == 0x000000, "Member 'BTT_CircleStrafe_C_ReceiveExecute::OwnerActor' has a wrong offset!");

// Function BTT_CircleStrafe.BTT_CircleStrafe_C.ReceiveTick
// 0x0010 (0x0010 - 0x0000)
struct BTT_CircleStrafe_C_ReceiveTick final
{
public:
	class AActor*                                 OwnerActor;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaSeconds;                                      // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_CircleStrafe_C_ReceiveTick) == 0x000008, "Wrong alignment on BTT_CircleStrafe_C_ReceiveTick");
static_assert(sizeof(BTT_CircleStrafe_C_ReceiveTick) == 0x000010, "Wrong size on BTT_CircleStrafe_C_ReceiveTick");
static_assert(offsetof(BTT_CircleStrafe_C_ReceiveTick, OwnerActor) == 0x000000, "Member 'BTT_CircleStrafe_C_ReceiveTick::OwnerActor' has a wrong offset!");
static_assert(offsetof(BTT_CircleStrafe_C_ReceiveTick, DeltaSeconds) == 0x000008, "Member 'BTT_CircleStrafe_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

}

