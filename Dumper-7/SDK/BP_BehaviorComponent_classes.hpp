#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BehaviorComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Enum_PatrolType_structs.hpp"
#include "Struct_BasicBehavior_structs.hpp"
#include "Enum_BehaviorType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Enum_IdleType_structs.hpp"
#include "Struct_NpcFireCfg_structs.hpp"
#include "Struct_PatrolParam_structs.hpp"
#include "AIModule_structs.hpp"
#include "Enum_OperationType_structs.hpp"
#include "Enum_MessageTag_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BehaviorComponent.BP_BehaviorComponent_C
// 0x0E08 (0x0EF8 - 0x00F0)
class UBP_BehaviorComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FStruct_BasicBehavior                  CurrentBehaviorConfig;                             // 0x00F8(0x00B0)(Edit, BlueprintVisible, Net, HasGetValueTypeHash)
	struct FStruct_BasicBehavior                  IdleBehaviorConfig;                                // 0x01A8(0x00B0)(Edit, BlueprintVisible, ExposeOnSpawn, HasGetValueTypeHash)
	struct FStruct_BasicBehavior                  FollowBehaviorConfig;                              // 0x0258(0x00B0)(Edit, BlueprintVisible, ExposeOnSpawn, HasGetValueTypeHash)
	struct FStruct_BasicBehavior                  FleeBehaviorConfig;                                // 0x0308(0x00B0)(Edit, BlueprintVisible, ExposeOnSpawn, HasGetValueTypeHash)
	struct FStruct_BasicBehavior                  PatrolBehaviorConfig;                              // 0x03B8(0x00B0)(Edit, BlueprintVisible, ExposeOnSpawn, HasGetValueTypeHash)
	class ABP_PatrolRoute_C*                      PatrolRoute;                                       // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FStruct_BasicBehavior                  LastBehaviorConfig;                                // 0x0470(0x00B0)(Edit, BlueprintVisible, Net, DisableEditOnInstance, HasGetValueTypeHash)
	Enum_BehaviorType                             InitialBehavior;                                   // 0x0520(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_521[0x7];                                      // 0x0521(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FStruct_BasicBehavior>          BehaviorArray;                                     // 0x0528(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class AAIController*                          ControllerRef;                                     // 0x0538(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStruct_BasicBehavior                  SeekBehaviorConfig;                                // 0x0540(0x00B0)(Edit, BlueprintVisible, ExposeOnSpawn, HasGetValueTypeHash)
	class ACharacter*                             OwningCharacter;                                   // 0x05F0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FleeDistance;                                      // 0x05F8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	Enum_BehaviorType                             FleeTransition;                                    // 0x05FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	Enum_PatrolType                               PatrolType;                                        // 0x05FD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FE[0x2];                                      // 0x05FE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PatrolSplineIndex;                                 // 0x0600(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PatrolDirection;                                   // 0x0604(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_605[0x3];                                      // 0x0605(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 SeekTarget;                                        // 0x0608(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, RepNotify, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	Enum_BehaviorType                             SeekTransition;                                    // 0x0610(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_611[0x7];                                      // 0x0611(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_BasicBehavior                  AttackMeleeBehaviorConfig;                         // 0x0618(0x00B0)(Edit, BlueprintVisible, ExposeOnSpawn, HasGetValueTypeHash)
	struct FStruct_BasicBehavior                  AttackRangedBehaviorConfig;                        // 0x06C8(0x00B0)(Edit, BlueprintVisible, ExposeOnSpawn, HasGetValueTypeHash)
	class AActor*                                 AttackTarget;                                      // 0x0778(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetsConsiderationRadius;                        // 0x0780(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AttackMeleeDistance;                               // 0x0784(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FStruct_BasicBehavior                  DefendBehaviorConfig;                              // 0x0788(0x00B0)(Edit, BlueprintVisible, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         AttackInitTime;                                    // 0x0838(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         AttackSpeed;                                       // 0x083C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         AttackRangedDistance;                              // 0x0840(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	Enum_BehaviorType                             AttackMeleeTransition;                             // 0x0844(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	Enum_IdleType                                 IdleType;                                          // 0x0845(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_846[0x2];                                      // 0x0846(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxRandLocationDistance;                           // 0x0848(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         RandLocationDelay;                                 // 0x084C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class ABP_Workspace_C*                        CurrentWorkspace;                                  // 0x0850(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_Workspace_C*>                AvailableWorkspaces;                               // 0x0858(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, ExposeOnSpawn)
	bool                                          IsAlive;                                           // 0x0868(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor)
	Enum_BehaviorType                             AttackRangedTransition;                            // 0x0869(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_86A[0x2];                                      // 0x086A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumAttacksBeforeReload;                            // 0x086C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NumAttacks;                                        // 0x0870(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_874[0x4];                                      // 0x0874(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           ReloadAnimation;                                   // 0x0878(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_BehaviorType                             DefendTransition;                                  // 0x0880(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_881[0x7];                                      // 0x0881(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AIStorage_C*                        AiStorageRef;                                      // 0x0888(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsReplicated;                                      // 0x0890(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_891[0x7];                                      // 0x0891(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 AnimationIndices;                                  // 0x0898(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                         FollowDistance;                                    // 0x08A8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          RequireLineOfSight;                                // 0x08AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8AD[0x3];                                      // 0x08AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnBeginIdle;                                       // 0x08B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnEndIdle;                                         // 0x08C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnBeginFollow;                                     // 0x08D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnEndFollow;                                       // 0x08E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnBeginFlee;                                       // 0x08F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnEndFlee;                                         // 0x0900(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnBeginPatrol;                                     // 0x0910(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnEndPatrol;                                       // 0x0920(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnBeginSeek;                                       // 0x0930(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnEndSeek;                                         // 0x0940(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnBeginAttackMelee;                                // 0x0950(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnEndAttackMelee;                                  // 0x0960(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnBeginAttackRanged;                               // 0x0970(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnEndAttackRanged;                                 // 0x0980(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnBeginDefend;                                     // 0x0990(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnEndDefend;                                       // 0x09A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	Enum_BehaviorType                             BehaviorToDelay;                                   // 0x09B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9B1[0x7];                                      // 0x09B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           TimerHandle;                                       // 0x09B8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FStruct_BasicBehavior                  HitBehaviorConfig;                                 // 0x09C0(0x00B0)(Edit, BlueprintVisible, ExposeOnSpawn, HasGetValueTypeHash)
	class UBehaviorTree*                          BehaviorTree;                                      // 0x0A70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	Enum_BehaviorType                             HitTransition;                                     // 0x0A78(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A79[0x7];                                      // 0x0A79(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnBeginHit;                                        // 0x0A80(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnEndHit;                                          // 0x0A90(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FStruct_BasicBehavior                  InvestigateBehaviorConfig;                         // 0x0AA0(0x00B0)(Edit, BlueprintVisible, HasGetValueTypeHash)
	float                                         InvestigateDistance;                               // 0x0B50(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	float                                         InvestigateInterval;                               // 0x0B54(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	int32                                         InvestigateCount;                                  // 0x0B58(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_BehaviorType                             InvestigateTransition;                             // 0x0B5C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B5D[0x3];                                      // 0x0B5D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnBeginInvestigate;                                // 0x0B60(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnEndInvestigate;                                  // 0x0B70(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FVector                                SenseLocation;                                     // 0x0B80(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentInvestigateCount;                           // 0x0B8C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SeekAcceptanceRadius;                              // 0x0B90(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldMatchSpeed;                                  // 0x0B94(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B95[0x3];                                      // 0x0B95(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 EQSContextActor;                                   // 0x0B98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TalkingInterval;                                   // 0x0BA0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MoveToTarget;                                      // 0x0BA4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BA5[0x3];                                      // 0x0BA5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LastLocation;                                      // 0x0BA8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SetLocation_;                                      // 0x0BB4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BB5[0x3];                                      // 0x0BB5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 LastAttackTarget;                                  // 0x0BB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 LastCover;                                         // 0x0BC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStruct_NpcFireCfg                     NpcFireCfg;                                        // 0x0BC8(0x001C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BE4[0x4];                                      // 0x0BE4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_BasicBehavior                  StartPointBehaviorConfig;                          // 0x0BE8(0x00B0)(Edit, BlueprintVisible, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector                                StartLocation;                                     // 0x0C98(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_BehaviorType                             StartPointTransition;                              // 0x0CA4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_CA5[0x3];                                      // 0x0CA5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnBeginStartPoint;                                 // 0x0CA8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnEndStartPoint;                                   // 0x0CB8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         InitDeltaTime;                                     // 0x0CC8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	float                                         lastTime;                                          // 0x0CCC(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCrouch;                                          // 0x0CD0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          EnableMovingAttack;                                // 0x0CD1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CD2[0x6];                                      // 0x0CD2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_StartSpline_C*                      StartSpline;                                       // 0x0CD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TempLocation;                                      // 0x0CE0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SplineDistance;                                    // 0x0CEC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInit;                                            // 0x0CF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CF1[0x3];                                      // 0x0CF1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CrouchBlendTime;                                   // 0x0CF4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsFirstSeenPlayer;                                // 0x0CF8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIsAllowAttack;                                    // 0x0CF9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIsAtTempLocationOfStart;                          // 0x0CFA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CFB[0x1];                                      // 0x0CFB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AnimationOrder;                                    // 0x0CFC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStruct_BasicBehavior                  AlertBehaviorConfig;                               // 0x0D00(0x00B0)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   OnBeginAlert;                                      // 0x0DB0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnEndAlert;                                        // 0x0DC0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FStruct_BasicBehavior                  GoToTargetBehaviorConfig;                          // 0x0DD0(0x00B0)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   OnBeginGotoTarget;                                 // 0x0E80(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnEndGotoTarget;                                   // 0x0E90(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	Enum_BehaviorType                             GotoTargetTransition;                              // 0x0EA0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EA1[0x7];                                      // 0x0EA1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FStruct_PatrolParam>            PatrolParam;                                       // 0x0EA8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class UAnimMontage*                           EndGotoTargetAnim;                                 // 0x0EB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AlertWaitTime;                                     // 0x0EC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EC4[0x4];                                      // 0x0EC4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 AlarmActor;                                        // 0x0EC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefendWaitTime;                                    // 0x0ED0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldChangeTarget;                                // 0x0ED4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_ED5[0x3];                                      // 0x0ED5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetChangeInterval;                              // 0x0ED8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetChangeIntervalCurrent;                       // 0x0EDC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurSplineIndex;                                    // 0x0EE0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          lsArrivedTarget_;                                  // 0x0EE4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_EE5[0x3];                                      // 0x0EE5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         P2MoveSpeed;                                       // 0x0EE8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          lsInP2;                                            // 0x0EEC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_EED[0x3];                                      // 0x0EED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FindRandomLocationCount;                           // 0x0EF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldStopAnimation;                               // 0x0EF4(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_BehaviorComponent(int32 EntryPoint);
	void GoToSplineTarget();
	void startPoint();
	void AIMoveLoop();
	void ReceiveTick(float DeltaSeconds);
	void DelayAlertEvent_();
	void BeginALert();
	void OnStartTalking(class AActor* OtherActor, float TalkLength, Enum_IdleType PrevIdleType);
	void OnBeginIdle_Event();
	void OnBeginInvestigate_Event();
	void OnEndAttack_Event();
	void ReceiveMessageTag(Enum_MessageTag MessageTag);
	void OnDelayTrigger();
	void OnPerceptionUpdate(class AActor* ActorRef, const struct FAIStimulus& StimulusRef);
	void ReceiveBeginPlay();
	void OnDeath();
	void ReplicatedAudio(class USoundBase* Audio);
	void ReplicatedAnimation(class UAnimMontage* Anim);
	void OnRequestFailed_332FFA2C4D1FE3654FD69C9913A6C303();
	void OnMoveFinished_332FFA2C4D1FE3654FD69C9913A6C303(EPathFollowingResult Result, class AAIController* AIController);
	void SetDefaults(class AAIController* ControllerIn);
	void ChangeBehavior(Enum_BehaviorType NewBehaviorType, bool StopAnimations);
	void CheckForDistanceTriggers(bool CheckWithin);
	void GetCurrentBehaviorType(Enum_BehaviorType* CurrentBehaviorType);
	void FindNextPatrolLocation();
	void FindSeekTarget();
	void FindAttackTarget(bool* Success);
	void GetCurrentAttackTarget(class AActor** TargetRef);
	void PlayAnimation(class UAnimMontage* AnimMontage, float* AnimLength);
	void IsPlayingAnimation(bool* IsPlaying);
	void SetCurrentWorkspace(class ABP_Workspace_C* NewWorkspace);
	void GetCurrentWorkspace(class ABP_Workspace_C** RetWorkspace);
	void GetOwningCharacter(class ACharacter** RetCharacter);
	void CheckIfAliveIfNPC(class AActor* ActorRef, bool* IsAlive_0);
	void DoRangedAttack(bool* Success);
	void GetNearestActorWithTag(class AActor** NearestActor);
	void GetCurrentBehaviorConfig(struct FStruct_BasicBehavior* Config);
	void PlayAudio();
	void CheckForHealthTriggers(float Percentage);
	void ResetDelayTrigger();
	void GetBBKeyTargetActor(class AActor** RetActor);
	void GetEQSContextActor(class AActor** RetActor);
	void OnRep_IdleType();
	void OnRep_MaxRandLocationDistance();
	void OnRep_RandLocationDelay();
	void OnRep_FleeDistance();
	void OnRep_AttackMeleeDistance();
	void OnRep_AttackRangedDistance();
	void OnRep_FollowDistance();
	void OnRep_AttackSpeed();
	void OnRep_InvestigateDistance();
	void OnRep_InvestigateInterval();
	void OnRep_SeekAcceptanceRadius();
	void OnRep_SeekTarget();
	void GetRandomActorWithTag(class AActor** RandomActor);
	void IsReloading(bool* ret);
	void SetReloadBullet(bool Value);
	void FindCoverPoint(bool ForceOne, bool* Success, struct FVector* Location);
	void GetNumAttacks(int32* ret);
	void IsTargetAlive(bool* ret);
	void SetStartPoint();
	void MoveToStartPoint(bool IsDirectGotoTarget, int32* Result);
	void SetInitStartLocation(class ABP_StartSpline_C*& StartSpline_0);
	void SetAttackTarget(class AActor* Target);
	void GetLastBehaviorType(Enum_BehaviorType* CurrentBehaviorType);
	void IsFirstSeenPlayer(bool* IsSeen);
	void FaceToTarget();
	void GetAnimationOrder(int32 MaxIndex, int32* RandomOrder);
	void SetGoToTarget(const struct FVector& _pos);
	void GetPatrolIndex(int32* _index);
	void SetAlertWaitTime(float _waitTime, class AActor* _actor);
	void SetRandomGotoTarget(const struct FVector& Pos);
	void FaceToTargetPos(const struct FVector& Pos);
	void FindTagAttackTarget(bool* Success);
	void GetAllPlayerCharacter(TArray<class ACharacter*>* Array);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BehaviorComponent_C">();
	}
	static class UBP_BehaviorComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_BehaviorComponent_C>();
	}
};
static_assert(alignof(UBP_BehaviorComponent_C) == 0x000008, "Wrong alignment on UBP_BehaviorComponent_C");
static_assert(sizeof(UBP_BehaviorComponent_C) == 0x000EF8, "Wrong size on UBP_BehaviorComponent_C");
static_assert(offsetof(UBP_BehaviorComponent_C, UberGraphFrame) == 0x0000F0, "Member 'UBP_BehaviorComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, CurrentBehaviorConfig) == 0x0000F8, "Member 'UBP_BehaviorComponent_C::CurrentBehaviorConfig' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, IdleBehaviorConfig) == 0x0001A8, "Member 'UBP_BehaviorComponent_C::IdleBehaviorConfig' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, FollowBehaviorConfig) == 0x000258, "Member 'UBP_BehaviorComponent_C::FollowBehaviorConfig' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, FleeBehaviorConfig) == 0x000308, "Member 'UBP_BehaviorComponent_C::FleeBehaviorConfig' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, PatrolBehaviorConfig) == 0x0003B8, "Member 'UBP_BehaviorComponent_C::PatrolBehaviorConfig' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, PatrolRoute) == 0x000468, "Member 'UBP_BehaviorComponent_C::PatrolRoute' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, LastBehaviorConfig) == 0x000470, "Member 'UBP_BehaviorComponent_C::LastBehaviorConfig' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, InitialBehavior) == 0x000520, "Member 'UBP_BehaviorComponent_C::InitialBehavior' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, BehaviorArray) == 0x000528, "Member 'UBP_BehaviorComponent_C::BehaviorArray' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, ControllerRef) == 0x000538, "Member 'UBP_BehaviorComponent_C::ControllerRef' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, SeekBehaviorConfig) == 0x000540, "Member 'UBP_BehaviorComponent_C::SeekBehaviorConfig' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, OwningCharacter) == 0x0005F0, "Member 'UBP_BehaviorComponent_C::OwningCharacter' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, FleeDistance) == 0x0005F8, "Member 'UBP_BehaviorComponent_C::FleeDistance' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, FleeTransition) == 0x0005FC, "Member 'UBP_BehaviorComponent_C::FleeTransition' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, PatrolType) == 0x0005FD, "Member 'UBP_BehaviorComponent_C::PatrolType' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, PatrolSplineIndex) == 0x000600, "Member 'UBP_BehaviorComponent_C::PatrolSplineIndex' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, PatrolDirection) == 0x000604, "Member 'UBP_BehaviorComponent_C::PatrolDirection' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, SeekTarget) == 0x000608, "Member 'UBP_BehaviorComponent_C::SeekTarget' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, SeekTransition) == 0x000610, "Member 'UBP_BehaviorComponent_C::SeekTransition' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, AttackMeleeBehaviorConfig) == 0x000618, "Member 'UBP_BehaviorComponent_C::AttackMeleeBehaviorConfig' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, AttackRangedBehaviorConfig) == 0x0006C8, "Member 'UBP_BehaviorComponent_C::AttackRangedBehaviorConfig' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, AttackTarget) == 0x000778, "Member 'UBP_BehaviorComponent_C::AttackTarget' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, TargetsConsiderationRadius) == 0x000780, "Member 'UBP_BehaviorComponent_C::TargetsConsiderationRadius' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, AttackMeleeDistance) == 0x000784, "Member 'UBP_BehaviorComponent_C::AttackMeleeDistance' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, DefendBehaviorConfig) == 0x000788, "Member 'UBP_BehaviorComponent_C::DefendBehaviorConfig' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, AttackInitTime) == 0x000838, "Member 'UBP_BehaviorComponent_C::AttackInitTime' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, AttackSpeed) == 0x00083C, "Member 'UBP_BehaviorComponent_C::AttackSpeed' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, AttackRangedDistance) == 0x000840, "Member 'UBP_BehaviorComponent_C::AttackRangedDistance' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, AttackMeleeTransition) == 0x000844, "Member 'UBP_BehaviorComponent_C::AttackMeleeTransition' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, IdleType) == 0x000845, "Member 'UBP_BehaviorComponent_C::IdleType' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, MaxRandLocationDistance) == 0x000848, "Member 'UBP_BehaviorComponent_C::MaxRandLocationDistance' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, RandLocationDelay) == 0x00084C, "Member 'UBP_BehaviorComponent_C::RandLocationDelay' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, CurrentWorkspace) == 0x000850, "Member 'UBP_BehaviorComponent_C::CurrentWorkspace' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, AvailableWorkspaces) == 0x000858, "Member 'UBP_BehaviorComponent_C::AvailableWorkspaces' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, IsAlive) == 0x000868, "Member 'UBP_BehaviorComponent_C::IsAlive' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, AttackRangedTransition) == 0x000869, "Member 'UBP_BehaviorComponent_C::AttackRangedTransition' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, NumAttacksBeforeReload) == 0x00086C, "Member 'UBP_BehaviorComponent_C::NumAttacksBeforeReload' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, NumAttacks) == 0x000870, "Member 'UBP_BehaviorComponent_C::NumAttacks' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, ReloadAnimation) == 0x000878, "Member 'UBP_BehaviorComponent_C::ReloadAnimation' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, DefendTransition) == 0x000880, "Member 'UBP_BehaviorComponent_C::DefendTransition' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, AiStorageRef) == 0x000888, "Member 'UBP_BehaviorComponent_C::AiStorageRef' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, IsReplicated) == 0x000890, "Member 'UBP_BehaviorComponent_C::IsReplicated' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, AnimationIndices) == 0x000898, "Member 'UBP_BehaviorComponent_C::AnimationIndices' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, FollowDistance) == 0x0008A8, "Member 'UBP_BehaviorComponent_C::FollowDistance' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, RequireLineOfSight) == 0x0008AC, "Member 'UBP_BehaviorComponent_C::RequireLineOfSight' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, OnBeginIdle) == 0x0008B0, "Member 'UBP_BehaviorComponent_C::OnBeginIdle' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, OnEndIdle) == 0x0008C0, "Member 'UBP_BehaviorComponent_C::OnEndIdle' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, OnBeginFollow) == 0x0008D0, "Member 'UBP_BehaviorComponent_C::OnBeginFollow' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, OnEndFollow) == 0x0008E0, "Member 'UBP_BehaviorComponent_C::OnEndFollow' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, OnBeginFlee) == 0x0008F0, "Member 'UBP_BehaviorComponent_C::OnBeginFlee' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, OnEndFlee) == 0x000900, "Member 'UBP_BehaviorComponent_C::OnEndFlee' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, OnBeginPatrol) == 0x000910, "Member 'UBP_BehaviorComponent_C::OnBeginPatrol' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, OnEndPatrol) == 0x000920, "Member 'UBP_BehaviorComponent_C::OnEndPatrol' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, OnBeginSeek) == 0x000930, "Member 'UBP_BehaviorComponent_C::OnBeginSeek' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, OnEndSeek) == 0x000940, "Member 'UBP_BehaviorComponent_C::OnEndSeek' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, OnBeginAttackMelee) == 0x000950, "Member 'UBP_BehaviorComponent_C::OnBeginAttackMelee' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, OnEndAttackMelee) == 0x000960, "Member 'UBP_BehaviorComponent_C::OnEndAttackMelee' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, OnBeginAttackRanged) == 0x000970, "Member 'UBP_BehaviorComponent_C::OnBeginAttackRanged' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, OnEndAttackRanged) == 0x000980, "Member 'UBP_BehaviorComponent_C::OnEndAttackRanged' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, OnBeginDefend) == 0x000990, "Member 'UBP_BehaviorComponent_C::OnBeginDefend' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, OnEndDefend) == 0x0009A0, "Member 'UBP_BehaviorComponent_C::OnEndDefend' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, BehaviorToDelay) == 0x0009B0, "Member 'UBP_BehaviorComponent_C::BehaviorToDelay' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, TimerHandle) == 0x0009B8, "Member 'UBP_BehaviorComponent_C::TimerHandle' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, HitBehaviorConfig) == 0x0009C0, "Member 'UBP_BehaviorComponent_C::HitBehaviorConfig' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, BehaviorTree) == 0x000A70, "Member 'UBP_BehaviorComponent_C::BehaviorTree' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, HitTransition) == 0x000A78, "Member 'UBP_BehaviorComponent_C::HitTransition' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, OnBeginHit) == 0x000A80, "Member 'UBP_BehaviorComponent_C::OnBeginHit' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, OnEndHit) == 0x000A90, "Member 'UBP_BehaviorComponent_C::OnEndHit' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, InvestigateBehaviorConfig) == 0x000AA0, "Member 'UBP_BehaviorComponent_C::InvestigateBehaviorConfig' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, InvestigateDistance) == 0x000B50, "Member 'UBP_BehaviorComponent_C::InvestigateDistance' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, InvestigateInterval) == 0x000B54, "Member 'UBP_BehaviorComponent_C::InvestigateInterval' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, InvestigateCount) == 0x000B58, "Member 'UBP_BehaviorComponent_C::InvestigateCount' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, InvestigateTransition) == 0x000B5C, "Member 'UBP_BehaviorComponent_C::InvestigateTransition' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, OnBeginInvestigate) == 0x000B60, "Member 'UBP_BehaviorComponent_C::OnBeginInvestigate' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, OnEndInvestigate) == 0x000B70, "Member 'UBP_BehaviorComponent_C::OnEndInvestigate' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, SenseLocation) == 0x000B80, "Member 'UBP_BehaviorComponent_C::SenseLocation' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, CurrentInvestigateCount) == 0x000B8C, "Member 'UBP_BehaviorComponent_C::CurrentInvestigateCount' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, SeekAcceptanceRadius) == 0x000B90, "Member 'UBP_BehaviorComponent_C::SeekAcceptanceRadius' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, ShouldMatchSpeed) == 0x000B94, "Member 'UBP_BehaviorComponent_C::ShouldMatchSpeed' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, EQSContextActor) == 0x000B98, "Member 'UBP_BehaviorComponent_C::EQSContextActor' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, TalkingInterval) == 0x000BA0, "Member 'UBP_BehaviorComponent_C::TalkingInterval' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, MoveToTarget) == 0x000BA4, "Member 'UBP_BehaviorComponent_C::MoveToTarget' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, LastLocation) == 0x000BA8, "Member 'UBP_BehaviorComponent_C::LastLocation' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, SetLocation_) == 0x000BB4, "Member 'UBP_BehaviorComponent_C::SetLocation_' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, LastAttackTarget) == 0x000BB8, "Member 'UBP_BehaviorComponent_C::LastAttackTarget' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, LastCover) == 0x000BC0, "Member 'UBP_BehaviorComponent_C::LastCover' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, NpcFireCfg) == 0x000BC8, "Member 'UBP_BehaviorComponent_C::NpcFireCfg' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, StartPointBehaviorConfig) == 0x000BE8, "Member 'UBP_BehaviorComponent_C::StartPointBehaviorConfig' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, StartLocation) == 0x000C98, "Member 'UBP_BehaviorComponent_C::StartLocation' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, StartPointTransition) == 0x000CA4, "Member 'UBP_BehaviorComponent_C::StartPointTransition' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, OnBeginStartPoint) == 0x000CA8, "Member 'UBP_BehaviorComponent_C::OnBeginStartPoint' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, OnEndStartPoint) == 0x000CB8, "Member 'UBP_BehaviorComponent_C::OnEndStartPoint' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, InitDeltaTime) == 0x000CC8, "Member 'UBP_BehaviorComponent_C::InitDeltaTime' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, lastTime) == 0x000CCC, "Member 'UBP_BehaviorComponent_C::lastTime' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, IsCrouch) == 0x000CD0, "Member 'UBP_BehaviorComponent_C::IsCrouch' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, EnableMovingAttack) == 0x000CD1, "Member 'UBP_BehaviorComponent_C::EnableMovingAttack' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, StartSpline) == 0x000CD8, "Member 'UBP_BehaviorComponent_C::StartSpline' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, TempLocation) == 0x000CE0, "Member 'UBP_BehaviorComponent_C::TempLocation' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, SplineDistance) == 0x000CEC, "Member 'UBP_BehaviorComponent_C::SplineDistance' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, IsInit) == 0x000CF0, "Member 'UBP_BehaviorComponent_C::IsInit' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, CrouchBlendTime) == 0x000CF4, "Member 'UBP_BehaviorComponent_C::CrouchBlendTime' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, bIsFirstSeenPlayer) == 0x000CF8, "Member 'UBP_BehaviorComponent_C::bIsFirstSeenPlayer' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, bIsAllowAttack) == 0x000CF9, "Member 'UBP_BehaviorComponent_C::bIsAllowAttack' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, bIsAtTempLocationOfStart) == 0x000CFA, "Member 'UBP_BehaviorComponent_C::bIsAtTempLocationOfStart' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, AnimationOrder) == 0x000CFC, "Member 'UBP_BehaviorComponent_C::AnimationOrder' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, AlertBehaviorConfig) == 0x000D00, "Member 'UBP_BehaviorComponent_C::AlertBehaviorConfig' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, OnBeginAlert) == 0x000DB0, "Member 'UBP_BehaviorComponent_C::OnBeginAlert' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, OnEndAlert) == 0x000DC0, "Member 'UBP_BehaviorComponent_C::OnEndAlert' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, GoToTargetBehaviorConfig) == 0x000DD0, "Member 'UBP_BehaviorComponent_C::GoToTargetBehaviorConfig' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, OnBeginGotoTarget) == 0x000E80, "Member 'UBP_BehaviorComponent_C::OnBeginGotoTarget' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, OnEndGotoTarget) == 0x000E90, "Member 'UBP_BehaviorComponent_C::OnEndGotoTarget' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, GotoTargetTransition) == 0x000EA0, "Member 'UBP_BehaviorComponent_C::GotoTargetTransition' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, PatrolParam) == 0x000EA8, "Member 'UBP_BehaviorComponent_C::PatrolParam' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, EndGotoTargetAnim) == 0x000EB8, "Member 'UBP_BehaviorComponent_C::EndGotoTargetAnim' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, AlertWaitTime) == 0x000EC0, "Member 'UBP_BehaviorComponent_C::AlertWaitTime' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, AlarmActor) == 0x000EC8, "Member 'UBP_BehaviorComponent_C::AlarmActor' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, DefendWaitTime) == 0x000ED0, "Member 'UBP_BehaviorComponent_C::DefendWaitTime' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, ShouldChangeTarget) == 0x000ED4, "Member 'UBP_BehaviorComponent_C::ShouldChangeTarget' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, TargetChangeInterval) == 0x000ED8, "Member 'UBP_BehaviorComponent_C::TargetChangeInterval' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, TargetChangeIntervalCurrent) == 0x000EDC, "Member 'UBP_BehaviorComponent_C::TargetChangeIntervalCurrent' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, CurSplineIndex) == 0x000EE0, "Member 'UBP_BehaviorComponent_C::CurSplineIndex' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, lsArrivedTarget_) == 0x000EE4, "Member 'UBP_BehaviorComponent_C::lsArrivedTarget_' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, P2MoveSpeed) == 0x000EE8, "Member 'UBP_BehaviorComponent_C::P2MoveSpeed' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, lsInP2) == 0x000EEC, "Member 'UBP_BehaviorComponent_C::lsInP2' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, FindRandomLocationCount) == 0x000EF0, "Member 'UBP_BehaviorComponent_C::FindRandomLocationCount' has a wrong offset!");
static_assert(offsetof(UBP_BehaviorComponent_C, ShouldStopAnimation) == 0x000EF4, "Member 'UBP_BehaviorComponent_C::ShouldStopAnimation' has a wrong offset!");

}

