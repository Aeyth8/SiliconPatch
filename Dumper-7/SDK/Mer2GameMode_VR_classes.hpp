#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Mer2GameMode_VR

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Mer2GameMode_VR.Mer2GameMode_VR_C
// 0x0028 (0x03F0 - 0x03C8)
class AMer2GameMode_VR_C final : public AGameModeBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03C8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x03D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         Index_0;                                           // 0x03D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFirst;                                           // 0x03DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3DD[0x3];                                      // 0x03DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 VRMode;                                            // 0x03E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_Mer2GameMode_VR(int32 EntryPoint);
	void K2_PostLogin(class APlayerController* NewPlayer);
	void UserConstructionScript();
	class AActor* ChoosePlayerStart(class AController* Player);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Mer2GameMode_VR_C">();
	}
	static class AMer2GameMode_VR_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMer2GameMode_VR_C>();
	}
};
static_assert(alignof(AMer2GameMode_VR_C) == 0x000008, "Wrong alignment on AMer2GameMode_VR_C");
static_assert(sizeof(AMer2GameMode_VR_C) == 0x0003F0, "Wrong size on AMer2GameMode_VR_C");
static_assert(offsetof(AMer2GameMode_VR_C, UberGraphFrame) == 0x0003C8, "Member 'AMer2GameMode_VR_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AMer2GameMode_VR_C, DefaultSceneRoot) == 0x0003D0, "Member 'AMer2GameMode_VR_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AMer2GameMode_VR_C, Index_0) == 0x0003D8, "Member 'AMer2GameMode_VR_C::Index_0' has a wrong offset!");
static_assert(offsetof(AMer2GameMode_VR_C, IsFirst) == 0x0003DC, "Member 'AMer2GameMode_VR_C::IsFirst' has a wrong offset!");
static_assert(offsetof(AMer2GameMode_VR_C, VRMode) == 0x0003E0, "Member 'AMer2GameMode_VR_C::VRMode' has a wrong offset!");

}

