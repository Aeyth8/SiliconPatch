#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_StartSpline

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_StartSpline.BP_StartSpline_C
// 0x0128 (0x0450 - 0x0328)
class ABP_StartSpline_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0328(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USkeletalMeshComponent*                 ApeEnd;                                            // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 ApeStart;                                          // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 End;                                               // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Start;                                             // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   TextRender;                                        // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       SplinePath;                                        // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 TextColor;                                         // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TextSize;                                          // 0x036C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BreakDown;                                         // 0x0370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Climbin;                                           // 0x0371(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_372[0xE];                                      // 0x0372(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             BreakDownStart;                                    // 0x0380(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FTransform                             BreakDownEnd;                                      // 0x03B0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FTransform                             ClimbinStart;                                      // 0x03E0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FTransform                             ClimbinEnd;                                        // 0x0410(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsShow;                                            // 0x0440(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Boss;                                              // 0x0441(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_StartSpline(int32 EntryPoint);
	void ReceiveBeginPlay();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_StartSpline_C">();
	}
	static class ABP_StartSpline_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_StartSpline_C>();
	}
};
static_assert(alignof(ABP_StartSpline_C) == 0x000010, "Wrong alignment on ABP_StartSpline_C");
static_assert(sizeof(ABP_StartSpline_C) == 0x000450, "Wrong size on ABP_StartSpline_C");
static_assert(offsetof(ABP_StartSpline_C, UberGraphFrame) == 0x000328, "Member 'ABP_StartSpline_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_StartSpline_C, ApeEnd) == 0x000330, "Member 'ABP_StartSpline_C::ApeEnd' has a wrong offset!");
static_assert(offsetof(ABP_StartSpline_C, ApeStart) == 0x000338, "Member 'ABP_StartSpline_C::ApeStart' has a wrong offset!");
static_assert(offsetof(ABP_StartSpline_C, End) == 0x000340, "Member 'ABP_StartSpline_C::End' has a wrong offset!");
static_assert(offsetof(ABP_StartSpline_C, Start) == 0x000348, "Member 'ABP_StartSpline_C::Start' has a wrong offset!");
static_assert(offsetof(ABP_StartSpline_C, TextRender) == 0x000350, "Member 'ABP_StartSpline_C::TextRender' has a wrong offset!");
static_assert(offsetof(ABP_StartSpline_C, SplinePath) == 0x000358, "Member 'ABP_StartSpline_C::SplinePath' has a wrong offset!");
static_assert(offsetof(ABP_StartSpline_C, DefaultSceneRoot) == 0x000360, "Member 'ABP_StartSpline_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_StartSpline_C, TextColor) == 0x000368, "Member 'ABP_StartSpline_C::TextColor' has a wrong offset!");
static_assert(offsetof(ABP_StartSpline_C, TextSize) == 0x00036C, "Member 'ABP_StartSpline_C::TextSize' has a wrong offset!");
static_assert(offsetof(ABP_StartSpline_C, BreakDown) == 0x000370, "Member 'ABP_StartSpline_C::BreakDown' has a wrong offset!");
static_assert(offsetof(ABP_StartSpline_C, Climbin) == 0x000371, "Member 'ABP_StartSpline_C::Climbin' has a wrong offset!");
static_assert(offsetof(ABP_StartSpline_C, BreakDownStart) == 0x000380, "Member 'ABP_StartSpline_C::BreakDownStart' has a wrong offset!");
static_assert(offsetof(ABP_StartSpline_C, BreakDownEnd) == 0x0003B0, "Member 'ABP_StartSpline_C::BreakDownEnd' has a wrong offset!");
static_assert(offsetof(ABP_StartSpline_C, ClimbinStart) == 0x0003E0, "Member 'ABP_StartSpline_C::ClimbinStart' has a wrong offset!");
static_assert(offsetof(ABP_StartSpline_C, ClimbinEnd) == 0x000410, "Member 'ABP_StartSpline_C::ClimbinEnd' has a wrong offset!");
static_assert(offsetof(ABP_StartSpline_C, IsShow) == 0x000440, "Member 'ABP_StartSpline_C::IsShow' has a wrong offset!");
static_assert(offsetof(ABP_StartSpline_C, Boss) == 0x000441, "Member 'ABP_StartSpline_C::Boss' has a wrong offset!");

}

