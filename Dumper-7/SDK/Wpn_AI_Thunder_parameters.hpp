#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Wpn_AI_Thunder

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function Wpn_AI_Thunder.Wpn_AI_Thunder_C.ExecuteUbergraph_Wpn_AI_Thunder
// 0x00E0 (0x00E0 - 0x0000)
struct Wpn_AI_Thunder_C_ExecuteUbergraph_Wpn_AI_Thunder final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_HitComponent;           // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_ComponentBoundEvent_NormalImpulse;          // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_Hit;                    // 0x0030(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        CallFunc_SpawnSoundAtLocation_ReturnValue;         // 0x00C8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAtLocation_ReturnValue;       // 0x00D0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wpn_AI_Thunder_C_ExecuteUbergraph_Wpn_AI_Thunder) == 0x000008, "Wrong alignment on Wpn_AI_Thunder_C_ExecuteUbergraph_Wpn_AI_Thunder");
static_assert(sizeof(Wpn_AI_Thunder_C_ExecuteUbergraph_Wpn_AI_Thunder) == 0x0000E0, "Wrong size on Wpn_AI_Thunder_C_ExecuteUbergraph_Wpn_AI_Thunder");
static_assert(offsetof(Wpn_AI_Thunder_C_ExecuteUbergraph_Wpn_AI_Thunder, EntryPoint) == 0x000000, "Member 'Wpn_AI_Thunder_C_ExecuteUbergraph_Wpn_AI_Thunder::EntryPoint' has a wrong offset!");
static_assert(offsetof(Wpn_AI_Thunder_C_ExecuteUbergraph_Wpn_AI_Thunder, K2Node_ComponentBoundEvent_HitComponent) == 0x000008, "Member 'Wpn_AI_Thunder_C_ExecuteUbergraph_Wpn_AI_Thunder::K2Node_ComponentBoundEvent_HitComponent' has a wrong offset!");
static_assert(offsetof(Wpn_AI_Thunder_C_ExecuteUbergraph_Wpn_AI_Thunder, K2Node_ComponentBoundEvent_OtherActor) == 0x000010, "Member 'Wpn_AI_Thunder_C_ExecuteUbergraph_Wpn_AI_Thunder::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(Wpn_AI_Thunder_C_ExecuteUbergraph_Wpn_AI_Thunder, K2Node_ComponentBoundEvent_OtherComp) == 0x000018, "Member 'Wpn_AI_Thunder_C_ExecuteUbergraph_Wpn_AI_Thunder::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(Wpn_AI_Thunder_C_ExecuteUbergraph_Wpn_AI_Thunder, K2Node_ComponentBoundEvent_NormalImpulse) == 0x000020, "Member 'Wpn_AI_Thunder_C_ExecuteUbergraph_Wpn_AI_Thunder::K2Node_ComponentBoundEvent_NormalImpulse' has a wrong offset!");
static_assert(offsetof(Wpn_AI_Thunder_C_ExecuteUbergraph_Wpn_AI_Thunder, K2Node_ComponentBoundEvent_Hit) == 0x000030, "Member 'Wpn_AI_Thunder_C_ExecuteUbergraph_Wpn_AI_Thunder::K2Node_ComponentBoundEvent_Hit' has a wrong offset!");
static_assert(offsetof(Wpn_AI_Thunder_C_ExecuteUbergraph_Wpn_AI_Thunder, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x0000B8, "Member 'Wpn_AI_Thunder_C_ExecuteUbergraph_Wpn_AI_Thunder::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_AI_Thunder_C_ExecuteUbergraph_Wpn_AI_Thunder, CallFunc_SpawnSoundAtLocation_ReturnValue) == 0x0000C8, "Member 'Wpn_AI_Thunder_C_ExecuteUbergraph_Wpn_AI_Thunder::CallFunc_SpawnSoundAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_AI_Thunder_C_ExecuteUbergraph_Wpn_AI_Thunder, CallFunc_SpawnEmitterAtLocation_ReturnValue) == 0x0000D0, "Member 'Wpn_AI_Thunder_C_ExecuteUbergraph_Wpn_AI_Thunder::CallFunc_SpawnEmitterAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_AI_Thunder_C_ExecuteUbergraph_Wpn_AI_Thunder, Temp_bool_Has_Been_Initd_Variable) == 0x0000D8, "Member 'Wpn_AI_Thunder_C_ExecuteUbergraph_Wpn_AI_Thunder::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(Wpn_AI_Thunder_C_ExecuteUbergraph_Wpn_AI_Thunder, Temp_bool_IsClosed_Variable) == 0x0000D9, "Member 'Wpn_AI_Thunder_C_ExecuteUbergraph_Wpn_AI_Thunder::Temp_bool_IsClosed_Variable' has a wrong offset!");

// Function Wpn_AI_Thunder.Wpn_AI_Thunder_C.BndEvt__Sphere_K2Node_ComponentBoundEvent_2_ComponentHitSignature__DelegateSignature
// 0x00B0 (0x00B0 - 0x0000)
struct Wpn_AI_Thunder_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_2_ComponentHitSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             Hit;                                               // 0x0028(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Wpn_AI_Thunder_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_2_ComponentHitSignature__DelegateSignature) == 0x000008, "Wrong alignment on Wpn_AI_Thunder_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_2_ComponentHitSignature__DelegateSignature");
static_assert(sizeof(Wpn_AI_Thunder_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_2_ComponentHitSignature__DelegateSignature) == 0x0000B0, "Wrong size on Wpn_AI_Thunder_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_2_ComponentHitSignature__DelegateSignature");
static_assert(offsetof(Wpn_AI_Thunder_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_2_ComponentHitSignature__DelegateSignature, HitComponent) == 0x000000, "Member 'Wpn_AI_Thunder_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_2_ComponentHitSignature__DelegateSignature::HitComponent' has a wrong offset!");
static_assert(offsetof(Wpn_AI_Thunder_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_2_ComponentHitSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'Wpn_AI_Thunder_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_2_ComponentHitSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(Wpn_AI_Thunder_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_2_ComponentHitSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'Wpn_AI_Thunder_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_2_ComponentHitSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(Wpn_AI_Thunder_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_2_ComponentHitSignature__DelegateSignature, NormalImpulse) == 0x000018, "Member 'Wpn_AI_Thunder_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_2_ComponentHitSignature__DelegateSignature::NormalImpulse' has a wrong offset!");
static_assert(offsetof(Wpn_AI_Thunder_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_2_ComponentHitSignature__DelegateSignature, Hit) == 0x000028, "Member 'Wpn_AI_Thunder_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_2_ComponentHitSignature__DelegateSignature::Hit' has a wrong offset!");

// Function Wpn_AI_Thunder.Wpn_AI_Thunder_C.Init
// 0x0098 (0x0098 - 0x0000)
struct Wpn_AI_Thunder_C_Init final
{
public:
	struct FRotator                               TargetRotation;                                    // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                TargetLocation;                                    // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue1;            // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Distance_Between_Locations_2D_Distance;   // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue1;        // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wpn_AI_Thunder_C_Init) == 0x000004, "Wrong alignment on Wpn_AI_Thunder_C_Init");
static_assert(sizeof(Wpn_AI_Thunder_C_Init) == 0x000098, "Wrong size on Wpn_AI_Thunder_C_Init");
static_assert(offsetof(Wpn_AI_Thunder_C_Init, TargetRotation) == 0x000000, "Member 'Wpn_AI_Thunder_C_Init::TargetRotation' has a wrong offset!");
static_assert(offsetof(Wpn_AI_Thunder_C_Init, TargetLocation) == 0x00000C, "Member 'Wpn_AI_Thunder_C_Init::TargetLocation' has a wrong offset!");
static_assert(offsetof(Wpn_AI_Thunder_C_Init, CallFunc_GetForwardVector_ReturnValue) == 0x000018, "Member 'Wpn_AI_Thunder_C_Init::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_AI_Thunder_C_Init, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000024, "Member 'Wpn_AI_Thunder_C_Init::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_AI_Thunder_C_Init, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000030, "Member 'Wpn_AI_Thunder_C_Init::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_AI_Thunder_C_Init, CallFunc_Add_VectorVector_ReturnValue) == 0x00003C, "Member 'Wpn_AI_Thunder_C_Init::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_AI_Thunder_C_Init, CallFunc_FindLookAtRotation_ReturnValue) == 0x000048, "Member 'Wpn_AI_Thunder_C_Init::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_AI_Thunder_C_Init, CallFunc_GetForwardVector_ReturnValue1) == 0x000054, "Member 'Wpn_AI_Thunder_C_Init::CallFunc_GetForwardVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(Wpn_AI_Thunder_C_Init, CallFunc_Distance_Between_Locations_2D_Distance) == 0x000060, "Member 'Wpn_AI_Thunder_C_Init::CallFunc_Distance_Between_Locations_2D_Distance' has a wrong offset!");
static_assert(offsetof(Wpn_AI_Thunder_C_Init, CallFunc_BreakVector_X) == 0x000064, "Member 'Wpn_AI_Thunder_C_Init::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(Wpn_AI_Thunder_C_Init, CallFunc_BreakVector_Y) == 0x000068, "Member 'Wpn_AI_Thunder_C_Init::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(Wpn_AI_Thunder_C_Init, CallFunc_BreakVector_Z) == 0x00006C, "Member 'Wpn_AI_Thunder_C_Init::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(Wpn_AI_Thunder_C_Init, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000070, "Member 'Wpn_AI_Thunder_C_Init::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_AI_Thunder_C_Init, CallFunc_MakeVector_ReturnValue) == 0x000074, "Member 'Wpn_AI_Thunder_C_Init::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_AI_Thunder_C_Init, CallFunc_Normal_ReturnValue) == 0x000080, "Member 'Wpn_AI_Thunder_C_Init::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_AI_Thunder_C_Init, CallFunc_Multiply_VectorFloat_ReturnValue1) == 0x00008C, "Member 'Wpn_AI_Thunder_C_Init::CallFunc_Multiply_VectorFloat_ReturnValue1' has a wrong offset!");

}

