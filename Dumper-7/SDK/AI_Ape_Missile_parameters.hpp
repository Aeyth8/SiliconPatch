#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AI_Ape_Missile

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function AI_Ape_Missile.AI_Ape_Missile_C.ExecuteUbergraph_AI_Ape_Missile
// 0x0420 (0x0420 - 0x0000)
struct AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMer2GameState_C*                       K2Node_DynamicCast_AsMer_2Game_State;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasBlock__Result;                         // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMer2GameInstance_C*                    K2Node_DynamicCast_AsMer_2Game_Instance;           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_HitComponent;           // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0060(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_ComponentBoundEvent_NormalImpulse;          // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_Hit;                    // 0x0078(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_102[0x2];                                      // 0x0102(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x010C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0118(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0124(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0130(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0150(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0168(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0174(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0180(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_18C[0x4];                                      // 0x018C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerProjectile_C*                    K2Node_DynamicCast_AsPlayer_Projectile;            // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_199[0x7];                                      // 0x0199(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerProjectile_C*                    K2Node_DynamicCast_AsPlayer_Projectile1;           // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess3;                      // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A9[0x7];                                      // 0x01A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable1;                      // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B9[0x7];                                      // 0x01B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_CharacterBase_C*                    K2Node_DynamicCast_AsBP_Character_Base;            // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess4;                      // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1C9[0x7];                                      // 0x01C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMer2PlayerController_C*                K2Node_DynamicCast_AsMer_2Player_Controller;       // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess5;                      // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E1[0x3];                                      // 0x01E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_CustomEvent_Location;                       // 0x01E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_IsShootByPlayerGun;             // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_IsEnable;                       // 0x01F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F2[0x6];                                      // 0x01F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               CallFunc_SpawnParticle_ReturnValue;                // 0x01F8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select1_Default;                            // 0x0200(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0211(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_212[0x2];                                      // 0x0212(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue1;     // 0x0214(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue2;     // 0x0220(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue3;     // 0x022C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Distance_Between_Locations_Distance;      // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x023C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0244(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue1;        // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_249[0x3];                                      // 0x0249(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue4;     // 0x024C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue5;     // 0x0258(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Distance_Between_Locations_Distance1;     // 0x0264(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0268(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue2;        // 0x026C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26D[0x3];                                      // 0x026D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0270(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsComponentTickEnabled_ReturnValue;       // 0x027C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x027D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue1;                // 0x027E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable1;                // 0x027F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x0280(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_GetVectorFromIndex_Vector;                // 0x0308(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_314[0x4];                                      // 0x0314(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0318(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	float                                         CallFunc_GetMaxSpeed_ReturnValue;                  // 0x0328(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ApplyRadialDamageWithFalloff_ReturnValue; // 0x032C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32D[0x3];                                      // 0x032D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0330(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x033C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue6;     // 0x0348(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0354(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0360(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X1;                           // 0x036C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y1;                           // 0x0370(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z1;                           // 0x0374(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue1;                  // 0x0378(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_384[0xC];                                      // 0x0384(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0390(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Normal_ReturnValue1;                      // 0x03C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x03CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x03D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x03E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue1;        // 0x03F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3FC[0x4];                                      // 0x03FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               CallFunc_SpawnParticle_ReturnValue1;               // 0x0400(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0408(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue1;            // 0x0414(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile) == 0x000010, "Wrong alignment on AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile");
static_assert(sizeof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile) == 0x000420, "Wrong size on AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, EntryPoint) == 0x000000, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::EntryPoint' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_GetGameState_ReturnValue) == 0x000008, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, K2Node_DynamicCast_AsMer_2Game_State) == 0x000010, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::K2Node_DynamicCast_AsMer_2Game_State' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, Temp_int_Variable) == 0x00001C, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, Temp_bool_IsClosed_Variable) == 0x000020, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, Temp_bool_Variable) == 0x000021, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, Temp_bool_Has_Been_Initd_Variable) == 0x000022, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_HasAuthority_ReturnValue) == 0x000023, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, K2Node_Event_DeltaSeconds) == 0x000024, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_HasBlock__Result) == 0x000028, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_HasBlock__Result' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00002C, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_GetGameInstance_ReturnValue) == 0x000030, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, K2Node_Select_Default) == 0x000038, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, K2Node_DynamicCast_AsMer_2Game_Instance) == 0x000040, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::K2Node_DynamicCast_AsMer_2Game_Instance' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, K2Node_DynamicCast_bSuccess1) == 0x000048, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, K2Node_ComponentBoundEvent_HitComponent) == 0x000050, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::K2Node_ComponentBoundEvent_HitComponent' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, K2Node_ComponentBoundEvent_OtherActor) == 0x000058, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, K2Node_ComponentBoundEvent_OtherComp) == 0x000060, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, K2Node_ComponentBoundEvent_NormalImpulse) == 0x000068, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::K2Node_ComponentBoundEvent_NormalImpulse' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, K2Node_ComponentBoundEvent_Hit) == 0x000078, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::K2Node_ComponentBoundEvent_Hit' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_BreakHitResult_bBlockingHit) == 0x000100, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_BreakHitResult_bInitialOverlap) == 0x000101, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_BreakHitResult_Time) == 0x000104, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_BreakHitResult_Distance) == 0x000108, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_BreakHitResult_Location) == 0x00010C, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_BreakHitResult_ImpactPoint) == 0x000118, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_BreakHitResult_Normal) == 0x000124, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_BreakHitResult_ImpactNormal) == 0x000130, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_BreakHitResult_PhysMat) == 0x000140, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_BreakHitResult_HitActor) == 0x000148, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_BreakHitResult_HitComponent) == 0x000150, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_BreakHitResult_HitBoneName) == 0x000158, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_BreakHitResult_HitItem) == 0x000160, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_BreakHitResult_FaceIndex) == 0x000164, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_BreakHitResult_TraceStart) == 0x000168, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_BreakHitResult_TraceEnd) == 0x000174, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000180, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, K2Node_DynamicCast_AsPlayer_Projectile) == 0x000190, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::K2Node_DynamicCast_AsPlayer_Projectile' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, K2Node_DynamicCast_bSuccess2) == 0x000198, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::K2Node_DynamicCast_bSuccess2' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, K2Node_DynamicCast_AsPlayer_Projectile1) == 0x0001A0, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::K2Node_DynamicCast_AsPlayer_Projectile1' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, K2Node_DynamicCast_bSuccess3) == 0x0001A8, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::K2Node_DynamicCast_bSuccess3' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_GetOwner_ReturnValue) == 0x0001B0, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, Temp_bool_IsClosed_Variable1) == 0x0001B8, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::Temp_bool_IsClosed_Variable1' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, K2Node_DynamicCast_AsBP_Character_Base) == 0x0001C0, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::K2Node_DynamicCast_AsBP_Character_Base' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, K2Node_DynamicCast_bSuccess4) == 0x0001C8, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::K2Node_DynamicCast_bSuccess4' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_GetController_ReturnValue) == 0x0001D0, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, K2Node_DynamicCast_AsMer_2Player_Controller) == 0x0001D8, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::K2Node_DynamicCast_AsMer_2Player_Controller' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, K2Node_DynamicCast_bSuccess5) == 0x0001E0, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::K2Node_DynamicCast_bSuccess5' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, K2Node_CustomEvent_Location) == 0x0001E4, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::K2Node_CustomEvent_Location' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, K2Node_CustomEvent_IsShootByPlayerGun) == 0x0001F0, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::K2Node_CustomEvent_IsShootByPlayerGun' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, K2Node_CustomEvent_IsEnable) == 0x0001F1, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::K2Node_CustomEvent_IsEnable' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_SpawnParticle_ReturnValue) == 0x0001F8, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_SpawnParticle_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, K2Node_Select1_Default) == 0x000200, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::K2Node_Select1_Default' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_VSize_ReturnValue) == 0x00020C, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000210, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000211, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_K2_GetComponentLocation_ReturnValue1) == 0x000214, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_K2_GetComponentLocation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_K2_GetComponentLocation_ReturnValue2) == 0x000220, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_K2_GetComponentLocation_ReturnValue2' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_K2_GetComponentLocation_ReturnValue3) == 0x00022C, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_K2_GetComponentLocation_ReturnValue3' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_Distance_Between_Locations_Distance) == 0x000238, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_Distance_Between_Locations_Distance' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_BreakVector_X) == 0x00023C, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_BreakVector_Y) == 0x000240, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_BreakVector_Z) == 0x000244, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_LessEqual_FloatFloat_ReturnValue1) == 0x000248, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_LessEqual_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_K2_GetComponentLocation_ReturnValue4) == 0x00024C, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_K2_GetComponentLocation_ReturnValue4' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_K2_GetComponentLocation_ReturnValue5) == 0x000258, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_K2_GetComponentLocation_ReturnValue5' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_Distance_Between_Locations_Distance1) == 0x000264, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_Distance_Between_Locations_Distance1' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_Add_FloatFloat_ReturnValue) == 0x000268, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_LessEqual_FloatFloat_ReturnValue2) == 0x00026C, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_LessEqual_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_MakeVector_ReturnValue) == 0x000270, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_IsComponentTickEnabled_ReturnValue) == 0x00027C, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_IsComponentTickEnabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_IsValid_ReturnValue) == 0x00027D, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_HasAuthority_ReturnValue1) == 0x00027E, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_HasAuthority_ReturnValue1' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, Temp_bool_Has_Been_Initd_Variable1) == 0x00027F, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::Temp_bool_Has_Been_Initd_Variable1' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x000280, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_GetVectorFromIndex_Vector) == 0x000308, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_GetVectorFromIndex_Vector' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, Temp_object_Variable) == 0x000318, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_GetMaxSpeed_ReturnValue) == 0x000328, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_GetMaxSpeed_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_ApplyRadialDamageWithFalloff_ReturnValue) == 0x00032C, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_ApplyRadialDamageWithFalloff_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_GetForwardVector_ReturnValue) == 0x000330, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00033C, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_K2_GetComponentLocation_ReturnValue6) == 0x000348, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_K2_GetComponentLocation_ReturnValue6' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000354, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_Normal_ReturnValue) == 0x000360, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_BreakVector_X1) == 0x00036C, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_BreakVector_X1' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_BreakVector_Y1) == 0x000370, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_BreakVector_Y1' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_BreakVector_Z1) == 0x000374, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_BreakVector_Z1' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_MakeVector_ReturnValue1) == 0x000378, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_MakeVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000390, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_Normal_ReturnValue1) == 0x0003C0, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_Normal_ReturnValue1' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_BreakTransform_Location) == 0x0003CC, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_BreakTransform_Rotation) == 0x0003D8, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_BreakTransform_Scale) == 0x0003E4, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_Multiply_VectorFloat_ReturnValue1) == 0x0003F0, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_Multiply_VectorFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_SpawnParticle_ReturnValue1) == 0x000400, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_SpawnParticle_ReturnValue1' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_Add_VectorVector_ReturnValue) == 0x000408, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile, CallFunc_Add_VectorVector_ReturnValue1) == 0x000414, "Member 'AI_Ape_Missile_C_ExecuteUbergraph_AI_Ape_Missile::CallFunc_Add_VectorVector_ReturnValue1' has a wrong offset!");

// Function AI_Ape_Missile.AI_Ape_Missile_C.EnableFX
// 0x0001 (0x0001 - 0x0000)
struct AI_Ape_Missile_C_EnableFX final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AI_Ape_Missile_C_EnableFX) == 0x000001, "Wrong alignment on AI_Ape_Missile_C_EnableFX");
static_assert(sizeof(AI_Ape_Missile_C_EnableFX) == 0x000001, "Wrong size on AI_Ape_Missile_C_EnableFX");
static_assert(offsetof(AI_Ape_Missile_C_EnableFX, IsEnable) == 0x000000, "Member 'AI_Ape_Missile_C_EnableFX::IsEnable' has a wrong offset!");

// Function AI_Ape_Missile.AI_Ape_Missile_C.PlayFX
// 0x0010 (0x0010 - 0x0000)
struct AI_Ape_Missile_C_PlayFX final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsShootByPlayerGun;                                // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AI_Ape_Missile_C_PlayFX) == 0x000004, "Wrong alignment on AI_Ape_Missile_C_PlayFX");
static_assert(sizeof(AI_Ape_Missile_C_PlayFX) == 0x000010, "Wrong size on AI_Ape_Missile_C_PlayFX");
static_assert(offsetof(AI_Ape_Missile_C_PlayFX, Location) == 0x000000, "Member 'AI_Ape_Missile_C_PlayFX::Location' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_PlayFX, IsShootByPlayerGun) == 0x00000C, "Member 'AI_Ape_Missile_C_PlayFX::IsShootByPlayerGun' has a wrong offset!");

// Function AI_Ape_Missile.AI_Ape_Missile_C.BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature
// 0x00B0 (0x00B0 - 0x0000)
struct AI_Ape_Missile_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             Hit;                                               // 0x0028(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(AI_Ape_Missile_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature) == 0x000008, "Wrong alignment on AI_Ape_Missile_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature");
static_assert(sizeof(AI_Ape_Missile_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature) == 0x0000B0, "Wrong size on AI_Ape_Missile_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature");
static_assert(offsetof(AI_Ape_Missile_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature, HitComponent) == 0x000000, "Member 'AI_Ape_Missile_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature::HitComponent' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'AI_Ape_Missile_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'AI_Ape_Missile_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature, NormalImpulse) == 0x000018, "Member 'AI_Ape_Missile_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature::NormalImpulse' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature, Hit) == 0x000028, "Member 'AI_Ape_Missile_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature::Hit' has a wrong offset!");

// Function AI_Ape_Missile.AI_Ape_Missile_C.AddDamge
// 0x0270 (0x0270 - 0x0000)
struct AI_Ape_Missile_C_AddDamge final
{
public:
	float                                         FinalDamage;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_CharacterBase_C*                    TargetPlayer;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damge;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DamgeDistance;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue1;     // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue1;         // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue2;         // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue3;         // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue4;         // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue1;         // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue1;          // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue5;         // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0068(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue6;         // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHitResult>                     CallFunc_SphereTraceMulti_OutHits;                 // 0x0080(0x0010)(ZeroConstructor, ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceMulti_ReturnValue;             // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_Array_Get_Item;                           // 0x0098(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0122(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_123[0x1];                                      // 0x0123(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x012C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0138(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0144(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0150(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15C[0x4];                                      // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0170(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0188(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0194(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x01A0(0x0010)(ZeroConstructor, ReferenceParm)
	class ABP_CharacterBase_C*                    K2Node_DynamicCast_AsBP_Character_Base;            // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B9[0x3];                                      // 0x01B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue2;     // 0x01BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1C9[0x7];                                      // 0x01C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x01D0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x0258(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_259[0x3];                                      // 0x0259(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x025C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0268(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AI_Ape_Missile_C_AddDamge) == 0x000008, "Wrong alignment on AI_Ape_Missile_C_AddDamge");
static_assert(sizeof(AI_Ape_Missile_C_AddDamge) == 0x000270, "Wrong size on AI_Ape_Missile_C_AddDamge");
static_assert(offsetof(AI_Ape_Missile_C_AddDamge, FinalDamage) == 0x000000, "Member 'AI_Ape_Missile_C_AddDamge::FinalDamage' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_AddDamge, TargetPlayer) == 0x000008, "Member 'AI_Ape_Missile_C_AddDamge::TargetPlayer' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_AddDamge, Damge) == 0x000010, "Member 'AI_Ape_Missile_C_AddDamge::Damge' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_AddDamge, DamgeDistance) == 0x000014, "Member 'AI_Ape_Missile_C_AddDamge::DamgeDistance' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_AddDamge, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'AI_Ape_Missile_C_AddDamge::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_AddDamge, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'AI_Ape_Missile_C_AddDamge::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_AddDamge, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000020, "Member 'AI_Ape_Missile_C_AddDamge::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_AddDamge, CallFunc_K2_GetComponentLocation_ReturnValue1) == 0x00002C, "Member 'AI_Ape_Missile_C_AddDamge::CallFunc_K2_GetComponentLocation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_AddDamge, Temp_int_Array_Index_Variable) == 0x000038, "Member 'AI_Ape_Missile_C_AddDamge::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_AddDamge, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00003C, "Member 'AI_Ape_Missile_C_AddDamge::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_AddDamge, CallFunc_Multiply_FloatFloat_ReturnValue1) == 0x000040, "Member 'AI_Ape_Missile_C_AddDamge::CallFunc_Multiply_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_AddDamge, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000044, "Member 'AI_Ape_Missile_C_AddDamge::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_AddDamge, CallFunc_Multiply_FloatFloat_ReturnValue2) == 0x000048, "Member 'AI_Ape_Missile_C_AddDamge::CallFunc_Multiply_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_AddDamge, CallFunc_Multiply_FloatFloat_ReturnValue3) == 0x00004C, "Member 'AI_Ape_Missile_C_AddDamge::CallFunc_Multiply_FloatFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_AddDamge, CallFunc_Multiply_FloatFloat_ReturnValue4) == 0x000050, "Member 'AI_Ape_Missile_C_AddDamge::CallFunc_Multiply_FloatFloat_ReturnValue4' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_AddDamge, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000054, "Member 'AI_Ape_Missile_C_AddDamge::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_AddDamge, CallFunc_Subtract_FloatFloat_ReturnValue1) == 0x000058, "Member 'AI_Ape_Missile_C_AddDamge::CallFunc_Subtract_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_AddDamge, CallFunc_Greater_FloatFloat_ReturnValue1) == 0x00005C, "Member 'AI_Ape_Missile_C_AddDamge::CallFunc_Greater_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_AddDamge, CallFunc_Multiply_FloatFloat_ReturnValue5) == 0x000060, "Member 'AI_Ape_Missile_C_AddDamge::CallFunc_Multiply_FloatFloat_ReturnValue5' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_AddDamge, Temp_object_Variable) == 0x000068, "Member 'AI_Ape_Missile_C_AddDamge::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_AddDamge, CallFunc_Multiply_FloatFloat_ReturnValue6) == 0x000078, "Member 'AI_Ape_Missile_C_AddDamge::CallFunc_Multiply_FloatFloat_ReturnValue6' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_AddDamge, CallFunc_SphereTraceMulti_OutHits) == 0x000080, "Member 'AI_Ape_Missile_C_AddDamge::CallFunc_SphereTraceMulti_OutHits' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_AddDamge, CallFunc_SphereTraceMulti_ReturnValue) == 0x000090, "Member 'AI_Ape_Missile_C_AddDamge::CallFunc_SphereTraceMulti_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_AddDamge, CallFunc_Array_Length_ReturnValue) == 0x000094, "Member 'AI_Ape_Missile_C_AddDamge::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_AddDamge, CallFunc_Array_Get_Item) == 0x000098, "Member 'AI_Ape_Missile_C_AddDamge::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_AddDamge, CallFunc_Less_IntInt_ReturnValue) == 0x000120, "Member 'AI_Ape_Missile_C_AddDamge::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_AddDamge, CallFunc_BreakHitResult_bBlockingHit) == 0x000121, "Member 'AI_Ape_Missile_C_AddDamge::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_AddDamge, CallFunc_BreakHitResult_bInitialOverlap) == 0x000122, "Member 'AI_Ape_Missile_C_AddDamge::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_AddDamge, CallFunc_BreakHitResult_Time) == 0x000124, "Member 'AI_Ape_Missile_C_AddDamge::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_AddDamge, CallFunc_BreakHitResult_Distance) == 0x000128, "Member 'AI_Ape_Missile_C_AddDamge::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_AddDamge, CallFunc_BreakHitResult_Location) == 0x00012C, "Member 'AI_Ape_Missile_C_AddDamge::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_AddDamge, CallFunc_BreakHitResult_ImpactPoint) == 0x000138, "Member 'AI_Ape_Missile_C_AddDamge::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_AddDamge, CallFunc_BreakHitResult_Normal) == 0x000144, "Member 'AI_Ape_Missile_C_AddDamge::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_AddDamge, CallFunc_BreakHitResult_ImpactNormal) == 0x000150, "Member 'AI_Ape_Missile_C_AddDamge::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_AddDamge, CallFunc_BreakHitResult_PhysMat) == 0x000160, "Member 'AI_Ape_Missile_C_AddDamge::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_AddDamge, CallFunc_BreakHitResult_HitActor) == 0x000168, "Member 'AI_Ape_Missile_C_AddDamge::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_AddDamge, CallFunc_BreakHitResult_HitComponent) == 0x000170, "Member 'AI_Ape_Missile_C_AddDamge::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_AddDamge, CallFunc_BreakHitResult_HitBoneName) == 0x000178, "Member 'AI_Ape_Missile_C_AddDamge::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_AddDamge, CallFunc_BreakHitResult_HitItem) == 0x000180, "Member 'AI_Ape_Missile_C_AddDamge::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_AddDamge, CallFunc_BreakHitResult_FaceIndex) == 0x000184, "Member 'AI_Ape_Missile_C_AddDamge::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_AddDamge, CallFunc_BreakHitResult_TraceStart) == 0x000188, "Member 'AI_Ape_Missile_C_AddDamge::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_AddDamge, CallFunc_BreakHitResult_TraceEnd) == 0x000194, "Member 'AI_Ape_Missile_C_AddDamge::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_AddDamge, K2Node_MakeArray_Array) == 0x0001A0, "Member 'AI_Ape_Missile_C_AddDamge::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_AddDamge, K2Node_DynamicCast_AsBP_Character_Base) == 0x0001B0, "Member 'AI_Ape_Missile_C_AddDamge::K2Node_DynamicCast_AsBP_Character_Base' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_AddDamge, K2Node_DynamicCast_bSuccess) == 0x0001B8, "Member 'AI_Ape_Missile_C_AddDamge::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_AddDamge, CallFunc_K2_GetComponentLocation_ReturnValue2) == 0x0001BC, "Member 'AI_Ape_Missile_C_AddDamge::CallFunc_K2_GetComponentLocation_ReturnValue2' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_AddDamge, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0001C8, "Member 'AI_Ape_Missile_C_AddDamge::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_AddDamge, CallFunc_LineTraceSingle_OutHit) == 0x0001D0, "Member 'AI_Ape_Missile_C_AddDamge::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_AddDamge, CallFunc_LineTraceSingle_ReturnValue) == 0x000258, "Member 'AI_Ape_Missile_C_AddDamge::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_AddDamge, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00025C, "Member 'AI_Ape_Missile_C_AddDamge::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_AddDamge, CallFunc_VSize_ReturnValue) == 0x000268, "Member 'AI_Ape_Missile_C_AddDamge::CallFunc_VSize_ReturnValue' has a wrong offset!");

// Function AI_Ape_Missile.AI_Ape_Missile_C.HasBlock?
// 0x0228 (0x0228 - 0x0000)
struct AI_Ape_Missile_C_HasBlock_ final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                TargetPlayer;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue1;     // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0038(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	TArray<struct FHitResult>                     CallFunc_SphereTraceMulti_OutHits;                 // 0x0048(0x0010)(ZeroConstructor, ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceMulti_ReturnValue;             // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_Array_Get_Item;                           // 0x0060(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_EB[0x1];                                       // 0x00EB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0100(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x010C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0118(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0138(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0150(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x015C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x0168(0x0010)(ZeroConstructor, ReferenceParm)
	class ABP_CharacterBase_C*                    K2Node_DynamicCast_AsBP_Character_Base;            // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_181[0x3];                                      // 0x0181(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue2;     // 0x0184(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_191[0x7];                                      // 0x0191(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x0198(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AI_Ape_Missile_C_HasBlock_) == 0x000008, "Wrong alignment on AI_Ape_Missile_C_HasBlock_");
static_assert(sizeof(AI_Ape_Missile_C_HasBlock_) == 0x000228, "Wrong size on AI_Ape_Missile_C_HasBlock_");
static_assert(offsetof(AI_Ape_Missile_C_HasBlock_, Result) == 0x000000, "Member 'AI_Ape_Missile_C_HasBlock_::Result' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_HasBlock_, TargetPlayer) == 0x000008, "Member 'AI_Ape_Missile_C_HasBlock_::TargetPlayer' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_HasBlock_, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'AI_Ape_Missile_C_HasBlock_::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_HasBlock_, Temp_int_Array_Index_Variable) == 0x000014, "Member 'AI_Ape_Missile_C_HasBlock_::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_HasBlock_, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'AI_Ape_Missile_C_HasBlock_::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_HasBlock_, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x00001C, "Member 'AI_Ape_Missile_C_HasBlock_::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_HasBlock_, CallFunc_K2_GetComponentLocation_ReturnValue1) == 0x000028, "Member 'AI_Ape_Missile_C_HasBlock_::CallFunc_K2_GetComponentLocation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_HasBlock_, Temp_object_Variable) == 0x000038, "Member 'AI_Ape_Missile_C_HasBlock_::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_HasBlock_, CallFunc_SphereTraceMulti_OutHits) == 0x000048, "Member 'AI_Ape_Missile_C_HasBlock_::CallFunc_SphereTraceMulti_OutHits' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_HasBlock_, CallFunc_SphereTraceMulti_ReturnValue) == 0x000058, "Member 'AI_Ape_Missile_C_HasBlock_::CallFunc_SphereTraceMulti_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_HasBlock_, CallFunc_Array_Length_ReturnValue) == 0x00005C, "Member 'AI_Ape_Missile_C_HasBlock_::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_HasBlock_, CallFunc_Array_Get_Item) == 0x000060, "Member 'AI_Ape_Missile_C_HasBlock_::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_HasBlock_, CallFunc_Less_IntInt_ReturnValue) == 0x0000E8, "Member 'AI_Ape_Missile_C_HasBlock_::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_HasBlock_, CallFunc_BreakHitResult_bBlockingHit) == 0x0000E9, "Member 'AI_Ape_Missile_C_HasBlock_::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_HasBlock_, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000EA, "Member 'AI_Ape_Missile_C_HasBlock_::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_HasBlock_, CallFunc_BreakHitResult_Time) == 0x0000EC, "Member 'AI_Ape_Missile_C_HasBlock_::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_HasBlock_, CallFunc_BreakHitResult_Distance) == 0x0000F0, "Member 'AI_Ape_Missile_C_HasBlock_::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_HasBlock_, CallFunc_BreakHitResult_Location) == 0x0000F4, "Member 'AI_Ape_Missile_C_HasBlock_::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_HasBlock_, CallFunc_BreakHitResult_ImpactPoint) == 0x000100, "Member 'AI_Ape_Missile_C_HasBlock_::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_HasBlock_, CallFunc_BreakHitResult_Normal) == 0x00010C, "Member 'AI_Ape_Missile_C_HasBlock_::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_HasBlock_, CallFunc_BreakHitResult_ImpactNormal) == 0x000118, "Member 'AI_Ape_Missile_C_HasBlock_::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_HasBlock_, CallFunc_BreakHitResult_PhysMat) == 0x000128, "Member 'AI_Ape_Missile_C_HasBlock_::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_HasBlock_, CallFunc_BreakHitResult_HitActor) == 0x000130, "Member 'AI_Ape_Missile_C_HasBlock_::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_HasBlock_, CallFunc_BreakHitResult_HitComponent) == 0x000138, "Member 'AI_Ape_Missile_C_HasBlock_::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_HasBlock_, CallFunc_BreakHitResult_HitBoneName) == 0x000140, "Member 'AI_Ape_Missile_C_HasBlock_::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_HasBlock_, CallFunc_BreakHitResult_HitItem) == 0x000148, "Member 'AI_Ape_Missile_C_HasBlock_::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_HasBlock_, CallFunc_BreakHitResult_FaceIndex) == 0x00014C, "Member 'AI_Ape_Missile_C_HasBlock_::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_HasBlock_, CallFunc_BreakHitResult_TraceStart) == 0x000150, "Member 'AI_Ape_Missile_C_HasBlock_::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_HasBlock_, CallFunc_BreakHitResult_TraceEnd) == 0x00015C, "Member 'AI_Ape_Missile_C_HasBlock_::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_HasBlock_, K2Node_MakeArray_Array) == 0x000168, "Member 'AI_Ape_Missile_C_HasBlock_::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_HasBlock_, K2Node_DynamicCast_AsBP_Character_Base) == 0x000178, "Member 'AI_Ape_Missile_C_HasBlock_::K2Node_DynamicCast_AsBP_Character_Base' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_HasBlock_, K2Node_DynamicCast_bSuccess) == 0x000180, "Member 'AI_Ape_Missile_C_HasBlock_::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_HasBlock_, CallFunc_K2_GetComponentLocation_ReturnValue2) == 0x000184, "Member 'AI_Ape_Missile_C_HasBlock_::CallFunc_K2_GetComponentLocation_ReturnValue2' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_HasBlock_, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000190, "Member 'AI_Ape_Missile_C_HasBlock_::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_HasBlock_, CallFunc_LineTraceSingle_OutHit) == 0x000198, "Member 'AI_Ape_Missile_C_HasBlock_::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_HasBlock_, CallFunc_LineTraceSingle_ReturnValue) == 0x000220, "Member 'AI_Ape_Missile_C_HasBlock_::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");

// Function AI_Ape_Missile.AI_Ape_Missile_C.HeadToTargetLocation
// 0x006C (0x006C - 0x0000)
struct AI_Ape_Missile_C_HeadToTargetLocation final
{
public:
	struct FVector                                TargetLocation;                                    // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Distance_Between_Locations_Distance;      // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_RLerp_ReturnValue;                        // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue1;         // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AI_Ape_Missile_C_HeadToTargetLocation) == 0x000004, "Wrong alignment on AI_Ape_Missile_C_HeadToTargetLocation");
static_assert(sizeof(AI_Ape_Missile_C_HeadToTargetLocation) == 0x00006C, "Wrong size on AI_Ape_Missile_C_HeadToTargetLocation");
static_assert(offsetof(AI_Ape_Missile_C_HeadToTargetLocation, TargetLocation) == 0x000000, "Member 'AI_Ape_Missile_C_HeadToTargetLocation::TargetLocation' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_HeadToTargetLocation, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00000C, "Member 'AI_Ape_Missile_C_HeadToTargetLocation::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_HeadToTargetLocation, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000010, "Member 'AI_Ape_Missile_C_HeadToTargetLocation::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_HeadToTargetLocation, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x00001C, "Member 'AI_Ape_Missile_C_HeadToTargetLocation::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_HeadToTargetLocation, CallFunc_Distance_Between_Locations_Distance) == 0x000028, "Member 'AI_Ape_Missile_C_HeadToTargetLocation::CallFunc_Distance_Between_Locations_Distance' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_HeadToTargetLocation, CallFunc_FindLookAtRotation_ReturnValue) == 0x00002C, "Member 'AI_Ape_Missile_C_HeadToTargetLocation::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_HeadToTargetLocation, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000038, "Member 'AI_Ape_Missile_C_HeadToTargetLocation::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_HeadToTargetLocation, CallFunc_RLerp_ReturnValue) == 0x00003C, "Member 'AI_Ape_Missile_C_HeadToTargetLocation::CallFunc_RLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_HeadToTargetLocation, CallFunc_BooleanAND_ReturnValue) == 0x000048, "Member 'AI_Ape_Missile_C_HeadToTargetLocation::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_HeadToTargetLocation, CallFunc_GetForwardVector_ReturnValue) == 0x00004C, "Member 'AI_Ape_Missile_C_HeadToTargetLocation::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_HeadToTargetLocation, CallFunc_Multiply_FloatFloat_ReturnValue1) == 0x000058, "Member 'AI_Ape_Missile_C_HeadToTargetLocation::CallFunc_Multiply_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_HeadToTargetLocation, CallFunc_FClamp_ReturnValue) == 0x00005C, "Member 'AI_Ape_Missile_C_HeadToTargetLocation::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_HeadToTargetLocation, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000060, "Member 'AI_Ape_Missile_C_HeadToTargetLocation::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");

// Function AI_Ape_Missile.AI_Ape_Missile_C.SetSpeed
// 0x001C (0x001C - 0x0000)
struct AI_Ape_Missile_C_SetSpeed final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue1;         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AI_Ape_Missile_C_SetSpeed) == 0x000004, "Wrong alignment on AI_Ape_Missile_C_SetSpeed");
static_assert(sizeof(AI_Ape_Missile_C_SetSpeed) == 0x00001C, "Wrong size on AI_Ape_Missile_C_SetSpeed");
static_assert(offsetof(AI_Ape_Missile_C_SetSpeed, Temp_bool_Variable) == 0x000000, "Member 'AI_Ape_Missile_C_SetSpeed::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_SetSpeed, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000004, "Member 'AI_Ape_Missile_C_SetSpeed::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_SetSpeed, CallFunc_Add_FloatFloat_ReturnValue) == 0x000008, "Member 'AI_Ape_Missile_C_SetSpeed::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_SetSpeed, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00000C, "Member 'AI_Ape_Missile_C_SetSpeed::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_SetSpeed, CallFunc_Multiply_FloatFloat_ReturnValue1) == 0x000010, "Member 'AI_Ape_Missile_C_SetSpeed::CallFunc_Multiply_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_SetSpeed, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000014, "Member 'AI_Ape_Missile_C_SetSpeed::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_SetSpeed, K2Node_Select_Default) == 0x000018, "Member 'AI_Ape_Missile_C_SetSpeed::K2Node_Select_Default' has a wrong offset!");

// Function AI_Ape_Missile.AI_Ape_Missile_C.GetVectorFromIndex
// 0x00BC (0x00BC - 0x0000)
struct AI_Ape_Missile_C_GetVectorFromIndex final
{
public:
	struct FVector                                Vector;                                            // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue1;     // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRightVector_ReturnValue;               // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue1;                  // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue1;        // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue2;        // 0x0098(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue1;            // 0x00A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue3;        // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AI_Ape_Missile_C_GetVectorFromIndex) == 0x000004, "Wrong alignment on AI_Ape_Missile_C_GetVectorFromIndex");
static_assert(sizeof(AI_Ape_Missile_C_GetVectorFromIndex) == 0x0000BC, "Wrong size on AI_Ape_Missile_C_GetVectorFromIndex");
static_assert(offsetof(AI_Ape_Missile_C_GetVectorFromIndex, Vector) == 0x000000, "Member 'AI_Ape_Missile_C_GetVectorFromIndex::Vector' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_GetVectorFromIndex, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x00000C, "Member 'AI_Ape_Missile_C_GetVectorFromIndex::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_GetVectorFromIndex, CallFunc_K2_GetComponentLocation_ReturnValue1) == 0x000018, "Member 'AI_Ape_Missile_C_GetVectorFromIndex::CallFunc_K2_GetComponentLocation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_GetVectorFromIndex, CallFunc_FindLookAtRotation_ReturnValue) == 0x000024, "Member 'AI_Ape_Missile_C_GetVectorFromIndex::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_GetVectorFromIndex, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000030, "Member 'AI_Ape_Missile_C_GetVectorFromIndex::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_GetVectorFromIndex, CallFunc_GetRightVector_ReturnValue) == 0x000034, "Member 'AI_Ape_Missile_C_GetVectorFromIndex::CallFunc_GetRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_GetVectorFromIndex, CallFunc_MakeVector_ReturnValue) == 0x000040, "Member 'AI_Ape_Missile_C_GetVectorFromIndex::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_GetVectorFromIndex, CallFunc_BreakVector_X) == 0x00004C, "Member 'AI_Ape_Missile_C_GetVectorFromIndex::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_GetVectorFromIndex, CallFunc_BreakVector_Y) == 0x000050, "Member 'AI_Ape_Missile_C_GetVectorFromIndex::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_GetVectorFromIndex, CallFunc_BreakVector_Z) == 0x000054, "Member 'AI_Ape_Missile_C_GetVectorFromIndex::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_GetVectorFromIndex, CallFunc_MakeVector_ReturnValue1) == 0x000058, "Member 'AI_Ape_Missile_C_GetVectorFromIndex::CallFunc_MakeVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_GetVectorFromIndex, K2Node_SwitchInteger_CmpSuccess) == 0x000064, "Member 'AI_Ape_Missile_C_GetVectorFromIndex::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_GetVectorFromIndex, CallFunc_Normal_ReturnValue) == 0x000068, "Member 'AI_Ape_Missile_C_GetVectorFromIndex::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_GetVectorFromIndex, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000074, "Member 'AI_Ape_Missile_C_GetVectorFromIndex::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_GetVectorFromIndex, CallFunc_Multiply_VectorFloat_ReturnValue1) == 0x000080, "Member 'AI_Ape_Missile_C_GetVectorFromIndex::CallFunc_Multiply_VectorFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_GetVectorFromIndex, CallFunc_Add_VectorVector_ReturnValue) == 0x00008C, "Member 'AI_Ape_Missile_C_GetVectorFromIndex::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_GetVectorFromIndex, CallFunc_Multiply_VectorFloat_ReturnValue2) == 0x000098, "Member 'AI_Ape_Missile_C_GetVectorFromIndex::CallFunc_Multiply_VectorFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_GetVectorFromIndex, CallFunc_Add_VectorVector_ReturnValue1) == 0x0000A4, "Member 'AI_Ape_Missile_C_GetVectorFromIndex::CallFunc_Add_VectorVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(AI_Ape_Missile_C_GetVectorFromIndex, CallFunc_Multiply_VectorFloat_ReturnValue3) == 0x0000B0, "Member 'AI_Ape_Missile_C_GetVectorFromIndex::CallFunc_Multiply_VectorFloat_ReturnValue3' has a wrong offset!");

// Function AI_Ape_Missile.AI_Ape_Missile_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct AI_Ape_Missile_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AI_Ape_Missile_C_ReceiveTick) == 0x000004, "Wrong alignment on AI_Ape_Missile_C_ReceiveTick");
static_assert(sizeof(AI_Ape_Missile_C_ReceiveTick) == 0x000004, "Wrong size on AI_Ape_Missile_C_ReceiveTick");
static_assert(offsetof(AI_Ape_Missile_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'AI_Ape_Missile_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

}

