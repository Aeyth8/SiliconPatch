#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PVP_DroneSpline

#include "Basic.hpp"

#include "SiliconRising_structs.hpp"
#include "Struct_DroneSpawnConfig_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PVP_DroneSpline.BP_PVP_DroneSpline_C
// 0x0050 (0x0378 - 0x0328)
class ABP_PVP_DroneSpline_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0328(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USplineComponent*                       Spline;                                            // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Distance;                                          // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_344[0x4];                                      // 0x0344(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FStruct_DroneSpawnConfig>       SpawnConfig;                                       // 0x0348(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FStruct_DroneSpawnConfig>       SpawnConfigSorted;                                 // 0x0358(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                         TempWeight;                                        // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TempIndex;                                         // 0x036C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Len;                                               // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_PVP_DroneSpline(int32 EntryPoint);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void GetDroneWeaponType(EItemTypes* WeaponType);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PVP_DroneSpline_C">();
	}
	static class ABP_PVP_DroneSpline_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PVP_DroneSpline_C>();
	}
};
static_assert(alignof(ABP_PVP_DroneSpline_C) == 0x000008, "Wrong alignment on ABP_PVP_DroneSpline_C");
static_assert(sizeof(ABP_PVP_DroneSpline_C) == 0x000378, "Wrong size on ABP_PVP_DroneSpline_C");
static_assert(offsetof(ABP_PVP_DroneSpline_C, UberGraphFrame) == 0x000328, "Member 'ABP_PVP_DroneSpline_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_PVP_DroneSpline_C, Spline) == 0x000330, "Member 'ABP_PVP_DroneSpline_C::Spline' has a wrong offset!");
static_assert(offsetof(ABP_PVP_DroneSpline_C, DefaultSceneRoot) == 0x000338, "Member 'ABP_PVP_DroneSpline_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_PVP_DroneSpline_C, Distance) == 0x000340, "Member 'ABP_PVP_DroneSpline_C::Distance' has a wrong offset!");
static_assert(offsetof(ABP_PVP_DroneSpline_C, SpawnConfig) == 0x000348, "Member 'ABP_PVP_DroneSpline_C::SpawnConfig' has a wrong offset!");
static_assert(offsetof(ABP_PVP_DroneSpline_C, SpawnConfigSorted) == 0x000358, "Member 'ABP_PVP_DroneSpline_C::SpawnConfigSorted' has a wrong offset!");
static_assert(offsetof(ABP_PVP_DroneSpline_C, TempWeight) == 0x000368, "Member 'ABP_PVP_DroneSpline_C::TempWeight' has a wrong offset!");
static_assert(offsetof(ABP_PVP_DroneSpline_C, TempIndex) == 0x00036C, "Member 'ABP_PVP_DroneSpline_C::TempIndex' has a wrong offset!");
static_assert(offsetof(ABP_PVP_DroneSpline_C, Len) == 0x000370, "Member 'ABP_PVP_DroneSpline_C::Len' has a wrong offset!");

}

