#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SiliconRising

#include "Basic.hpp"

#include "AIModule_structs.hpp"
#include "SiliconRising_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function SiliconRising.FlatBuffersYYMsgObjectPropertyVector2.PackObjectPropertyVector2
// 0x0040 (0x0040 - 0x0000)
struct FlatBuffersYYMsgObjectPropertyVector2_PackObjectPropertyVector2 final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgObjectPropertyVector2            InUE4Data;                                         // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgObjectPropertyVector2_PackObjectPropertyVector2) == 0x000008, "Wrong alignment on FlatBuffersYYMsgObjectPropertyVector2_PackObjectPropertyVector2");
static_assert(sizeof(FlatBuffersYYMsgObjectPropertyVector2_PackObjectPropertyVector2) == 0x000040, "Wrong size on FlatBuffersYYMsgObjectPropertyVector2_PackObjectPropertyVector2");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyVector2_PackObjectPropertyVector2, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgObjectPropertyVector2_PackObjectPropertyVector2::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyVector2_PackObjectPropertyVector2, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgObjectPropertyVector2_PackObjectPropertyVector2::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyVector2_PackObjectPropertyVector2, OutData) == 0x000028, "Member 'FlatBuffersYYMsgObjectPropertyVector2_PackObjectPropertyVector2::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyVector2_PackObjectPropertyVector2, ReturnValue) == 0x000038, "Member 'FlatBuffersYYMsgObjectPropertyVector2_PackObjectPropertyVector2::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgObjectPropertyVector2.UnpackObjectPropertyVector2
// 0x0040 (0x0040 - 0x0000)
struct FlatBuffersYYMsgObjectPropertyVector2_UnpackObjectPropertyVector2 final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgObjectPropertyVector2            OutUE4Data;                                        // 0x0018(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgObjectPropertyVector2_UnpackObjectPropertyVector2) == 0x000008, "Wrong alignment on FlatBuffersYYMsgObjectPropertyVector2_UnpackObjectPropertyVector2");
static_assert(sizeof(FlatBuffersYYMsgObjectPropertyVector2_UnpackObjectPropertyVector2) == 0x000040, "Wrong size on FlatBuffersYYMsgObjectPropertyVector2_UnpackObjectPropertyVector2");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyVector2_UnpackObjectPropertyVector2, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgObjectPropertyVector2_UnpackObjectPropertyVector2::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyVector2_UnpackObjectPropertyVector2, InData) == 0x000008, "Member 'FlatBuffersYYMsgObjectPropertyVector2_UnpackObjectPropertyVector2::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyVector2_UnpackObjectPropertyVector2, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgObjectPropertyVector2_UnpackObjectPropertyVector2::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyVector2_UnpackObjectPropertyVector2, ReturnValue) == 0x000038, "Member 'FlatBuffersYYMsgObjectPropertyVector2_UnpackObjectPropertyVector2::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgObjectRecordString.PackObjectRecordString
// 0x0050 (0x0050 - 0x0000)
struct FlatBuffersYYMsgObjectRecordString_PackObjectRecordString final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgObjectRecordString               InUE4Data;                                         // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgObjectRecordString_PackObjectRecordString) == 0x000008, "Wrong alignment on FlatBuffersYYMsgObjectRecordString_PackObjectRecordString");
static_assert(sizeof(FlatBuffersYYMsgObjectRecordString_PackObjectRecordString) == 0x000050, "Wrong size on FlatBuffersYYMsgObjectRecordString_PackObjectRecordString");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordString_PackObjectRecordString, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgObjectRecordString_PackObjectRecordString::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordString_PackObjectRecordString, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgObjectRecordString_PackObjectRecordString::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordString_PackObjectRecordString, OutData) == 0x000038, "Member 'FlatBuffersYYMsgObjectRecordString_PackObjectRecordString::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordString_PackObjectRecordString, ReturnValue) == 0x000048, "Member 'FlatBuffersYYMsgObjectRecordString_PackObjectRecordString::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgObjectRecordString.UnpackObjectRecordString
// 0x0050 (0x0050 - 0x0000)
struct FlatBuffersYYMsgObjectRecordString_UnpackObjectRecordString final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgObjectRecordString               OutUE4Data;                                        // 0x0018(0x0030)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgObjectRecordString_UnpackObjectRecordString) == 0x000008, "Wrong alignment on FlatBuffersYYMsgObjectRecordString_UnpackObjectRecordString");
static_assert(sizeof(FlatBuffersYYMsgObjectRecordString_UnpackObjectRecordString) == 0x000050, "Wrong size on FlatBuffersYYMsgObjectRecordString_UnpackObjectRecordString");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordString_UnpackObjectRecordString, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgObjectRecordString_UnpackObjectRecordString::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordString_UnpackObjectRecordString, InData) == 0x000008, "Member 'FlatBuffersYYMsgObjectRecordString_UnpackObjectRecordString::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordString_UnpackObjectRecordString, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgObjectRecordString_UnpackObjectRecordString::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordString_UnpackObjectRecordString, ReturnValue) == 0x000048, "Member 'FlatBuffersYYMsgObjectRecordString_UnpackObjectRecordString::ReturnValue' has a wrong offset!");

// Function SiliconRising.BTT_MoveToBlackboardBase.BindReceiveMoveCompleted
// 0x0008 (0x0008 - 0x0000)
struct BTT_MoveToBlackboardBase_BindReceiveMoveCompleted final
{
public:
	class AAIController*                          AI_Controller;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTT_MoveToBlackboardBase_BindReceiveMoveCompleted) == 0x000008, "Wrong alignment on BTT_MoveToBlackboardBase_BindReceiveMoveCompleted");
static_assert(sizeof(BTT_MoveToBlackboardBase_BindReceiveMoveCompleted) == 0x000008, "Wrong size on BTT_MoveToBlackboardBase_BindReceiveMoveCompleted");
static_assert(offsetof(BTT_MoveToBlackboardBase_BindReceiveMoveCompleted, AI_Controller) == 0x000000, "Member 'BTT_MoveToBlackboardBase_BindReceiveMoveCompleted::AI_Controller' has a wrong offset!");

// Function SiliconRising.BTT_MoveToBlackboardBase.ReceiveMoveCompleted
// 0x0001 (0x0001 - 0x0000)
struct BTT_MoveToBlackboardBase_ReceiveMoveCompleted final
{
public:
	EPathFollowingResult                          Result;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTT_MoveToBlackboardBase_ReceiveMoveCompleted) == 0x000001, "Wrong alignment on BTT_MoveToBlackboardBase_ReceiveMoveCompleted");
static_assert(sizeof(BTT_MoveToBlackboardBase_ReceiveMoveCompleted) == 0x000001, "Wrong size on BTT_MoveToBlackboardBase_ReceiveMoveCompleted");
static_assert(offsetof(BTT_MoveToBlackboardBase_ReceiveMoveCompleted, Result) == 0x000000, "Member 'BTT_MoveToBlackboardBase_ReceiveMoveCompleted::Result' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgObjectRecordByte.PackObjectRecordByte
// 0x0050 (0x0050 - 0x0000)
struct FlatBuffersYYMsgObjectRecordByte_PackObjectRecordByte final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgObjectRecordByte                 InUE4Data;                                         // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgObjectRecordByte_PackObjectRecordByte) == 0x000008, "Wrong alignment on FlatBuffersYYMsgObjectRecordByte_PackObjectRecordByte");
static_assert(sizeof(FlatBuffersYYMsgObjectRecordByte_PackObjectRecordByte) == 0x000050, "Wrong size on FlatBuffersYYMsgObjectRecordByte_PackObjectRecordByte");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordByte_PackObjectRecordByte, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgObjectRecordByte_PackObjectRecordByte::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordByte_PackObjectRecordByte, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgObjectRecordByte_PackObjectRecordByte::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordByte_PackObjectRecordByte, OutData) == 0x000038, "Member 'FlatBuffersYYMsgObjectRecordByte_PackObjectRecordByte::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordByte_PackObjectRecordByte, ReturnValue) == 0x000048, "Member 'FlatBuffersYYMsgObjectRecordByte_PackObjectRecordByte::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgObjectRecordByte.UnpackObjectRecordByte
// 0x0050 (0x0050 - 0x0000)
struct FlatBuffersYYMsgObjectRecordByte_UnpackObjectRecordByte final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgObjectRecordByte                 OutUE4Data;                                        // 0x0018(0x0030)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgObjectRecordByte_UnpackObjectRecordByte) == 0x000008, "Wrong alignment on FlatBuffersYYMsgObjectRecordByte_UnpackObjectRecordByte");
static_assert(sizeof(FlatBuffersYYMsgObjectRecordByte_UnpackObjectRecordByte) == 0x000050, "Wrong size on FlatBuffersYYMsgObjectRecordByte_UnpackObjectRecordByte");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordByte_UnpackObjectRecordByte, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgObjectRecordByte_UnpackObjectRecordByte::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordByte_UnpackObjectRecordByte, InData) == 0x000008, "Member 'FlatBuffersYYMsgObjectRecordByte_UnpackObjectRecordByte::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordByte_UnpackObjectRecordByte, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgObjectRecordByte_UnpackObjectRecordByte::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordByte_UnpackObjectRecordByte, ReturnValue) == 0x000048, "Member 'FlatBuffersYYMsgObjectRecordByte_UnpackObjectRecordByte::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgObjectRecordObject.PackObjectRecordObject
// 0x0050 (0x0050 - 0x0000)
struct FlatBuffersYYMsgObjectRecordObject_PackObjectRecordObject final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgObjectRecordObject               InUE4Data;                                         // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgObjectRecordObject_PackObjectRecordObject) == 0x000008, "Wrong alignment on FlatBuffersYYMsgObjectRecordObject_PackObjectRecordObject");
static_assert(sizeof(FlatBuffersYYMsgObjectRecordObject_PackObjectRecordObject) == 0x000050, "Wrong size on FlatBuffersYYMsgObjectRecordObject_PackObjectRecordObject");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordObject_PackObjectRecordObject, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgObjectRecordObject_PackObjectRecordObject::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordObject_PackObjectRecordObject, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgObjectRecordObject_PackObjectRecordObject::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordObject_PackObjectRecordObject, OutData) == 0x000038, "Member 'FlatBuffersYYMsgObjectRecordObject_PackObjectRecordObject::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordObject_PackObjectRecordObject, ReturnValue) == 0x000048, "Member 'FlatBuffersYYMsgObjectRecordObject_PackObjectRecordObject::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgObjectRecordObject.UnpackObjectRecordObject
// 0x0050 (0x0050 - 0x0000)
struct FlatBuffersYYMsgObjectRecordObject_UnpackObjectRecordObject final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgObjectRecordObject               OutUE4Data;                                        // 0x0018(0x0030)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgObjectRecordObject_UnpackObjectRecordObject) == 0x000008, "Wrong alignment on FlatBuffersYYMsgObjectRecordObject_UnpackObjectRecordObject");
static_assert(sizeof(FlatBuffersYYMsgObjectRecordObject_UnpackObjectRecordObject) == 0x000050, "Wrong size on FlatBuffersYYMsgObjectRecordObject_UnpackObjectRecordObject");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordObject_UnpackObjectRecordObject, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgObjectRecordObject_UnpackObjectRecordObject::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordObject_UnpackObjectRecordObject, InData) == 0x000008, "Member 'FlatBuffersYYMsgObjectRecordObject_UnpackObjectRecordObject::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordObject_UnpackObjectRecordObject, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgObjectRecordObject_UnpackObjectRecordObject::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordObject_UnpackObjectRecordObject, ReturnValue) == 0x000048, "Member 'FlatBuffersYYMsgObjectRecordObject_UnpackObjectRecordObject::ReturnValue' has a wrong offset!");

// Function SiliconRising.CommandLineParametersBPLibrary.AppendToCommandLine
// 0x0010 (0x0010 - 0x0000)
struct CommandLineParametersBPLibrary_AppendToCommandLine final
{
public:
	class FString                                 argument;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommandLineParametersBPLibrary_AppendToCommandLine) == 0x000008, "Wrong alignment on CommandLineParametersBPLibrary_AppendToCommandLine");
static_assert(sizeof(CommandLineParametersBPLibrary_AppendToCommandLine) == 0x000010, "Wrong size on CommandLineParametersBPLibrary_AppendToCommandLine");
static_assert(offsetof(CommandLineParametersBPLibrary_AppendToCommandLine, argument) == 0x000000, "Member 'CommandLineParametersBPLibrary_AppendToCommandLine::argument' has a wrong offset!");

// Function SiliconRising.CommandLineParametersBPLibrary.CommandLineArgIntValue
// 0x0018 (0x0018 - 0x0000)
struct CommandLineParametersBPLibrary_CommandLineArgIntValue final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CommandLineParametersBPLibrary_CommandLineArgIntValue) == 0x000008, "Wrong alignment on CommandLineParametersBPLibrary_CommandLineArgIntValue");
static_assert(sizeof(CommandLineParametersBPLibrary_CommandLineArgIntValue) == 0x000018, "Wrong size on CommandLineParametersBPLibrary_CommandLineArgIntValue");
static_assert(offsetof(CommandLineParametersBPLibrary_CommandLineArgIntValue, Key) == 0x000000, "Member 'CommandLineParametersBPLibrary_CommandLineArgIntValue::Key' has a wrong offset!");
static_assert(offsetof(CommandLineParametersBPLibrary_CommandLineArgIntValue, Value) == 0x000010, "Member 'CommandLineParametersBPLibrary_CommandLineArgIntValue::Value' has a wrong offset!");
static_assert(offsetof(CommandLineParametersBPLibrary_CommandLineArgIntValue, ReturnValue) == 0x000014, "Member 'CommandLineParametersBPLibrary_CommandLineArgIntValue::ReturnValue' has a wrong offset!");

// Function SiliconRising.CommandLineParametersBPLibrary.CommandLineArgPresent
// 0x0018 (0x0018 - 0x0000)
struct CommandLineParametersBPLibrary_CommandLineArgPresent final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CommandLineParametersBPLibrary_CommandLineArgPresent) == 0x000008, "Wrong alignment on CommandLineParametersBPLibrary_CommandLineArgPresent");
static_assert(sizeof(CommandLineParametersBPLibrary_CommandLineArgPresent) == 0x000018, "Wrong size on CommandLineParametersBPLibrary_CommandLineArgPresent");
static_assert(offsetof(CommandLineParametersBPLibrary_CommandLineArgPresent, Key) == 0x000000, "Member 'CommandLineParametersBPLibrary_CommandLineArgPresent::Key' has a wrong offset!");
static_assert(offsetof(CommandLineParametersBPLibrary_CommandLineArgPresent, ReturnValue) == 0x000010, "Member 'CommandLineParametersBPLibrary_CommandLineArgPresent::ReturnValue' has a wrong offset!");

// Function SiliconRising.CommandLineParametersBPLibrary.CommandLineArgValue
// 0x0028 (0x0028 - 0x0000)
struct CommandLineParametersBPLibrary_CommandLineArgValue final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CommandLineParametersBPLibrary_CommandLineArgValue) == 0x000008, "Wrong alignment on CommandLineParametersBPLibrary_CommandLineArgValue");
static_assert(sizeof(CommandLineParametersBPLibrary_CommandLineArgValue) == 0x000028, "Wrong size on CommandLineParametersBPLibrary_CommandLineArgValue");
static_assert(offsetof(CommandLineParametersBPLibrary_CommandLineArgValue, Key) == 0x000000, "Member 'CommandLineParametersBPLibrary_CommandLineArgValue::Key' has a wrong offset!");
static_assert(offsetof(CommandLineParametersBPLibrary_CommandLineArgValue, Value) == 0x000010, "Member 'CommandLineParametersBPLibrary_CommandLineArgValue::Value' has a wrong offset!");
static_assert(offsetof(CommandLineParametersBPLibrary_CommandLineArgValue, ReturnValue) == 0x000020, "Member 'CommandLineParametersBPLibrary_CommandLineArgValue::ReturnValue' has a wrong offset!");

// Function SiliconRising.CommandLineParametersBPLibrary.GetFullCommandLine
// 0x0010 (0x0010 - 0x0000)
struct CommandLineParametersBPLibrary_GetFullCommandLine final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommandLineParametersBPLibrary_GetFullCommandLine) == 0x000008, "Wrong alignment on CommandLineParametersBPLibrary_GetFullCommandLine");
static_assert(sizeof(CommandLineParametersBPLibrary_GetFullCommandLine) == 0x000010, "Wrong size on CommandLineParametersBPLibrary_GetFullCommandLine");
static_assert(offsetof(CommandLineParametersBPLibrary_GetFullCommandLine, ReturnValue) == 0x000000, "Member 'CommandLineParametersBPLibrary_GetFullCommandLine::ReturnValue' has a wrong offset!");

// Function SiliconRising.CommandLineParametersBPLibrary.GetOriginalCommandLine
// 0x0010 (0x0010 - 0x0000)
struct CommandLineParametersBPLibrary_GetOriginalCommandLine final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommandLineParametersBPLibrary_GetOriginalCommandLine) == 0x000008, "Wrong alignment on CommandLineParametersBPLibrary_GetOriginalCommandLine");
static_assert(sizeof(CommandLineParametersBPLibrary_GetOriginalCommandLine) == 0x000010, "Wrong size on CommandLineParametersBPLibrary_GetOriginalCommandLine");
static_assert(offsetof(CommandLineParametersBPLibrary_GetOriginalCommandLine, ReturnValue) == 0x000000, "Member 'CommandLineParametersBPLibrary_GetOriginalCommandLine::ReturnValue' has a wrong offset!");

// Function SiliconRising.CommandLineParametersBPLibrary.SetFullCommandLine
// 0x0018 (0x0018 - 0x0000)
struct CommandLineParametersBPLibrary_SetFullCommandLine final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CommandLineParametersBPLibrary_SetFullCommandLine) == 0x000008, "Wrong alignment on CommandLineParametersBPLibrary_SetFullCommandLine");
static_assert(sizeof(CommandLineParametersBPLibrary_SetFullCommandLine) == 0x000018, "Wrong size on CommandLineParametersBPLibrary_SetFullCommandLine");
static_assert(offsetof(CommandLineParametersBPLibrary_SetFullCommandLine, Value) == 0x000000, "Member 'CommandLineParametersBPLibrary_SetFullCommandLine::Value' has a wrong offset!");
static_assert(offsetof(CommandLineParametersBPLibrary_SetFullCommandLine, ReturnValue) == 0x000010, "Member 'CommandLineParametersBPLibrary_SetFullCommandLine::ReturnValue' has a wrong offset!");

// Function SiliconRising.CryptBPLibrary.AES_CBC_DecryptBytesArray
// 0x0030 (0x0030 - 0x0000)
struct CryptBPLibrary_AES_CBC_DecryptBytesArray final
{
public:
	TArray<uint8>                                 BytesArray;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InitiationVector;                                  // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CryptBPLibrary_AES_CBC_DecryptBytesArray) == 0x000008, "Wrong alignment on CryptBPLibrary_AES_CBC_DecryptBytesArray");
static_assert(sizeof(CryptBPLibrary_AES_CBC_DecryptBytesArray) == 0x000030, "Wrong size on CryptBPLibrary_AES_CBC_DecryptBytesArray");
static_assert(offsetof(CryptBPLibrary_AES_CBC_DecryptBytesArray, BytesArray) == 0x000000, "Member 'CryptBPLibrary_AES_CBC_DecryptBytesArray::BytesArray' has a wrong offset!");
static_assert(offsetof(CryptBPLibrary_AES_CBC_DecryptBytesArray, InitiationVector) == 0x000010, "Member 'CryptBPLibrary_AES_CBC_DecryptBytesArray::InitiationVector' has a wrong offset!");
static_assert(offsetof(CryptBPLibrary_AES_CBC_DecryptBytesArray, ReturnValue) == 0x000020, "Member 'CryptBPLibrary_AES_CBC_DecryptBytesArray::ReturnValue' has a wrong offset!");

// Function SiliconRising.CryptBPLibrary.AES_CBC_DecryptBytesArrayToString
// 0x0030 (0x0030 - 0x0000)
struct CryptBPLibrary_AES_CBC_DecryptBytesArrayToString final
{
public:
	TArray<uint8>                                 BytesArray;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InitiationVector;                                  // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CryptBPLibrary_AES_CBC_DecryptBytesArrayToString) == 0x000008, "Wrong alignment on CryptBPLibrary_AES_CBC_DecryptBytesArrayToString");
static_assert(sizeof(CryptBPLibrary_AES_CBC_DecryptBytesArrayToString) == 0x000030, "Wrong size on CryptBPLibrary_AES_CBC_DecryptBytesArrayToString");
static_assert(offsetof(CryptBPLibrary_AES_CBC_DecryptBytesArrayToString, BytesArray) == 0x000000, "Member 'CryptBPLibrary_AES_CBC_DecryptBytesArrayToString::BytesArray' has a wrong offset!");
static_assert(offsetof(CryptBPLibrary_AES_CBC_DecryptBytesArrayToString, InitiationVector) == 0x000010, "Member 'CryptBPLibrary_AES_CBC_DecryptBytesArrayToString::InitiationVector' has a wrong offset!");
static_assert(offsetof(CryptBPLibrary_AES_CBC_DecryptBytesArrayToString, ReturnValue) == 0x000020, "Member 'CryptBPLibrary_AES_CBC_DecryptBytesArrayToString::ReturnValue' has a wrong offset!");

// Function SiliconRising.CryptBPLibrary.AES_CBC_EncryptBytesArray
// 0x0030 (0x0030 - 0x0000)
struct CryptBPLibrary_AES_CBC_EncryptBytesArray final
{
public:
	TArray<uint8>                                 BytesArray;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InitiationVector;                                  // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CryptBPLibrary_AES_CBC_EncryptBytesArray) == 0x000008, "Wrong alignment on CryptBPLibrary_AES_CBC_EncryptBytesArray");
static_assert(sizeof(CryptBPLibrary_AES_CBC_EncryptBytesArray) == 0x000030, "Wrong size on CryptBPLibrary_AES_CBC_EncryptBytesArray");
static_assert(offsetof(CryptBPLibrary_AES_CBC_EncryptBytesArray, BytesArray) == 0x000000, "Member 'CryptBPLibrary_AES_CBC_EncryptBytesArray::BytesArray' has a wrong offset!");
static_assert(offsetof(CryptBPLibrary_AES_CBC_EncryptBytesArray, InitiationVector) == 0x000010, "Member 'CryptBPLibrary_AES_CBC_EncryptBytesArray::InitiationVector' has a wrong offset!");
static_assert(offsetof(CryptBPLibrary_AES_CBC_EncryptBytesArray, ReturnValue) == 0x000020, "Member 'CryptBPLibrary_AES_CBC_EncryptBytesArray::ReturnValue' has a wrong offset!");

// Function SiliconRising.CryptBPLibrary.AES_CBC_EncryptStringToBytesArray
// 0x0030 (0x0030 - 0x0000)
struct CryptBPLibrary_AES_CBC_EncryptStringToBytesArray final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InitiationVector;                                  // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CryptBPLibrary_AES_CBC_EncryptStringToBytesArray) == 0x000008, "Wrong alignment on CryptBPLibrary_AES_CBC_EncryptStringToBytesArray");
static_assert(sizeof(CryptBPLibrary_AES_CBC_EncryptStringToBytesArray) == 0x000030, "Wrong size on CryptBPLibrary_AES_CBC_EncryptStringToBytesArray");
static_assert(offsetof(CryptBPLibrary_AES_CBC_EncryptStringToBytesArray, String) == 0x000000, "Member 'CryptBPLibrary_AES_CBC_EncryptStringToBytesArray::String' has a wrong offset!");
static_assert(offsetof(CryptBPLibrary_AES_CBC_EncryptStringToBytesArray, InitiationVector) == 0x000010, "Member 'CryptBPLibrary_AES_CBC_EncryptStringToBytesArray::InitiationVector' has a wrong offset!");
static_assert(offsetof(CryptBPLibrary_AES_CBC_EncryptStringToBytesArray, ReturnValue) == 0x000020, "Member 'CryptBPLibrary_AES_CBC_EncryptStringToBytesArray::ReturnValue' has a wrong offset!");

// Function SiliconRising.CryptBPLibrary.AES_CTR_BytesArray
// 0x0030 (0x0030 - 0x0000)
struct CryptBPLibrary_AES_CTR_BytesArray final
{
public:
	TArray<uint8>                                 BytesArray;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InitiationVector;                                  // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CryptBPLibrary_AES_CTR_BytesArray) == 0x000008, "Wrong alignment on CryptBPLibrary_AES_CTR_BytesArray");
static_assert(sizeof(CryptBPLibrary_AES_CTR_BytesArray) == 0x000030, "Wrong size on CryptBPLibrary_AES_CTR_BytesArray");
static_assert(offsetof(CryptBPLibrary_AES_CTR_BytesArray, BytesArray) == 0x000000, "Member 'CryptBPLibrary_AES_CTR_BytesArray::BytesArray' has a wrong offset!");
static_assert(offsetof(CryptBPLibrary_AES_CTR_BytesArray, InitiationVector) == 0x000010, "Member 'CryptBPLibrary_AES_CTR_BytesArray::InitiationVector' has a wrong offset!");
static_assert(offsetof(CryptBPLibrary_AES_CTR_BytesArray, ReturnValue) == 0x000020, "Member 'CryptBPLibrary_AES_CTR_BytesArray::ReturnValue' has a wrong offset!");

// Function SiliconRising.CryptBPLibrary.AES_CTR_String
// 0x0030 (0x0030 - 0x0000)
struct CryptBPLibrary_AES_CTR_String final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InitiationVector;                                  // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CryptBPLibrary_AES_CTR_String) == 0x000008, "Wrong alignment on CryptBPLibrary_AES_CTR_String");
static_assert(sizeof(CryptBPLibrary_AES_CTR_String) == 0x000030, "Wrong size on CryptBPLibrary_AES_CTR_String");
static_assert(offsetof(CryptBPLibrary_AES_CTR_String, String) == 0x000000, "Member 'CryptBPLibrary_AES_CTR_String::String' has a wrong offset!");
static_assert(offsetof(CryptBPLibrary_AES_CTR_String, InitiationVector) == 0x000010, "Member 'CryptBPLibrary_AES_CTR_String::InitiationVector' has a wrong offset!");
static_assert(offsetof(CryptBPLibrary_AES_CTR_String, ReturnValue) == 0x000020, "Member 'CryptBPLibrary_AES_CTR_String::ReturnValue' has a wrong offset!");

// Function SiliconRising.CryptBPLibrary.AES_ECB_DecryptBytesArray
// 0x0020 (0x0020 - 0x0000)
struct CryptBPLibrary_AES_ECB_DecryptBytesArray final
{
public:
	TArray<uint8>                                 BytesArray;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CryptBPLibrary_AES_ECB_DecryptBytesArray) == 0x000008, "Wrong alignment on CryptBPLibrary_AES_ECB_DecryptBytesArray");
static_assert(sizeof(CryptBPLibrary_AES_ECB_DecryptBytesArray) == 0x000020, "Wrong size on CryptBPLibrary_AES_ECB_DecryptBytesArray");
static_assert(offsetof(CryptBPLibrary_AES_ECB_DecryptBytesArray, BytesArray) == 0x000000, "Member 'CryptBPLibrary_AES_ECB_DecryptBytesArray::BytesArray' has a wrong offset!");
static_assert(offsetof(CryptBPLibrary_AES_ECB_DecryptBytesArray, ReturnValue) == 0x000010, "Member 'CryptBPLibrary_AES_ECB_DecryptBytesArray::ReturnValue' has a wrong offset!");

// Function SiliconRising.CryptBPLibrary.AES_ECB_DecryptBytesArrayToString
// 0x0020 (0x0020 - 0x0000)
struct CryptBPLibrary_AES_ECB_DecryptBytesArrayToString final
{
public:
	TArray<uint8>                                 BytesArray;                                        // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CryptBPLibrary_AES_ECB_DecryptBytesArrayToString) == 0x000008, "Wrong alignment on CryptBPLibrary_AES_ECB_DecryptBytesArrayToString");
static_assert(sizeof(CryptBPLibrary_AES_ECB_DecryptBytesArrayToString) == 0x000020, "Wrong size on CryptBPLibrary_AES_ECB_DecryptBytesArrayToString");
static_assert(offsetof(CryptBPLibrary_AES_ECB_DecryptBytesArrayToString, BytesArray) == 0x000000, "Member 'CryptBPLibrary_AES_ECB_DecryptBytesArrayToString::BytesArray' has a wrong offset!");
static_assert(offsetof(CryptBPLibrary_AES_ECB_DecryptBytesArrayToString, ReturnValue) == 0x000010, "Member 'CryptBPLibrary_AES_ECB_DecryptBytesArrayToString::ReturnValue' has a wrong offset!");

// Function SiliconRising.CryptBPLibrary.AES_ECB_EncryptBytesArray
// 0x0020 (0x0020 - 0x0000)
struct CryptBPLibrary_AES_ECB_EncryptBytesArray final
{
public:
	TArray<uint8>                                 BytesArray;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CryptBPLibrary_AES_ECB_EncryptBytesArray) == 0x000008, "Wrong alignment on CryptBPLibrary_AES_ECB_EncryptBytesArray");
static_assert(sizeof(CryptBPLibrary_AES_ECB_EncryptBytesArray) == 0x000020, "Wrong size on CryptBPLibrary_AES_ECB_EncryptBytesArray");
static_assert(offsetof(CryptBPLibrary_AES_ECB_EncryptBytesArray, BytesArray) == 0x000000, "Member 'CryptBPLibrary_AES_ECB_EncryptBytesArray::BytesArray' has a wrong offset!");
static_assert(offsetof(CryptBPLibrary_AES_ECB_EncryptBytesArray, ReturnValue) == 0x000010, "Member 'CryptBPLibrary_AES_ECB_EncryptBytesArray::ReturnValue' has a wrong offset!");

// Function SiliconRising.CryptBPLibrary.AES_ECB_EncryptStringToBytesArray
// 0x0020 (0x0020 - 0x0000)
struct CryptBPLibrary_AES_ECB_EncryptStringToBytesArray final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CryptBPLibrary_AES_ECB_EncryptStringToBytesArray) == 0x000008, "Wrong alignment on CryptBPLibrary_AES_ECB_EncryptStringToBytesArray");
static_assert(sizeof(CryptBPLibrary_AES_ECB_EncryptStringToBytesArray) == 0x000020, "Wrong size on CryptBPLibrary_AES_ECB_EncryptStringToBytesArray");
static_assert(offsetof(CryptBPLibrary_AES_ECB_EncryptStringToBytesArray, String) == 0x000000, "Member 'CryptBPLibrary_AES_ECB_EncryptStringToBytesArray::String' has a wrong offset!");
static_assert(offsetof(CryptBPLibrary_AES_ECB_EncryptStringToBytesArray, ReturnValue) == 0x000010, "Member 'CryptBPLibrary_AES_ECB_EncryptStringToBytesArray::ReturnValue' has a wrong offset!");

// Function SiliconRising.CryptBPLibrary.Base64DecodeFromBytesArrayToBytesArray
// 0x0020 (0x0020 - 0x0000)
struct CryptBPLibrary_Base64DecodeFromBytesArrayToBytesArray final
{
public:
	TArray<uint8>                                 BytesArray;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CryptBPLibrary_Base64DecodeFromBytesArrayToBytesArray) == 0x000008, "Wrong alignment on CryptBPLibrary_Base64DecodeFromBytesArrayToBytesArray");
static_assert(sizeof(CryptBPLibrary_Base64DecodeFromBytesArrayToBytesArray) == 0x000020, "Wrong size on CryptBPLibrary_Base64DecodeFromBytesArrayToBytesArray");
static_assert(offsetof(CryptBPLibrary_Base64DecodeFromBytesArrayToBytesArray, BytesArray) == 0x000000, "Member 'CryptBPLibrary_Base64DecodeFromBytesArrayToBytesArray::BytesArray' has a wrong offset!");
static_assert(offsetof(CryptBPLibrary_Base64DecodeFromBytesArrayToBytesArray, ReturnValue) == 0x000010, "Member 'CryptBPLibrary_Base64DecodeFromBytesArrayToBytesArray::ReturnValue' has a wrong offset!");

// Function SiliconRising.CryptBPLibrary.Base64DecodeFromBytesArrayToString
// 0x0020 (0x0020 - 0x0000)
struct CryptBPLibrary_Base64DecodeFromBytesArrayToString final
{
public:
	TArray<uint8>                                 BytesArray;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CryptBPLibrary_Base64DecodeFromBytesArrayToString) == 0x000008, "Wrong alignment on CryptBPLibrary_Base64DecodeFromBytesArrayToString");
static_assert(sizeof(CryptBPLibrary_Base64DecodeFromBytesArrayToString) == 0x000020, "Wrong size on CryptBPLibrary_Base64DecodeFromBytesArrayToString");
static_assert(offsetof(CryptBPLibrary_Base64DecodeFromBytesArrayToString, BytesArray) == 0x000000, "Member 'CryptBPLibrary_Base64DecodeFromBytesArrayToString::BytesArray' has a wrong offset!");
static_assert(offsetof(CryptBPLibrary_Base64DecodeFromBytesArrayToString, ReturnValue) == 0x000010, "Member 'CryptBPLibrary_Base64DecodeFromBytesArrayToString::ReturnValue' has a wrong offset!");

// Function SiliconRising.CryptBPLibrary.Base64DecodeFromStringToBytesArray
// 0x0020 (0x0020 - 0x0000)
struct CryptBPLibrary_Base64DecodeFromStringToBytesArray final
{
public:
	class FString                                 Source;                                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CryptBPLibrary_Base64DecodeFromStringToBytesArray) == 0x000008, "Wrong alignment on CryptBPLibrary_Base64DecodeFromStringToBytesArray");
static_assert(sizeof(CryptBPLibrary_Base64DecodeFromStringToBytesArray) == 0x000020, "Wrong size on CryptBPLibrary_Base64DecodeFromStringToBytesArray");
static_assert(offsetof(CryptBPLibrary_Base64DecodeFromStringToBytesArray, Source) == 0x000000, "Member 'CryptBPLibrary_Base64DecodeFromStringToBytesArray::Source' has a wrong offset!");
static_assert(offsetof(CryptBPLibrary_Base64DecodeFromStringToBytesArray, ReturnValue) == 0x000010, "Member 'CryptBPLibrary_Base64DecodeFromStringToBytesArray::ReturnValue' has a wrong offset!");

// Function SiliconRising.CryptBPLibrary.Base64DecodeFromStringToString
// 0x0020 (0x0020 - 0x0000)
struct CryptBPLibrary_Base64DecodeFromStringToString final
{
public:
	class FString                                 Source;                                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CryptBPLibrary_Base64DecodeFromStringToString) == 0x000008, "Wrong alignment on CryptBPLibrary_Base64DecodeFromStringToString");
static_assert(sizeof(CryptBPLibrary_Base64DecodeFromStringToString) == 0x000020, "Wrong size on CryptBPLibrary_Base64DecodeFromStringToString");
static_assert(offsetof(CryptBPLibrary_Base64DecodeFromStringToString, Source) == 0x000000, "Member 'CryptBPLibrary_Base64DecodeFromStringToString::Source' has a wrong offset!");
static_assert(offsetof(CryptBPLibrary_Base64DecodeFromStringToString, ReturnValue) == 0x000010, "Member 'CryptBPLibrary_Base64DecodeFromStringToString::ReturnValue' has a wrong offset!");

// Function SiliconRising.CryptBPLibrary.Base64EncodeFromBytesArray
// 0x0020 (0x0020 - 0x0000)
struct CryptBPLibrary_Base64EncodeFromBytesArray final
{
public:
	TArray<uint8>                                 BytesArray;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CryptBPLibrary_Base64EncodeFromBytesArray) == 0x000008, "Wrong alignment on CryptBPLibrary_Base64EncodeFromBytesArray");
static_assert(sizeof(CryptBPLibrary_Base64EncodeFromBytesArray) == 0x000020, "Wrong size on CryptBPLibrary_Base64EncodeFromBytesArray");
static_assert(offsetof(CryptBPLibrary_Base64EncodeFromBytesArray, BytesArray) == 0x000000, "Member 'CryptBPLibrary_Base64EncodeFromBytesArray::BytesArray' has a wrong offset!");
static_assert(offsetof(CryptBPLibrary_Base64EncodeFromBytesArray, ReturnValue) == 0x000010, "Member 'CryptBPLibrary_Base64EncodeFromBytesArray::ReturnValue' has a wrong offset!");

// Function SiliconRising.CryptBPLibrary.Base64EncodeFromString
// 0x0020 (0x0020 - 0x0000)
struct CryptBPLibrary_Base64EncodeFromString final
{
public:
	class FString                                 Source;                                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CryptBPLibrary_Base64EncodeFromString) == 0x000008, "Wrong alignment on CryptBPLibrary_Base64EncodeFromString");
static_assert(sizeof(CryptBPLibrary_Base64EncodeFromString) == 0x000020, "Wrong size on CryptBPLibrary_Base64EncodeFromString");
static_assert(offsetof(CryptBPLibrary_Base64EncodeFromString, Source) == 0x000000, "Member 'CryptBPLibrary_Base64EncodeFromString::Source' has a wrong offset!");
static_assert(offsetof(CryptBPLibrary_Base64EncodeFromString, ReturnValue) == 0x000010, "Member 'CryptBPLibrary_Base64EncodeFromString::ReturnValue' has a wrong offset!");

// Function SiliconRising.CryptBPLibrary.BinToDec
// 0x0018 (0x0018 - 0x0000)
struct CryptBPLibrary_BinToDec final
{
public:
	class FString                                 BinaryString;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CryptBPLibrary_BinToDec) == 0x000008, "Wrong alignment on CryptBPLibrary_BinToDec");
static_assert(sizeof(CryptBPLibrary_BinToDec) == 0x000018, "Wrong size on CryptBPLibrary_BinToDec");
static_assert(offsetof(CryptBPLibrary_BinToDec, BinaryString) == 0x000000, "Member 'CryptBPLibrary_BinToDec::BinaryString' has a wrong offset!");
static_assert(offsetof(CryptBPLibrary_BinToDec, ReturnValue) == 0x000010, "Member 'CryptBPLibrary_BinToDec::ReturnValue' has a wrong offset!");

// Function SiliconRising.CryptBPLibrary.CaesarDecryptBytesArray
// 0x0020 (0x0020 - 0x0000)
struct CryptBPLibrary_CaesarDecryptBytesArray final
{
public:
	TArray<uint8>                                 BytesArray;                                        // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CryptBPLibrary_CaesarDecryptBytesArray) == 0x000008, "Wrong alignment on CryptBPLibrary_CaesarDecryptBytesArray");
static_assert(sizeof(CryptBPLibrary_CaesarDecryptBytesArray) == 0x000020, "Wrong size on CryptBPLibrary_CaesarDecryptBytesArray");
static_assert(offsetof(CryptBPLibrary_CaesarDecryptBytesArray, BytesArray) == 0x000000, "Member 'CryptBPLibrary_CaesarDecryptBytesArray::BytesArray' has a wrong offset!");
static_assert(offsetof(CryptBPLibrary_CaesarDecryptBytesArray, ReturnValue) == 0x000010, "Member 'CryptBPLibrary_CaesarDecryptBytesArray::ReturnValue' has a wrong offset!");

// Function SiliconRising.CryptBPLibrary.CaesarDecryptString
// 0x0020 (0x0020 - 0x0000)
struct CryptBPLibrary_CaesarDecryptString final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CryptBPLibrary_CaesarDecryptString) == 0x000008, "Wrong alignment on CryptBPLibrary_CaesarDecryptString");
static_assert(sizeof(CryptBPLibrary_CaesarDecryptString) == 0x000020, "Wrong size on CryptBPLibrary_CaesarDecryptString");
static_assert(offsetof(CryptBPLibrary_CaesarDecryptString, String) == 0x000000, "Member 'CryptBPLibrary_CaesarDecryptString::String' has a wrong offset!");
static_assert(offsetof(CryptBPLibrary_CaesarDecryptString, ReturnValue) == 0x000010, "Member 'CryptBPLibrary_CaesarDecryptString::ReturnValue' has a wrong offset!");

// Function SiliconRising.CryptBPLibrary.CaesarEncryptBytesArray
// 0x0020 (0x0020 - 0x0000)
struct CryptBPLibrary_CaesarEncryptBytesArray final
{
public:
	TArray<uint8>                                 BytesArray;                                        // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CryptBPLibrary_CaesarEncryptBytesArray) == 0x000008, "Wrong alignment on CryptBPLibrary_CaesarEncryptBytesArray");
static_assert(sizeof(CryptBPLibrary_CaesarEncryptBytesArray) == 0x000020, "Wrong size on CryptBPLibrary_CaesarEncryptBytesArray");
static_assert(offsetof(CryptBPLibrary_CaesarEncryptBytesArray, BytesArray) == 0x000000, "Member 'CryptBPLibrary_CaesarEncryptBytesArray::BytesArray' has a wrong offset!");
static_assert(offsetof(CryptBPLibrary_CaesarEncryptBytesArray, ReturnValue) == 0x000010, "Member 'CryptBPLibrary_CaesarEncryptBytesArray::ReturnValue' has a wrong offset!");

// Function SiliconRising.CryptBPLibrary.CaesarEncryptString
// 0x0020 (0x0020 - 0x0000)
struct CryptBPLibrary_CaesarEncryptString final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CryptBPLibrary_CaesarEncryptString) == 0x000008, "Wrong alignment on CryptBPLibrary_CaesarEncryptString");
static_assert(sizeof(CryptBPLibrary_CaesarEncryptString) == 0x000020, "Wrong size on CryptBPLibrary_CaesarEncryptString");
static_assert(offsetof(CryptBPLibrary_CaesarEncryptString, String) == 0x000000, "Member 'CryptBPLibrary_CaesarEncryptString::String' has a wrong offset!");
static_assert(offsetof(CryptBPLibrary_CaesarEncryptString, ReturnValue) == 0x000010, "Member 'CryptBPLibrary_CaesarEncryptString::ReturnValue' has a wrong offset!");

// Function SiliconRising.CryptBPLibrary.ConvertBytesToString
// 0x0020 (0x0020 - 0x0000)
struct CryptBPLibrary_ConvertBytesToString final
{
public:
	TArray<uint8>                                 Bytes;                                             // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CryptBPLibrary_ConvertBytesToString) == 0x000008, "Wrong alignment on CryptBPLibrary_ConvertBytesToString");
static_assert(sizeof(CryptBPLibrary_ConvertBytesToString) == 0x000020, "Wrong size on CryptBPLibrary_ConvertBytesToString");
static_assert(offsetof(CryptBPLibrary_ConvertBytesToString, Bytes) == 0x000000, "Member 'CryptBPLibrary_ConvertBytesToString::Bytes' has a wrong offset!");
static_assert(offsetof(CryptBPLibrary_ConvertBytesToString, ReturnValue) == 0x000010, "Member 'CryptBPLibrary_ConvertBytesToString::ReturnValue' has a wrong offset!");

// Function SiliconRising.CryptBPLibrary.ConvertStringToBytes
// 0x0020 (0x0020 - 0x0000)
struct CryptBPLibrary_ConvertStringToBytes final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CryptBPLibrary_ConvertStringToBytes) == 0x000008, "Wrong alignment on CryptBPLibrary_ConvertStringToBytes");
static_assert(sizeof(CryptBPLibrary_ConvertStringToBytes) == 0x000020, "Wrong size on CryptBPLibrary_ConvertStringToBytes");
static_assert(offsetof(CryptBPLibrary_ConvertStringToBytes, String) == 0x000000, "Member 'CryptBPLibrary_ConvertStringToBytes::String' has a wrong offset!");
static_assert(offsetof(CryptBPLibrary_ConvertStringToBytes, ReturnValue) == 0x000010, "Member 'CryptBPLibrary_ConvertStringToBytes::ReturnValue' has a wrong offset!");

// Function SiliconRising.CryptBPLibrary.DecToBin
// 0x0018 (0x0018 - 0x0000)
struct CryptBPLibrary_DecToBin final
{
public:
	int32                                         Integer;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CryptBPLibrary_DecToBin) == 0x000008, "Wrong alignment on CryptBPLibrary_DecToBin");
static_assert(sizeof(CryptBPLibrary_DecToBin) == 0x000018, "Wrong size on CryptBPLibrary_DecToBin");
static_assert(offsetof(CryptBPLibrary_DecToBin, Integer) == 0x000000, "Member 'CryptBPLibrary_DecToBin::Integer' has a wrong offset!");
static_assert(offsetof(CryptBPLibrary_DecToBin, ReturnValue) == 0x000008, "Member 'CryptBPLibrary_DecToBin::ReturnValue' has a wrong offset!");

// Function SiliconRising.CryptBPLibrary.DecToHex
// 0x0018 (0x0018 - 0x0000)
struct CryptBPLibrary_DecToHex final
{
public:
	int32                                         Integer;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CryptBPLibrary_DecToHex) == 0x000008, "Wrong alignment on CryptBPLibrary_DecToHex");
static_assert(sizeof(CryptBPLibrary_DecToHex) == 0x000018, "Wrong size on CryptBPLibrary_DecToHex");
static_assert(offsetof(CryptBPLibrary_DecToHex, Integer) == 0x000000, "Member 'CryptBPLibrary_DecToHex::Integer' has a wrong offset!");
static_assert(offsetof(CryptBPLibrary_DecToHex, ReturnValue) == 0x000008, "Member 'CryptBPLibrary_DecToHex::ReturnValue' has a wrong offset!");

// Function SiliconRising.CryptBPLibrary.HexToDec
// 0x0018 (0x0018 - 0x0000)
struct CryptBPLibrary_HexToDec final
{
public:
	class FString                                 HexadecimalString;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CryptBPLibrary_HexToDec) == 0x000008, "Wrong alignment on CryptBPLibrary_HexToDec");
static_assert(sizeof(CryptBPLibrary_HexToDec) == 0x000018, "Wrong size on CryptBPLibrary_HexToDec");
static_assert(offsetof(CryptBPLibrary_HexToDec, HexadecimalString) == 0x000000, "Member 'CryptBPLibrary_HexToDec::HexadecimalString' has a wrong offset!");
static_assert(offsetof(CryptBPLibrary_HexToDec, ReturnValue) == 0x000010, "Member 'CryptBPLibrary_HexToDec::ReturnValue' has a wrong offset!");

// Function SiliconRising.CryptBPLibrary.InitializeKeysByte
// 0x0028 (0x0028 - 0x0000)
struct CryptBPLibrary_InitializeKeysByte final
{
public:
	uint8                                         CaesarKey;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 XORKey;                                            // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 AESKey;                                            // 0x0018(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CryptBPLibrary_InitializeKeysByte) == 0x000008, "Wrong alignment on CryptBPLibrary_InitializeKeysByte");
static_assert(sizeof(CryptBPLibrary_InitializeKeysByte) == 0x000028, "Wrong size on CryptBPLibrary_InitializeKeysByte");
static_assert(offsetof(CryptBPLibrary_InitializeKeysByte, CaesarKey) == 0x000000, "Member 'CryptBPLibrary_InitializeKeysByte::CaesarKey' has a wrong offset!");
static_assert(offsetof(CryptBPLibrary_InitializeKeysByte, XORKey) == 0x000008, "Member 'CryptBPLibrary_InitializeKeysByte::XORKey' has a wrong offset!");
static_assert(offsetof(CryptBPLibrary_InitializeKeysByte, AESKey) == 0x000018, "Member 'CryptBPLibrary_InitializeKeysByte::AESKey' has a wrong offset!");

// Function SiliconRising.CryptBPLibrary.InitializeKeysString
// 0x0028 (0x0028 - 0x0000)
struct CryptBPLibrary_InitializeKeysString final
{
public:
	uint8                                         CaesarKey;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 XORKey;                                            // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AESKey;                                            // 0x0018(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CryptBPLibrary_InitializeKeysString) == 0x000008, "Wrong alignment on CryptBPLibrary_InitializeKeysString");
static_assert(sizeof(CryptBPLibrary_InitializeKeysString) == 0x000028, "Wrong size on CryptBPLibrary_InitializeKeysString");
static_assert(offsetof(CryptBPLibrary_InitializeKeysString, CaesarKey) == 0x000000, "Member 'CryptBPLibrary_InitializeKeysString::CaesarKey' has a wrong offset!");
static_assert(offsetof(CryptBPLibrary_InitializeKeysString, XORKey) == 0x000008, "Member 'CryptBPLibrary_InitializeKeysString::XORKey' has a wrong offset!");
static_assert(offsetof(CryptBPLibrary_InitializeKeysString, AESKey) == 0x000018, "Member 'CryptBPLibrary_InitializeKeysString::AESKey' has a wrong offset!");

// Function SiliconRising.CryptBPLibrary.PKCS7Padding
// 0x0020 (0x0020 - 0x0000)
struct CryptBPLibrary_PKCS7Padding final
{
public:
	class FString                                 Source;                                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CryptBPLibrary_PKCS7Padding) == 0x000008, "Wrong alignment on CryptBPLibrary_PKCS7Padding");
static_assert(sizeof(CryptBPLibrary_PKCS7Padding) == 0x000020, "Wrong size on CryptBPLibrary_PKCS7Padding");
static_assert(offsetof(CryptBPLibrary_PKCS7Padding, Source) == 0x000000, "Member 'CryptBPLibrary_PKCS7Padding::Source' has a wrong offset!");
static_assert(offsetof(CryptBPLibrary_PKCS7Padding, ReturnValue) == 0x000010, "Member 'CryptBPLibrary_PKCS7Padding::ReturnValue' has a wrong offset!");

// Function SiliconRising.CryptBPLibrary.PKCS7PaddingForArray
// 0x0020 (0x0020 - 0x0000)
struct CryptBPLibrary_PKCS7PaddingForArray final
{
public:
	TArray<uint8>                                 Source;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CryptBPLibrary_PKCS7PaddingForArray) == 0x000008, "Wrong alignment on CryptBPLibrary_PKCS7PaddingForArray");
static_assert(sizeof(CryptBPLibrary_PKCS7PaddingForArray) == 0x000020, "Wrong size on CryptBPLibrary_PKCS7PaddingForArray");
static_assert(offsetof(CryptBPLibrary_PKCS7PaddingForArray, Source) == 0x000000, "Member 'CryptBPLibrary_PKCS7PaddingForArray::Source' has a wrong offset!");
static_assert(offsetof(CryptBPLibrary_PKCS7PaddingForArray, ReturnValue) == 0x000010, "Member 'CryptBPLibrary_PKCS7PaddingForArray::ReturnValue' has a wrong offset!");

// Function SiliconRising.CryptBPLibrary.PKCS7Unpadding
// 0x0020 (0x0020 - 0x0000)
struct CryptBPLibrary_PKCS7Unpadding final
{
public:
	class FString                                 Source;                                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CryptBPLibrary_PKCS7Unpadding) == 0x000008, "Wrong alignment on CryptBPLibrary_PKCS7Unpadding");
static_assert(sizeof(CryptBPLibrary_PKCS7Unpadding) == 0x000020, "Wrong size on CryptBPLibrary_PKCS7Unpadding");
static_assert(offsetof(CryptBPLibrary_PKCS7Unpadding, Source) == 0x000000, "Member 'CryptBPLibrary_PKCS7Unpadding::Source' has a wrong offset!");
static_assert(offsetof(CryptBPLibrary_PKCS7Unpadding, ReturnValue) == 0x000010, "Member 'CryptBPLibrary_PKCS7Unpadding::ReturnValue' has a wrong offset!");

// Function SiliconRising.CryptBPLibrary.PKCS7UnpaddingForArray
// 0x0020 (0x0020 - 0x0000)
struct CryptBPLibrary_PKCS7UnpaddingForArray final
{
public:
	TArray<uint8>                                 Source;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CryptBPLibrary_PKCS7UnpaddingForArray) == 0x000008, "Wrong alignment on CryptBPLibrary_PKCS7UnpaddingForArray");
static_assert(sizeof(CryptBPLibrary_PKCS7UnpaddingForArray) == 0x000020, "Wrong size on CryptBPLibrary_PKCS7UnpaddingForArray");
static_assert(offsetof(CryptBPLibrary_PKCS7UnpaddingForArray, Source) == 0x000000, "Member 'CryptBPLibrary_PKCS7UnpaddingForArray::Source' has a wrong offset!");
static_assert(offsetof(CryptBPLibrary_PKCS7UnpaddingForArray, ReturnValue) == 0x000010, "Member 'CryptBPLibrary_PKCS7UnpaddingForArray::ReturnValue' has a wrong offset!");

// Function SiliconRising.CryptBPLibrary.RSADecrypt
// 0x0038 (0x0038 - 0x0000)
struct CryptBPLibrary_RSADecrypt final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Content;                                           // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPublic;                                           // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CryptBPLibrary_RSADecrypt) == 0x000008, "Wrong alignment on CryptBPLibrary_RSADecrypt");
static_assert(sizeof(CryptBPLibrary_RSADecrypt) == 0x000038, "Wrong size on CryptBPLibrary_RSADecrypt");
static_assert(offsetof(CryptBPLibrary_RSADecrypt, Key) == 0x000000, "Member 'CryptBPLibrary_RSADecrypt::Key' has a wrong offset!");
static_assert(offsetof(CryptBPLibrary_RSADecrypt, Content) == 0x000010, "Member 'CryptBPLibrary_RSADecrypt::Content' has a wrong offset!");
static_assert(offsetof(CryptBPLibrary_RSADecrypt, bPublic) == 0x000020, "Member 'CryptBPLibrary_RSADecrypt::bPublic' has a wrong offset!");
static_assert(offsetof(CryptBPLibrary_RSADecrypt, ReturnValue) == 0x000028, "Member 'CryptBPLibrary_RSADecrypt::ReturnValue' has a wrong offset!");

// Function SiliconRising.CryptBPLibrary.RSADecryptForArray
// 0x0038 (0x0038 - 0x0000)
struct CryptBPLibrary_RSADecryptForArray final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Content;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bPublic;                                           // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CryptBPLibrary_RSADecryptForArray) == 0x000008, "Wrong alignment on CryptBPLibrary_RSADecryptForArray");
static_assert(sizeof(CryptBPLibrary_RSADecryptForArray) == 0x000038, "Wrong size on CryptBPLibrary_RSADecryptForArray");
static_assert(offsetof(CryptBPLibrary_RSADecryptForArray, Key) == 0x000000, "Member 'CryptBPLibrary_RSADecryptForArray::Key' has a wrong offset!");
static_assert(offsetof(CryptBPLibrary_RSADecryptForArray, Content) == 0x000010, "Member 'CryptBPLibrary_RSADecryptForArray::Content' has a wrong offset!");
static_assert(offsetof(CryptBPLibrary_RSADecryptForArray, bPublic) == 0x000020, "Member 'CryptBPLibrary_RSADecryptForArray::bPublic' has a wrong offset!");
static_assert(offsetof(CryptBPLibrary_RSADecryptForArray, ReturnValue) == 0x000028, "Member 'CryptBPLibrary_RSADecryptForArray::ReturnValue' has a wrong offset!");

// Function SiliconRising.CryptBPLibrary.RSAEncrypt
// 0x0038 (0x0038 - 0x0000)
struct CryptBPLibrary_RSAEncrypt final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Content;                                           // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPublic;                                           // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CryptBPLibrary_RSAEncrypt) == 0x000008, "Wrong alignment on CryptBPLibrary_RSAEncrypt");
static_assert(sizeof(CryptBPLibrary_RSAEncrypt) == 0x000038, "Wrong size on CryptBPLibrary_RSAEncrypt");
static_assert(offsetof(CryptBPLibrary_RSAEncrypt, Key) == 0x000000, "Member 'CryptBPLibrary_RSAEncrypt::Key' has a wrong offset!");
static_assert(offsetof(CryptBPLibrary_RSAEncrypt, Content) == 0x000010, "Member 'CryptBPLibrary_RSAEncrypt::Content' has a wrong offset!");
static_assert(offsetof(CryptBPLibrary_RSAEncrypt, bPublic) == 0x000020, "Member 'CryptBPLibrary_RSAEncrypt::bPublic' has a wrong offset!");
static_assert(offsetof(CryptBPLibrary_RSAEncrypt, ReturnValue) == 0x000028, "Member 'CryptBPLibrary_RSAEncrypt::ReturnValue' has a wrong offset!");

// Function SiliconRising.CryptBPLibrary.RSAEncryptForArray
// 0x0038 (0x0038 - 0x0000)
struct CryptBPLibrary_RSAEncryptForArray final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Content;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bPublic;                                           // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CryptBPLibrary_RSAEncryptForArray) == 0x000008, "Wrong alignment on CryptBPLibrary_RSAEncryptForArray");
static_assert(sizeof(CryptBPLibrary_RSAEncryptForArray) == 0x000038, "Wrong size on CryptBPLibrary_RSAEncryptForArray");
static_assert(offsetof(CryptBPLibrary_RSAEncryptForArray, Key) == 0x000000, "Member 'CryptBPLibrary_RSAEncryptForArray::Key' has a wrong offset!");
static_assert(offsetof(CryptBPLibrary_RSAEncryptForArray, Content) == 0x000010, "Member 'CryptBPLibrary_RSAEncryptForArray::Content' has a wrong offset!");
static_assert(offsetof(CryptBPLibrary_RSAEncryptForArray, bPublic) == 0x000020, "Member 'CryptBPLibrary_RSAEncryptForArray::bPublic' has a wrong offset!");
static_assert(offsetof(CryptBPLibrary_RSAEncryptForArray, ReturnValue) == 0x000028, "Member 'CryptBPLibrary_RSAEncryptForArray::ReturnValue' has a wrong offset!");

// Function SiliconRising.CryptBPLibrary.XORBytesArray
// 0x0020 (0x0020 - 0x0000)
struct CryptBPLibrary_XORBytesArray final
{
public:
	TArray<uint8>                                 BytesArray;                                        // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CryptBPLibrary_XORBytesArray) == 0x000008, "Wrong alignment on CryptBPLibrary_XORBytesArray");
static_assert(sizeof(CryptBPLibrary_XORBytesArray) == 0x000020, "Wrong size on CryptBPLibrary_XORBytesArray");
static_assert(offsetof(CryptBPLibrary_XORBytesArray, BytesArray) == 0x000000, "Member 'CryptBPLibrary_XORBytesArray::BytesArray' has a wrong offset!");
static_assert(offsetof(CryptBPLibrary_XORBytesArray, ReturnValue) == 0x000010, "Member 'CryptBPLibrary_XORBytesArray::ReturnValue' has a wrong offset!");

// Function SiliconRising.CryptBPLibrary.XORString
// 0x0020 (0x0020 - 0x0000)
struct CryptBPLibrary_XORString final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CryptBPLibrary_XORString) == 0x000008, "Wrong alignment on CryptBPLibrary_XORString");
static_assert(sizeof(CryptBPLibrary_XORString) == 0x000020, "Wrong size on CryptBPLibrary_XORString");
static_assert(offsetof(CryptBPLibrary_XORString, String) == 0x000000, "Member 'CryptBPLibrary_XORString::String' has a wrong offset!");
static_assert(offsetof(CryptBPLibrary_XORString, ReturnValue) == 0x000010, "Member 'CryptBPLibrary_XORString::ReturnValue' has a wrong offset!");

// Function SiliconRising.HttpUtilities.GetCurrentLanguage
// 0x0010 (0x0010 - 0x0000)
struct HttpUtilities_GetCurrentLanguage final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HttpUtilities_GetCurrentLanguage) == 0x000008, "Wrong alignment on HttpUtilities_GetCurrentLanguage");
static_assert(sizeof(HttpUtilities_GetCurrentLanguage) == 0x000010, "Wrong size on HttpUtilities_GetCurrentLanguage");
static_assert(offsetof(HttpUtilities_GetCurrentLanguage, ReturnValue) == 0x000000, "Member 'HttpUtilities_GetCurrentLanguage::ReturnValue' has a wrong offset!");

// Function SiliconRising.HttpUtilities.GetJsonFromUrl
// 0x0020 (0x0020 - 0x0000)
struct HttpUtilities_GetJsonFromUrl final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool Success)>                 Callback;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HttpUtilities_GetJsonFromUrl) == 0x000008, "Wrong alignment on HttpUtilities_GetJsonFromUrl");
static_assert(sizeof(HttpUtilities_GetJsonFromUrl) == 0x000020, "Wrong size on HttpUtilities_GetJsonFromUrl");
static_assert(offsetof(HttpUtilities_GetJsonFromUrl, URL) == 0x000000, "Member 'HttpUtilities_GetJsonFromUrl::URL' has a wrong offset!");
static_assert(offsetof(HttpUtilities_GetJsonFromUrl, Callback) == 0x000010, "Member 'HttpUtilities_GetJsonFromUrl::Callback' has a wrong offset!");

// Function SiliconRising.HttpUtilities.GetLeaderBoardData
// 0x0030 (0x0030 - 0x0000)
struct HttpUtilities_GetLeaderBoardData final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Data;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TDelegate<void(bool Success)>                 Callback;                                          // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HttpUtilities_GetLeaderBoardData) == 0x000008, "Wrong alignment on HttpUtilities_GetLeaderBoardData");
static_assert(sizeof(HttpUtilities_GetLeaderBoardData) == 0x000030, "Wrong size on HttpUtilities_GetLeaderBoardData");
static_assert(offsetof(HttpUtilities_GetLeaderBoardData, URL) == 0x000000, "Member 'HttpUtilities_GetLeaderBoardData::URL' has a wrong offset!");
static_assert(offsetof(HttpUtilities_GetLeaderBoardData, Data) == 0x000010, "Member 'HttpUtilities_GetLeaderBoardData::Data' has a wrong offset!");
static_assert(offsetof(HttpUtilities_GetLeaderBoardData, Callback) == 0x000020, "Member 'HttpUtilities_GetLeaderBoardData::Callback' has a wrong offset!");

// Function SiliconRising.HttpUtilities.GetListLeaderBoard
// 0x0010 (0x0010 - 0x0000)
struct HttpUtilities_GetListLeaderBoard final
{
public:
	TArray<struct FLeaderBoardData>               ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HttpUtilities_GetListLeaderBoard) == 0x000008, "Wrong alignment on HttpUtilities_GetListLeaderBoard");
static_assert(sizeof(HttpUtilities_GetListLeaderBoard) == 0x000010, "Wrong size on HttpUtilities_GetListLeaderBoard");
static_assert(offsetof(HttpUtilities_GetListLeaderBoard, ReturnValue) == 0x000000, "Member 'HttpUtilities_GetListLeaderBoard::ReturnValue' has a wrong offset!");

// Function SiliconRising.HttpUtilities.GetPageID
// 0x0010 (0x0010 - 0x0000)
struct HttpUtilities_GetPageID final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HttpUtilities_GetPageID) == 0x000008, "Wrong alignment on HttpUtilities_GetPageID");
static_assert(sizeof(HttpUtilities_GetPageID) == 0x000010, "Wrong size on HttpUtilities_GetPageID");
static_assert(offsetof(HttpUtilities_GetPageID, ReturnValue) == 0x000000, "Member 'HttpUtilities_GetPageID::ReturnValue' has a wrong offset!");

// Function SiliconRising.HttpUtilities.GetPlayerTopInfo
// 0x0050 (0x0050 - 0x0000)
struct HttpUtilities_GetPlayerTopInfo final
{
public:
	struct FPlayerTopInfo                         ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HttpUtilities_GetPlayerTopInfo) == 0x000008, "Wrong alignment on HttpUtilities_GetPlayerTopInfo");
static_assert(sizeof(HttpUtilities_GetPlayerTopInfo) == 0x000050, "Wrong size on HttpUtilities_GetPlayerTopInfo");
static_assert(offsetof(HttpUtilities_GetPlayerTopInfo, ReturnValue) == 0x000000, "Member 'HttpUtilities_GetPlayerTopInfo::ReturnValue' has a wrong offset!");

// Function SiliconRising.HttpUtilities.GetSteamUserHeadUrl
// 0x0020 (0x0020 - 0x0000)
struct HttpUtilities_GetSteamUserHeadUrl final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool Success)>                 Callback;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HttpUtilities_GetSteamUserHeadUrl) == 0x000008, "Wrong alignment on HttpUtilities_GetSteamUserHeadUrl");
static_assert(sizeof(HttpUtilities_GetSteamUserHeadUrl) == 0x000020, "Wrong size on HttpUtilities_GetSteamUserHeadUrl");
static_assert(offsetof(HttpUtilities_GetSteamUserHeadUrl, URL) == 0x000000, "Member 'HttpUtilities_GetSteamUserHeadUrl::URL' has a wrong offset!");
static_assert(offsetof(HttpUtilities_GetSteamUserHeadUrl, Callback) == 0x000010, "Member 'HttpUtilities_GetSteamUserHeadUrl::Callback' has a wrong offset!");

// Function SiliconRising.HttpUtilities.GetStringErrorNumber
// 0x0010 (0x0010 - 0x0000)
struct HttpUtilities_GetStringErrorNumber final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HttpUtilities_GetStringErrorNumber) == 0x000008, "Wrong alignment on HttpUtilities_GetStringErrorNumber");
static_assert(sizeof(HttpUtilities_GetStringErrorNumber) == 0x000010, "Wrong size on HttpUtilities_GetStringErrorNumber");
static_assert(offsetof(HttpUtilities_GetStringErrorNumber, ReturnValue) == 0x000000, "Member 'HttpUtilities_GetStringErrorNumber::ReturnValue' has a wrong offset!");

// Function SiliconRising.HttpUtilities.GetStringFromJson
// 0x0020 (0x0020 - 0x0000)
struct HttpUtilities_GetStringFromJson final
{
public:
	class FString                                 JsonKey;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HttpUtilities_GetStringFromJson) == 0x000008, "Wrong alignment on HttpUtilities_GetStringFromJson");
static_assert(sizeof(HttpUtilities_GetStringFromJson) == 0x000020, "Wrong size on HttpUtilities_GetStringFromJson");
static_assert(offsetof(HttpUtilities_GetStringFromJson, JsonKey) == 0x000000, "Member 'HttpUtilities_GetStringFromJson::JsonKey' has a wrong offset!");
static_assert(offsetof(HttpUtilities_GetStringFromJson, ReturnValue) == 0x000010, "Member 'HttpUtilities_GetStringFromJson::ReturnValue' has a wrong offset!");

// Function SiliconRising.HttpUtilities.GetStringFromJsonFields
// 0x0038 (0x0038 - 0x0000)
struct HttpUtilities_GetStringFromJsonFields final
{
public:
	TArray<class FString>                         JsonField;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 JsonKey;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isOK;                                              // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HttpUtilities_GetStringFromJsonFields) == 0x000008, "Wrong alignment on HttpUtilities_GetStringFromJsonFields");
static_assert(sizeof(HttpUtilities_GetStringFromJsonFields) == 0x000038, "Wrong size on HttpUtilities_GetStringFromJsonFields");
static_assert(offsetof(HttpUtilities_GetStringFromJsonFields, JsonField) == 0x000000, "Member 'HttpUtilities_GetStringFromJsonFields::JsonField' has a wrong offset!");
static_assert(offsetof(HttpUtilities_GetStringFromJsonFields, JsonKey) == 0x000010, "Member 'HttpUtilities_GetStringFromJsonFields::JsonKey' has a wrong offset!");
static_assert(offsetof(HttpUtilities_GetStringFromJsonFields, isOK) == 0x000020, "Member 'HttpUtilities_GetStringFromJsonFields::isOK' has a wrong offset!");
static_assert(offsetof(HttpUtilities_GetStringFromJsonFields, ReturnValue) == 0x000028, "Member 'HttpUtilities_GetStringFromJsonFields::ReturnValue' has a wrong offset!");

// Function SiliconRising.HttpUtilities.GetStringResponse
// 0x0010 (0x0010 - 0x0000)
struct HttpUtilities_GetStringResponse final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HttpUtilities_GetStringResponse) == 0x000008, "Wrong alignment on HttpUtilities_GetStringResponse");
static_assert(sizeof(HttpUtilities_GetStringResponse) == 0x000010, "Wrong size on HttpUtilities_GetStringResponse");
static_assert(offsetof(HttpUtilities_GetStringResponse, ReturnValue) == 0x000000, "Member 'HttpUtilities_GetStringResponse::ReturnValue' has a wrong offset!");

// Function SiliconRising.HttpUtilities.Login
// 0x0070 (0x0070 - 0x0000)
struct HttpUtilities_Login final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            ExtraData;                                         // 0x0010(0x0050)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TDelegate<void(bool Success)>                 Callback;                                          // 0x0060(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HttpUtilities_Login) == 0x000008, "Wrong alignment on HttpUtilities_Login");
static_assert(sizeof(HttpUtilities_Login) == 0x000070, "Wrong size on HttpUtilities_Login");
static_assert(offsetof(HttpUtilities_Login, URL) == 0x000000, "Member 'HttpUtilities_Login::URL' has a wrong offset!");
static_assert(offsetof(HttpUtilities_Login, ExtraData) == 0x000010, "Member 'HttpUtilities_Login::ExtraData' has a wrong offset!");
static_assert(offsetof(HttpUtilities_Login, Callback) == 0x000060, "Member 'HttpUtilities_Login::Callback' has a wrong offset!");

// Function SiliconRising.HttpUtilities.PostUrl
// 0x0030 (0x0030 - 0x0000)
struct HttpUtilities_PostUrl final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Data;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool Success)>                 Callback;                                          // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HttpUtilities_PostUrl) == 0x000008, "Wrong alignment on HttpUtilities_PostUrl");
static_assert(sizeof(HttpUtilities_PostUrl) == 0x000030, "Wrong size on HttpUtilities_PostUrl");
static_assert(offsetof(HttpUtilities_PostUrl, URL) == 0x000000, "Member 'HttpUtilities_PostUrl::URL' has a wrong offset!");
static_assert(offsetof(HttpUtilities_PostUrl, Data) == 0x000010, "Member 'HttpUtilities_PostUrl::Data' has a wrong offset!");
static_assert(offsetof(HttpUtilities_PostUrl, Callback) == 0x000020, "Member 'HttpUtilities_PostUrl::Callback' has a wrong offset!");

// Function SiliconRising.HttpUtilities.SendScore
// 0x0030 (0x0030 - 0x0000)
struct HttpUtilities_SendScore final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Data;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TDelegate<void(bool Success)>                 Callback;                                          // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HttpUtilities_SendScore) == 0x000008, "Wrong alignment on HttpUtilities_SendScore");
static_assert(sizeof(HttpUtilities_SendScore) == 0x000030, "Wrong size on HttpUtilities_SendScore");
static_assert(offsetof(HttpUtilities_SendScore, URL) == 0x000000, "Member 'HttpUtilities_SendScore::URL' has a wrong offset!");
static_assert(offsetof(HttpUtilities_SendScore, Data) == 0x000010, "Member 'HttpUtilities_SendScore::Data' has a wrong offset!");
static_assert(offsetof(HttpUtilities_SendScore, Callback) == 0x000020, "Member 'HttpUtilities_SendScore::Callback' has a wrong offset!");

// Function SiliconRising.HttpUtilities.VerifyGame
// 0x0070 (0x0070 - 0x0000)
struct HttpUtilities_VerifyGame final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            ExtraData;                                         // 0x0010(0x0050)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TDelegate<void(bool Success)>                 Callback;                                          // 0x0060(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HttpUtilities_VerifyGame) == 0x000008, "Wrong alignment on HttpUtilities_VerifyGame");
static_assert(sizeof(HttpUtilities_VerifyGame) == 0x000070, "Wrong size on HttpUtilities_VerifyGame");
static_assert(offsetof(HttpUtilities_VerifyGame, URL) == 0x000000, "Member 'HttpUtilities_VerifyGame::URL' has a wrong offset!");
static_assert(offsetof(HttpUtilities_VerifyGame, ExtraData) == 0x000010, "Member 'HttpUtilities_VerifyGame::ExtraData' has a wrong offset!");
static_assert(offsetof(HttpUtilities_VerifyGame, Callback) == 0x000060, "Member 'HttpUtilities_VerifyGame::Callback' has a wrong offset!");

// Function SiliconRising.Mer2WheeledVehicleMovement4W.GetEngineMaxRPM
// 0x0004 (0x0004 - 0x0000)
struct Mer2WheeledVehicleMovement4W_GetEngineMaxRPM final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mer2WheeledVehicleMovement4W_GetEngineMaxRPM) == 0x000004, "Wrong alignment on Mer2WheeledVehicleMovement4W_GetEngineMaxRPM");
static_assert(sizeof(Mer2WheeledVehicleMovement4W_GetEngineMaxRPM) == 0x000004, "Wrong size on Mer2WheeledVehicleMovement4W_GetEngineMaxRPM");
static_assert(offsetof(Mer2WheeledVehicleMovement4W_GetEngineMaxRPM, ReturnValue) == 0x000000, "Member 'Mer2WheeledVehicleMovement4W_GetEngineMaxRPM::ReturnValue' has a wrong offset!");

// Function SiliconRising.Mer2WheeledVehicleMovement4W.GetFinalSteeringInput
// 0x0004 (0x0004 - 0x0000)
struct Mer2WheeledVehicleMovement4W_GetFinalSteeringInput final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mer2WheeledVehicleMovement4W_GetFinalSteeringInput) == 0x000004, "Wrong alignment on Mer2WheeledVehicleMovement4W_GetFinalSteeringInput");
static_assert(sizeof(Mer2WheeledVehicleMovement4W_GetFinalSteeringInput) == 0x000004, "Wrong size on Mer2WheeledVehicleMovement4W_GetFinalSteeringInput");
static_assert(offsetof(Mer2WheeledVehicleMovement4W_GetFinalSteeringInput, ReturnValue) == 0x000000, "Member 'Mer2WheeledVehicleMovement4W_GetFinalSteeringInput::ReturnValue' has a wrong offset!");

// Function SiliconRising.Mer2WheeledVehicleMovement4W.SetEngineMaxRPM
// 0x0004 (0x0004 - 0x0000)
struct Mer2WheeledVehicleMovement4W_SetEngineMaxRPM final
{
public:
	float                                         fRPM;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mer2WheeledVehicleMovement4W_SetEngineMaxRPM) == 0x000004, "Wrong alignment on Mer2WheeledVehicleMovement4W_SetEngineMaxRPM");
static_assert(sizeof(Mer2WheeledVehicleMovement4W_SetEngineMaxRPM) == 0x000004, "Wrong size on Mer2WheeledVehicleMovement4W_SetEngineMaxRPM");
static_assert(offsetof(Mer2WheeledVehicleMovement4W_SetEngineMaxRPM, fRPM) == 0x000000, "Member 'Mer2WheeledVehicleMovement4W_SetEngineMaxRPM::fRPM' has a wrong offset!");

// Function SiliconRising.Mercenary2GameMode.VerifyUserInfo
// 0x0018 (0x0018 - 0x0000)
struct Mercenary2GameMode_VerifyUserInfo final
{
public:
	class FString                                 strToken;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Mercenary2GameMode_VerifyUserInfo) == 0x000008, "Wrong alignment on Mercenary2GameMode_VerifyUserInfo");
static_assert(sizeof(Mercenary2GameMode_VerifyUserInfo) == 0x000018, "Wrong size on Mercenary2GameMode_VerifyUserInfo");
static_assert(offsetof(Mercenary2GameMode_VerifyUserInfo, strToken) == 0x000000, "Member 'Mercenary2GameMode_VerifyUserInfo::strToken' has a wrong offset!");
static_assert(offsetof(Mercenary2GameMode_VerifyUserInfo, ReturnValue) == 0x000010, "Member 'Mercenary2GameMode_VerifyUserInfo::ReturnValue' has a wrong offset!");

// Function SiliconRising.Mercenary2_PVP_GameMode.Evt_NewPlayerConnect
// 0x0038 (0x0038 - 0x0000)
struct Mercenary2_PVP_GameMode_Evt_NewPlayerConnect final
{
public:
	class APlayerController*                      NewPlayerController;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RoomName;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RoomID;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerID;                                          // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Mercenary2_PVP_GameMode_Evt_NewPlayerConnect) == 0x000008, "Wrong alignment on Mercenary2_PVP_GameMode_Evt_NewPlayerConnect");
static_assert(sizeof(Mercenary2_PVP_GameMode_Evt_NewPlayerConnect) == 0x000038, "Wrong size on Mercenary2_PVP_GameMode_Evt_NewPlayerConnect");
static_assert(offsetof(Mercenary2_PVP_GameMode_Evt_NewPlayerConnect, NewPlayerController) == 0x000000, "Member 'Mercenary2_PVP_GameMode_Evt_NewPlayerConnect::NewPlayerController' has a wrong offset!");
static_assert(offsetof(Mercenary2_PVP_GameMode_Evt_NewPlayerConnect, RoomName) == 0x000008, "Member 'Mercenary2_PVP_GameMode_Evt_NewPlayerConnect::RoomName' has a wrong offset!");
static_assert(offsetof(Mercenary2_PVP_GameMode_Evt_NewPlayerConnect, RoomID) == 0x000018, "Member 'Mercenary2_PVP_GameMode_Evt_NewPlayerConnect::RoomID' has a wrong offset!");
static_assert(offsetof(Mercenary2_PVP_GameMode_Evt_NewPlayerConnect, PlayerID) == 0x000028, "Member 'Mercenary2_PVP_GameMode_Evt_NewPlayerConnect::PlayerID' has a wrong offset!");

// Function SiliconRising.TcpSocketConnection.Concat_BytesBytes
// 0x0030 (0x0030 - 0x0000)
struct TcpSocketConnection_Concat_BytesBytes final
{
public:
	TArray<uint8>                                 A;                                                 // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 B;                                                 // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TcpSocketConnection_Concat_BytesBytes) == 0x000008, "Wrong alignment on TcpSocketConnection_Concat_BytesBytes");
static_assert(sizeof(TcpSocketConnection_Concat_BytesBytes) == 0x000030, "Wrong size on TcpSocketConnection_Concat_BytesBytes");
static_assert(offsetof(TcpSocketConnection_Concat_BytesBytes, A) == 0x000000, "Member 'TcpSocketConnection_Concat_BytesBytes::A' has a wrong offset!");
static_assert(offsetof(TcpSocketConnection_Concat_BytesBytes, B) == 0x000010, "Member 'TcpSocketConnection_Concat_BytesBytes::B' has a wrong offset!");
static_assert(offsetof(TcpSocketConnection_Concat_BytesBytes, ReturnValue) == 0x000020, "Member 'TcpSocketConnection_Concat_BytesBytes::ReturnValue' has a wrong offset!");

// Function SiliconRising.TcpSocketConnection.Conv_ByteToBytes
// 0x0018 (0x0018 - 0x0000)
struct TcpSocketConnection_Conv_ByteToBytes final
{
public:
	uint8                                         InByte;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TcpSocketConnection_Conv_ByteToBytes) == 0x000008, "Wrong alignment on TcpSocketConnection_Conv_ByteToBytes");
static_assert(sizeof(TcpSocketConnection_Conv_ByteToBytes) == 0x000018, "Wrong size on TcpSocketConnection_Conv_ByteToBytes");
static_assert(offsetof(TcpSocketConnection_Conv_ByteToBytes, InByte) == 0x000000, "Member 'TcpSocketConnection_Conv_ByteToBytes::InByte' has a wrong offset!");
static_assert(offsetof(TcpSocketConnection_Conv_ByteToBytes, ReturnValue) == 0x000008, "Member 'TcpSocketConnection_Conv_ByteToBytes::ReturnValue' has a wrong offset!");

// Function SiliconRising.TcpSocketConnection.Conv_FloatToBytes
// 0x0018 (0x0018 - 0x0000)
struct TcpSocketConnection_Conv_FloatToBytes final
{
public:
	float                                         InFloat;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TcpSocketConnection_Conv_FloatToBytes) == 0x000008, "Wrong alignment on TcpSocketConnection_Conv_FloatToBytes");
static_assert(sizeof(TcpSocketConnection_Conv_FloatToBytes) == 0x000018, "Wrong size on TcpSocketConnection_Conv_FloatToBytes");
static_assert(offsetof(TcpSocketConnection_Conv_FloatToBytes, InFloat) == 0x000000, "Member 'TcpSocketConnection_Conv_FloatToBytes::InFloat' has a wrong offset!");
static_assert(offsetof(TcpSocketConnection_Conv_FloatToBytes, ReturnValue) == 0x000008, "Member 'TcpSocketConnection_Conv_FloatToBytes::ReturnValue' has a wrong offset!");

// Function SiliconRising.TcpSocketConnection.Conv_IntToBytes
// 0x0018 (0x0018 - 0x0000)
struct TcpSocketConnection_Conv_IntToBytes final
{
public:
	int32                                         inInt;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TcpSocketConnection_Conv_IntToBytes) == 0x000008, "Wrong alignment on TcpSocketConnection_Conv_IntToBytes");
static_assert(sizeof(TcpSocketConnection_Conv_IntToBytes) == 0x000018, "Wrong size on TcpSocketConnection_Conv_IntToBytes");
static_assert(offsetof(TcpSocketConnection_Conv_IntToBytes, inInt) == 0x000000, "Member 'TcpSocketConnection_Conv_IntToBytes::inInt' has a wrong offset!");
static_assert(offsetof(TcpSocketConnection_Conv_IntToBytes, ReturnValue) == 0x000008, "Member 'TcpSocketConnection_Conv_IntToBytes::ReturnValue' has a wrong offset!");

// Function SiliconRising.TcpSocketConnection.Conv_StringToBytes
// 0x0020 (0x0020 - 0x0000)
struct TcpSocketConnection_Conv_StringToBytes final
{
public:
	class FString                                 InStr;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TcpSocketConnection_Conv_StringToBytes) == 0x000008, "Wrong alignment on TcpSocketConnection_Conv_StringToBytes");
static_assert(sizeof(TcpSocketConnection_Conv_StringToBytes) == 0x000020, "Wrong size on TcpSocketConnection_Conv_StringToBytes");
static_assert(offsetof(TcpSocketConnection_Conv_StringToBytes, InStr) == 0x000000, "Member 'TcpSocketConnection_Conv_StringToBytes::InStr' has a wrong offset!");
static_assert(offsetof(TcpSocketConnection_Conv_StringToBytes, ReturnValue) == 0x000010, "Member 'TcpSocketConnection_Conv_StringToBytes::ReturnValue' has a wrong offset!");

// Function SiliconRising.TcpSocketConnection.Message_ReadByte
// 0x0018 (0x0018 - 0x0000)
struct TcpSocketConnection_Message_ReadByte final
{
public:
	TArray<uint8>                                 Message;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TcpSocketConnection_Message_ReadByte) == 0x000008, "Wrong alignment on TcpSocketConnection_Message_ReadByte");
static_assert(sizeof(TcpSocketConnection_Message_ReadByte) == 0x000018, "Wrong size on TcpSocketConnection_Message_ReadByte");
static_assert(offsetof(TcpSocketConnection_Message_ReadByte, Message) == 0x000000, "Member 'TcpSocketConnection_Message_ReadByte::Message' has a wrong offset!");
static_assert(offsetof(TcpSocketConnection_Message_ReadByte, ReturnValue) == 0x000010, "Member 'TcpSocketConnection_Message_ReadByte::ReturnValue' has a wrong offset!");

// Function SiliconRising.TcpSocketConnection.Message_ReadFloat
// 0x0018 (0x0018 - 0x0000)
struct TcpSocketConnection_Message_ReadFloat final
{
public:
	TArray<uint8>                                 Message;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TcpSocketConnection_Message_ReadFloat) == 0x000008, "Wrong alignment on TcpSocketConnection_Message_ReadFloat");
static_assert(sizeof(TcpSocketConnection_Message_ReadFloat) == 0x000018, "Wrong size on TcpSocketConnection_Message_ReadFloat");
static_assert(offsetof(TcpSocketConnection_Message_ReadFloat, Message) == 0x000000, "Member 'TcpSocketConnection_Message_ReadFloat::Message' has a wrong offset!");
static_assert(offsetof(TcpSocketConnection_Message_ReadFloat, ReturnValue) == 0x000010, "Member 'TcpSocketConnection_Message_ReadFloat::ReturnValue' has a wrong offset!");

// Function SiliconRising.TcpSocketConnection.Message_ReadInt
// 0x0018 (0x0018 - 0x0000)
struct TcpSocketConnection_Message_ReadInt final
{
public:
	TArray<uint8>                                 Message;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TcpSocketConnection_Message_ReadInt) == 0x000008, "Wrong alignment on TcpSocketConnection_Message_ReadInt");
static_assert(sizeof(TcpSocketConnection_Message_ReadInt) == 0x000018, "Wrong size on TcpSocketConnection_Message_ReadInt");
static_assert(offsetof(TcpSocketConnection_Message_ReadInt, Message) == 0x000000, "Member 'TcpSocketConnection_Message_ReadInt::Message' has a wrong offset!");
static_assert(offsetof(TcpSocketConnection_Message_ReadInt, ReturnValue) == 0x000010, "Member 'TcpSocketConnection_Message_ReadInt::ReturnValue' has a wrong offset!");

// Function SiliconRising.TcpSocketConnection.Message_ReadString
// 0x0028 (0x0028 - 0x0000)
struct TcpSocketConnection_Message_ReadString final
{
public:
	TArray<uint8>                                 Message;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         StringLength;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TcpSocketConnection_Message_ReadString) == 0x000008, "Wrong alignment on TcpSocketConnection_Message_ReadString");
static_assert(sizeof(TcpSocketConnection_Message_ReadString) == 0x000028, "Wrong size on TcpSocketConnection_Message_ReadString");
static_assert(offsetof(TcpSocketConnection_Message_ReadString, Message) == 0x000000, "Member 'TcpSocketConnection_Message_ReadString::Message' has a wrong offset!");
static_assert(offsetof(TcpSocketConnection_Message_ReadString, StringLength) == 0x000010, "Member 'TcpSocketConnection_Message_ReadString::StringLength' has a wrong offset!");
static_assert(offsetof(TcpSocketConnection_Message_ReadString, ReturnValue) == 0x000018, "Member 'TcpSocketConnection_Message_ReadString::ReturnValue' has a wrong offset!");

// Function SiliconRising.TcpSocketConnection.Connect
// 0x0060 (0x0060 - 0x0000)
struct TcpSocketConnection_Connect final
{
public:
	class FString                                 ipAddress;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const class FString& ConnectionId)> OnDisconnected;                               // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(const class FString& ConnectionId)> OnConnected;                                  // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(const class FString& ConnectionId, const TArray<uint8>& Message)> OnMessageReceived; // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ConnectionId;                                      // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUniqueCheck;                                      // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAlreadyConnected;                               // 0x0059(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TcpSocketConnection_Connect) == 0x000008, "Wrong alignment on TcpSocketConnection_Connect");
static_assert(sizeof(TcpSocketConnection_Connect) == 0x000060, "Wrong size on TcpSocketConnection_Connect");
static_assert(offsetof(TcpSocketConnection_Connect, ipAddress) == 0x000000, "Member 'TcpSocketConnection_Connect::ipAddress' has a wrong offset!");
static_assert(offsetof(TcpSocketConnection_Connect, Port) == 0x000010, "Member 'TcpSocketConnection_Connect::Port' has a wrong offset!");
static_assert(offsetof(TcpSocketConnection_Connect, OnDisconnected) == 0x000018, "Member 'TcpSocketConnection_Connect::OnDisconnected' has a wrong offset!");
static_assert(offsetof(TcpSocketConnection_Connect, OnConnected) == 0x000028, "Member 'TcpSocketConnection_Connect::OnConnected' has a wrong offset!");
static_assert(offsetof(TcpSocketConnection_Connect, OnMessageReceived) == 0x000038, "Member 'TcpSocketConnection_Connect::OnMessageReceived' has a wrong offset!");
static_assert(offsetof(TcpSocketConnection_Connect, ConnectionId) == 0x000048, "Member 'TcpSocketConnection_Connect::ConnectionId' has a wrong offset!");
static_assert(offsetof(TcpSocketConnection_Connect, bUniqueCheck) == 0x000058, "Member 'TcpSocketConnection_Connect::bUniqueCheck' has a wrong offset!");
static_assert(offsetof(TcpSocketConnection_Connect, bIsAlreadyConnected) == 0x000059, "Member 'TcpSocketConnection_Connect::bIsAlreadyConnected' has a wrong offset!");

// Function SiliconRising.TcpSocketConnection.Disconnect
// 0x0010 (0x0010 - 0x0000)
struct TcpSocketConnection_Disconnect final
{
public:
	class FString                                 ConnectionId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TcpSocketConnection_Disconnect) == 0x000008, "Wrong alignment on TcpSocketConnection_Disconnect");
static_assert(sizeof(TcpSocketConnection_Disconnect) == 0x000010, "Wrong size on TcpSocketConnection_Disconnect");
static_assert(offsetof(TcpSocketConnection_Disconnect, ConnectionId) == 0x000000, "Member 'TcpSocketConnection_Disconnect::ConnectionId' has a wrong offset!");

// Function SiliconRising.TcpSocketConnection.SendData
// 0x0028 (0x0028 - 0x0000)
struct TcpSocketConnection_SendData final
{
public:
	class FString                                 ConnectionId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 DataToSend;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TcpSocketConnection_SendData) == 0x000008, "Wrong alignment on TcpSocketConnection_SendData");
static_assert(sizeof(TcpSocketConnection_SendData) == 0x000028, "Wrong size on TcpSocketConnection_SendData");
static_assert(offsetof(TcpSocketConnection_SendData, ConnectionId) == 0x000000, "Member 'TcpSocketConnection_SendData::ConnectionId' has a wrong offset!");
static_assert(offsetof(TcpSocketConnection_SendData, DataToSend) == 0x000010, "Member 'TcpSocketConnection_SendData::DataToSend' has a wrong offset!");
static_assert(offsetof(TcpSocketConnection_SendData, ReturnValue) == 0x000020, "Member 'TcpSocketConnection_SendData::ReturnValue' has a wrong offset!");

// Function SiliconRising.TcpPvpNetBaseActor.OnConnected
// 0x0010 (0x0010 - 0x0000)
struct TcpPvpNetBaseActor_OnConnected final
{
public:
	class FString                                 ConnectionId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TcpPvpNetBaseActor_OnConnected) == 0x000008, "Wrong alignment on TcpPvpNetBaseActor_OnConnected");
static_assert(sizeof(TcpPvpNetBaseActor_OnConnected) == 0x000010, "Wrong size on TcpPvpNetBaseActor_OnConnected");
static_assert(offsetof(TcpPvpNetBaseActor_OnConnected, ConnectionId) == 0x000000, "Member 'TcpPvpNetBaseActor_OnConnected::ConnectionId' has a wrong offset!");

// Function SiliconRising.TcpPvpNetBaseActor.OnDisconnect
// 0x0010 (0x0010 - 0x0000)
struct TcpPvpNetBaseActor_OnDisconnect final
{
public:
	class FString                                 ConnectionId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TcpPvpNetBaseActor_OnDisconnect) == 0x000008, "Wrong alignment on TcpPvpNetBaseActor_OnDisconnect");
static_assert(sizeof(TcpPvpNetBaseActor_OnDisconnect) == 0x000010, "Wrong size on TcpPvpNetBaseActor_OnDisconnect");
static_assert(offsetof(TcpPvpNetBaseActor_OnDisconnect, ConnectionId) == 0x000000, "Member 'TcpPvpNetBaseActor_OnDisconnect::ConnectionId' has a wrong offset!");

// Function SiliconRising.TcpPvpNetBaseActor.OnReceivedMessage
// 0x0020 (0x0020 - 0x0000)
struct TcpPvpNetBaseActor_OnReceivedMessage final
{
public:
	class FString                                 ConnectionId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Message;                                           // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TcpPvpNetBaseActor_OnReceivedMessage) == 0x000008, "Wrong alignment on TcpPvpNetBaseActor_OnReceivedMessage");
static_assert(sizeof(TcpPvpNetBaseActor_OnReceivedMessage) == 0x000020, "Wrong size on TcpPvpNetBaseActor_OnReceivedMessage");
static_assert(offsetof(TcpPvpNetBaseActor_OnReceivedMessage, ConnectionId) == 0x000000, "Member 'TcpPvpNetBaseActor_OnReceivedMessage::ConnectionId' has a wrong offset!");
static_assert(offsetof(TcpPvpNetBaseActor_OnReceivedMessage, Message) == 0x000010, "Member 'TcpPvpNetBaseActor_OnReceivedMessage::Message' has a wrong offset!");

// Function SiliconRising.TcpPvpClientToBackendServer.CheckConnection
// 0x0001 (0x0001 - 0x0000)
struct TcpPvpClientToBackendServer_CheckConnection final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TcpPvpClientToBackendServer_CheckConnection) == 0x000001, "Wrong alignment on TcpPvpClientToBackendServer_CheckConnection");
static_assert(sizeof(TcpPvpClientToBackendServer_CheckConnection) == 0x000001, "Wrong size on TcpPvpClientToBackendServer_CheckConnection");
static_assert(offsetof(TcpPvpClientToBackendServer_CheckConnection, ReturnValue) == 0x000000, "Member 'TcpPvpClientToBackendServer_CheckConnection::ReturnValue' has a wrong offset!");

// Function SiliconRising.TcpPvpClientToBackendServer.Evt_ReceiveMessage
// 0x0018 (0x0018 - 0x0000)
struct TcpPvpClientToBackendServer_Evt_ReceiveMessage final
{
public:
	struct FYYMsgData                             Message;                                           // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TcpPvpClientToBackendServer_Evt_ReceiveMessage) == 0x000008, "Wrong alignment on TcpPvpClientToBackendServer_Evt_ReceiveMessage");
static_assert(sizeof(TcpPvpClientToBackendServer_Evt_ReceiveMessage) == 0x000018, "Wrong size on TcpPvpClientToBackendServer_Evt_ReceiveMessage");
static_assert(offsetof(TcpPvpClientToBackendServer_Evt_ReceiveMessage, Message) == 0x000000, "Member 'TcpPvpClientToBackendServer_Evt_ReceiveMessage::Message' has a wrong offset!");

// Function SiliconRising.TcpPvpClientToBackendServer.GetCurrentPlayerID
// 0x0010 (0x0010 - 0x0000)
struct TcpPvpClientToBackendServer_GetCurrentPlayerID final
{
public:
	struct FYYMsgIdent                            ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TcpPvpClientToBackendServer_GetCurrentPlayerID) == 0x000008, "Wrong alignment on TcpPvpClientToBackendServer_GetCurrentPlayerID");
static_assert(sizeof(TcpPvpClientToBackendServer_GetCurrentPlayerID) == 0x000010, "Wrong size on TcpPvpClientToBackendServer_GetCurrentPlayerID");
static_assert(offsetof(TcpPvpClientToBackendServer_GetCurrentPlayerID, ReturnValue) == 0x000000, "Member 'TcpPvpClientToBackendServer_GetCurrentPlayerID::ReturnValue' has a wrong offset!");

// Function SiliconRising.TcpPvpClientToBackendServer.GetCurrentRoomInfo
// 0x0080 (0x0080 - 0x0000)
struct TcpPvpClientToBackendServer_GetCurrentRoomInfo final
{
public:
	struct FYYMsgReqAckRoomInfo                   ReturnValue;                                       // 0x0000(0x0080)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TcpPvpClientToBackendServer_GetCurrentRoomInfo) == 0x000008, "Wrong alignment on TcpPvpClientToBackendServer_GetCurrentRoomInfo");
static_assert(sizeof(TcpPvpClientToBackendServer_GetCurrentRoomInfo) == 0x000080, "Wrong size on TcpPvpClientToBackendServer_GetCurrentRoomInfo");
static_assert(offsetof(TcpPvpClientToBackendServer_GetCurrentRoomInfo, ReturnValue) == 0x000000, "Member 'TcpPvpClientToBackendServer_GetCurrentRoomInfo::ReturnValue' has a wrong offset!");

// Function SiliconRising.TcpPvpClientToBackendServer.MsgID_MID_ACK_PINGPONG
// 0x0028 (0x0028 - 0x0000)
struct TcpPvpClientToBackendServer_MsgID_MID_ACK_PINGPONG final
{
public:
	class FString                                 ConnectionId;                                      // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MsgID;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Data;                                              // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TcpPvpClientToBackendServer_MsgID_MID_ACK_PINGPONG) == 0x000008, "Wrong alignment on TcpPvpClientToBackendServer_MsgID_MID_ACK_PINGPONG");
static_assert(sizeof(TcpPvpClientToBackendServer_MsgID_MID_ACK_PINGPONG) == 0x000028, "Wrong size on TcpPvpClientToBackendServer_MsgID_MID_ACK_PINGPONG");
static_assert(offsetof(TcpPvpClientToBackendServer_MsgID_MID_ACK_PINGPONG, ConnectionId) == 0x000000, "Member 'TcpPvpClientToBackendServer_MsgID_MID_ACK_PINGPONG::ConnectionId' has a wrong offset!");
static_assert(offsetof(TcpPvpClientToBackendServer_MsgID_MID_ACK_PINGPONG, MsgID) == 0x000010, "Member 'TcpPvpClientToBackendServer_MsgID_MID_ACK_PINGPONG::MsgID' has a wrong offset!");
static_assert(offsetof(TcpPvpClientToBackendServer_MsgID_MID_ACK_PINGPONG, Data) == 0x000018, "Member 'TcpPvpClientToBackendServer_MsgID_MID_ACK_PINGPONG::Data' has a wrong offset!");

// Function SiliconRising.TcpPvpClientToBackendServer.OnRecieveAllMessage
// 0x0028 (0x0028 - 0x0000)
struct TcpPvpClientToBackendServer_OnRecieveAllMessage final
{
public:
	class FString                                 ConnectionId;                                      // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MsgID;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Data;                                              // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TcpPvpClientToBackendServer_OnRecieveAllMessage) == 0x000008, "Wrong alignment on TcpPvpClientToBackendServer_OnRecieveAllMessage");
static_assert(sizeof(TcpPvpClientToBackendServer_OnRecieveAllMessage) == 0x000028, "Wrong size on TcpPvpClientToBackendServer_OnRecieveAllMessage");
static_assert(offsetof(TcpPvpClientToBackendServer_OnRecieveAllMessage, ConnectionId) == 0x000000, "Member 'TcpPvpClientToBackendServer_OnRecieveAllMessage::ConnectionId' has a wrong offset!");
static_assert(offsetof(TcpPvpClientToBackendServer_OnRecieveAllMessage, MsgID) == 0x000010, "Member 'TcpPvpClientToBackendServer_OnRecieveAllMessage::MsgID' has a wrong offset!");
static_assert(offsetof(TcpPvpClientToBackendServer_OnRecieveAllMessage, Data) == 0x000018, "Member 'TcpPvpClientToBackendServer_OnRecieveAllMessage::Data' has a wrong offset!");

// Function SiliconRising.TcpPvpClientToBackendServer.SendMessageToServer
// 0x0020 (0x0020 - 0x0000)
struct TcpPvpClientToBackendServer_SendMessageToServer final
{
public:
	struct FYYMsgData                             Message;                                           // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TcpPvpClientToBackendServer_SendMessageToServer) == 0x000008, "Wrong alignment on TcpPvpClientToBackendServer_SendMessageToServer");
static_assert(sizeof(TcpPvpClientToBackendServer_SendMessageToServer) == 0x000020, "Wrong size on TcpPvpClientToBackendServer_SendMessageToServer");
static_assert(offsetof(TcpPvpClientToBackendServer_SendMessageToServer, Message) == 0x000000, "Member 'TcpPvpClientToBackendServer_SendMessageToServer::Message' has a wrong offset!");
static_assert(offsetof(TcpPvpClientToBackendServer_SendMessageToServer, ReturnValue) == 0x000018, "Member 'TcpPvpClientToBackendServer_SendMessageToServer::ReturnValue' has a wrong offset!");

// Function SiliconRising.TcpPvpClientToBackendServer.SetCurrentPlayerID
// 0x0010 (0x0010 - 0x0000)
struct TcpPvpClientToBackendServer_SetCurrentPlayerID final
{
public:
	struct FYYMsgIdent                            Value;                                             // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TcpPvpClientToBackendServer_SetCurrentPlayerID) == 0x000008, "Wrong alignment on TcpPvpClientToBackendServer_SetCurrentPlayerID");
static_assert(sizeof(TcpPvpClientToBackendServer_SetCurrentPlayerID) == 0x000010, "Wrong size on TcpPvpClientToBackendServer_SetCurrentPlayerID");
static_assert(offsetof(TcpPvpClientToBackendServer_SetCurrentPlayerID, Value) == 0x000000, "Member 'TcpPvpClientToBackendServer_SetCurrentPlayerID::Value' has a wrong offset!");

// Function SiliconRising.TcpPvpClientToBackendServer.SetCurrentRoomInfo
// 0x0080 (0x0080 - 0x0000)
struct TcpPvpClientToBackendServer_SetCurrentRoomInfo final
{
public:
	struct FYYMsgReqAckRoomInfo                   Value;                                             // 0x0000(0x0080)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TcpPvpClientToBackendServer_SetCurrentRoomInfo) == 0x000008, "Wrong alignment on TcpPvpClientToBackendServer_SetCurrentRoomInfo");
static_assert(sizeof(TcpPvpClientToBackendServer_SetCurrentRoomInfo) == 0x000080, "Wrong size on TcpPvpClientToBackendServer_SetCurrentRoomInfo");
static_assert(offsetof(TcpPvpClientToBackendServer_SetCurrentRoomInfo, Value) == 0x000000, "Member 'TcpPvpClientToBackendServer_SetCurrentRoomInfo::Value' has a wrong offset!");

// Function SiliconRising.TcpPvpClientToBackendServer.StartConnectToServer
// 0x0003 (0x0003 - 0x0000)
struct TcpPvpClientToBackendServer_StartConnectToServer final
{
public:
	bool                                          bUniqueCheck;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAlreadyConnected;                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TcpPvpClientToBackendServer_StartConnectToServer) == 0x000001, "Wrong alignment on TcpPvpClientToBackendServer_StartConnectToServer");
static_assert(sizeof(TcpPvpClientToBackendServer_StartConnectToServer) == 0x000003, "Wrong size on TcpPvpClientToBackendServer_StartConnectToServer");
static_assert(offsetof(TcpPvpClientToBackendServer_StartConnectToServer, bUniqueCheck) == 0x000000, "Member 'TcpPvpClientToBackendServer_StartConnectToServer::bUniqueCheck' has a wrong offset!");
static_assert(offsetof(TcpPvpClientToBackendServer_StartConnectToServer, bIsAlreadyConnected) == 0x000001, "Member 'TcpPvpClientToBackendServer_StartConnectToServer::bIsAlreadyConnected' has a wrong offset!");
static_assert(offsetof(TcpPvpClientToBackendServer_StartConnectToServer, ReturnValue) == 0x000002, "Member 'TcpPvpClientToBackendServer_StartConnectToServer::ReturnValue' has a wrong offset!");

// Function SiliconRising.TcpPvpServerToBackendServer.Evt_ReceiveMessage
// 0x0018 (0x0018 - 0x0000)
struct TcpPvpServerToBackendServer_Evt_ReceiveMessage final
{
public:
	struct FYYMsgData                             Message;                                           // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TcpPvpServerToBackendServer_Evt_ReceiveMessage) == 0x000008, "Wrong alignment on TcpPvpServerToBackendServer_Evt_ReceiveMessage");
static_assert(sizeof(TcpPvpServerToBackendServer_Evt_ReceiveMessage) == 0x000018, "Wrong size on TcpPvpServerToBackendServer_Evt_ReceiveMessage");
static_assert(offsetof(TcpPvpServerToBackendServer_Evt_ReceiveMessage, Message) == 0x000000, "Member 'TcpPvpServerToBackendServer_Evt_ReceiveMessage::Message' has a wrong offset!");

// Function SiliconRising.TcpPvpServerToBackendServer.GetServerRunPort
// 0x0004 (0x0004 - 0x0000)
struct TcpPvpServerToBackendServer_GetServerRunPort final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TcpPvpServerToBackendServer_GetServerRunPort) == 0x000004, "Wrong alignment on TcpPvpServerToBackendServer_GetServerRunPort");
static_assert(sizeof(TcpPvpServerToBackendServer_GetServerRunPort) == 0x000004, "Wrong size on TcpPvpServerToBackendServer_GetServerRunPort");
static_assert(offsetof(TcpPvpServerToBackendServer_GetServerRunPort, ReturnValue) == 0x000000, "Member 'TcpPvpServerToBackendServer_GetServerRunPort::ReturnValue' has a wrong offset!");

// Function SiliconRising.TcpPvpServerToBackendServer.MsgID_MID_ACK_PINGPONG
// 0x0028 (0x0028 - 0x0000)
struct TcpPvpServerToBackendServer_MsgID_MID_ACK_PINGPONG final
{
public:
	class FString                                 ConnectionId;                                      // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MsgID;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Data;                                              // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TcpPvpServerToBackendServer_MsgID_MID_ACK_PINGPONG) == 0x000008, "Wrong alignment on TcpPvpServerToBackendServer_MsgID_MID_ACK_PINGPONG");
static_assert(sizeof(TcpPvpServerToBackendServer_MsgID_MID_ACK_PINGPONG) == 0x000028, "Wrong size on TcpPvpServerToBackendServer_MsgID_MID_ACK_PINGPONG");
static_assert(offsetof(TcpPvpServerToBackendServer_MsgID_MID_ACK_PINGPONG, ConnectionId) == 0x000000, "Member 'TcpPvpServerToBackendServer_MsgID_MID_ACK_PINGPONG::ConnectionId' has a wrong offset!");
static_assert(offsetof(TcpPvpServerToBackendServer_MsgID_MID_ACK_PINGPONG, MsgID) == 0x000010, "Member 'TcpPvpServerToBackendServer_MsgID_MID_ACK_PINGPONG::MsgID' has a wrong offset!");
static_assert(offsetof(TcpPvpServerToBackendServer_MsgID_MID_ACK_PINGPONG, Data) == 0x000018, "Member 'TcpPvpServerToBackendServer_MsgID_MID_ACK_PINGPONG::Data' has a wrong offset!");

// Function SiliconRising.TcpPvpServerToBackendServer.OnRecieveAllMessage
// 0x0028 (0x0028 - 0x0000)
struct TcpPvpServerToBackendServer_OnRecieveAllMessage final
{
public:
	class FString                                 ConnectionId;                                      // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MsgID;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Data;                                              // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TcpPvpServerToBackendServer_OnRecieveAllMessage) == 0x000008, "Wrong alignment on TcpPvpServerToBackendServer_OnRecieveAllMessage");
static_assert(sizeof(TcpPvpServerToBackendServer_OnRecieveAllMessage) == 0x000028, "Wrong size on TcpPvpServerToBackendServer_OnRecieveAllMessage");
static_assert(offsetof(TcpPvpServerToBackendServer_OnRecieveAllMessage, ConnectionId) == 0x000000, "Member 'TcpPvpServerToBackendServer_OnRecieveAllMessage::ConnectionId' has a wrong offset!");
static_assert(offsetof(TcpPvpServerToBackendServer_OnRecieveAllMessage, MsgID) == 0x000010, "Member 'TcpPvpServerToBackendServer_OnRecieveAllMessage::MsgID' has a wrong offset!");
static_assert(offsetof(TcpPvpServerToBackendServer_OnRecieveAllMessage, Data) == 0x000018, "Member 'TcpPvpServerToBackendServer_OnRecieveAllMessage::Data' has a wrong offset!");

// Function SiliconRising.TcpPvpServerToBackendServer.SendMessageToServer
// 0x0020 (0x0020 - 0x0000)
struct TcpPvpServerToBackendServer_SendMessageToServer final
{
public:
	struct FYYMsgData                             Message;                                           // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TcpPvpServerToBackendServer_SendMessageToServer) == 0x000008, "Wrong alignment on TcpPvpServerToBackendServer_SendMessageToServer");
static_assert(sizeof(TcpPvpServerToBackendServer_SendMessageToServer) == 0x000020, "Wrong size on TcpPvpServerToBackendServer_SendMessageToServer");
static_assert(offsetof(TcpPvpServerToBackendServer_SendMessageToServer, Message) == 0x000000, "Member 'TcpPvpServerToBackendServer_SendMessageToServer::Message' has a wrong offset!");
static_assert(offsetof(TcpPvpServerToBackendServer_SendMessageToServer, ReturnValue) == 0x000018, "Member 'TcpPvpServerToBackendServer_SendMessageToServer::ReturnValue' has a wrong offset!");

// Function SiliconRising.TcpPvpServerToBackendServer.StartConnectToServer
// 0x0003 (0x0003 - 0x0000)
struct TcpPvpServerToBackendServer_StartConnectToServer final
{
public:
	bool                                          bUniqueCheck;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAlreadyConnected;                               // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TcpPvpServerToBackendServer_StartConnectToServer) == 0x000001, "Wrong alignment on TcpPvpServerToBackendServer_StartConnectToServer");
static_assert(sizeof(TcpPvpServerToBackendServer_StartConnectToServer) == 0x000003, "Wrong size on TcpPvpServerToBackendServer_StartConnectToServer");
static_assert(offsetof(TcpPvpServerToBackendServer_StartConnectToServer, bUniqueCheck) == 0x000000, "Member 'TcpPvpServerToBackendServer_StartConnectToServer::bUniqueCheck' has a wrong offset!");
static_assert(offsetof(TcpPvpServerToBackendServer_StartConnectToServer, bIsAlreadyConnected) == 0x000001, "Member 'TcpPvpServerToBackendServer_StartConnectToServer::bIsAlreadyConnected' has a wrong offset!");
static_assert(offsetof(TcpPvpServerToBackendServer_StartConnectToServer, ReturnValue) == 0x000002, "Member 'TcpPvpServerToBackendServer_StartConnectToServer::ReturnValue' has a wrong offset!");

// Function SiliconRising.UtilityBPLibrary.Add_FYYMsgInt64FYYMsgInt64
// 0x0018 (0x0018 - 0x0000)
struct UtilityBPLibrary_Add_FYYMsgInt64FYYMsgInt64 final
{
public:
	struct FYYMsgInt64                            A;                                                 // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FYYMsgInt64                            B;                                                 // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FYYMsgInt64                            ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtilityBPLibrary_Add_FYYMsgInt64FYYMsgInt64) == 0x000008, "Wrong alignment on UtilityBPLibrary_Add_FYYMsgInt64FYYMsgInt64");
static_assert(sizeof(UtilityBPLibrary_Add_FYYMsgInt64FYYMsgInt64) == 0x000018, "Wrong size on UtilityBPLibrary_Add_FYYMsgInt64FYYMsgInt64");
static_assert(offsetof(UtilityBPLibrary_Add_FYYMsgInt64FYYMsgInt64, A) == 0x000000, "Member 'UtilityBPLibrary_Add_FYYMsgInt64FYYMsgInt64::A' has a wrong offset!");
static_assert(offsetof(UtilityBPLibrary_Add_FYYMsgInt64FYYMsgInt64, B) == 0x000008, "Member 'UtilityBPLibrary_Add_FYYMsgInt64FYYMsgInt64::B' has a wrong offset!");
static_assert(offsetof(UtilityBPLibrary_Add_FYYMsgInt64FYYMsgInt64, ReturnValue) == 0x000010, "Member 'UtilityBPLibrary_Add_FYYMsgInt64FYYMsgInt64::ReturnValue' has a wrong offset!");

// Function SiliconRising.UtilityBPLibrary.ChangeCurrentLevelToListen
// 0x0010 (0x0010 - 0x0000)
struct UtilityBPLibrary_ChangeCurrentLevelToListen final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UtilityBPLibrary_ChangeCurrentLevelToListen) == 0x000008, "Wrong alignment on UtilityBPLibrary_ChangeCurrentLevelToListen");
static_assert(sizeof(UtilityBPLibrary_ChangeCurrentLevelToListen) == 0x000010, "Wrong size on UtilityBPLibrary_ChangeCurrentLevelToListen");
static_assert(offsetof(UtilityBPLibrary_ChangeCurrentLevelToListen, WorldContextObject) == 0x000000, "Member 'UtilityBPLibrary_ChangeCurrentLevelToListen::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UtilityBPLibrary_ChangeCurrentLevelToListen, ReturnValue) == 0x000008, "Member 'UtilityBPLibrary_ChangeCurrentLevelToListen::ReturnValue' has a wrong offset!");

// Function SiliconRising.UtilityBPLibrary.DecryptString
// 0x0020 (0x0020 - 0x0000)
struct UtilityBPLibrary_DecryptString final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtilityBPLibrary_DecryptString) == 0x000008, "Wrong alignment on UtilityBPLibrary_DecryptString");
static_assert(sizeof(UtilityBPLibrary_DecryptString) == 0x000020, "Wrong size on UtilityBPLibrary_DecryptString");
static_assert(offsetof(UtilityBPLibrary_DecryptString, String) == 0x000000, "Member 'UtilityBPLibrary_DecryptString::String' has a wrong offset!");
static_assert(offsetof(UtilityBPLibrary_DecryptString, ReturnValue) == 0x000010, "Member 'UtilityBPLibrary_DecryptString::ReturnValue' has a wrong offset!");

// Function SiliconRising.UtilityBPLibrary.DecryptStringKey
// 0x0030 (0x0030 - 0x0000)
struct UtilityBPLibrary_DecryptStringKey final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtilityBPLibrary_DecryptStringKey) == 0x000008, "Wrong alignment on UtilityBPLibrary_DecryptStringKey");
static_assert(sizeof(UtilityBPLibrary_DecryptStringKey) == 0x000030, "Wrong size on UtilityBPLibrary_DecryptStringKey");
static_assert(offsetof(UtilityBPLibrary_DecryptStringKey, String) == 0x000000, "Member 'UtilityBPLibrary_DecryptStringKey::String' has a wrong offset!");
static_assert(offsetof(UtilityBPLibrary_DecryptStringKey, Key) == 0x000010, "Member 'UtilityBPLibrary_DecryptStringKey::Key' has a wrong offset!");
static_assert(offsetof(UtilityBPLibrary_DecryptStringKey, ReturnValue) == 0x000020, "Member 'UtilityBPLibrary_DecryptStringKey::ReturnValue' has a wrong offset!");

// Function SiliconRising.UtilityBPLibrary.Divide_FYYMsgInt64FYYMsgInt64
// 0x0018 (0x0018 - 0x0000)
struct UtilityBPLibrary_Divide_FYYMsgInt64FYYMsgInt64 final
{
public:
	struct FYYMsgInt64                            A;                                                 // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FYYMsgInt64                            B;                                                 // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FYYMsgInt64                            ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtilityBPLibrary_Divide_FYYMsgInt64FYYMsgInt64) == 0x000008, "Wrong alignment on UtilityBPLibrary_Divide_FYYMsgInt64FYYMsgInt64");
static_assert(sizeof(UtilityBPLibrary_Divide_FYYMsgInt64FYYMsgInt64) == 0x000018, "Wrong size on UtilityBPLibrary_Divide_FYYMsgInt64FYYMsgInt64");
static_assert(offsetof(UtilityBPLibrary_Divide_FYYMsgInt64FYYMsgInt64, A) == 0x000000, "Member 'UtilityBPLibrary_Divide_FYYMsgInt64FYYMsgInt64::A' has a wrong offset!");
static_assert(offsetof(UtilityBPLibrary_Divide_FYYMsgInt64FYYMsgInt64, B) == 0x000008, "Member 'UtilityBPLibrary_Divide_FYYMsgInt64FYYMsgInt64::B' has a wrong offset!");
static_assert(offsetof(UtilityBPLibrary_Divide_FYYMsgInt64FYYMsgInt64, ReturnValue) == 0x000010, "Member 'UtilityBPLibrary_Divide_FYYMsgInt64FYYMsgInt64::ReturnValue' has a wrong offset!");

// Function SiliconRising.UtilityBPLibrary.EncryptString
// 0x0020 (0x0020 - 0x0000)
struct UtilityBPLibrary_EncryptString final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtilityBPLibrary_EncryptString) == 0x000008, "Wrong alignment on UtilityBPLibrary_EncryptString");
static_assert(sizeof(UtilityBPLibrary_EncryptString) == 0x000020, "Wrong size on UtilityBPLibrary_EncryptString");
static_assert(offsetof(UtilityBPLibrary_EncryptString, String) == 0x000000, "Member 'UtilityBPLibrary_EncryptString::String' has a wrong offset!");
static_assert(offsetof(UtilityBPLibrary_EncryptString, ReturnValue) == 0x000010, "Member 'UtilityBPLibrary_EncryptString::ReturnValue' has a wrong offset!");

// Function SiliconRising.UtilityBPLibrary.EncryptStringKey
// 0x0030 (0x0030 - 0x0000)
struct UtilityBPLibrary_EncryptStringKey final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtilityBPLibrary_EncryptStringKey) == 0x000008, "Wrong alignment on UtilityBPLibrary_EncryptStringKey");
static_assert(sizeof(UtilityBPLibrary_EncryptStringKey) == 0x000030, "Wrong size on UtilityBPLibrary_EncryptStringKey");
static_assert(offsetof(UtilityBPLibrary_EncryptStringKey, String) == 0x000000, "Member 'UtilityBPLibrary_EncryptStringKey::String' has a wrong offset!");
static_assert(offsetof(UtilityBPLibrary_EncryptStringKey, Key) == 0x000010, "Member 'UtilityBPLibrary_EncryptStringKey::Key' has a wrong offset!");
static_assert(offsetof(UtilityBPLibrary_EncryptStringKey, ReturnValue) == 0x000020, "Member 'UtilityBPLibrary_EncryptStringKey::ReturnValue' has a wrong offset!");

// Function SiliconRising.UtilityBPLibrary.EqualEqual_FYYMsgInt64FYYMsgInt64
// 0x0018 (0x0018 - 0x0000)
struct UtilityBPLibrary_EqualEqual_FYYMsgInt64FYYMsgInt64 final
{
public:
	struct FYYMsgInt64                            A;                                                 // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FYYMsgInt64                            B;                                                 // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UtilityBPLibrary_EqualEqual_FYYMsgInt64FYYMsgInt64) == 0x000008, "Wrong alignment on UtilityBPLibrary_EqualEqual_FYYMsgInt64FYYMsgInt64");
static_assert(sizeof(UtilityBPLibrary_EqualEqual_FYYMsgInt64FYYMsgInt64) == 0x000018, "Wrong size on UtilityBPLibrary_EqualEqual_FYYMsgInt64FYYMsgInt64");
static_assert(offsetof(UtilityBPLibrary_EqualEqual_FYYMsgInt64FYYMsgInt64, A) == 0x000000, "Member 'UtilityBPLibrary_EqualEqual_FYYMsgInt64FYYMsgInt64::A' has a wrong offset!");
static_assert(offsetof(UtilityBPLibrary_EqualEqual_FYYMsgInt64FYYMsgInt64, B) == 0x000008, "Member 'UtilityBPLibrary_EqualEqual_FYYMsgInt64FYYMsgInt64::B' has a wrong offset!");
static_assert(offsetof(UtilityBPLibrary_EqualEqual_FYYMsgInt64FYYMsgInt64, ReturnValue) == 0x000010, "Member 'UtilityBPLibrary_EqualEqual_FYYMsgInt64FYYMsgInt64::ReturnValue' has a wrong offset!");

// Function SiliconRising.UtilityBPLibrary.GameBuildNumber
// 0x0004 (0x0004 - 0x0000)
struct UtilityBPLibrary_GameBuildNumber final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtilityBPLibrary_GameBuildNumber) == 0x000004, "Wrong alignment on UtilityBPLibrary_GameBuildNumber");
static_assert(sizeof(UtilityBPLibrary_GameBuildNumber) == 0x000004, "Wrong size on UtilityBPLibrary_GameBuildNumber");
static_assert(offsetof(UtilityBPLibrary_GameBuildNumber, ReturnValue) == 0x000000, "Member 'UtilityBPLibrary_GameBuildNumber::ReturnValue' has a wrong offset!");

// Function SiliconRising.UtilityBPLibrary.GameMajorNumber
// 0x0004 (0x0004 - 0x0000)
struct UtilityBPLibrary_GameMajorNumber final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtilityBPLibrary_GameMajorNumber) == 0x000004, "Wrong alignment on UtilityBPLibrary_GameMajorNumber");
static_assert(sizeof(UtilityBPLibrary_GameMajorNumber) == 0x000004, "Wrong size on UtilityBPLibrary_GameMajorNumber");
static_assert(offsetof(UtilityBPLibrary_GameMajorNumber, ReturnValue) == 0x000000, "Member 'UtilityBPLibrary_GameMajorNumber::ReturnValue' has a wrong offset!");

// Function SiliconRising.UtilityBPLibrary.GameMinorNumber
// 0x0004 (0x0004 - 0x0000)
struct UtilityBPLibrary_GameMinorNumber final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtilityBPLibrary_GameMinorNumber) == 0x000004, "Wrong alignment on UtilityBPLibrary_GameMinorNumber");
static_assert(sizeof(UtilityBPLibrary_GameMinorNumber) == 0x000004, "Wrong size on UtilityBPLibrary_GameMinorNumber");
static_assert(offsetof(UtilityBPLibrary_GameMinorNumber, ReturnValue) == 0x000000, "Member 'UtilityBPLibrary_GameMinorNumber::ReturnValue' has a wrong offset!");

// Function SiliconRising.UtilityBPLibrary.GamePatchNumber
// 0x0004 (0x0004 - 0x0000)
struct UtilityBPLibrary_GamePatchNumber final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtilityBPLibrary_GamePatchNumber) == 0x000004, "Wrong alignment on UtilityBPLibrary_GamePatchNumber");
static_assert(sizeof(UtilityBPLibrary_GamePatchNumber) == 0x000004, "Wrong size on UtilityBPLibrary_GamePatchNumber");
static_assert(offsetof(UtilityBPLibrary_GamePatchNumber, ReturnValue) == 0x000000, "Member 'UtilityBPLibrary_GamePatchNumber::ReturnValue' has a wrong offset!");

// Function SiliconRising.UtilityBPLibrary.GameVersionString
// 0x0010 (0x0010 - 0x0000)
struct UtilityBPLibrary_GameVersionString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtilityBPLibrary_GameVersionString) == 0x000008, "Wrong alignment on UtilityBPLibrary_GameVersionString");
static_assert(sizeof(UtilityBPLibrary_GameVersionString) == 0x000010, "Wrong size on UtilityBPLibrary_GameVersionString");
static_assert(offsetof(UtilityBPLibrary_GameVersionString, ReturnValue) == 0x000000, "Member 'UtilityBPLibrary_GameVersionString::ReturnValue' has a wrong offset!");

// Function SiliconRising.UtilityBPLibrary.GetBuildMode
// 0x0010 (0x0010 - 0x0000)
struct UtilityBPLibrary_GetBuildMode final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtilityBPLibrary_GetBuildMode) == 0x000008, "Wrong alignment on UtilityBPLibrary_GetBuildMode");
static_assert(sizeof(UtilityBPLibrary_GetBuildMode) == 0x000010, "Wrong size on UtilityBPLibrary_GetBuildMode");
static_assert(offsetof(UtilityBPLibrary_GetBuildMode, ReturnValue) == 0x000000, "Member 'UtilityBPLibrary_GetBuildMode::ReturnValue' has a wrong offset!");

// Function SiliconRising.UtilityBPLibrary.GetChannelID
// 0x0010 (0x0010 - 0x0000)
struct UtilityBPLibrary_GetChannelID final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtilityBPLibrary_GetChannelID) == 0x000008, "Wrong alignment on UtilityBPLibrary_GetChannelID");
static_assert(sizeof(UtilityBPLibrary_GetChannelID) == 0x000010, "Wrong size on UtilityBPLibrary_GetChannelID");
static_assert(offsetof(UtilityBPLibrary_GetChannelID, ReturnValue) == 0x000000, "Member 'UtilityBPLibrary_GetChannelID::ReturnValue' has a wrong offset!");

// Function SiliconRising.UtilityBPLibrary.GetCurrentWorldType
// 0x0010 (0x0010 - 0x0000)
struct UtilityBPLibrary_GetCurrentWorldType final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtilityBPLibrary_GetCurrentWorldType) == 0x000008, "Wrong alignment on UtilityBPLibrary_GetCurrentWorldType");
static_assert(sizeof(UtilityBPLibrary_GetCurrentWorldType) == 0x000010, "Wrong size on UtilityBPLibrary_GetCurrentWorldType");
static_assert(offsetof(UtilityBPLibrary_GetCurrentWorldType, ReturnValue) == 0x000000, "Member 'UtilityBPLibrary_GetCurrentWorldType::ReturnValue' has a wrong offset!");

// Function SiliconRising.UtilityBPLibrary.GetHMDMonitorName
// 0x0010 (0x0010 - 0x0000)
struct UtilityBPLibrary_GetHMDMonitorName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtilityBPLibrary_GetHMDMonitorName) == 0x000008, "Wrong alignment on UtilityBPLibrary_GetHMDMonitorName");
static_assert(sizeof(UtilityBPLibrary_GetHMDMonitorName) == 0x000010, "Wrong size on UtilityBPLibrary_GetHMDMonitorName");
static_assert(offsetof(UtilityBPLibrary_GetHMDMonitorName, ReturnValue) == 0x000000, "Member 'UtilityBPLibrary_GetHMDMonitorName::ReturnValue' has a wrong offset!");

// Function SiliconRising.UtilityBPLibrary.GetHMDType
// 0x0001 (0x0001 - 0x0000)
struct UtilityBPLibrary_GetHMDType final
{
public:
	EVRHeadMountedDevicType_Mer2                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtilityBPLibrary_GetHMDType) == 0x000001, "Wrong alignment on UtilityBPLibrary_GetHMDType");
static_assert(sizeof(UtilityBPLibrary_GetHMDType) == 0x000001, "Wrong size on UtilityBPLibrary_GetHMDType");
static_assert(offsetof(UtilityBPLibrary_GetHMDType, ReturnValue) == 0x000000, "Member 'UtilityBPLibrary_GetHMDType::ReturnValue' has a wrong offset!");

// Function SiliconRising.UtilityBPLibrary.GetHostByName
// 0x0020 (0x0020 - 0x0000)
struct UtilityBPLibrary_GetHostByName final
{
public:
	class FString                                 hostname;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtilityBPLibrary_GetHostByName) == 0x000008, "Wrong alignment on UtilityBPLibrary_GetHostByName");
static_assert(sizeof(UtilityBPLibrary_GetHostByName) == 0x000020, "Wrong size on UtilityBPLibrary_GetHostByName");
static_assert(offsetof(UtilityBPLibrary_GetHostByName, hostname) == 0x000000, "Member 'UtilityBPLibrary_GetHostByName::hostname' has a wrong offset!");
static_assert(offsetof(UtilityBPLibrary_GetHostByName, ReturnValue) == 0x000010, "Member 'UtilityBPLibrary_GetHostByName::ReturnValue' has a wrong offset!");

// Function SiliconRising.UtilityBPLibrary.GetMachineID
// 0x0010 (0x0010 - 0x0000)
struct UtilityBPLibrary_GetMachineID final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtilityBPLibrary_GetMachineID) == 0x000008, "Wrong alignment on UtilityBPLibrary_GetMachineID");
static_assert(sizeof(UtilityBPLibrary_GetMachineID) == 0x000010, "Wrong size on UtilityBPLibrary_GetMachineID");
static_assert(offsetof(UtilityBPLibrary_GetMachineID, ReturnValue) == 0x000000, "Member 'UtilityBPLibrary_GetMachineID::ReturnValue' has a wrong offset!");

// Function SiliconRising.UtilityBPLibrary.GetPVPServerIP
// 0x0010 (0x0010 - 0x0000)
struct UtilityBPLibrary_GetPVPServerIP final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtilityBPLibrary_GetPVPServerIP) == 0x000008, "Wrong alignment on UtilityBPLibrary_GetPVPServerIP");
static_assert(sizeof(UtilityBPLibrary_GetPVPServerIP) == 0x000010, "Wrong size on UtilityBPLibrary_GetPVPServerIP");
static_assert(offsetof(UtilityBPLibrary_GetPVPServerIP, ReturnValue) == 0x000000, "Member 'UtilityBPLibrary_GetPVPServerIP::ReturnValue' has a wrong offset!");

// Function SiliconRising.UtilityBPLibrary.GetSteamAchievementsFromIni
// 0x0018 (0x0018 - 0x0000)
struct UtilityBPLibrary_GetSteamAchievementsFromIni final
{
public:
	TArray<struct FOnlineAchievementSteam>        OutArray;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UtilityBPLibrary_GetSteamAchievementsFromIni) == 0x000008, "Wrong alignment on UtilityBPLibrary_GetSteamAchievementsFromIni");
static_assert(sizeof(UtilityBPLibrary_GetSteamAchievementsFromIni) == 0x000018, "Wrong size on UtilityBPLibrary_GetSteamAchievementsFromIni");
static_assert(offsetof(UtilityBPLibrary_GetSteamAchievementsFromIni, OutArray) == 0x000000, "Member 'UtilityBPLibrary_GetSteamAchievementsFromIni::OutArray' has a wrong offset!");
static_assert(offsetof(UtilityBPLibrary_GetSteamAchievementsFromIni, ReturnValue) == 0x000010, "Member 'UtilityBPLibrary_GetSteamAchievementsFromIni::ReturnValue' has a wrong offset!");

// Function SiliconRising.UtilityBPLibrary.GetViveportHeadUrl
// 0x0010 (0x0010 - 0x0000)
struct UtilityBPLibrary_GetViveportHeadUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtilityBPLibrary_GetViveportHeadUrl) == 0x000008, "Wrong alignment on UtilityBPLibrary_GetViveportHeadUrl");
static_assert(sizeof(UtilityBPLibrary_GetViveportHeadUrl) == 0x000010, "Wrong size on UtilityBPLibrary_GetViveportHeadUrl");
static_assert(offsetof(UtilityBPLibrary_GetViveportHeadUrl, ReturnValue) == 0x000000, "Member 'UtilityBPLibrary_GetViveportHeadUrl::ReturnValue' has a wrong offset!");

// Function SiliconRising.UtilityBPLibrary.GetViveportID
// 0x0010 (0x0010 - 0x0000)
struct UtilityBPLibrary_GetViveportID final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtilityBPLibrary_GetViveportID) == 0x000008, "Wrong alignment on UtilityBPLibrary_GetViveportID");
static_assert(sizeof(UtilityBPLibrary_GetViveportID) == 0x000010, "Wrong size on UtilityBPLibrary_GetViveportID");
static_assert(offsetof(UtilityBPLibrary_GetViveportID, ReturnValue) == 0x000000, "Member 'UtilityBPLibrary_GetViveportID::ReturnValue' has a wrong offset!");

// Function SiliconRising.UtilityBPLibrary.GetViveportNickName
// 0x0010 (0x0010 - 0x0000)
struct UtilityBPLibrary_GetViveportNickName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtilityBPLibrary_GetViveportNickName) == 0x000008, "Wrong alignment on UtilityBPLibrary_GetViveportNickName");
static_assert(sizeof(UtilityBPLibrary_GetViveportNickName) == 0x000010, "Wrong size on UtilityBPLibrary_GetViveportNickName");
static_assert(offsetof(UtilityBPLibrary_GetViveportNickName, ReturnValue) == 0x000000, "Member 'UtilityBPLibrary_GetViveportNickName::ReturnValue' has a wrong offset!");

// Function SiliconRising.UtilityBPLibrary.GetVRControllerDeviceID
// 0x0004 (0x0004 - 0x0000)
struct UtilityBPLibrary_GetVRControllerDeviceID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtilityBPLibrary_GetVRControllerDeviceID) == 0x000004, "Wrong alignment on UtilityBPLibrary_GetVRControllerDeviceID");
static_assert(sizeof(UtilityBPLibrary_GetVRControllerDeviceID) == 0x000004, "Wrong size on UtilityBPLibrary_GetVRControllerDeviceID");
static_assert(offsetof(UtilityBPLibrary_GetVRControllerDeviceID, ReturnValue) == 0x000000, "Member 'UtilityBPLibrary_GetVRControllerDeviceID::ReturnValue' has a wrong offset!");

// Function SiliconRising.UtilityBPLibrary.GetVRDevicePropertyString
// 0x0020 (0x0020 - 0x0000)
struct UtilityBPLibrary_GetVRDevicePropertyString final
{
public:
	EVRDeviceProperty_String                      PropertyToRetrieve;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DeviceID;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StringValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBPOVRResultSwitch                            Result;                                            // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UtilityBPLibrary_GetVRDevicePropertyString) == 0x000008, "Wrong alignment on UtilityBPLibrary_GetVRDevicePropertyString");
static_assert(sizeof(UtilityBPLibrary_GetVRDevicePropertyString) == 0x000020, "Wrong size on UtilityBPLibrary_GetVRDevicePropertyString");
static_assert(offsetof(UtilityBPLibrary_GetVRDevicePropertyString, PropertyToRetrieve) == 0x000000, "Member 'UtilityBPLibrary_GetVRDevicePropertyString::PropertyToRetrieve' has a wrong offset!");
static_assert(offsetof(UtilityBPLibrary_GetVRDevicePropertyString, DeviceID) == 0x000004, "Member 'UtilityBPLibrary_GetVRDevicePropertyString::DeviceID' has a wrong offset!");
static_assert(offsetof(UtilityBPLibrary_GetVRDevicePropertyString, StringValue) == 0x000008, "Member 'UtilityBPLibrary_GetVRDevicePropertyString::StringValue' has a wrong offset!");
static_assert(offsetof(UtilityBPLibrary_GetVRDevicePropertyString, Result) == 0x000018, "Member 'UtilityBPLibrary_GetVRDevicePropertyString::Result' has a wrong offset!");

// Function SiliconRising.UtilityBPLibrary.Greater_FYYMsgInt64FYYMsgInt64
// 0x0018 (0x0018 - 0x0000)
struct UtilityBPLibrary_Greater_FYYMsgInt64FYYMsgInt64 final
{
public:
	struct FYYMsgInt64                            A;                                                 // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FYYMsgInt64                            B;                                                 // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UtilityBPLibrary_Greater_FYYMsgInt64FYYMsgInt64) == 0x000008, "Wrong alignment on UtilityBPLibrary_Greater_FYYMsgInt64FYYMsgInt64");
static_assert(sizeof(UtilityBPLibrary_Greater_FYYMsgInt64FYYMsgInt64) == 0x000018, "Wrong size on UtilityBPLibrary_Greater_FYYMsgInt64FYYMsgInt64");
static_assert(offsetof(UtilityBPLibrary_Greater_FYYMsgInt64FYYMsgInt64, A) == 0x000000, "Member 'UtilityBPLibrary_Greater_FYYMsgInt64FYYMsgInt64::A' has a wrong offset!");
static_assert(offsetof(UtilityBPLibrary_Greater_FYYMsgInt64FYYMsgInt64, B) == 0x000008, "Member 'UtilityBPLibrary_Greater_FYYMsgInt64FYYMsgInt64::B' has a wrong offset!");
static_assert(offsetof(UtilityBPLibrary_Greater_FYYMsgInt64FYYMsgInt64, ReturnValue) == 0x000010, "Member 'UtilityBPLibrary_Greater_FYYMsgInt64FYYMsgInt64::ReturnValue' has a wrong offset!");

// Function SiliconRising.UtilityBPLibrary.GreaterEqual_FYYMsgInt64FYYMsgInt64
// 0x0018 (0x0018 - 0x0000)
struct UtilityBPLibrary_GreaterEqual_FYYMsgInt64FYYMsgInt64 final
{
public:
	struct FYYMsgInt64                            A;                                                 // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FYYMsgInt64                            B;                                                 // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UtilityBPLibrary_GreaterEqual_FYYMsgInt64FYYMsgInt64) == 0x000008, "Wrong alignment on UtilityBPLibrary_GreaterEqual_FYYMsgInt64FYYMsgInt64");
static_assert(sizeof(UtilityBPLibrary_GreaterEqual_FYYMsgInt64FYYMsgInt64) == 0x000018, "Wrong size on UtilityBPLibrary_GreaterEqual_FYYMsgInt64FYYMsgInt64");
static_assert(offsetof(UtilityBPLibrary_GreaterEqual_FYYMsgInt64FYYMsgInt64, A) == 0x000000, "Member 'UtilityBPLibrary_GreaterEqual_FYYMsgInt64FYYMsgInt64::A' has a wrong offset!");
static_assert(offsetof(UtilityBPLibrary_GreaterEqual_FYYMsgInt64FYYMsgInt64, B) == 0x000008, "Member 'UtilityBPLibrary_GreaterEqual_FYYMsgInt64FYYMsgInt64::B' has a wrong offset!");
static_assert(offsetof(UtilityBPLibrary_GreaterEqual_FYYMsgInt64FYYMsgInt64, ReturnValue) == 0x000010, "Member 'UtilityBPLibrary_GreaterEqual_FYYMsgInt64FYYMsgInt64::ReturnValue' has a wrong offset!");

// Function SiliconRising.UtilityBPLibrary.Int64ToString
// 0x0018 (0x0018 - 0x0000)
struct UtilityBPLibrary_Int64ToString final
{
public:
	struct FYYMsgInt64                            Value;                                             // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtilityBPLibrary_Int64ToString) == 0x000008, "Wrong alignment on UtilityBPLibrary_Int64ToString");
static_assert(sizeof(UtilityBPLibrary_Int64ToString) == 0x000018, "Wrong size on UtilityBPLibrary_Int64ToString");
static_assert(offsetof(UtilityBPLibrary_Int64ToString, Value) == 0x000000, "Member 'UtilityBPLibrary_Int64ToString::Value' has a wrong offset!");
static_assert(offsetof(UtilityBPLibrary_Int64ToString, ReturnValue) == 0x000008, "Member 'UtilityBPLibrary_Int64ToString::ReturnValue' has a wrong offset!");

// Function SiliconRising.UtilityBPLibrary.IsDevelopmentMode
// 0x0001 (0x0001 - 0x0000)
struct UtilityBPLibrary_IsDevelopmentMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtilityBPLibrary_IsDevelopmentMode) == 0x000001, "Wrong alignment on UtilityBPLibrary_IsDevelopmentMode");
static_assert(sizeof(UtilityBPLibrary_IsDevelopmentMode) == 0x000001, "Wrong size on UtilityBPLibrary_IsDevelopmentMode");
static_assert(offsetof(UtilityBPLibrary_IsDevelopmentMode, ReturnValue) == 0x000000, "Member 'UtilityBPLibrary_IsDevelopmentMode::ReturnValue' has a wrong offset!");

// Function SiliconRising.UtilityBPLibrary.IsPlayInEditor
// 0x0001 (0x0001 - 0x0000)
struct UtilityBPLibrary_IsPlayInEditor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtilityBPLibrary_IsPlayInEditor) == 0x000001, "Wrong alignment on UtilityBPLibrary_IsPlayInEditor");
static_assert(sizeof(UtilityBPLibrary_IsPlayInEditor) == 0x000001, "Wrong size on UtilityBPLibrary_IsPlayInEditor");
static_assert(offsetof(UtilityBPLibrary_IsPlayInEditor, ReturnValue) == 0x000000, "Member 'UtilityBPLibrary_IsPlayInEditor::ReturnValue' has a wrong offset!");

// Function SiliconRising.UtilityBPLibrary.Less_FYYMsgInt64FYYMsgInt64
// 0x0018 (0x0018 - 0x0000)
struct UtilityBPLibrary_Less_FYYMsgInt64FYYMsgInt64 final
{
public:
	struct FYYMsgInt64                            A;                                                 // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FYYMsgInt64                            B;                                                 // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UtilityBPLibrary_Less_FYYMsgInt64FYYMsgInt64) == 0x000008, "Wrong alignment on UtilityBPLibrary_Less_FYYMsgInt64FYYMsgInt64");
static_assert(sizeof(UtilityBPLibrary_Less_FYYMsgInt64FYYMsgInt64) == 0x000018, "Wrong size on UtilityBPLibrary_Less_FYYMsgInt64FYYMsgInt64");
static_assert(offsetof(UtilityBPLibrary_Less_FYYMsgInt64FYYMsgInt64, A) == 0x000000, "Member 'UtilityBPLibrary_Less_FYYMsgInt64FYYMsgInt64::A' has a wrong offset!");
static_assert(offsetof(UtilityBPLibrary_Less_FYYMsgInt64FYYMsgInt64, B) == 0x000008, "Member 'UtilityBPLibrary_Less_FYYMsgInt64FYYMsgInt64::B' has a wrong offset!");
static_assert(offsetof(UtilityBPLibrary_Less_FYYMsgInt64FYYMsgInt64, ReturnValue) == 0x000010, "Member 'UtilityBPLibrary_Less_FYYMsgInt64FYYMsgInt64::ReturnValue' has a wrong offset!");

// Function SiliconRising.UtilityBPLibrary.LessEqual_FYYMsgInt64FYYMsgInt64
// 0x0018 (0x0018 - 0x0000)
struct UtilityBPLibrary_LessEqual_FYYMsgInt64FYYMsgInt64 final
{
public:
	struct FYYMsgInt64                            A;                                                 // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FYYMsgInt64                            B;                                                 // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UtilityBPLibrary_LessEqual_FYYMsgInt64FYYMsgInt64) == 0x000008, "Wrong alignment on UtilityBPLibrary_LessEqual_FYYMsgInt64FYYMsgInt64");
static_assert(sizeof(UtilityBPLibrary_LessEqual_FYYMsgInt64FYYMsgInt64) == 0x000018, "Wrong size on UtilityBPLibrary_LessEqual_FYYMsgInt64FYYMsgInt64");
static_assert(offsetof(UtilityBPLibrary_LessEqual_FYYMsgInt64FYYMsgInt64, A) == 0x000000, "Member 'UtilityBPLibrary_LessEqual_FYYMsgInt64FYYMsgInt64::A' has a wrong offset!");
static_assert(offsetof(UtilityBPLibrary_LessEqual_FYYMsgInt64FYYMsgInt64, B) == 0x000008, "Member 'UtilityBPLibrary_LessEqual_FYYMsgInt64FYYMsgInt64::B' has a wrong offset!");
static_assert(offsetof(UtilityBPLibrary_LessEqual_FYYMsgInt64FYYMsgInt64, ReturnValue) == 0x000010, "Member 'UtilityBPLibrary_LessEqual_FYYMsgInt64FYYMsgInt64::ReturnValue' has a wrong offset!");

// Function SiliconRising.UtilityBPLibrary.Multiply_FYYMsgInt64FYYMsgInt64
// 0x0018 (0x0018 - 0x0000)
struct UtilityBPLibrary_Multiply_FYYMsgInt64FYYMsgInt64 final
{
public:
	struct FYYMsgInt64                            A;                                                 // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FYYMsgInt64                            B;                                                 // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FYYMsgInt64                            ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtilityBPLibrary_Multiply_FYYMsgInt64FYYMsgInt64) == 0x000008, "Wrong alignment on UtilityBPLibrary_Multiply_FYYMsgInt64FYYMsgInt64");
static_assert(sizeof(UtilityBPLibrary_Multiply_FYYMsgInt64FYYMsgInt64) == 0x000018, "Wrong size on UtilityBPLibrary_Multiply_FYYMsgInt64FYYMsgInt64");
static_assert(offsetof(UtilityBPLibrary_Multiply_FYYMsgInt64FYYMsgInt64, A) == 0x000000, "Member 'UtilityBPLibrary_Multiply_FYYMsgInt64FYYMsgInt64::A' has a wrong offset!");
static_assert(offsetof(UtilityBPLibrary_Multiply_FYYMsgInt64FYYMsgInt64, B) == 0x000008, "Member 'UtilityBPLibrary_Multiply_FYYMsgInt64FYYMsgInt64::B' has a wrong offset!");
static_assert(offsetof(UtilityBPLibrary_Multiply_FYYMsgInt64FYYMsgInt64, ReturnValue) == 0x000010, "Member 'UtilityBPLibrary_Multiply_FYYMsgInt64FYYMsgInt64::ReturnValue' has a wrong offset!");

// Function SiliconRising.UtilityBPLibrary.NotEqual_FYYMsgInt64FYYMsgInt64
// 0x0018 (0x0018 - 0x0000)
struct UtilityBPLibrary_NotEqual_FYYMsgInt64FYYMsgInt64 final
{
public:
	struct FYYMsgInt64                            A;                                                 // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FYYMsgInt64                            B;                                                 // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UtilityBPLibrary_NotEqual_FYYMsgInt64FYYMsgInt64) == 0x000008, "Wrong alignment on UtilityBPLibrary_NotEqual_FYYMsgInt64FYYMsgInt64");
static_assert(sizeof(UtilityBPLibrary_NotEqual_FYYMsgInt64FYYMsgInt64) == 0x000018, "Wrong size on UtilityBPLibrary_NotEqual_FYYMsgInt64FYYMsgInt64");
static_assert(offsetof(UtilityBPLibrary_NotEqual_FYYMsgInt64FYYMsgInt64, A) == 0x000000, "Member 'UtilityBPLibrary_NotEqual_FYYMsgInt64FYYMsgInt64::A' has a wrong offset!");
static_assert(offsetof(UtilityBPLibrary_NotEqual_FYYMsgInt64FYYMsgInt64, B) == 0x000008, "Member 'UtilityBPLibrary_NotEqual_FYYMsgInt64FYYMsgInt64::B' has a wrong offset!");
static_assert(offsetof(UtilityBPLibrary_NotEqual_FYYMsgInt64FYYMsgInt64, ReturnValue) == 0x000010, "Member 'UtilityBPLibrary_NotEqual_FYYMsgInt64FYYMsgInt64::ReturnValue' has a wrong offset!");

// Function SiliconRising.UtilityBPLibrary.Percent_FYYMsgInt64FYYMsgInt64
// 0x0018 (0x0018 - 0x0000)
struct UtilityBPLibrary_Percent_FYYMsgInt64FYYMsgInt64 final
{
public:
	struct FYYMsgInt64                            A;                                                 // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FYYMsgInt64                            B;                                                 // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FYYMsgInt64                            ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtilityBPLibrary_Percent_FYYMsgInt64FYYMsgInt64) == 0x000008, "Wrong alignment on UtilityBPLibrary_Percent_FYYMsgInt64FYYMsgInt64");
static_assert(sizeof(UtilityBPLibrary_Percent_FYYMsgInt64FYYMsgInt64) == 0x000018, "Wrong size on UtilityBPLibrary_Percent_FYYMsgInt64FYYMsgInt64");
static_assert(offsetof(UtilityBPLibrary_Percent_FYYMsgInt64FYYMsgInt64, A) == 0x000000, "Member 'UtilityBPLibrary_Percent_FYYMsgInt64FYYMsgInt64::A' has a wrong offset!");
static_assert(offsetof(UtilityBPLibrary_Percent_FYYMsgInt64FYYMsgInt64, B) == 0x000008, "Member 'UtilityBPLibrary_Percent_FYYMsgInt64FYYMsgInt64::B' has a wrong offset!");
static_assert(offsetof(UtilityBPLibrary_Percent_FYYMsgInt64FYYMsgInt64, ReturnValue) == 0x000010, "Member 'UtilityBPLibrary_Percent_FYYMsgInt64FYYMsgInt64::ReturnValue' has a wrong offset!");

// Function SiliconRising.UtilityBPLibrary.SetPlanarReflectionScreenPercentage
// 0x0010 (0x0010 - 0x0000)
struct UtilityBPLibrary_SetPlanarReflectionScreenPercentage final
{
public:
	class UPlanarReflectionComponent*             PlanarReflectionComponent;                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         nPercentage;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UtilityBPLibrary_SetPlanarReflectionScreenPercentage) == 0x000008, "Wrong alignment on UtilityBPLibrary_SetPlanarReflectionScreenPercentage");
static_assert(sizeof(UtilityBPLibrary_SetPlanarReflectionScreenPercentage) == 0x000010, "Wrong size on UtilityBPLibrary_SetPlanarReflectionScreenPercentage");
static_assert(offsetof(UtilityBPLibrary_SetPlanarReflectionScreenPercentage, PlanarReflectionComponent) == 0x000000, "Member 'UtilityBPLibrary_SetPlanarReflectionScreenPercentage::PlanarReflectionComponent' has a wrong offset!");
static_assert(offsetof(UtilityBPLibrary_SetPlanarReflectionScreenPercentage, nPercentage) == 0x000008, "Member 'UtilityBPLibrary_SetPlanarReflectionScreenPercentage::nPercentage' has a wrong offset!");

// Function SiliconRising.UtilityBPLibrary.SetPVPServerIP
// 0x0010 (0x0010 - 0x0000)
struct UtilityBPLibrary_SetPVPServerIP final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtilityBPLibrary_SetPVPServerIP) == 0x000008, "Wrong alignment on UtilityBPLibrary_SetPVPServerIP");
static_assert(sizeof(UtilityBPLibrary_SetPVPServerIP) == 0x000010, "Wrong size on UtilityBPLibrary_SetPVPServerIP");
static_assert(offsetof(UtilityBPLibrary_SetPVPServerIP, Value) == 0x000000, "Member 'UtilityBPLibrary_SetPVPServerIP::Value' has a wrong offset!");

// Function SiliconRising.UtilityBPLibrary.SetViveportHeadUrl
// 0x0010 (0x0010 - 0x0000)
struct UtilityBPLibrary_SetViveportHeadUrl final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtilityBPLibrary_SetViveportHeadUrl) == 0x000008, "Wrong alignment on UtilityBPLibrary_SetViveportHeadUrl");
static_assert(sizeof(UtilityBPLibrary_SetViveportHeadUrl) == 0x000010, "Wrong size on UtilityBPLibrary_SetViveportHeadUrl");
static_assert(offsetof(UtilityBPLibrary_SetViveportHeadUrl, Value) == 0x000000, "Member 'UtilityBPLibrary_SetViveportHeadUrl::Value' has a wrong offset!");

// Function SiliconRising.UtilityBPLibrary.SetViveportID
// 0x0010 (0x0010 - 0x0000)
struct UtilityBPLibrary_SetViveportID final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtilityBPLibrary_SetViveportID) == 0x000008, "Wrong alignment on UtilityBPLibrary_SetViveportID");
static_assert(sizeof(UtilityBPLibrary_SetViveportID) == 0x000010, "Wrong size on UtilityBPLibrary_SetViveportID");
static_assert(offsetof(UtilityBPLibrary_SetViveportID, Value) == 0x000000, "Member 'UtilityBPLibrary_SetViveportID::Value' has a wrong offset!");

// Function SiliconRising.UtilityBPLibrary.SetViveportIsGetUserData
// 0x0001 (0x0001 - 0x0000)
struct UtilityBPLibrary_SetViveportIsGetUserData final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtilityBPLibrary_SetViveportIsGetUserData) == 0x000001, "Wrong alignment on UtilityBPLibrary_SetViveportIsGetUserData");
static_assert(sizeof(UtilityBPLibrary_SetViveportIsGetUserData) == 0x000001, "Wrong size on UtilityBPLibrary_SetViveportIsGetUserData");
static_assert(offsetof(UtilityBPLibrary_SetViveportIsGetUserData, Value) == 0x000000, "Member 'UtilityBPLibrary_SetViveportIsGetUserData::Value' has a wrong offset!");

// Function SiliconRising.UtilityBPLibrary.SetViveportNickName
// 0x0010 (0x0010 - 0x0000)
struct UtilityBPLibrary_SetViveportNickName final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtilityBPLibrary_SetViveportNickName) == 0x000008, "Wrong alignment on UtilityBPLibrary_SetViveportNickName");
static_assert(sizeof(UtilityBPLibrary_SetViveportNickName) == 0x000010, "Wrong size on UtilityBPLibrary_SetViveportNickName");
static_assert(offsetof(UtilityBPLibrary_SetViveportNickName, Value) == 0x000000, "Member 'UtilityBPLibrary_SetViveportNickName::Value' has a wrong offset!");

// Function SiliconRising.UtilityBPLibrary.SetViveportPassword
// 0x0010 (0x0010 - 0x0000)
struct UtilityBPLibrary_SetViveportPassword final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtilityBPLibrary_SetViveportPassword) == 0x000008, "Wrong alignment on UtilityBPLibrary_SetViveportPassword");
static_assert(sizeof(UtilityBPLibrary_SetViveportPassword) == 0x000010, "Wrong size on UtilityBPLibrary_SetViveportPassword");
static_assert(offsetof(UtilityBPLibrary_SetViveportPassword, Value) == 0x000000, "Member 'UtilityBPLibrary_SetViveportPassword::Value' has a wrong offset!");

// Function SiliconRising.UtilityBPLibrary.SortArrayWithDefault
// 0x0020 (0x0020 - 0x0000)
struct UtilityBPLibrary_SortArrayWithDefault final
{
public:
	TArray<class UObject*>                        inArray;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        OutArray;                                          // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtilityBPLibrary_SortArrayWithDefault) == 0x000008, "Wrong alignment on UtilityBPLibrary_SortArrayWithDefault");
static_assert(sizeof(UtilityBPLibrary_SortArrayWithDefault) == 0x000020, "Wrong size on UtilityBPLibrary_SortArrayWithDefault");
static_assert(offsetof(UtilityBPLibrary_SortArrayWithDefault, inArray) == 0x000000, "Member 'UtilityBPLibrary_SortArrayWithDefault::inArray' has a wrong offset!");
static_assert(offsetof(UtilityBPLibrary_SortArrayWithDefault, OutArray) == 0x000010, "Member 'UtilityBPLibrary_SortArrayWithDefault::OutArray' has a wrong offset!");

// Function SiliconRising.UtilityBPLibrary.StringToInt64
// 0x0018 (0x0018 - 0x0000)
struct UtilityBPLibrary_StringToInt64 final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgInt64                            ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtilityBPLibrary_StringToInt64) == 0x000008, "Wrong alignment on UtilityBPLibrary_StringToInt64");
static_assert(sizeof(UtilityBPLibrary_StringToInt64) == 0x000018, "Wrong size on UtilityBPLibrary_StringToInt64");
static_assert(offsetof(UtilityBPLibrary_StringToInt64, Value) == 0x000000, "Member 'UtilityBPLibrary_StringToInt64::Value' has a wrong offset!");
static_assert(offsetof(UtilityBPLibrary_StringToInt64, ReturnValue) == 0x000010, "Member 'UtilityBPLibrary_StringToInt64::ReturnValue' has a wrong offset!");

// Function SiliconRising.UtilityBPLibrary.Subtract_FYYMsgInt64FYYMsgInt64
// 0x0018 (0x0018 - 0x0000)
struct UtilityBPLibrary_Subtract_FYYMsgInt64FYYMsgInt64 final
{
public:
	struct FYYMsgInt64                            A;                                                 // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FYYMsgInt64                            B;                                                 // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FYYMsgInt64                            ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtilityBPLibrary_Subtract_FYYMsgInt64FYYMsgInt64) == 0x000008, "Wrong alignment on UtilityBPLibrary_Subtract_FYYMsgInt64FYYMsgInt64");
static_assert(sizeof(UtilityBPLibrary_Subtract_FYYMsgInt64FYYMsgInt64) == 0x000018, "Wrong size on UtilityBPLibrary_Subtract_FYYMsgInt64FYYMsgInt64");
static_assert(offsetof(UtilityBPLibrary_Subtract_FYYMsgInt64FYYMsgInt64, A) == 0x000000, "Member 'UtilityBPLibrary_Subtract_FYYMsgInt64FYYMsgInt64::A' has a wrong offset!");
static_assert(offsetof(UtilityBPLibrary_Subtract_FYYMsgInt64FYYMsgInt64, B) == 0x000008, "Member 'UtilityBPLibrary_Subtract_FYYMsgInt64FYYMsgInt64::B' has a wrong offset!");
static_assert(offsetof(UtilityBPLibrary_Subtract_FYYMsgInt64FYYMsgInt64, ReturnValue) == 0x000010, "Member 'UtilityBPLibrary_Subtract_FYYMsgInt64FYYMsgInt64::ReturnValue' has a wrong offset!");

// Function SiliconRising.ViveportSDK.GetIsDRMCheckOK
// 0x0001 (0x0001 - 0x0000)
struct ViveportSDK_GetIsDRMCheckOK final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ViveportSDK_GetIsDRMCheckOK) == 0x000001, "Wrong alignment on ViveportSDK_GetIsDRMCheckOK");
static_assert(sizeof(ViveportSDK_GetIsDRMCheckOK) == 0x000001, "Wrong size on ViveportSDK_GetIsDRMCheckOK");
static_assert(offsetof(ViveportSDK_GetIsDRMCheckOK, ReturnValue) == 0x000000, "Member 'ViveportSDK_GetIsDRMCheckOK::ReturnValue' has a wrong offset!");

// Function SiliconRising.ViveportSDK.GetIsSDKCheckOK
// 0x0001 (0x0001 - 0x0000)
struct ViveportSDK_GetIsSDKCheckOK final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ViveportSDK_GetIsSDKCheckOK) == 0x000001, "Wrong alignment on ViveportSDK_GetIsSDKCheckOK");
static_assert(sizeof(ViveportSDK_GetIsSDKCheckOK) == 0x000001, "Wrong size on ViveportSDK_GetIsSDKCheckOK");
static_assert(offsetof(ViveportSDK_GetIsSDKCheckOK, ReturnValue) == 0x000000, "Member 'ViveportSDK_GetIsSDKCheckOK::ReturnValue' has a wrong offset!");

// Function SiliconRising.WeaponAnimInstance.ChangeAnimState
// 0x0002 (0x0002 - 0x0000)
struct WeaponAnimInstance_ChangeAnimState final
{
public:
	EWState                                       CurState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NewValue;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponAnimInstance_ChangeAnimState) == 0x000001, "Wrong alignment on WeaponAnimInstance_ChangeAnimState");
static_assert(sizeof(WeaponAnimInstance_ChangeAnimState) == 0x000002, "Wrong size on WeaponAnimInstance_ChangeAnimState");
static_assert(offsetof(WeaponAnimInstance_ChangeAnimState, CurState) == 0x000000, "Member 'WeaponAnimInstance_ChangeAnimState::CurState' has a wrong offset!");
static_assert(offsetof(WeaponAnimInstance_ChangeAnimState, NewValue) == 0x000001, "Member 'WeaponAnimInstance_ChangeAnimState::NewValue' has a wrong offset!");

// Function SiliconRising.WeaponAnimInstance.GetBoltCurrentOffset
// 0x000C (0x000C - 0x0000)
struct WeaponAnimInstance_GetBoltCurrentOffset final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponAnimInstance_GetBoltCurrentOffset) == 0x000004, "Wrong alignment on WeaponAnimInstance_GetBoltCurrentOffset");
static_assert(sizeof(WeaponAnimInstance_GetBoltCurrentOffset) == 0x00000C, "Wrong size on WeaponAnimInstance_GetBoltCurrentOffset");
static_assert(offsetof(WeaponAnimInstance_GetBoltCurrentOffset, ReturnValue) == 0x000000, "Member 'WeaponAnimInstance_GetBoltCurrentOffset::ReturnValue' has a wrong offset!");

// Function SiliconRising.WeaponAnimInstance.GetBoltCurrentTransform
// 0x0030 (0x0030 - 0x0000)
struct WeaponAnimInstance_GetBoltCurrentTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponAnimInstance_GetBoltCurrentTransform) == 0x000010, "Wrong alignment on WeaponAnimInstance_GetBoltCurrentTransform");
static_assert(sizeof(WeaponAnimInstance_GetBoltCurrentTransform) == 0x000030, "Wrong size on WeaponAnimInstance_GetBoltCurrentTransform");
static_assert(offsetof(WeaponAnimInstance_GetBoltCurrentTransform, ReturnValue) == 0x000000, "Member 'WeaponAnimInstance_GetBoltCurrentTransform::ReturnValue' has a wrong offset!");

// Function SiliconRising.WeaponAnimInstance.GetBoltInitTransform
// 0x0030 (0x0030 - 0x0000)
struct WeaponAnimInstance_GetBoltInitTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponAnimInstance_GetBoltInitTransform) == 0x000010, "Wrong alignment on WeaponAnimInstance_GetBoltInitTransform");
static_assert(sizeof(WeaponAnimInstance_GetBoltInitTransform) == 0x000030, "Wrong size on WeaponAnimInstance_GetBoltInitTransform");
static_assert(offsetof(WeaponAnimInstance_GetBoltInitTransform, ReturnValue) == 0x000000, "Member 'WeaponAnimInstance_GetBoltInitTransform::ReturnValue' has a wrong offset!");

// Function SiliconRising.WeaponAnimInstance.SetBoltInitTransform
// 0x0030 (0x0030 - 0x0000)
struct WeaponAnimInstance_SetBoltInitTransform final
{
public:
	struct FTransform                             InitTransform;                                     // 0x0000(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponAnimInstance_SetBoltInitTransform) == 0x000010, "Wrong alignment on WeaponAnimInstance_SetBoltInitTransform");
static_assert(sizeof(WeaponAnimInstance_SetBoltInitTransform) == 0x000030, "Wrong size on WeaponAnimInstance_SetBoltInitTransform");
static_assert(offsetof(WeaponAnimInstance_SetBoltInitTransform, InitTransform) == 0x000000, "Member 'WeaponAnimInstance_SetBoltInitTransform::InitTransform' has a wrong offset!");

// Function SiliconRising.WeaponAnimInstance.UpdateReloadDelay
// 0x0004 (0x0004 - 0x0000)
struct WeaponAnimInstance_UpdateReloadDelay final
{
public:
	float                                         fDelta;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponAnimInstance_UpdateReloadDelay) == 0x000004, "Wrong alignment on WeaponAnimInstance_UpdateReloadDelay");
static_assert(sizeof(WeaponAnimInstance_UpdateReloadDelay) == 0x000004, "Wrong size on WeaponAnimInstance_UpdateReloadDelay");
static_assert(offsetof(WeaponAnimInstance_UpdateReloadDelay, fDelta) == 0x000000, "Member 'WeaponAnimInstance_UpdateReloadDelay::fDelta' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgIdent.PackIdent
// 0x0030 (0x0030 - 0x0000)
struct FlatBuffersYYMsgIdent_PackIdent final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgIdent                            InUE4Data;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgIdent_PackIdent) == 0x000008, "Wrong alignment on FlatBuffersYYMsgIdent_PackIdent");
static_assert(sizeof(FlatBuffersYYMsgIdent_PackIdent) == 0x000030, "Wrong size on FlatBuffersYYMsgIdent_PackIdent");
static_assert(offsetof(FlatBuffersYYMsgIdent_PackIdent, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgIdent_PackIdent::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgIdent_PackIdent, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgIdent_PackIdent::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgIdent_PackIdent, OutData) == 0x000018, "Member 'FlatBuffersYYMsgIdent_PackIdent::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgIdent_PackIdent, ReturnValue) == 0x000028, "Member 'FlatBuffersYYMsgIdent_PackIdent::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgIdent.UnpackIdent
// 0x0030 (0x0030 - 0x0000)
struct FlatBuffersYYMsgIdent_UnpackIdent final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgIdent                            OutUE4Data;                                        // 0x0018(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgIdent_UnpackIdent) == 0x000008, "Wrong alignment on FlatBuffersYYMsgIdent_UnpackIdent");
static_assert(sizeof(FlatBuffersYYMsgIdent_UnpackIdent) == 0x000030, "Wrong size on FlatBuffersYYMsgIdent_UnpackIdent");
static_assert(offsetof(FlatBuffersYYMsgIdent_UnpackIdent, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgIdent_UnpackIdent::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgIdent_UnpackIdent, InData) == 0x000008, "Member 'FlatBuffersYYMsgIdent_UnpackIdent::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgIdent_UnpackIdent, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgIdent_UnpackIdent::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgIdent_UnpackIdent, ReturnValue) == 0x000028, "Member 'FlatBuffersYYMsgIdent_UnpackIdent::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgVector2.PackVector2
// 0x0028 (0x0028 - 0x0000)
struct FlatBuffersYYMsgVector2_PackVector2 final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgVector2                          InUE4Data;                                         // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgVector2_PackVector2) == 0x000008, "Wrong alignment on FlatBuffersYYMsgVector2_PackVector2");
static_assert(sizeof(FlatBuffersYYMsgVector2_PackVector2) == 0x000028, "Wrong size on FlatBuffersYYMsgVector2_PackVector2");
static_assert(offsetof(FlatBuffersYYMsgVector2_PackVector2, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgVector2_PackVector2::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgVector2_PackVector2, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgVector2_PackVector2::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgVector2_PackVector2, OutData) == 0x000010, "Member 'FlatBuffersYYMsgVector2_PackVector2::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgVector2_PackVector2, ReturnValue) == 0x000020, "Member 'FlatBuffersYYMsgVector2_PackVector2::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgVector2.UnpackVector2
// 0x0028 (0x0028 - 0x0000)
struct FlatBuffersYYMsgVector2_UnpackVector2 final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgVector2                          OutUE4Data;                                        // 0x0018(0x0008)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgVector2_UnpackVector2) == 0x000008, "Wrong alignment on FlatBuffersYYMsgVector2_UnpackVector2");
static_assert(sizeof(FlatBuffersYYMsgVector2_UnpackVector2) == 0x000028, "Wrong size on FlatBuffersYYMsgVector2_UnpackVector2");
static_assert(offsetof(FlatBuffersYYMsgVector2_UnpackVector2, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgVector2_UnpackVector2::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgVector2_UnpackVector2, InData) == 0x000008, "Member 'FlatBuffersYYMsgVector2_UnpackVector2::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgVector2_UnpackVector2, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgVector2_UnpackVector2::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgVector2_UnpackVector2, ReturnValue) == 0x000020, "Member 'FlatBuffersYYMsgVector2_UnpackVector2::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgVector3.PackVector3
// 0x0030 (0x0030 - 0x0000)
struct FlatBuffersYYMsgVector3_PackVector3 final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgVector3                          InUE4Data;                                         // 0x0008(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 OutData;                                           // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgVector3_PackVector3) == 0x000008, "Wrong alignment on FlatBuffersYYMsgVector3_PackVector3");
static_assert(sizeof(FlatBuffersYYMsgVector3_PackVector3) == 0x000030, "Wrong size on FlatBuffersYYMsgVector3_PackVector3");
static_assert(offsetof(FlatBuffersYYMsgVector3_PackVector3, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgVector3_PackVector3::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgVector3_PackVector3, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgVector3_PackVector3::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgVector3_PackVector3, OutData) == 0x000018, "Member 'FlatBuffersYYMsgVector3_PackVector3::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgVector3_PackVector3, ReturnValue) == 0x000028, "Member 'FlatBuffersYYMsgVector3_PackVector3::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgVector3.UnpackVector3
// 0x0028 (0x0028 - 0x0000)
struct FlatBuffersYYMsgVector3_UnpackVector3 final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgVector3                          OutUE4Data;                                        // 0x0018(0x000C)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgVector3_UnpackVector3) == 0x000008, "Wrong alignment on FlatBuffersYYMsgVector3_UnpackVector3");
static_assert(sizeof(FlatBuffersYYMsgVector3_UnpackVector3) == 0x000028, "Wrong size on FlatBuffersYYMsgVector3_UnpackVector3");
static_assert(offsetof(FlatBuffersYYMsgVector3_UnpackVector3, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgVector3_UnpackVector3::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgVector3_UnpackVector3, InData) == 0x000008, "Member 'FlatBuffersYYMsgVector3_UnpackVector3::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgVector3_UnpackVector3, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgVector3_UnpackVector3::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgVector3_UnpackVector3, ReturnValue) == 0x000024, "Member 'FlatBuffersYYMsgVector3_UnpackVector3::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgVector4.PackVector4
// 0x0030 (0x0030 - 0x0000)
struct FlatBuffersYYMsgVector4_PackVector4 final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgVector4                          InUE4Data;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgVector4_PackVector4) == 0x000008, "Wrong alignment on FlatBuffersYYMsgVector4_PackVector4");
static_assert(sizeof(FlatBuffersYYMsgVector4_PackVector4) == 0x000030, "Wrong size on FlatBuffersYYMsgVector4_PackVector4");
static_assert(offsetof(FlatBuffersYYMsgVector4_PackVector4, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgVector4_PackVector4::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgVector4_PackVector4, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgVector4_PackVector4::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgVector4_PackVector4, OutData) == 0x000018, "Member 'FlatBuffersYYMsgVector4_PackVector4::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgVector4_PackVector4, ReturnValue) == 0x000028, "Member 'FlatBuffersYYMsgVector4_PackVector4::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgVector4.UnpackVector4
// 0x0030 (0x0030 - 0x0000)
struct FlatBuffersYYMsgVector4_UnpackVector4 final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgVector4                          OutUE4Data;                                        // 0x0018(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgVector4_UnpackVector4) == 0x000008, "Wrong alignment on FlatBuffersYYMsgVector4_UnpackVector4");
static_assert(sizeof(FlatBuffersYYMsgVector4_UnpackVector4) == 0x000030, "Wrong size on FlatBuffersYYMsgVector4_UnpackVector4");
static_assert(offsetof(FlatBuffersYYMsgVector4_UnpackVector4, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgVector4_UnpackVector4::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgVector4_UnpackVector4, InData) == 0x000008, "Member 'FlatBuffersYYMsgVector4_UnpackVector4::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgVector4_UnpackVector4, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgVector4_UnpackVector4::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgVector4_UnpackVector4, ReturnValue) == 0x000028, "Member 'FlatBuffersYYMsgVector4_UnpackVector4::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgPropertyInt.PackPropertyInt
// 0x0038 (0x0038 - 0x0000)
struct FlatBuffersYYMsgPropertyInt_PackPropertyInt final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgPropertyInt                      InUE4Data;                                         // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgPropertyInt_PackPropertyInt) == 0x000008, "Wrong alignment on FlatBuffersYYMsgPropertyInt_PackPropertyInt");
static_assert(sizeof(FlatBuffersYYMsgPropertyInt_PackPropertyInt) == 0x000038, "Wrong size on FlatBuffersYYMsgPropertyInt_PackPropertyInt");
static_assert(offsetof(FlatBuffersYYMsgPropertyInt_PackPropertyInt, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgPropertyInt_PackPropertyInt::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPropertyInt_PackPropertyInt, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgPropertyInt_PackPropertyInt::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPropertyInt_PackPropertyInt, OutData) == 0x000020, "Member 'FlatBuffersYYMsgPropertyInt_PackPropertyInt::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPropertyInt_PackPropertyInt, ReturnValue) == 0x000030, "Member 'FlatBuffersYYMsgPropertyInt_PackPropertyInt::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgPropertyInt.UnpackPropertyInt
// 0x0038 (0x0038 - 0x0000)
struct FlatBuffersYYMsgPropertyInt_UnpackPropertyInt final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgPropertyInt                      OutUE4Data;                                        // 0x0018(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgPropertyInt_UnpackPropertyInt) == 0x000008, "Wrong alignment on FlatBuffersYYMsgPropertyInt_UnpackPropertyInt");
static_assert(sizeof(FlatBuffersYYMsgPropertyInt_UnpackPropertyInt) == 0x000038, "Wrong size on FlatBuffersYYMsgPropertyInt_UnpackPropertyInt");
static_assert(offsetof(FlatBuffersYYMsgPropertyInt_UnpackPropertyInt, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgPropertyInt_UnpackPropertyInt::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPropertyInt_UnpackPropertyInt, InData) == 0x000008, "Member 'FlatBuffersYYMsgPropertyInt_UnpackPropertyInt::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPropertyInt_UnpackPropertyInt, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgPropertyInt_UnpackPropertyInt::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPropertyInt_UnpackPropertyInt, ReturnValue) == 0x000030, "Member 'FlatBuffersYYMsgPropertyInt_UnpackPropertyInt::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgPropertyFloat.PackPropertyFloat
// 0x0038 (0x0038 - 0x0000)
struct FlatBuffersYYMsgPropertyFloat_PackPropertyFloat final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgPropertyFloat                    InUE4Data;                                         // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgPropertyFloat_PackPropertyFloat) == 0x000008, "Wrong alignment on FlatBuffersYYMsgPropertyFloat_PackPropertyFloat");
static_assert(sizeof(FlatBuffersYYMsgPropertyFloat_PackPropertyFloat) == 0x000038, "Wrong size on FlatBuffersYYMsgPropertyFloat_PackPropertyFloat");
static_assert(offsetof(FlatBuffersYYMsgPropertyFloat_PackPropertyFloat, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgPropertyFloat_PackPropertyFloat::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPropertyFloat_PackPropertyFloat, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgPropertyFloat_PackPropertyFloat::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPropertyFloat_PackPropertyFloat, OutData) == 0x000020, "Member 'FlatBuffersYYMsgPropertyFloat_PackPropertyFloat::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPropertyFloat_PackPropertyFloat, ReturnValue) == 0x000030, "Member 'FlatBuffersYYMsgPropertyFloat_PackPropertyFloat::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgPropertyFloat.UnpackPropertyFloat
// 0x0038 (0x0038 - 0x0000)
struct FlatBuffersYYMsgPropertyFloat_UnpackPropertyFloat final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgPropertyFloat                    OutUE4Data;                                        // 0x0018(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgPropertyFloat_UnpackPropertyFloat) == 0x000008, "Wrong alignment on FlatBuffersYYMsgPropertyFloat_UnpackPropertyFloat");
static_assert(sizeof(FlatBuffersYYMsgPropertyFloat_UnpackPropertyFloat) == 0x000038, "Wrong size on FlatBuffersYYMsgPropertyFloat_UnpackPropertyFloat");
static_assert(offsetof(FlatBuffersYYMsgPropertyFloat_UnpackPropertyFloat, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgPropertyFloat_UnpackPropertyFloat::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPropertyFloat_UnpackPropertyFloat, InData) == 0x000008, "Member 'FlatBuffersYYMsgPropertyFloat_UnpackPropertyFloat::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPropertyFloat_UnpackPropertyFloat, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgPropertyFloat_UnpackPropertyFloat::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPropertyFloat_UnpackPropertyFloat, ReturnValue) == 0x000030, "Member 'FlatBuffersYYMsgPropertyFloat_UnpackPropertyFloat::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgPropertyString.PackPropertyString
// 0x0040 (0x0040 - 0x0000)
struct FlatBuffersYYMsgPropertyString_PackPropertyString final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgPropertyString                   InUE4Data;                                         // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgPropertyString_PackPropertyString) == 0x000008, "Wrong alignment on FlatBuffersYYMsgPropertyString_PackPropertyString");
static_assert(sizeof(FlatBuffersYYMsgPropertyString_PackPropertyString) == 0x000040, "Wrong size on FlatBuffersYYMsgPropertyString_PackPropertyString");
static_assert(offsetof(FlatBuffersYYMsgPropertyString_PackPropertyString, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgPropertyString_PackPropertyString::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPropertyString_PackPropertyString, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgPropertyString_PackPropertyString::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPropertyString_PackPropertyString, OutData) == 0x000028, "Member 'FlatBuffersYYMsgPropertyString_PackPropertyString::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPropertyString_PackPropertyString, ReturnValue) == 0x000038, "Member 'FlatBuffersYYMsgPropertyString_PackPropertyString::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgPropertyString.UnpackPropertyString
// 0x0040 (0x0040 - 0x0000)
struct FlatBuffersYYMsgPropertyString_UnpackPropertyString final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgPropertyString                   OutUE4Data;                                        // 0x0018(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgPropertyString_UnpackPropertyString) == 0x000008, "Wrong alignment on FlatBuffersYYMsgPropertyString_UnpackPropertyString");
static_assert(sizeof(FlatBuffersYYMsgPropertyString_UnpackPropertyString) == 0x000040, "Wrong size on FlatBuffersYYMsgPropertyString_UnpackPropertyString");
static_assert(offsetof(FlatBuffersYYMsgPropertyString_UnpackPropertyString, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgPropertyString_UnpackPropertyString::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPropertyString_UnpackPropertyString, InData) == 0x000008, "Member 'FlatBuffersYYMsgPropertyString_UnpackPropertyString::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPropertyString_UnpackPropertyString, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgPropertyString_UnpackPropertyString::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPropertyString_UnpackPropertyString, ReturnValue) == 0x000038, "Member 'FlatBuffersYYMsgPropertyString_UnpackPropertyString::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgPropertyByte.PackPropertyByte
// 0x0040 (0x0040 - 0x0000)
struct FlatBuffersYYMsgPropertyByte_PackPropertyByte final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgPropertyByte                     InUE4Data;                                         // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgPropertyByte_PackPropertyByte) == 0x000008, "Wrong alignment on FlatBuffersYYMsgPropertyByte_PackPropertyByte");
static_assert(sizeof(FlatBuffersYYMsgPropertyByte_PackPropertyByte) == 0x000040, "Wrong size on FlatBuffersYYMsgPropertyByte_PackPropertyByte");
static_assert(offsetof(FlatBuffersYYMsgPropertyByte_PackPropertyByte, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgPropertyByte_PackPropertyByte::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPropertyByte_PackPropertyByte, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgPropertyByte_PackPropertyByte::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPropertyByte_PackPropertyByte, OutData) == 0x000028, "Member 'FlatBuffersYYMsgPropertyByte_PackPropertyByte::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPropertyByte_PackPropertyByte, ReturnValue) == 0x000038, "Member 'FlatBuffersYYMsgPropertyByte_PackPropertyByte::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgPropertyByte.UnpackPropertyByte
// 0x0040 (0x0040 - 0x0000)
struct FlatBuffersYYMsgPropertyByte_UnpackPropertyByte final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgPropertyByte                     OutUE4Data;                                        // 0x0018(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgPropertyByte_UnpackPropertyByte) == 0x000008, "Wrong alignment on FlatBuffersYYMsgPropertyByte_UnpackPropertyByte");
static_assert(sizeof(FlatBuffersYYMsgPropertyByte_UnpackPropertyByte) == 0x000040, "Wrong size on FlatBuffersYYMsgPropertyByte_UnpackPropertyByte");
static_assert(offsetof(FlatBuffersYYMsgPropertyByte_UnpackPropertyByte, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgPropertyByte_UnpackPropertyByte::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPropertyByte_UnpackPropertyByte, InData) == 0x000008, "Member 'FlatBuffersYYMsgPropertyByte_UnpackPropertyByte::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPropertyByte_UnpackPropertyByte, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgPropertyByte_UnpackPropertyByte::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPropertyByte_UnpackPropertyByte, ReturnValue) == 0x000038, "Member 'FlatBuffersYYMsgPropertyByte_UnpackPropertyByte::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgPropertyObject.PackPropertyObject
// 0x0040 (0x0040 - 0x0000)
struct FlatBuffersYYMsgPropertyObject_PackPropertyObject final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgPropertyObject                   InUE4Data;                                         // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgPropertyObject_PackPropertyObject) == 0x000008, "Wrong alignment on FlatBuffersYYMsgPropertyObject_PackPropertyObject");
static_assert(sizeof(FlatBuffersYYMsgPropertyObject_PackPropertyObject) == 0x000040, "Wrong size on FlatBuffersYYMsgPropertyObject_PackPropertyObject");
static_assert(offsetof(FlatBuffersYYMsgPropertyObject_PackPropertyObject, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgPropertyObject_PackPropertyObject::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPropertyObject_PackPropertyObject, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgPropertyObject_PackPropertyObject::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPropertyObject_PackPropertyObject, OutData) == 0x000028, "Member 'FlatBuffersYYMsgPropertyObject_PackPropertyObject::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPropertyObject_PackPropertyObject, ReturnValue) == 0x000038, "Member 'FlatBuffersYYMsgPropertyObject_PackPropertyObject::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgPropertyObject.UnpackPropertyObject
// 0x0040 (0x0040 - 0x0000)
struct FlatBuffersYYMsgPropertyObject_UnpackPropertyObject final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgPropertyObject                   OutUE4Data;                                        // 0x0018(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgPropertyObject_UnpackPropertyObject) == 0x000008, "Wrong alignment on FlatBuffersYYMsgPropertyObject_UnpackPropertyObject");
static_assert(sizeof(FlatBuffersYYMsgPropertyObject_UnpackPropertyObject) == 0x000040, "Wrong size on FlatBuffersYYMsgPropertyObject_UnpackPropertyObject");
static_assert(offsetof(FlatBuffersYYMsgPropertyObject_UnpackPropertyObject, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgPropertyObject_UnpackPropertyObject::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPropertyObject_UnpackPropertyObject, InData) == 0x000008, "Member 'FlatBuffersYYMsgPropertyObject_UnpackPropertyObject::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPropertyObject_UnpackPropertyObject, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgPropertyObject_UnpackPropertyObject::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPropertyObject_UnpackPropertyObject, ReturnValue) == 0x000038, "Member 'FlatBuffersYYMsgPropertyObject_UnpackPropertyObject::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgPropertyVector2.PackPropertyVector2
// 0x0038 (0x0038 - 0x0000)
struct FlatBuffersYYMsgPropertyVector2_PackPropertyVector2 final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgPropertyVector2                  InUE4Data;                                         // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgPropertyVector2_PackPropertyVector2) == 0x000008, "Wrong alignment on FlatBuffersYYMsgPropertyVector2_PackPropertyVector2");
static_assert(sizeof(FlatBuffersYYMsgPropertyVector2_PackPropertyVector2) == 0x000038, "Wrong size on FlatBuffersYYMsgPropertyVector2_PackPropertyVector2");
static_assert(offsetof(FlatBuffersYYMsgPropertyVector2_PackPropertyVector2, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgPropertyVector2_PackPropertyVector2::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPropertyVector2_PackPropertyVector2, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgPropertyVector2_PackPropertyVector2::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPropertyVector2_PackPropertyVector2, OutData) == 0x000020, "Member 'FlatBuffersYYMsgPropertyVector2_PackPropertyVector2::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPropertyVector2_PackPropertyVector2, ReturnValue) == 0x000030, "Member 'FlatBuffersYYMsgPropertyVector2_PackPropertyVector2::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgPropertyVector2.UnpackPropertyVector2
// 0x0038 (0x0038 - 0x0000)
struct FlatBuffersYYMsgPropertyVector2_UnpackPropertyVector2 final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgPropertyVector2                  OutUE4Data;                                        // 0x0018(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgPropertyVector2_UnpackPropertyVector2) == 0x000008, "Wrong alignment on FlatBuffersYYMsgPropertyVector2_UnpackPropertyVector2");
static_assert(sizeof(FlatBuffersYYMsgPropertyVector2_UnpackPropertyVector2) == 0x000038, "Wrong size on FlatBuffersYYMsgPropertyVector2_UnpackPropertyVector2");
static_assert(offsetof(FlatBuffersYYMsgPropertyVector2_UnpackPropertyVector2, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgPropertyVector2_UnpackPropertyVector2::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPropertyVector2_UnpackPropertyVector2, InData) == 0x000008, "Member 'FlatBuffersYYMsgPropertyVector2_UnpackPropertyVector2::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPropertyVector2_UnpackPropertyVector2, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgPropertyVector2_UnpackPropertyVector2::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPropertyVector2_UnpackPropertyVector2, ReturnValue) == 0x000030, "Member 'FlatBuffersYYMsgPropertyVector2_UnpackPropertyVector2::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgPropertyVector3.PackPropertyVector3
// 0x0040 (0x0040 - 0x0000)
struct FlatBuffersYYMsgPropertyVector3_PackPropertyVector3 final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgPropertyVector3                  InUE4Data;                                         // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgPropertyVector3_PackPropertyVector3) == 0x000008, "Wrong alignment on FlatBuffersYYMsgPropertyVector3_PackPropertyVector3");
static_assert(sizeof(FlatBuffersYYMsgPropertyVector3_PackPropertyVector3) == 0x000040, "Wrong size on FlatBuffersYYMsgPropertyVector3_PackPropertyVector3");
static_assert(offsetof(FlatBuffersYYMsgPropertyVector3_PackPropertyVector3, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgPropertyVector3_PackPropertyVector3::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPropertyVector3_PackPropertyVector3, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgPropertyVector3_PackPropertyVector3::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPropertyVector3_PackPropertyVector3, OutData) == 0x000028, "Member 'FlatBuffersYYMsgPropertyVector3_PackPropertyVector3::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPropertyVector3_PackPropertyVector3, ReturnValue) == 0x000038, "Member 'FlatBuffersYYMsgPropertyVector3_PackPropertyVector3::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgPropertyVector3.UnpackPropertyVector3
// 0x0040 (0x0040 - 0x0000)
struct FlatBuffersYYMsgPropertyVector3_UnpackPropertyVector3 final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgPropertyVector3                  OutUE4Data;                                        // 0x0018(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgPropertyVector3_UnpackPropertyVector3) == 0x000008, "Wrong alignment on FlatBuffersYYMsgPropertyVector3_UnpackPropertyVector3");
static_assert(sizeof(FlatBuffersYYMsgPropertyVector3_UnpackPropertyVector3) == 0x000040, "Wrong size on FlatBuffersYYMsgPropertyVector3_UnpackPropertyVector3");
static_assert(offsetof(FlatBuffersYYMsgPropertyVector3_UnpackPropertyVector3, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgPropertyVector3_UnpackPropertyVector3::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPropertyVector3_UnpackPropertyVector3, InData) == 0x000008, "Member 'FlatBuffersYYMsgPropertyVector3_UnpackPropertyVector3::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPropertyVector3_UnpackPropertyVector3, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgPropertyVector3_UnpackPropertyVector3::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPropertyVector3_UnpackPropertyVector3, ReturnValue) == 0x000038, "Member 'FlatBuffersYYMsgPropertyVector3_UnpackPropertyVector3::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgPropertyVector4.PackPropertyVector4
// 0x0040 (0x0040 - 0x0000)
struct FlatBuffersYYMsgPropertyVector4_PackPropertyVector4 final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgPropertyVector4                  InUE4Data;                                         // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgPropertyVector4_PackPropertyVector4) == 0x000008, "Wrong alignment on FlatBuffersYYMsgPropertyVector4_PackPropertyVector4");
static_assert(sizeof(FlatBuffersYYMsgPropertyVector4_PackPropertyVector4) == 0x000040, "Wrong size on FlatBuffersYYMsgPropertyVector4_PackPropertyVector4");
static_assert(offsetof(FlatBuffersYYMsgPropertyVector4_PackPropertyVector4, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgPropertyVector4_PackPropertyVector4::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPropertyVector4_PackPropertyVector4, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgPropertyVector4_PackPropertyVector4::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPropertyVector4_PackPropertyVector4, OutData) == 0x000028, "Member 'FlatBuffersYYMsgPropertyVector4_PackPropertyVector4::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPropertyVector4_PackPropertyVector4, ReturnValue) == 0x000038, "Member 'FlatBuffersYYMsgPropertyVector4_PackPropertyVector4::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgPropertyVector4.UnpackPropertyVector4
// 0x0040 (0x0040 - 0x0000)
struct FlatBuffersYYMsgPropertyVector4_UnpackPropertyVector4 final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgPropertyVector4                  OutUE4Data;                                        // 0x0018(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgPropertyVector4_UnpackPropertyVector4) == 0x000008, "Wrong alignment on FlatBuffersYYMsgPropertyVector4_UnpackPropertyVector4");
static_assert(sizeof(FlatBuffersYYMsgPropertyVector4_UnpackPropertyVector4) == 0x000040, "Wrong size on FlatBuffersYYMsgPropertyVector4_UnpackPropertyVector4");
static_assert(offsetof(FlatBuffersYYMsgPropertyVector4_UnpackPropertyVector4, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgPropertyVector4_UnpackPropertyVector4::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPropertyVector4_UnpackPropertyVector4, InData) == 0x000008, "Member 'FlatBuffersYYMsgPropertyVector4_UnpackPropertyVector4::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPropertyVector4_UnpackPropertyVector4, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgPropertyVector4_UnpackPropertyVector4::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPropertyVector4_UnpackPropertyVector4, ReturnValue) == 0x000038, "Member 'FlatBuffersYYMsgPropertyVector4_UnpackPropertyVector4::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgRecordInt.PackRecordInt
// 0x0030 (0x0030 - 0x0000)
struct FlatBuffersYYMsgRecordInt_PackRecordInt final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgRecordInt                        InUE4Data;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgRecordInt_PackRecordInt) == 0x000008, "Wrong alignment on FlatBuffersYYMsgRecordInt_PackRecordInt");
static_assert(sizeof(FlatBuffersYYMsgRecordInt_PackRecordInt) == 0x000030, "Wrong size on FlatBuffersYYMsgRecordInt_PackRecordInt");
static_assert(offsetof(FlatBuffersYYMsgRecordInt_PackRecordInt, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgRecordInt_PackRecordInt::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRecordInt_PackRecordInt, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgRecordInt_PackRecordInt::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRecordInt_PackRecordInt, OutData) == 0x000018, "Member 'FlatBuffersYYMsgRecordInt_PackRecordInt::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRecordInt_PackRecordInt, ReturnValue) == 0x000028, "Member 'FlatBuffersYYMsgRecordInt_PackRecordInt::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgRecordInt.UnpackRecordInt
// 0x0030 (0x0030 - 0x0000)
struct FlatBuffersYYMsgRecordInt_UnpackRecordInt final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgRecordInt                        OutUE4Data;                                        // 0x0018(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgRecordInt_UnpackRecordInt) == 0x000008, "Wrong alignment on FlatBuffersYYMsgRecordInt_UnpackRecordInt");
static_assert(sizeof(FlatBuffersYYMsgRecordInt_UnpackRecordInt) == 0x000030, "Wrong size on FlatBuffersYYMsgRecordInt_UnpackRecordInt");
static_assert(offsetof(FlatBuffersYYMsgRecordInt_UnpackRecordInt, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgRecordInt_UnpackRecordInt::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRecordInt_UnpackRecordInt, InData) == 0x000008, "Member 'FlatBuffersYYMsgRecordInt_UnpackRecordInt::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRecordInt_UnpackRecordInt, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgRecordInt_UnpackRecordInt::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRecordInt_UnpackRecordInt, ReturnValue) == 0x000028, "Member 'FlatBuffersYYMsgRecordInt_UnpackRecordInt::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgRecordFloat.PackRecordFloat
// 0x0030 (0x0030 - 0x0000)
struct FlatBuffersYYMsgRecordFloat_PackRecordFloat final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgRecordFloat                      InUE4Data;                                         // 0x0008(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 OutData;                                           // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgRecordFloat_PackRecordFloat) == 0x000008, "Wrong alignment on FlatBuffersYYMsgRecordFloat_PackRecordFloat");
static_assert(sizeof(FlatBuffersYYMsgRecordFloat_PackRecordFloat) == 0x000030, "Wrong size on FlatBuffersYYMsgRecordFloat_PackRecordFloat");
static_assert(offsetof(FlatBuffersYYMsgRecordFloat_PackRecordFloat, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgRecordFloat_PackRecordFloat::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRecordFloat_PackRecordFloat, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgRecordFloat_PackRecordFloat::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRecordFloat_PackRecordFloat, OutData) == 0x000018, "Member 'FlatBuffersYYMsgRecordFloat_PackRecordFloat::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRecordFloat_PackRecordFloat, ReturnValue) == 0x000028, "Member 'FlatBuffersYYMsgRecordFloat_PackRecordFloat::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgRecordFloat.UnpackRecordFloat
// 0x0028 (0x0028 - 0x0000)
struct FlatBuffersYYMsgRecordFloat_UnpackRecordFloat final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgRecordFloat                      OutUE4Data;                                        // 0x0018(0x000C)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgRecordFloat_UnpackRecordFloat) == 0x000008, "Wrong alignment on FlatBuffersYYMsgRecordFloat_UnpackRecordFloat");
static_assert(sizeof(FlatBuffersYYMsgRecordFloat_UnpackRecordFloat) == 0x000028, "Wrong size on FlatBuffersYYMsgRecordFloat_UnpackRecordFloat");
static_assert(offsetof(FlatBuffersYYMsgRecordFloat_UnpackRecordFloat, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgRecordFloat_UnpackRecordFloat::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRecordFloat_UnpackRecordFloat, InData) == 0x000008, "Member 'FlatBuffersYYMsgRecordFloat_UnpackRecordFloat::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRecordFloat_UnpackRecordFloat, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgRecordFloat_UnpackRecordFloat::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRecordFloat_UnpackRecordFloat, ReturnValue) == 0x000024, "Member 'FlatBuffersYYMsgRecordFloat_UnpackRecordFloat::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgRecordString.PackRecordString
// 0x0038 (0x0038 - 0x0000)
struct FlatBuffersYYMsgRecordString_PackRecordString final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgRecordString                     InUE4Data;                                         // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgRecordString_PackRecordString) == 0x000008, "Wrong alignment on FlatBuffersYYMsgRecordString_PackRecordString");
static_assert(sizeof(FlatBuffersYYMsgRecordString_PackRecordString) == 0x000038, "Wrong size on FlatBuffersYYMsgRecordString_PackRecordString");
static_assert(offsetof(FlatBuffersYYMsgRecordString_PackRecordString, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgRecordString_PackRecordString::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRecordString_PackRecordString, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgRecordString_PackRecordString::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRecordString_PackRecordString, OutData) == 0x000020, "Member 'FlatBuffersYYMsgRecordString_PackRecordString::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRecordString_PackRecordString, ReturnValue) == 0x000030, "Member 'FlatBuffersYYMsgRecordString_PackRecordString::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgRecordString.UnpackRecordString
// 0x0038 (0x0038 - 0x0000)
struct FlatBuffersYYMsgRecordString_UnpackRecordString final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgRecordString                     OutUE4Data;                                        // 0x0018(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgRecordString_UnpackRecordString) == 0x000008, "Wrong alignment on FlatBuffersYYMsgRecordString_UnpackRecordString");
static_assert(sizeof(FlatBuffersYYMsgRecordString_UnpackRecordString) == 0x000038, "Wrong size on FlatBuffersYYMsgRecordString_UnpackRecordString");
static_assert(offsetof(FlatBuffersYYMsgRecordString_UnpackRecordString, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgRecordString_UnpackRecordString::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRecordString_UnpackRecordString, InData) == 0x000008, "Member 'FlatBuffersYYMsgRecordString_UnpackRecordString::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRecordString_UnpackRecordString, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgRecordString_UnpackRecordString::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRecordString_UnpackRecordString, ReturnValue) == 0x000030, "Member 'FlatBuffersYYMsgRecordString_UnpackRecordString::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgRecordByte.PackRecordByte
// 0x0038 (0x0038 - 0x0000)
struct FlatBuffersYYMsgRecordByte_PackRecordByte final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgRecordByte                       InUE4Data;                                         // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgRecordByte_PackRecordByte) == 0x000008, "Wrong alignment on FlatBuffersYYMsgRecordByte_PackRecordByte");
static_assert(sizeof(FlatBuffersYYMsgRecordByte_PackRecordByte) == 0x000038, "Wrong size on FlatBuffersYYMsgRecordByte_PackRecordByte");
static_assert(offsetof(FlatBuffersYYMsgRecordByte_PackRecordByte, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgRecordByte_PackRecordByte::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRecordByte_PackRecordByte, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgRecordByte_PackRecordByte::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRecordByte_PackRecordByte, OutData) == 0x000020, "Member 'FlatBuffersYYMsgRecordByte_PackRecordByte::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRecordByte_PackRecordByte, ReturnValue) == 0x000030, "Member 'FlatBuffersYYMsgRecordByte_PackRecordByte::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgRecordByte.UnpackRecordByte
// 0x0038 (0x0038 - 0x0000)
struct FlatBuffersYYMsgRecordByte_UnpackRecordByte final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgRecordByte                       OutUE4Data;                                        // 0x0018(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgRecordByte_UnpackRecordByte) == 0x000008, "Wrong alignment on FlatBuffersYYMsgRecordByte_UnpackRecordByte");
static_assert(sizeof(FlatBuffersYYMsgRecordByte_UnpackRecordByte) == 0x000038, "Wrong size on FlatBuffersYYMsgRecordByte_UnpackRecordByte");
static_assert(offsetof(FlatBuffersYYMsgRecordByte_UnpackRecordByte, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgRecordByte_UnpackRecordByte::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRecordByte_UnpackRecordByte, InData) == 0x000008, "Member 'FlatBuffersYYMsgRecordByte_UnpackRecordByte::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRecordByte_UnpackRecordByte, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgRecordByte_UnpackRecordByte::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRecordByte_UnpackRecordByte, ReturnValue) == 0x000030, "Member 'FlatBuffersYYMsgRecordByte_UnpackRecordByte::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgRecordObject.PackRecordObject
// 0x0038 (0x0038 - 0x0000)
struct FlatBuffersYYMsgRecordObject_PackRecordObject final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgRecordObject                     InUE4Data;                                         // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgRecordObject_PackRecordObject) == 0x000008, "Wrong alignment on FlatBuffersYYMsgRecordObject_PackRecordObject");
static_assert(sizeof(FlatBuffersYYMsgRecordObject_PackRecordObject) == 0x000038, "Wrong size on FlatBuffersYYMsgRecordObject_PackRecordObject");
static_assert(offsetof(FlatBuffersYYMsgRecordObject_PackRecordObject, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgRecordObject_PackRecordObject::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRecordObject_PackRecordObject, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgRecordObject_PackRecordObject::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRecordObject_PackRecordObject, OutData) == 0x000020, "Member 'FlatBuffersYYMsgRecordObject_PackRecordObject::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRecordObject_PackRecordObject, ReturnValue) == 0x000030, "Member 'FlatBuffersYYMsgRecordObject_PackRecordObject::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgRecordObject.UnpackRecordObject
// 0x0038 (0x0038 - 0x0000)
struct FlatBuffersYYMsgRecordObject_UnpackRecordObject final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgRecordObject                     OutUE4Data;                                        // 0x0018(0x0018)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgRecordObject_UnpackRecordObject) == 0x000008, "Wrong alignment on FlatBuffersYYMsgRecordObject_UnpackRecordObject");
static_assert(sizeof(FlatBuffersYYMsgRecordObject_UnpackRecordObject) == 0x000038, "Wrong size on FlatBuffersYYMsgRecordObject_UnpackRecordObject");
static_assert(offsetof(FlatBuffersYYMsgRecordObject_UnpackRecordObject, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgRecordObject_UnpackRecordObject::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRecordObject_UnpackRecordObject, InData) == 0x000008, "Member 'FlatBuffersYYMsgRecordObject_UnpackRecordObject::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRecordObject_UnpackRecordObject, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgRecordObject_UnpackRecordObject::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRecordObject_UnpackRecordObject, ReturnValue) == 0x000030, "Member 'FlatBuffersYYMsgRecordObject_UnpackRecordObject::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgRecordVector2.PackRecordVector2
// 0x0030 (0x0030 - 0x0000)
struct FlatBuffersYYMsgRecordVector2_PackRecordVector2 final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgRecordVector2                    InUE4Data;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgRecordVector2_PackRecordVector2) == 0x000008, "Wrong alignment on FlatBuffersYYMsgRecordVector2_PackRecordVector2");
static_assert(sizeof(FlatBuffersYYMsgRecordVector2_PackRecordVector2) == 0x000030, "Wrong size on FlatBuffersYYMsgRecordVector2_PackRecordVector2");
static_assert(offsetof(FlatBuffersYYMsgRecordVector2_PackRecordVector2, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgRecordVector2_PackRecordVector2::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRecordVector2_PackRecordVector2, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgRecordVector2_PackRecordVector2::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRecordVector2_PackRecordVector2, OutData) == 0x000018, "Member 'FlatBuffersYYMsgRecordVector2_PackRecordVector2::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRecordVector2_PackRecordVector2, ReturnValue) == 0x000028, "Member 'FlatBuffersYYMsgRecordVector2_PackRecordVector2::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgRecordVector2.UnpackRecordVector2
// 0x0030 (0x0030 - 0x0000)
struct FlatBuffersYYMsgRecordVector2_UnpackRecordVector2 final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgRecordVector2                    OutUE4Data;                                        // 0x0018(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgRecordVector2_UnpackRecordVector2) == 0x000008, "Wrong alignment on FlatBuffersYYMsgRecordVector2_UnpackRecordVector2");
static_assert(sizeof(FlatBuffersYYMsgRecordVector2_UnpackRecordVector2) == 0x000030, "Wrong size on FlatBuffersYYMsgRecordVector2_UnpackRecordVector2");
static_assert(offsetof(FlatBuffersYYMsgRecordVector2_UnpackRecordVector2, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgRecordVector2_UnpackRecordVector2::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRecordVector2_UnpackRecordVector2, InData) == 0x000008, "Member 'FlatBuffersYYMsgRecordVector2_UnpackRecordVector2::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRecordVector2_UnpackRecordVector2, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgRecordVector2_UnpackRecordVector2::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRecordVector2_UnpackRecordVector2, ReturnValue) == 0x000028, "Member 'FlatBuffersYYMsgRecordVector2_UnpackRecordVector2::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgRecordVector3.PackRecordVector3
// 0x0038 (0x0038 - 0x0000)
struct FlatBuffersYYMsgRecordVector3_PackRecordVector3 final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgRecordVector3                    InUE4Data;                                         // 0x0008(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 OutData;                                           // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgRecordVector3_PackRecordVector3) == 0x000008, "Wrong alignment on FlatBuffersYYMsgRecordVector3_PackRecordVector3");
static_assert(sizeof(FlatBuffersYYMsgRecordVector3_PackRecordVector3) == 0x000038, "Wrong size on FlatBuffersYYMsgRecordVector3_PackRecordVector3");
static_assert(offsetof(FlatBuffersYYMsgRecordVector3_PackRecordVector3, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgRecordVector3_PackRecordVector3::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRecordVector3_PackRecordVector3, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgRecordVector3_PackRecordVector3::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRecordVector3_PackRecordVector3, OutData) == 0x000020, "Member 'FlatBuffersYYMsgRecordVector3_PackRecordVector3::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRecordVector3_PackRecordVector3, ReturnValue) == 0x000030, "Member 'FlatBuffersYYMsgRecordVector3_PackRecordVector3::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgRecordVector3.UnpackRecordVector3
// 0x0030 (0x0030 - 0x0000)
struct FlatBuffersYYMsgRecordVector3_UnpackRecordVector3 final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgRecordVector3                    OutUE4Data;                                        // 0x0018(0x0014)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x002C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgRecordVector3_UnpackRecordVector3) == 0x000008, "Wrong alignment on FlatBuffersYYMsgRecordVector3_UnpackRecordVector3");
static_assert(sizeof(FlatBuffersYYMsgRecordVector3_UnpackRecordVector3) == 0x000030, "Wrong size on FlatBuffersYYMsgRecordVector3_UnpackRecordVector3");
static_assert(offsetof(FlatBuffersYYMsgRecordVector3_UnpackRecordVector3, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgRecordVector3_UnpackRecordVector3::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRecordVector3_UnpackRecordVector3, InData) == 0x000008, "Member 'FlatBuffersYYMsgRecordVector3_UnpackRecordVector3::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRecordVector3_UnpackRecordVector3, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgRecordVector3_UnpackRecordVector3::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRecordVector3_UnpackRecordVector3, ReturnValue) == 0x00002C, "Member 'FlatBuffersYYMsgRecordVector3_UnpackRecordVector3::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgRecordVector4.PackRecordVector4
// 0x0038 (0x0038 - 0x0000)
struct FlatBuffersYYMsgRecordVector4_PackRecordVector4 final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgRecordVector4                    InUE4Data;                                         // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgRecordVector4_PackRecordVector4) == 0x000008, "Wrong alignment on FlatBuffersYYMsgRecordVector4_PackRecordVector4");
static_assert(sizeof(FlatBuffersYYMsgRecordVector4_PackRecordVector4) == 0x000038, "Wrong size on FlatBuffersYYMsgRecordVector4_PackRecordVector4");
static_assert(offsetof(FlatBuffersYYMsgRecordVector4_PackRecordVector4, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgRecordVector4_PackRecordVector4::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRecordVector4_PackRecordVector4, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgRecordVector4_PackRecordVector4::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRecordVector4_PackRecordVector4, OutData) == 0x000020, "Member 'FlatBuffersYYMsgRecordVector4_PackRecordVector4::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRecordVector4_PackRecordVector4, ReturnValue) == 0x000030, "Member 'FlatBuffersYYMsgRecordVector4_PackRecordVector4::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgRecordVector4.UnpackRecordVector4
// 0x0038 (0x0038 - 0x0000)
struct FlatBuffersYYMsgRecordVector4_UnpackRecordVector4 final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgRecordVector4                    OutUE4Data;                                        // 0x0018(0x0018)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgRecordVector4_UnpackRecordVector4) == 0x000008, "Wrong alignment on FlatBuffersYYMsgRecordVector4_UnpackRecordVector4");
static_assert(sizeof(FlatBuffersYYMsgRecordVector4_UnpackRecordVector4) == 0x000038, "Wrong size on FlatBuffersYYMsgRecordVector4_UnpackRecordVector4");
static_assert(offsetof(FlatBuffersYYMsgRecordVector4_UnpackRecordVector4, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgRecordVector4_UnpackRecordVector4::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRecordVector4_UnpackRecordVector4, InData) == 0x000008, "Member 'FlatBuffersYYMsgRecordVector4_UnpackRecordVector4::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRecordVector4_UnpackRecordVector4, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgRecordVector4_UnpackRecordVector4::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRecordVector4_UnpackRecordVector4, ReturnValue) == 0x000030, "Member 'FlatBuffersYYMsgRecordVector4_UnpackRecordVector4::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgRecordAddRowStruct.PackRecordAddRowStruct
// 0x00A8 (0x00A8 - 0x0000)
struct FlatBuffersYYMsgRecordAddRowStruct_PackRecordAddRowStruct final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgRecordAddRowStruct               InUE4Data;                                         // 0x0008(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0090(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgRecordAddRowStruct_PackRecordAddRowStruct) == 0x000008, "Wrong alignment on FlatBuffersYYMsgRecordAddRowStruct_PackRecordAddRowStruct");
static_assert(sizeof(FlatBuffersYYMsgRecordAddRowStruct_PackRecordAddRowStruct) == 0x0000A8, "Wrong size on FlatBuffersYYMsgRecordAddRowStruct_PackRecordAddRowStruct");
static_assert(offsetof(FlatBuffersYYMsgRecordAddRowStruct_PackRecordAddRowStruct, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgRecordAddRowStruct_PackRecordAddRowStruct::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRecordAddRowStruct_PackRecordAddRowStruct, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgRecordAddRowStruct_PackRecordAddRowStruct::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRecordAddRowStruct_PackRecordAddRowStruct, OutData) == 0x000090, "Member 'FlatBuffersYYMsgRecordAddRowStruct_PackRecordAddRowStruct::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRecordAddRowStruct_PackRecordAddRowStruct, ReturnValue) == 0x0000A0, "Member 'FlatBuffersYYMsgRecordAddRowStruct_PackRecordAddRowStruct::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgRecordAddRowStruct.UnpackRecordAddRowStruct
// 0x00A8 (0x00A8 - 0x0000)
struct FlatBuffersYYMsgRecordAddRowStruct_UnpackRecordAddRowStruct final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgRecordAddRowStruct               OutUE4Data;                                        // 0x0018(0x0088)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgRecordAddRowStruct_UnpackRecordAddRowStruct) == 0x000008, "Wrong alignment on FlatBuffersYYMsgRecordAddRowStruct_UnpackRecordAddRowStruct");
static_assert(sizeof(FlatBuffersYYMsgRecordAddRowStruct_UnpackRecordAddRowStruct) == 0x0000A8, "Wrong size on FlatBuffersYYMsgRecordAddRowStruct_UnpackRecordAddRowStruct");
static_assert(offsetof(FlatBuffersYYMsgRecordAddRowStruct_UnpackRecordAddRowStruct, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgRecordAddRowStruct_UnpackRecordAddRowStruct::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRecordAddRowStruct_UnpackRecordAddRowStruct, InData) == 0x000008, "Member 'FlatBuffersYYMsgRecordAddRowStruct_UnpackRecordAddRowStruct::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRecordAddRowStruct_UnpackRecordAddRowStruct, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgRecordAddRowStruct_UnpackRecordAddRowStruct::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRecordAddRowStruct_UnpackRecordAddRowStruct, ReturnValue) == 0x0000A0, "Member 'FlatBuffersYYMsgRecordAddRowStruct_UnpackRecordAddRowStruct::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgObjectRecordBase.PackObjectRecordBase
// 0x0040 (0x0040 - 0x0000)
struct FlatBuffersYYMsgObjectRecordBase_PackObjectRecordBase final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgObjectRecordBase                 InUE4Data;                                         // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgObjectRecordBase_PackObjectRecordBase) == 0x000008, "Wrong alignment on FlatBuffersYYMsgObjectRecordBase_PackObjectRecordBase");
static_assert(sizeof(FlatBuffersYYMsgObjectRecordBase_PackObjectRecordBase) == 0x000040, "Wrong size on FlatBuffersYYMsgObjectRecordBase_PackObjectRecordBase");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordBase_PackObjectRecordBase, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgObjectRecordBase_PackObjectRecordBase::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordBase_PackObjectRecordBase, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgObjectRecordBase_PackObjectRecordBase::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordBase_PackObjectRecordBase, OutData) == 0x000028, "Member 'FlatBuffersYYMsgObjectRecordBase_PackObjectRecordBase::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordBase_PackObjectRecordBase, ReturnValue) == 0x000038, "Member 'FlatBuffersYYMsgObjectRecordBase_PackObjectRecordBase::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgObjectRecordBase.UnpackObjectRecordBase
// 0x0040 (0x0040 - 0x0000)
struct FlatBuffersYYMsgObjectRecordBase_UnpackObjectRecordBase final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgObjectRecordBase                 OutUE4Data;                                        // 0x0018(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgObjectRecordBase_UnpackObjectRecordBase) == 0x000008, "Wrong alignment on FlatBuffersYYMsgObjectRecordBase_UnpackObjectRecordBase");
static_assert(sizeof(FlatBuffersYYMsgObjectRecordBase_UnpackObjectRecordBase) == 0x000040, "Wrong size on FlatBuffersYYMsgObjectRecordBase_UnpackObjectRecordBase");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordBase_UnpackObjectRecordBase, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgObjectRecordBase_UnpackObjectRecordBase::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordBase_UnpackObjectRecordBase, InData) == 0x000008, "Member 'FlatBuffersYYMsgObjectRecordBase_UnpackObjectRecordBase::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordBase_UnpackObjectRecordBase, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgObjectRecordBase_UnpackObjectRecordBase::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordBase_UnpackObjectRecordBase, ReturnValue) == 0x000038, "Member 'FlatBuffersYYMsgObjectRecordBase_UnpackObjectRecordBase::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgObjectPropertyList.PackObjectPropertyList
// 0x00B0 (0x00B0 - 0x0000)
struct FlatBuffersYYMsgObjectPropertyList_PackObjectPropertyList final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgObjectPropertyList               InUE4Data;                                         // 0x0008(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0098(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgObjectPropertyList_PackObjectPropertyList) == 0x000008, "Wrong alignment on FlatBuffersYYMsgObjectPropertyList_PackObjectPropertyList");
static_assert(sizeof(FlatBuffersYYMsgObjectPropertyList_PackObjectPropertyList) == 0x0000B0, "Wrong size on FlatBuffersYYMsgObjectPropertyList_PackObjectPropertyList");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyList_PackObjectPropertyList, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgObjectPropertyList_PackObjectPropertyList::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyList_PackObjectPropertyList, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgObjectPropertyList_PackObjectPropertyList::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyList_PackObjectPropertyList, OutData) == 0x000098, "Member 'FlatBuffersYYMsgObjectPropertyList_PackObjectPropertyList::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyList_PackObjectPropertyList, ReturnValue) == 0x0000A8, "Member 'FlatBuffersYYMsgObjectPropertyList_PackObjectPropertyList::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgObjectPropertyList.UnpackObjectPropertyList
// 0x00B0 (0x00B0 - 0x0000)
struct FlatBuffersYYMsgObjectPropertyList_UnpackObjectPropertyList final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgObjectPropertyList               OutUE4Data;                                        // 0x0018(0x0090)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgObjectPropertyList_UnpackObjectPropertyList) == 0x000008, "Wrong alignment on FlatBuffersYYMsgObjectPropertyList_UnpackObjectPropertyList");
static_assert(sizeof(FlatBuffersYYMsgObjectPropertyList_UnpackObjectPropertyList) == 0x0000B0, "Wrong size on FlatBuffersYYMsgObjectPropertyList_UnpackObjectPropertyList");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyList_UnpackObjectPropertyList, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgObjectPropertyList_UnpackObjectPropertyList::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyList_UnpackObjectPropertyList, InData) == 0x000008, "Member 'FlatBuffersYYMsgObjectPropertyList_UnpackObjectPropertyList::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyList_UnpackObjectPropertyList, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgObjectPropertyList_UnpackObjectPropertyList::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyList_UnpackObjectPropertyList, ReturnValue) == 0x0000A8, "Member 'FlatBuffersYYMsgObjectPropertyList_UnpackObjectPropertyList::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgMultiObjectPropertyList.PackMultiObjectPropertyList
// 0x0030 (0x0030 - 0x0000)
struct FlatBuffersYYMsgMultiObjectPropertyList_PackMultiObjectPropertyList final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgMultiObjectPropertyList          InUE4Data;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgMultiObjectPropertyList_PackMultiObjectPropertyList) == 0x000008, "Wrong alignment on FlatBuffersYYMsgMultiObjectPropertyList_PackMultiObjectPropertyList");
static_assert(sizeof(FlatBuffersYYMsgMultiObjectPropertyList_PackMultiObjectPropertyList) == 0x000030, "Wrong size on FlatBuffersYYMsgMultiObjectPropertyList_PackMultiObjectPropertyList");
static_assert(offsetof(FlatBuffersYYMsgMultiObjectPropertyList_PackMultiObjectPropertyList, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgMultiObjectPropertyList_PackMultiObjectPropertyList::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgMultiObjectPropertyList_PackMultiObjectPropertyList, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgMultiObjectPropertyList_PackMultiObjectPropertyList::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgMultiObjectPropertyList_PackMultiObjectPropertyList, OutData) == 0x000018, "Member 'FlatBuffersYYMsgMultiObjectPropertyList_PackMultiObjectPropertyList::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgMultiObjectPropertyList_PackMultiObjectPropertyList, ReturnValue) == 0x000028, "Member 'FlatBuffersYYMsgMultiObjectPropertyList_PackMultiObjectPropertyList::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgMultiObjectPropertyList.UnpackMultiObjectPropertyList
// 0x0030 (0x0030 - 0x0000)
struct FlatBuffersYYMsgMultiObjectPropertyList_UnpackMultiObjectPropertyList final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgMultiObjectPropertyList          OutUE4Data;                                        // 0x0018(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgMultiObjectPropertyList_UnpackMultiObjectPropertyList) == 0x000008, "Wrong alignment on FlatBuffersYYMsgMultiObjectPropertyList_UnpackMultiObjectPropertyList");
static_assert(sizeof(FlatBuffersYYMsgMultiObjectPropertyList_UnpackMultiObjectPropertyList) == 0x000030, "Wrong size on FlatBuffersYYMsgMultiObjectPropertyList_UnpackMultiObjectPropertyList");
static_assert(offsetof(FlatBuffersYYMsgMultiObjectPropertyList_UnpackMultiObjectPropertyList, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgMultiObjectPropertyList_UnpackMultiObjectPropertyList::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgMultiObjectPropertyList_UnpackMultiObjectPropertyList, InData) == 0x000008, "Member 'FlatBuffersYYMsgMultiObjectPropertyList_UnpackMultiObjectPropertyList::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgMultiObjectPropertyList_UnpackMultiObjectPropertyList, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgMultiObjectPropertyList_UnpackMultiObjectPropertyList::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgMultiObjectPropertyList_UnpackMultiObjectPropertyList, ReturnValue) == 0x000028, "Member 'FlatBuffersYYMsgMultiObjectPropertyList_UnpackMultiObjectPropertyList::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgObjectRecordList.PackObjectRecordList
// 0x0040 (0x0040 - 0x0000)
struct FlatBuffersYYMsgObjectRecordList_PackObjectRecordList final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgObjectRecordList                 InUE4Data;                                         // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgObjectRecordList_PackObjectRecordList) == 0x000008, "Wrong alignment on FlatBuffersYYMsgObjectRecordList_PackObjectRecordList");
static_assert(sizeof(FlatBuffersYYMsgObjectRecordList_PackObjectRecordList) == 0x000040, "Wrong size on FlatBuffersYYMsgObjectRecordList_PackObjectRecordList");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordList_PackObjectRecordList, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgObjectRecordList_PackObjectRecordList::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordList_PackObjectRecordList, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgObjectRecordList_PackObjectRecordList::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordList_PackObjectRecordList, OutData) == 0x000028, "Member 'FlatBuffersYYMsgObjectRecordList_PackObjectRecordList::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordList_PackObjectRecordList, ReturnValue) == 0x000038, "Member 'FlatBuffersYYMsgObjectRecordList_PackObjectRecordList::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgObjectRecordList.UnpackObjectRecordList
// 0x0040 (0x0040 - 0x0000)
struct FlatBuffersYYMsgObjectRecordList_UnpackObjectRecordList final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgObjectRecordList                 OutUE4Data;                                        // 0x0018(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgObjectRecordList_UnpackObjectRecordList) == 0x000008, "Wrong alignment on FlatBuffersYYMsgObjectRecordList_UnpackObjectRecordList");
static_assert(sizeof(FlatBuffersYYMsgObjectRecordList_UnpackObjectRecordList) == 0x000040, "Wrong size on FlatBuffersYYMsgObjectRecordList_UnpackObjectRecordList");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordList_UnpackObjectRecordList, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgObjectRecordList_UnpackObjectRecordList::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordList_UnpackObjectRecordList, InData) == 0x000008, "Member 'FlatBuffersYYMsgObjectRecordList_UnpackObjectRecordList::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordList_UnpackObjectRecordList, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgObjectRecordList_UnpackObjectRecordList::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordList_UnpackObjectRecordList, ReturnValue) == 0x000038, "Member 'FlatBuffersYYMsgObjectRecordList_UnpackObjectRecordList::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgMultiObjectRecordList.PackMultiObjectRecordList
// 0x0030 (0x0030 - 0x0000)
struct FlatBuffersYYMsgMultiObjectRecordList_PackMultiObjectRecordList final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgMultiObjectRecordList            InUE4Data;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgMultiObjectRecordList_PackMultiObjectRecordList) == 0x000008, "Wrong alignment on FlatBuffersYYMsgMultiObjectRecordList_PackMultiObjectRecordList");
static_assert(sizeof(FlatBuffersYYMsgMultiObjectRecordList_PackMultiObjectRecordList) == 0x000030, "Wrong size on FlatBuffersYYMsgMultiObjectRecordList_PackMultiObjectRecordList");
static_assert(offsetof(FlatBuffersYYMsgMultiObjectRecordList_PackMultiObjectRecordList, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgMultiObjectRecordList_PackMultiObjectRecordList::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgMultiObjectRecordList_PackMultiObjectRecordList, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgMultiObjectRecordList_PackMultiObjectRecordList::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgMultiObjectRecordList_PackMultiObjectRecordList, OutData) == 0x000018, "Member 'FlatBuffersYYMsgMultiObjectRecordList_PackMultiObjectRecordList::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgMultiObjectRecordList_PackMultiObjectRecordList, ReturnValue) == 0x000028, "Member 'FlatBuffersYYMsgMultiObjectRecordList_PackMultiObjectRecordList::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgMultiObjectRecordList.UnpackMultiObjectRecordList
// 0x0030 (0x0030 - 0x0000)
struct FlatBuffersYYMsgMultiObjectRecordList_UnpackMultiObjectRecordList final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgMultiObjectRecordList            OutUE4Data;                                        // 0x0018(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgMultiObjectRecordList_UnpackMultiObjectRecordList) == 0x000008, "Wrong alignment on FlatBuffersYYMsgMultiObjectRecordList_UnpackMultiObjectRecordList");
static_assert(sizeof(FlatBuffersYYMsgMultiObjectRecordList_UnpackMultiObjectRecordList) == 0x000030, "Wrong size on FlatBuffersYYMsgMultiObjectRecordList_UnpackMultiObjectRecordList");
static_assert(offsetof(FlatBuffersYYMsgMultiObjectRecordList_UnpackMultiObjectRecordList, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgMultiObjectRecordList_UnpackMultiObjectRecordList::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgMultiObjectRecordList_UnpackMultiObjectRecordList, InData) == 0x000008, "Member 'FlatBuffersYYMsgMultiObjectRecordList_UnpackMultiObjectRecordList::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgMultiObjectRecordList_UnpackMultiObjectRecordList, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgMultiObjectRecordList_UnpackMultiObjectRecordList::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgMultiObjectRecordList_UnpackMultiObjectRecordList, ReturnValue) == 0x000028, "Member 'FlatBuffersYYMsgMultiObjectRecordList_UnpackMultiObjectRecordList::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgObjectPropertyInt.PackObjectPropertyInt
// 0x0040 (0x0040 - 0x0000)
struct FlatBuffersYYMsgObjectPropertyInt_PackObjectPropertyInt final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgObjectPropertyInt                InUE4Data;                                         // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgObjectPropertyInt_PackObjectPropertyInt) == 0x000008, "Wrong alignment on FlatBuffersYYMsgObjectPropertyInt_PackObjectPropertyInt");
static_assert(sizeof(FlatBuffersYYMsgObjectPropertyInt_PackObjectPropertyInt) == 0x000040, "Wrong size on FlatBuffersYYMsgObjectPropertyInt_PackObjectPropertyInt");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyInt_PackObjectPropertyInt, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgObjectPropertyInt_PackObjectPropertyInt::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyInt_PackObjectPropertyInt, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgObjectPropertyInt_PackObjectPropertyInt::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyInt_PackObjectPropertyInt, OutData) == 0x000028, "Member 'FlatBuffersYYMsgObjectPropertyInt_PackObjectPropertyInt::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyInt_PackObjectPropertyInt, ReturnValue) == 0x000038, "Member 'FlatBuffersYYMsgObjectPropertyInt_PackObjectPropertyInt::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgObjectPropertyInt.UnpackObjectPropertyInt
// 0x0040 (0x0040 - 0x0000)
struct FlatBuffersYYMsgObjectPropertyInt_UnpackObjectPropertyInt final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgObjectPropertyInt                OutUE4Data;                                        // 0x0018(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgObjectPropertyInt_UnpackObjectPropertyInt) == 0x000008, "Wrong alignment on FlatBuffersYYMsgObjectPropertyInt_UnpackObjectPropertyInt");
static_assert(sizeof(FlatBuffersYYMsgObjectPropertyInt_UnpackObjectPropertyInt) == 0x000040, "Wrong size on FlatBuffersYYMsgObjectPropertyInt_UnpackObjectPropertyInt");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyInt_UnpackObjectPropertyInt, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgObjectPropertyInt_UnpackObjectPropertyInt::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyInt_UnpackObjectPropertyInt, InData) == 0x000008, "Member 'FlatBuffersYYMsgObjectPropertyInt_UnpackObjectPropertyInt::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyInt_UnpackObjectPropertyInt, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgObjectPropertyInt_UnpackObjectPropertyInt::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyInt_UnpackObjectPropertyInt, ReturnValue) == 0x000038, "Member 'FlatBuffersYYMsgObjectPropertyInt_UnpackObjectPropertyInt::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgObjectPropertyFloat.PackObjectPropertyFloat
// 0x0040 (0x0040 - 0x0000)
struct FlatBuffersYYMsgObjectPropertyFloat_PackObjectPropertyFloat final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgObjectPropertyFloat              InUE4Data;                                         // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgObjectPropertyFloat_PackObjectPropertyFloat) == 0x000008, "Wrong alignment on FlatBuffersYYMsgObjectPropertyFloat_PackObjectPropertyFloat");
static_assert(sizeof(FlatBuffersYYMsgObjectPropertyFloat_PackObjectPropertyFloat) == 0x000040, "Wrong size on FlatBuffersYYMsgObjectPropertyFloat_PackObjectPropertyFloat");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyFloat_PackObjectPropertyFloat, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgObjectPropertyFloat_PackObjectPropertyFloat::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyFloat_PackObjectPropertyFloat, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgObjectPropertyFloat_PackObjectPropertyFloat::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyFloat_PackObjectPropertyFloat, OutData) == 0x000028, "Member 'FlatBuffersYYMsgObjectPropertyFloat_PackObjectPropertyFloat::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyFloat_PackObjectPropertyFloat, ReturnValue) == 0x000038, "Member 'FlatBuffersYYMsgObjectPropertyFloat_PackObjectPropertyFloat::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgObjectPropertyFloat.UnpackObjectPropertyFloat
// 0x0040 (0x0040 - 0x0000)
struct FlatBuffersYYMsgObjectPropertyFloat_UnpackObjectPropertyFloat final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgObjectPropertyFloat              OutUE4Data;                                        // 0x0018(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgObjectPropertyFloat_UnpackObjectPropertyFloat) == 0x000008, "Wrong alignment on FlatBuffersYYMsgObjectPropertyFloat_UnpackObjectPropertyFloat");
static_assert(sizeof(FlatBuffersYYMsgObjectPropertyFloat_UnpackObjectPropertyFloat) == 0x000040, "Wrong size on FlatBuffersYYMsgObjectPropertyFloat_UnpackObjectPropertyFloat");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyFloat_UnpackObjectPropertyFloat, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgObjectPropertyFloat_UnpackObjectPropertyFloat::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyFloat_UnpackObjectPropertyFloat, InData) == 0x000008, "Member 'FlatBuffersYYMsgObjectPropertyFloat_UnpackObjectPropertyFloat::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyFloat_UnpackObjectPropertyFloat, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgObjectPropertyFloat_UnpackObjectPropertyFloat::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyFloat_UnpackObjectPropertyFloat, ReturnValue) == 0x000038, "Member 'FlatBuffersYYMsgObjectPropertyFloat_UnpackObjectPropertyFloat::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgObjectPropertyString.PackObjectPropertyString
// 0x0040 (0x0040 - 0x0000)
struct FlatBuffersYYMsgObjectPropertyString_PackObjectPropertyString final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgObjectPropertyString             InUE4Data;                                         // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgObjectPropertyString_PackObjectPropertyString) == 0x000008, "Wrong alignment on FlatBuffersYYMsgObjectPropertyString_PackObjectPropertyString");
static_assert(sizeof(FlatBuffersYYMsgObjectPropertyString_PackObjectPropertyString) == 0x000040, "Wrong size on FlatBuffersYYMsgObjectPropertyString_PackObjectPropertyString");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyString_PackObjectPropertyString, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgObjectPropertyString_PackObjectPropertyString::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyString_PackObjectPropertyString, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgObjectPropertyString_PackObjectPropertyString::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyString_PackObjectPropertyString, OutData) == 0x000028, "Member 'FlatBuffersYYMsgObjectPropertyString_PackObjectPropertyString::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyString_PackObjectPropertyString, ReturnValue) == 0x000038, "Member 'FlatBuffersYYMsgObjectPropertyString_PackObjectPropertyString::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgObjectPropertyString.UnpackObjectPropertyString
// 0x0040 (0x0040 - 0x0000)
struct FlatBuffersYYMsgObjectPropertyString_UnpackObjectPropertyString final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgObjectPropertyString             OutUE4Data;                                        // 0x0018(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgObjectPropertyString_UnpackObjectPropertyString) == 0x000008, "Wrong alignment on FlatBuffersYYMsgObjectPropertyString_UnpackObjectPropertyString");
static_assert(sizeof(FlatBuffersYYMsgObjectPropertyString_UnpackObjectPropertyString) == 0x000040, "Wrong size on FlatBuffersYYMsgObjectPropertyString_UnpackObjectPropertyString");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyString_UnpackObjectPropertyString, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgObjectPropertyString_UnpackObjectPropertyString::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyString_UnpackObjectPropertyString, InData) == 0x000008, "Member 'FlatBuffersYYMsgObjectPropertyString_UnpackObjectPropertyString::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyString_UnpackObjectPropertyString, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgObjectPropertyString_UnpackObjectPropertyString::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyString_UnpackObjectPropertyString, ReturnValue) == 0x000038, "Member 'FlatBuffersYYMsgObjectPropertyString_UnpackObjectPropertyString::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgObjectPropertyByte.PackObjectPropertyByte
// 0x0040 (0x0040 - 0x0000)
struct FlatBuffersYYMsgObjectPropertyByte_PackObjectPropertyByte final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgObjectPropertyByte               InUE4Data;                                         // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgObjectPropertyByte_PackObjectPropertyByte) == 0x000008, "Wrong alignment on FlatBuffersYYMsgObjectPropertyByte_PackObjectPropertyByte");
static_assert(sizeof(FlatBuffersYYMsgObjectPropertyByte_PackObjectPropertyByte) == 0x000040, "Wrong size on FlatBuffersYYMsgObjectPropertyByte_PackObjectPropertyByte");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyByte_PackObjectPropertyByte, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgObjectPropertyByte_PackObjectPropertyByte::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyByte_PackObjectPropertyByte, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgObjectPropertyByte_PackObjectPropertyByte::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyByte_PackObjectPropertyByte, OutData) == 0x000028, "Member 'FlatBuffersYYMsgObjectPropertyByte_PackObjectPropertyByte::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyByte_PackObjectPropertyByte, ReturnValue) == 0x000038, "Member 'FlatBuffersYYMsgObjectPropertyByte_PackObjectPropertyByte::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgObjectPropertyByte.UnpackObjectPropertyByte
// 0x0040 (0x0040 - 0x0000)
struct FlatBuffersYYMsgObjectPropertyByte_UnpackObjectPropertyByte final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgObjectPropertyByte               OutUE4Data;                                        // 0x0018(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgObjectPropertyByte_UnpackObjectPropertyByte) == 0x000008, "Wrong alignment on FlatBuffersYYMsgObjectPropertyByte_UnpackObjectPropertyByte");
static_assert(sizeof(FlatBuffersYYMsgObjectPropertyByte_UnpackObjectPropertyByte) == 0x000040, "Wrong size on FlatBuffersYYMsgObjectPropertyByte_UnpackObjectPropertyByte");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyByte_UnpackObjectPropertyByte, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgObjectPropertyByte_UnpackObjectPropertyByte::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyByte_UnpackObjectPropertyByte, InData) == 0x000008, "Member 'FlatBuffersYYMsgObjectPropertyByte_UnpackObjectPropertyByte::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyByte_UnpackObjectPropertyByte, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgObjectPropertyByte_UnpackObjectPropertyByte::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyByte_UnpackObjectPropertyByte, ReturnValue) == 0x000038, "Member 'FlatBuffersYYMsgObjectPropertyByte_UnpackObjectPropertyByte::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgObjectPropertyObject.PackObjectPropertyObject
// 0x0040 (0x0040 - 0x0000)
struct FlatBuffersYYMsgObjectPropertyObject_PackObjectPropertyObject final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgObjectPropertyObject             InUE4Data;                                         // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgObjectPropertyObject_PackObjectPropertyObject) == 0x000008, "Wrong alignment on FlatBuffersYYMsgObjectPropertyObject_PackObjectPropertyObject");
static_assert(sizeof(FlatBuffersYYMsgObjectPropertyObject_PackObjectPropertyObject) == 0x000040, "Wrong size on FlatBuffersYYMsgObjectPropertyObject_PackObjectPropertyObject");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyObject_PackObjectPropertyObject, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgObjectPropertyObject_PackObjectPropertyObject::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyObject_PackObjectPropertyObject, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgObjectPropertyObject_PackObjectPropertyObject::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyObject_PackObjectPropertyObject, OutData) == 0x000028, "Member 'FlatBuffersYYMsgObjectPropertyObject_PackObjectPropertyObject::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyObject_PackObjectPropertyObject, ReturnValue) == 0x000038, "Member 'FlatBuffersYYMsgObjectPropertyObject_PackObjectPropertyObject::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgObjectPropertyObject.UnpackObjectPropertyObject
// 0x0040 (0x0040 - 0x0000)
struct FlatBuffersYYMsgObjectPropertyObject_UnpackObjectPropertyObject final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgObjectPropertyObject             OutUE4Data;                                        // 0x0018(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgObjectPropertyObject_UnpackObjectPropertyObject) == 0x000008, "Wrong alignment on FlatBuffersYYMsgObjectPropertyObject_UnpackObjectPropertyObject");
static_assert(sizeof(FlatBuffersYYMsgObjectPropertyObject_UnpackObjectPropertyObject) == 0x000040, "Wrong size on FlatBuffersYYMsgObjectPropertyObject_UnpackObjectPropertyObject");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyObject_UnpackObjectPropertyObject, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgObjectPropertyObject_UnpackObjectPropertyObject::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyObject_UnpackObjectPropertyObject, InData) == 0x000008, "Member 'FlatBuffersYYMsgObjectPropertyObject_UnpackObjectPropertyObject::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyObject_UnpackObjectPropertyObject, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgObjectPropertyObject_UnpackObjectPropertyObject::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyObject_UnpackObjectPropertyObject, ReturnValue) == 0x000038, "Member 'FlatBuffersYYMsgObjectPropertyObject_UnpackObjectPropertyObject::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgObjectPropertyVector3.PackObjectPropertyVector3
// 0x0040 (0x0040 - 0x0000)
struct FlatBuffersYYMsgObjectPropertyVector3_PackObjectPropertyVector3 final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgObjectPropertyVector3            InUE4Data;                                         // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgObjectPropertyVector3_PackObjectPropertyVector3) == 0x000008, "Wrong alignment on FlatBuffersYYMsgObjectPropertyVector3_PackObjectPropertyVector3");
static_assert(sizeof(FlatBuffersYYMsgObjectPropertyVector3_PackObjectPropertyVector3) == 0x000040, "Wrong size on FlatBuffersYYMsgObjectPropertyVector3_PackObjectPropertyVector3");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyVector3_PackObjectPropertyVector3, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgObjectPropertyVector3_PackObjectPropertyVector3::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyVector3_PackObjectPropertyVector3, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgObjectPropertyVector3_PackObjectPropertyVector3::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyVector3_PackObjectPropertyVector3, OutData) == 0x000028, "Member 'FlatBuffersYYMsgObjectPropertyVector3_PackObjectPropertyVector3::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyVector3_PackObjectPropertyVector3, ReturnValue) == 0x000038, "Member 'FlatBuffersYYMsgObjectPropertyVector3_PackObjectPropertyVector3::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgObjectPropertyVector3.UnpackObjectPropertyVector3
// 0x0040 (0x0040 - 0x0000)
struct FlatBuffersYYMsgObjectPropertyVector3_UnpackObjectPropertyVector3 final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgObjectPropertyVector3            OutUE4Data;                                        // 0x0018(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgObjectPropertyVector3_UnpackObjectPropertyVector3) == 0x000008, "Wrong alignment on FlatBuffersYYMsgObjectPropertyVector3_UnpackObjectPropertyVector3");
static_assert(sizeof(FlatBuffersYYMsgObjectPropertyVector3_UnpackObjectPropertyVector3) == 0x000040, "Wrong size on FlatBuffersYYMsgObjectPropertyVector3_UnpackObjectPropertyVector3");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyVector3_UnpackObjectPropertyVector3, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgObjectPropertyVector3_UnpackObjectPropertyVector3::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyVector3_UnpackObjectPropertyVector3, InData) == 0x000008, "Member 'FlatBuffersYYMsgObjectPropertyVector3_UnpackObjectPropertyVector3::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyVector3_UnpackObjectPropertyVector3, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgObjectPropertyVector3_UnpackObjectPropertyVector3::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyVector3_UnpackObjectPropertyVector3, ReturnValue) == 0x000038, "Member 'FlatBuffersYYMsgObjectPropertyVector3_UnpackObjectPropertyVector3::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgObjectPropertyVector4.PackObjectPropertyVector4
// 0x0040 (0x0040 - 0x0000)
struct FlatBuffersYYMsgObjectPropertyVector4_PackObjectPropertyVector4 final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgObjectPropertyVector4            InUE4Data;                                         // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgObjectPropertyVector4_PackObjectPropertyVector4) == 0x000008, "Wrong alignment on FlatBuffersYYMsgObjectPropertyVector4_PackObjectPropertyVector4");
static_assert(sizeof(FlatBuffersYYMsgObjectPropertyVector4_PackObjectPropertyVector4) == 0x000040, "Wrong size on FlatBuffersYYMsgObjectPropertyVector4_PackObjectPropertyVector4");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyVector4_PackObjectPropertyVector4, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgObjectPropertyVector4_PackObjectPropertyVector4::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyVector4_PackObjectPropertyVector4, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgObjectPropertyVector4_PackObjectPropertyVector4::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyVector4_PackObjectPropertyVector4, OutData) == 0x000028, "Member 'FlatBuffersYYMsgObjectPropertyVector4_PackObjectPropertyVector4::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyVector4_PackObjectPropertyVector4, ReturnValue) == 0x000038, "Member 'FlatBuffersYYMsgObjectPropertyVector4_PackObjectPropertyVector4::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgObjectPropertyVector4.UnpackObjectPropertyVector4
// 0x0040 (0x0040 - 0x0000)
struct FlatBuffersYYMsgObjectPropertyVector4_UnpackObjectPropertyVector4 final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgObjectPropertyVector4            OutUE4Data;                                        // 0x0018(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgObjectPropertyVector4_UnpackObjectPropertyVector4) == 0x000008, "Wrong alignment on FlatBuffersYYMsgObjectPropertyVector4_UnpackObjectPropertyVector4");
static_assert(sizeof(FlatBuffersYYMsgObjectPropertyVector4_UnpackObjectPropertyVector4) == 0x000040, "Wrong size on FlatBuffersYYMsgObjectPropertyVector4_UnpackObjectPropertyVector4");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyVector4_UnpackObjectPropertyVector4, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgObjectPropertyVector4_UnpackObjectPropertyVector4::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyVector4_UnpackObjectPropertyVector4, InData) == 0x000008, "Member 'FlatBuffersYYMsgObjectPropertyVector4_UnpackObjectPropertyVector4::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyVector4_UnpackObjectPropertyVector4, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgObjectPropertyVector4_UnpackObjectPropertyVector4::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectPropertyVector4_UnpackObjectPropertyVector4, ReturnValue) == 0x000038, "Member 'FlatBuffersYYMsgObjectPropertyVector4_UnpackObjectPropertyVector4::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgObjectRecordInt.PackObjectRecordInt
// 0x0050 (0x0050 - 0x0000)
struct FlatBuffersYYMsgObjectRecordInt_PackObjectRecordInt final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgObjectRecordInt                  InUE4Data;                                         // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgObjectRecordInt_PackObjectRecordInt) == 0x000008, "Wrong alignment on FlatBuffersYYMsgObjectRecordInt_PackObjectRecordInt");
static_assert(sizeof(FlatBuffersYYMsgObjectRecordInt_PackObjectRecordInt) == 0x000050, "Wrong size on FlatBuffersYYMsgObjectRecordInt_PackObjectRecordInt");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordInt_PackObjectRecordInt, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgObjectRecordInt_PackObjectRecordInt::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordInt_PackObjectRecordInt, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgObjectRecordInt_PackObjectRecordInt::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordInt_PackObjectRecordInt, OutData) == 0x000038, "Member 'FlatBuffersYYMsgObjectRecordInt_PackObjectRecordInt::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordInt_PackObjectRecordInt, ReturnValue) == 0x000048, "Member 'FlatBuffersYYMsgObjectRecordInt_PackObjectRecordInt::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgObjectRecordInt.UnpackObjectRecordInt
// 0x0050 (0x0050 - 0x0000)
struct FlatBuffersYYMsgObjectRecordInt_UnpackObjectRecordInt final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgObjectRecordInt                  OutUE4Data;                                        // 0x0018(0x0030)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgObjectRecordInt_UnpackObjectRecordInt) == 0x000008, "Wrong alignment on FlatBuffersYYMsgObjectRecordInt_UnpackObjectRecordInt");
static_assert(sizeof(FlatBuffersYYMsgObjectRecordInt_UnpackObjectRecordInt) == 0x000050, "Wrong size on FlatBuffersYYMsgObjectRecordInt_UnpackObjectRecordInt");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordInt_UnpackObjectRecordInt, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgObjectRecordInt_UnpackObjectRecordInt::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordInt_UnpackObjectRecordInt, InData) == 0x000008, "Member 'FlatBuffersYYMsgObjectRecordInt_UnpackObjectRecordInt::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordInt_UnpackObjectRecordInt, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgObjectRecordInt_UnpackObjectRecordInt::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordInt_UnpackObjectRecordInt, ReturnValue) == 0x000048, "Member 'FlatBuffersYYMsgObjectRecordInt_UnpackObjectRecordInt::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgObjectRecordFloat.PackObjectRecordFloat
// 0x0050 (0x0050 - 0x0000)
struct FlatBuffersYYMsgObjectRecordFloat_PackObjectRecordFloat final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgObjectRecordFloat                InUE4Data;                                         // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgObjectRecordFloat_PackObjectRecordFloat) == 0x000008, "Wrong alignment on FlatBuffersYYMsgObjectRecordFloat_PackObjectRecordFloat");
static_assert(sizeof(FlatBuffersYYMsgObjectRecordFloat_PackObjectRecordFloat) == 0x000050, "Wrong size on FlatBuffersYYMsgObjectRecordFloat_PackObjectRecordFloat");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordFloat_PackObjectRecordFloat, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgObjectRecordFloat_PackObjectRecordFloat::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordFloat_PackObjectRecordFloat, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgObjectRecordFloat_PackObjectRecordFloat::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordFloat_PackObjectRecordFloat, OutData) == 0x000038, "Member 'FlatBuffersYYMsgObjectRecordFloat_PackObjectRecordFloat::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordFloat_PackObjectRecordFloat, ReturnValue) == 0x000048, "Member 'FlatBuffersYYMsgObjectRecordFloat_PackObjectRecordFloat::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgObjectRecordFloat.UnpackObjectRecordFloat
// 0x0050 (0x0050 - 0x0000)
struct FlatBuffersYYMsgObjectRecordFloat_UnpackObjectRecordFloat final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgObjectRecordFloat                OutUE4Data;                                        // 0x0018(0x0030)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgObjectRecordFloat_UnpackObjectRecordFloat) == 0x000008, "Wrong alignment on FlatBuffersYYMsgObjectRecordFloat_UnpackObjectRecordFloat");
static_assert(sizeof(FlatBuffersYYMsgObjectRecordFloat_UnpackObjectRecordFloat) == 0x000050, "Wrong size on FlatBuffersYYMsgObjectRecordFloat_UnpackObjectRecordFloat");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordFloat_UnpackObjectRecordFloat, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgObjectRecordFloat_UnpackObjectRecordFloat::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordFloat_UnpackObjectRecordFloat, InData) == 0x000008, "Member 'FlatBuffersYYMsgObjectRecordFloat_UnpackObjectRecordFloat::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordFloat_UnpackObjectRecordFloat, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgObjectRecordFloat_UnpackObjectRecordFloat::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordFloat_UnpackObjectRecordFloat, ReturnValue) == 0x000048, "Member 'FlatBuffersYYMsgObjectRecordFloat_UnpackObjectRecordFloat::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgObjectRecordVector2.PackObjectRecordVector2
// 0x0050 (0x0050 - 0x0000)
struct FlatBuffersYYMsgObjectRecordVector2_PackObjectRecordVector2 final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgObjectRecordVector2              InUE4Data;                                         // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgObjectRecordVector2_PackObjectRecordVector2) == 0x000008, "Wrong alignment on FlatBuffersYYMsgObjectRecordVector2_PackObjectRecordVector2");
static_assert(sizeof(FlatBuffersYYMsgObjectRecordVector2_PackObjectRecordVector2) == 0x000050, "Wrong size on FlatBuffersYYMsgObjectRecordVector2_PackObjectRecordVector2");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordVector2_PackObjectRecordVector2, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgObjectRecordVector2_PackObjectRecordVector2::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordVector2_PackObjectRecordVector2, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgObjectRecordVector2_PackObjectRecordVector2::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordVector2_PackObjectRecordVector2, OutData) == 0x000038, "Member 'FlatBuffersYYMsgObjectRecordVector2_PackObjectRecordVector2::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordVector2_PackObjectRecordVector2, ReturnValue) == 0x000048, "Member 'FlatBuffersYYMsgObjectRecordVector2_PackObjectRecordVector2::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgObjectRecordVector2.UnpackObjectRecordVector2
// 0x0050 (0x0050 - 0x0000)
struct FlatBuffersYYMsgObjectRecordVector2_UnpackObjectRecordVector2 final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgObjectRecordVector2              OutUE4Data;                                        // 0x0018(0x0030)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgObjectRecordVector2_UnpackObjectRecordVector2) == 0x000008, "Wrong alignment on FlatBuffersYYMsgObjectRecordVector2_UnpackObjectRecordVector2");
static_assert(sizeof(FlatBuffersYYMsgObjectRecordVector2_UnpackObjectRecordVector2) == 0x000050, "Wrong size on FlatBuffersYYMsgObjectRecordVector2_UnpackObjectRecordVector2");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordVector2_UnpackObjectRecordVector2, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgObjectRecordVector2_UnpackObjectRecordVector2::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordVector2_UnpackObjectRecordVector2, InData) == 0x000008, "Member 'FlatBuffersYYMsgObjectRecordVector2_UnpackObjectRecordVector2::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordVector2_UnpackObjectRecordVector2, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgObjectRecordVector2_UnpackObjectRecordVector2::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordVector2_UnpackObjectRecordVector2, ReturnValue) == 0x000048, "Member 'FlatBuffersYYMsgObjectRecordVector2_UnpackObjectRecordVector2::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgObjectRecordVector3.PackObjectRecordVector3
// 0x0050 (0x0050 - 0x0000)
struct FlatBuffersYYMsgObjectRecordVector3_PackObjectRecordVector3 final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgObjectRecordVector3              InUE4Data;                                         // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgObjectRecordVector3_PackObjectRecordVector3) == 0x000008, "Wrong alignment on FlatBuffersYYMsgObjectRecordVector3_PackObjectRecordVector3");
static_assert(sizeof(FlatBuffersYYMsgObjectRecordVector3_PackObjectRecordVector3) == 0x000050, "Wrong size on FlatBuffersYYMsgObjectRecordVector3_PackObjectRecordVector3");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordVector3_PackObjectRecordVector3, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgObjectRecordVector3_PackObjectRecordVector3::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordVector3_PackObjectRecordVector3, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgObjectRecordVector3_PackObjectRecordVector3::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordVector3_PackObjectRecordVector3, OutData) == 0x000038, "Member 'FlatBuffersYYMsgObjectRecordVector3_PackObjectRecordVector3::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordVector3_PackObjectRecordVector3, ReturnValue) == 0x000048, "Member 'FlatBuffersYYMsgObjectRecordVector3_PackObjectRecordVector3::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgObjectRecordVector3.UnpackObjectRecordVector3
// 0x0050 (0x0050 - 0x0000)
struct FlatBuffersYYMsgObjectRecordVector3_UnpackObjectRecordVector3 final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgObjectRecordVector3              OutUE4Data;                                        // 0x0018(0x0030)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgObjectRecordVector3_UnpackObjectRecordVector3) == 0x000008, "Wrong alignment on FlatBuffersYYMsgObjectRecordVector3_UnpackObjectRecordVector3");
static_assert(sizeof(FlatBuffersYYMsgObjectRecordVector3_UnpackObjectRecordVector3) == 0x000050, "Wrong size on FlatBuffersYYMsgObjectRecordVector3_UnpackObjectRecordVector3");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordVector3_UnpackObjectRecordVector3, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgObjectRecordVector3_UnpackObjectRecordVector3::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordVector3_UnpackObjectRecordVector3, InData) == 0x000008, "Member 'FlatBuffersYYMsgObjectRecordVector3_UnpackObjectRecordVector3::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordVector3_UnpackObjectRecordVector3, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgObjectRecordVector3_UnpackObjectRecordVector3::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordVector3_UnpackObjectRecordVector3, ReturnValue) == 0x000048, "Member 'FlatBuffersYYMsgObjectRecordVector3_UnpackObjectRecordVector3::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgObjectRecordVector4.PackObjectRecordVector4
// 0x0050 (0x0050 - 0x0000)
struct FlatBuffersYYMsgObjectRecordVector4_PackObjectRecordVector4 final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgObjectRecordVector4              InUE4Data;                                         // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgObjectRecordVector4_PackObjectRecordVector4) == 0x000008, "Wrong alignment on FlatBuffersYYMsgObjectRecordVector4_PackObjectRecordVector4");
static_assert(sizeof(FlatBuffersYYMsgObjectRecordVector4_PackObjectRecordVector4) == 0x000050, "Wrong size on FlatBuffersYYMsgObjectRecordVector4_PackObjectRecordVector4");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordVector4_PackObjectRecordVector4, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgObjectRecordVector4_PackObjectRecordVector4::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordVector4_PackObjectRecordVector4, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgObjectRecordVector4_PackObjectRecordVector4::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordVector4_PackObjectRecordVector4, OutData) == 0x000038, "Member 'FlatBuffersYYMsgObjectRecordVector4_PackObjectRecordVector4::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordVector4_PackObjectRecordVector4, ReturnValue) == 0x000048, "Member 'FlatBuffersYYMsgObjectRecordVector4_PackObjectRecordVector4::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgObjectRecordVector4.UnpackObjectRecordVector4
// 0x0050 (0x0050 - 0x0000)
struct FlatBuffersYYMsgObjectRecordVector4_UnpackObjectRecordVector4 final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgObjectRecordVector4              OutUE4Data;                                        // 0x0018(0x0030)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgObjectRecordVector4_UnpackObjectRecordVector4) == 0x000008, "Wrong alignment on FlatBuffersYYMsgObjectRecordVector4_UnpackObjectRecordVector4");
static_assert(sizeof(FlatBuffersYYMsgObjectRecordVector4_UnpackObjectRecordVector4) == 0x000050, "Wrong size on FlatBuffersYYMsgObjectRecordVector4_UnpackObjectRecordVector4");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordVector4_UnpackObjectRecordVector4, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgObjectRecordVector4_UnpackObjectRecordVector4::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordVector4_UnpackObjectRecordVector4, InData) == 0x000008, "Member 'FlatBuffersYYMsgObjectRecordVector4_UnpackObjectRecordVector4::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordVector4_UnpackObjectRecordVector4, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgObjectRecordVector4_UnpackObjectRecordVector4::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordVector4_UnpackObjectRecordVector4, ReturnValue) == 0x000048, "Member 'FlatBuffersYYMsgObjectRecordVector4_UnpackObjectRecordVector4::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgObjectRecordSwap.PackObjectRecordSwap
// 0x0058 (0x0058 - 0x0000)
struct FlatBuffersYYMsgObjectRecordSwap_PackObjectRecordSwap final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgObjectRecordSwap                 InUE4Data;                                         // 0x0008(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgObjectRecordSwap_PackObjectRecordSwap) == 0x000008, "Wrong alignment on FlatBuffersYYMsgObjectRecordSwap_PackObjectRecordSwap");
static_assert(sizeof(FlatBuffersYYMsgObjectRecordSwap_PackObjectRecordSwap) == 0x000058, "Wrong size on FlatBuffersYYMsgObjectRecordSwap_PackObjectRecordSwap");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordSwap_PackObjectRecordSwap, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgObjectRecordSwap_PackObjectRecordSwap::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordSwap_PackObjectRecordSwap, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgObjectRecordSwap_PackObjectRecordSwap::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordSwap_PackObjectRecordSwap, OutData) == 0x000040, "Member 'FlatBuffersYYMsgObjectRecordSwap_PackObjectRecordSwap::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordSwap_PackObjectRecordSwap, ReturnValue) == 0x000050, "Member 'FlatBuffersYYMsgObjectRecordSwap_PackObjectRecordSwap::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgObjectRecordSwap.UnpackObjectRecordSwap
// 0x0058 (0x0058 - 0x0000)
struct FlatBuffersYYMsgObjectRecordSwap_UnpackObjectRecordSwap final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgObjectRecordSwap                 OutUE4Data;                                        // 0x0018(0x0038)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgObjectRecordSwap_UnpackObjectRecordSwap) == 0x000008, "Wrong alignment on FlatBuffersYYMsgObjectRecordSwap_UnpackObjectRecordSwap");
static_assert(sizeof(FlatBuffersYYMsgObjectRecordSwap_UnpackObjectRecordSwap) == 0x000058, "Wrong size on FlatBuffersYYMsgObjectRecordSwap_UnpackObjectRecordSwap");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordSwap_UnpackObjectRecordSwap, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgObjectRecordSwap_UnpackObjectRecordSwap::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordSwap_UnpackObjectRecordSwap, InData) == 0x000008, "Member 'FlatBuffersYYMsgObjectRecordSwap_UnpackObjectRecordSwap::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordSwap_UnpackObjectRecordSwap, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgObjectRecordSwap_UnpackObjectRecordSwap::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordSwap_UnpackObjectRecordSwap, ReturnValue) == 0x000050, "Member 'FlatBuffersYYMsgObjectRecordSwap_UnpackObjectRecordSwap::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgObjectRecordAddRow.PackObjectRecordAddRow
// 0x0050 (0x0050 - 0x0000)
struct FlatBuffersYYMsgObjectRecordAddRow_PackObjectRecordAddRow final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgObjectRecordAddRow               InUE4Data;                                         // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgObjectRecordAddRow_PackObjectRecordAddRow) == 0x000008, "Wrong alignment on FlatBuffersYYMsgObjectRecordAddRow_PackObjectRecordAddRow");
static_assert(sizeof(FlatBuffersYYMsgObjectRecordAddRow_PackObjectRecordAddRow) == 0x000050, "Wrong size on FlatBuffersYYMsgObjectRecordAddRow_PackObjectRecordAddRow");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordAddRow_PackObjectRecordAddRow, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgObjectRecordAddRow_PackObjectRecordAddRow::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordAddRow_PackObjectRecordAddRow, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgObjectRecordAddRow_PackObjectRecordAddRow::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordAddRow_PackObjectRecordAddRow, OutData) == 0x000038, "Member 'FlatBuffersYYMsgObjectRecordAddRow_PackObjectRecordAddRow::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordAddRow_PackObjectRecordAddRow, ReturnValue) == 0x000048, "Member 'FlatBuffersYYMsgObjectRecordAddRow_PackObjectRecordAddRow::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgObjectRecordAddRow.UnpackObjectRecordAddRow
// 0x0050 (0x0050 - 0x0000)
struct FlatBuffersYYMsgObjectRecordAddRow_UnpackObjectRecordAddRow final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgObjectRecordAddRow               OutUE4Data;                                        // 0x0018(0x0030)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgObjectRecordAddRow_UnpackObjectRecordAddRow) == 0x000008, "Wrong alignment on FlatBuffersYYMsgObjectRecordAddRow_UnpackObjectRecordAddRow");
static_assert(sizeof(FlatBuffersYYMsgObjectRecordAddRow_UnpackObjectRecordAddRow) == 0x000050, "Wrong size on FlatBuffersYYMsgObjectRecordAddRow_UnpackObjectRecordAddRow");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordAddRow_UnpackObjectRecordAddRow, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgObjectRecordAddRow_UnpackObjectRecordAddRow::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordAddRow_UnpackObjectRecordAddRow, InData) == 0x000008, "Member 'FlatBuffersYYMsgObjectRecordAddRow_UnpackObjectRecordAddRow::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordAddRow_UnpackObjectRecordAddRow, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgObjectRecordAddRow_UnpackObjectRecordAddRow::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordAddRow_UnpackObjectRecordAddRow, ReturnValue) == 0x000048, "Member 'FlatBuffersYYMsgObjectRecordAddRow_UnpackObjectRecordAddRow::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgObjectRecordRemove.PackObjectRecordRemove
// 0x0050 (0x0050 - 0x0000)
struct FlatBuffersYYMsgObjectRecordRemove_PackObjectRecordRemove final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgObjectRecordRemove               InUE4Data;                                         // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgObjectRecordRemove_PackObjectRecordRemove) == 0x000008, "Wrong alignment on FlatBuffersYYMsgObjectRecordRemove_PackObjectRecordRemove");
static_assert(sizeof(FlatBuffersYYMsgObjectRecordRemove_PackObjectRecordRemove) == 0x000050, "Wrong size on FlatBuffersYYMsgObjectRecordRemove_PackObjectRecordRemove");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordRemove_PackObjectRecordRemove, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgObjectRecordRemove_PackObjectRecordRemove::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordRemove_PackObjectRecordRemove, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgObjectRecordRemove_PackObjectRecordRemove::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordRemove_PackObjectRecordRemove, OutData) == 0x000038, "Member 'FlatBuffersYYMsgObjectRecordRemove_PackObjectRecordRemove::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordRemove_PackObjectRecordRemove, ReturnValue) == 0x000048, "Member 'FlatBuffersYYMsgObjectRecordRemove_PackObjectRecordRemove::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgObjectRecordRemove.UnpackObjectRecordRemove
// 0x0050 (0x0050 - 0x0000)
struct FlatBuffersYYMsgObjectRecordRemove_UnpackObjectRecordRemove final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgObjectRecordRemove               OutUE4Data;                                        // 0x0018(0x0030)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgObjectRecordRemove_UnpackObjectRecordRemove) == 0x000008, "Wrong alignment on FlatBuffersYYMsgObjectRecordRemove_UnpackObjectRecordRemove");
static_assert(sizeof(FlatBuffersYYMsgObjectRecordRemove_UnpackObjectRecordRemove) == 0x000050, "Wrong size on FlatBuffersYYMsgObjectRecordRemove_UnpackObjectRecordRemove");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordRemove_UnpackObjectRecordRemove, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgObjectRecordRemove_UnpackObjectRecordRemove::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordRemove_UnpackObjectRecordRemove, InData) == 0x000008, "Member 'FlatBuffersYYMsgObjectRecordRemove_UnpackObjectRecordRemove::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordRemove_UnpackObjectRecordRemove, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgObjectRecordRemove_UnpackObjectRecordRemove::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordRemove_UnpackObjectRecordRemove, ReturnValue) == 0x000048, "Member 'FlatBuffersYYMsgObjectRecordRemove_UnpackObjectRecordRemove::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgObjectRecordCleared.PackObjectRecordCleared
// 0x0040 (0x0040 - 0x0000)
struct FlatBuffersYYMsgObjectRecordCleared_PackObjectRecordCleared final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgObjectRecordCleared              InUE4Data;                                         // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgObjectRecordCleared_PackObjectRecordCleared) == 0x000008, "Wrong alignment on FlatBuffersYYMsgObjectRecordCleared_PackObjectRecordCleared");
static_assert(sizeof(FlatBuffersYYMsgObjectRecordCleared_PackObjectRecordCleared) == 0x000040, "Wrong size on FlatBuffersYYMsgObjectRecordCleared_PackObjectRecordCleared");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordCleared_PackObjectRecordCleared, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgObjectRecordCleared_PackObjectRecordCleared::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordCleared_PackObjectRecordCleared, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgObjectRecordCleared_PackObjectRecordCleared::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordCleared_PackObjectRecordCleared, OutData) == 0x000028, "Member 'FlatBuffersYYMsgObjectRecordCleared_PackObjectRecordCleared::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordCleared_PackObjectRecordCleared, ReturnValue) == 0x000038, "Member 'FlatBuffersYYMsgObjectRecordCleared_PackObjectRecordCleared::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgObjectRecordCleared.UnpackObjectRecordCleared
// 0x0040 (0x0040 - 0x0000)
struct FlatBuffersYYMsgObjectRecordCleared_UnpackObjectRecordCleared final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgObjectRecordCleared              OutUE4Data;                                        // 0x0018(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgObjectRecordCleared_UnpackObjectRecordCleared) == 0x000008, "Wrong alignment on FlatBuffersYYMsgObjectRecordCleared_UnpackObjectRecordCleared");
static_assert(sizeof(FlatBuffersYYMsgObjectRecordCleared_UnpackObjectRecordCleared) == 0x000040, "Wrong size on FlatBuffersYYMsgObjectRecordCleared_UnpackObjectRecordCleared");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordCleared_UnpackObjectRecordCleared, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgObjectRecordCleared_UnpackObjectRecordCleared::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordCleared_UnpackObjectRecordCleared, InData) == 0x000008, "Member 'FlatBuffersYYMsgObjectRecordCleared_UnpackObjectRecordCleared::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordCleared_UnpackObjectRecordCleared, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgObjectRecordCleared_UnpackObjectRecordCleared::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgObjectRecordCleared_UnpackObjectRecordCleared, ReturnValue) == 0x000038, "Member 'FlatBuffersYYMsgObjectRecordCleared_UnpackObjectRecordCleared::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgPlayerPropertyBase.PackPlayerPropertyBase
// 0x00A0 (0x00A0 - 0x0000)
struct FlatBuffersYYMsgPlayerPropertyBase_PackPlayerPropertyBase final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgPlayerPropertyBase               InUE4Data;                                         // 0x0008(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0088(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0098(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgPlayerPropertyBase_PackPlayerPropertyBase) == 0x000008, "Wrong alignment on FlatBuffersYYMsgPlayerPropertyBase_PackPlayerPropertyBase");
static_assert(sizeof(FlatBuffersYYMsgPlayerPropertyBase_PackPlayerPropertyBase) == 0x0000A0, "Wrong size on FlatBuffersYYMsgPlayerPropertyBase_PackPlayerPropertyBase");
static_assert(offsetof(FlatBuffersYYMsgPlayerPropertyBase_PackPlayerPropertyBase, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgPlayerPropertyBase_PackPlayerPropertyBase::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPlayerPropertyBase_PackPlayerPropertyBase, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgPlayerPropertyBase_PackPlayerPropertyBase::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPlayerPropertyBase_PackPlayerPropertyBase, OutData) == 0x000088, "Member 'FlatBuffersYYMsgPlayerPropertyBase_PackPlayerPropertyBase::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPlayerPropertyBase_PackPlayerPropertyBase, ReturnValue) == 0x000098, "Member 'FlatBuffersYYMsgPlayerPropertyBase_PackPlayerPropertyBase::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgPlayerPropertyBase.UnpackPlayerPropertyBase
// 0x00A0 (0x00A0 - 0x0000)
struct FlatBuffersYYMsgPlayerPropertyBase_UnpackPlayerPropertyBase final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgPlayerPropertyBase               OutUE4Data;                                        // 0x0018(0x0080)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0098(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgPlayerPropertyBase_UnpackPlayerPropertyBase) == 0x000008, "Wrong alignment on FlatBuffersYYMsgPlayerPropertyBase_UnpackPlayerPropertyBase");
static_assert(sizeof(FlatBuffersYYMsgPlayerPropertyBase_UnpackPlayerPropertyBase) == 0x0000A0, "Wrong size on FlatBuffersYYMsgPlayerPropertyBase_UnpackPlayerPropertyBase");
static_assert(offsetof(FlatBuffersYYMsgPlayerPropertyBase_UnpackPlayerPropertyBase, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgPlayerPropertyBase_UnpackPlayerPropertyBase::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPlayerPropertyBase_UnpackPlayerPropertyBase, InData) == 0x000008, "Member 'FlatBuffersYYMsgPlayerPropertyBase_UnpackPlayerPropertyBase::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPlayerPropertyBase_UnpackPlayerPropertyBase, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgPlayerPropertyBase_UnpackPlayerPropertyBase::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPlayerPropertyBase_UnpackPlayerPropertyBase, ReturnValue) == 0x000098, "Member 'FlatBuffersYYMsgPlayerPropertyBase_UnpackPlayerPropertyBase::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgPlayerRecordBase.PackPlayerRecordBase
// 0x00B0 (0x00B0 - 0x0000)
struct FlatBuffersYYMsgPlayerRecordBase_PackPlayerRecordBase final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgPlayerRecordBase                 InUE4Data;                                         // 0x0008(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0098(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgPlayerRecordBase_PackPlayerRecordBase) == 0x000008, "Wrong alignment on FlatBuffersYYMsgPlayerRecordBase_PackPlayerRecordBase");
static_assert(sizeof(FlatBuffersYYMsgPlayerRecordBase_PackPlayerRecordBase) == 0x0000B0, "Wrong size on FlatBuffersYYMsgPlayerRecordBase_PackPlayerRecordBase");
static_assert(offsetof(FlatBuffersYYMsgPlayerRecordBase_PackPlayerRecordBase, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgPlayerRecordBase_PackPlayerRecordBase::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPlayerRecordBase_PackPlayerRecordBase, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgPlayerRecordBase_PackPlayerRecordBase::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPlayerRecordBase_PackPlayerRecordBase, OutData) == 0x000098, "Member 'FlatBuffersYYMsgPlayerRecordBase_PackPlayerRecordBase::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPlayerRecordBase_PackPlayerRecordBase, ReturnValue) == 0x0000A8, "Member 'FlatBuffersYYMsgPlayerRecordBase_PackPlayerRecordBase::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgPlayerRecordBase.UnpackPlayerRecordBase
// 0x00B0 (0x00B0 - 0x0000)
struct FlatBuffersYYMsgPlayerRecordBase_UnpackPlayerRecordBase final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgPlayerRecordBase                 OutUE4Data;                                        // 0x0018(0x0090)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgPlayerRecordBase_UnpackPlayerRecordBase) == 0x000008, "Wrong alignment on FlatBuffersYYMsgPlayerRecordBase_UnpackPlayerRecordBase");
static_assert(sizeof(FlatBuffersYYMsgPlayerRecordBase_UnpackPlayerRecordBase) == 0x0000B0, "Wrong size on FlatBuffersYYMsgPlayerRecordBase_UnpackPlayerRecordBase");
static_assert(offsetof(FlatBuffersYYMsgPlayerRecordBase_UnpackPlayerRecordBase, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgPlayerRecordBase_UnpackPlayerRecordBase::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPlayerRecordBase_UnpackPlayerRecordBase, InData) == 0x000008, "Member 'FlatBuffersYYMsgPlayerRecordBase_UnpackPlayerRecordBase::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPlayerRecordBase_UnpackPlayerRecordBase, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgPlayerRecordBase_UnpackPlayerRecordBase::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPlayerRecordBase_UnpackPlayerRecordBase, ReturnValue) == 0x0000A8, "Member 'FlatBuffersYYMsgPlayerRecordBase_UnpackPlayerRecordBase::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgPlayerRecordList.PackPlayerRecordList
// 0x0030 (0x0030 - 0x0000)
struct FlatBuffersYYMsgPlayerRecordList_PackPlayerRecordList final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgPlayerRecordList                 InUE4Data;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgPlayerRecordList_PackPlayerRecordList) == 0x000008, "Wrong alignment on FlatBuffersYYMsgPlayerRecordList_PackPlayerRecordList");
static_assert(sizeof(FlatBuffersYYMsgPlayerRecordList_PackPlayerRecordList) == 0x000030, "Wrong size on FlatBuffersYYMsgPlayerRecordList_PackPlayerRecordList");
static_assert(offsetof(FlatBuffersYYMsgPlayerRecordList_PackPlayerRecordList, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgPlayerRecordList_PackPlayerRecordList::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPlayerRecordList_PackPlayerRecordList, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgPlayerRecordList_PackPlayerRecordList::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPlayerRecordList_PackPlayerRecordList, OutData) == 0x000018, "Member 'FlatBuffersYYMsgPlayerRecordList_PackPlayerRecordList::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPlayerRecordList_PackPlayerRecordList, ReturnValue) == 0x000028, "Member 'FlatBuffersYYMsgPlayerRecordList_PackPlayerRecordList::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgPlayerRecordList.UnpackPlayerRecordList
// 0x0030 (0x0030 - 0x0000)
struct FlatBuffersYYMsgPlayerRecordList_UnpackPlayerRecordList final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgPlayerRecordList                 OutUE4Data;                                        // 0x0018(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgPlayerRecordList_UnpackPlayerRecordList) == 0x000008, "Wrong alignment on FlatBuffersYYMsgPlayerRecordList_UnpackPlayerRecordList");
static_assert(sizeof(FlatBuffersYYMsgPlayerRecordList_UnpackPlayerRecordList) == 0x000030, "Wrong size on FlatBuffersYYMsgPlayerRecordList_UnpackPlayerRecordList");
static_assert(offsetof(FlatBuffersYYMsgPlayerRecordList_UnpackPlayerRecordList, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgPlayerRecordList_UnpackPlayerRecordList::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPlayerRecordList_UnpackPlayerRecordList, InData) == 0x000008, "Member 'FlatBuffersYYMsgPlayerRecordList_UnpackPlayerRecordList::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPlayerRecordList_UnpackPlayerRecordList, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgPlayerRecordList_UnpackPlayerRecordList::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPlayerRecordList_UnpackPlayerRecordList, ReturnValue) == 0x000028, "Member 'FlatBuffersYYMsgPlayerRecordList_UnpackPlayerRecordList::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgMsgBase.PackMsgBase
// 0x0068 (0x0068 - 0x0000)
struct FlatBuffersYYMsgMsgBase_PackMsgBase final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgMsgBase                          InUE4Data;                                         // 0x0008(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgMsgBase_PackMsgBase) == 0x000008, "Wrong alignment on FlatBuffersYYMsgMsgBase_PackMsgBase");
static_assert(sizeof(FlatBuffersYYMsgMsgBase_PackMsgBase) == 0x000068, "Wrong size on FlatBuffersYYMsgMsgBase_PackMsgBase");
static_assert(offsetof(FlatBuffersYYMsgMsgBase_PackMsgBase, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgMsgBase_PackMsgBase::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgMsgBase_PackMsgBase, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgMsgBase_PackMsgBase::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgMsgBase_PackMsgBase, OutData) == 0x000050, "Member 'FlatBuffersYYMsgMsgBase_PackMsgBase::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgMsgBase_PackMsgBase, ReturnValue) == 0x000060, "Member 'FlatBuffersYYMsgMsgBase_PackMsgBase::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgMsgBase.UnpackMsgBase
// 0x0068 (0x0068 - 0x0000)
struct FlatBuffersYYMsgMsgBase_UnpackMsgBase final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgMsgBase                          OutUE4Data;                                        // 0x0018(0x0048)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgMsgBase_UnpackMsgBase) == 0x000008, "Wrong alignment on FlatBuffersYYMsgMsgBase_UnpackMsgBase");
static_assert(sizeof(FlatBuffersYYMsgMsgBase_UnpackMsgBase) == 0x000068, "Wrong size on FlatBuffersYYMsgMsgBase_UnpackMsgBase");
static_assert(offsetof(FlatBuffersYYMsgMsgBase_UnpackMsgBase, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgMsgBase_UnpackMsgBase::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgMsgBase_UnpackMsgBase, InData) == 0x000008, "Member 'FlatBuffersYYMsgMsgBase_UnpackMsgBase::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgMsgBase_UnpackMsgBase, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgMsgBase_UnpackMsgBase::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgMsgBase_UnpackMsgBase, ReturnValue) == 0x000060, "Member 'FlatBuffersYYMsgMsgBase_UnpackMsgBase::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgPackSURLParam.PackPackSURLParam
// 0x0088 (0x0088 - 0x0000)
struct FlatBuffersYYMsgPackSURLParam_PackPackSURLParam final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgPackSURLParam                    InUE4Data;                                         // 0x0008(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0070(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgPackSURLParam_PackPackSURLParam) == 0x000008, "Wrong alignment on FlatBuffersYYMsgPackSURLParam_PackPackSURLParam");
static_assert(sizeof(FlatBuffersYYMsgPackSURLParam_PackPackSURLParam) == 0x000088, "Wrong size on FlatBuffersYYMsgPackSURLParam_PackPackSURLParam");
static_assert(offsetof(FlatBuffersYYMsgPackSURLParam_PackPackSURLParam, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgPackSURLParam_PackPackSURLParam::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPackSURLParam_PackPackSURLParam, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgPackSURLParam_PackPackSURLParam::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPackSURLParam_PackPackSURLParam, OutData) == 0x000070, "Member 'FlatBuffersYYMsgPackSURLParam_PackPackSURLParam::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPackSURLParam_PackPackSURLParam, ReturnValue) == 0x000080, "Member 'FlatBuffersYYMsgPackSURLParam_PackPackSURLParam::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgPackSURLParam.UnpackPackSURLParam
// 0x0088 (0x0088 - 0x0000)
struct FlatBuffersYYMsgPackSURLParam_UnpackPackSURLParam final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgPackSURLParam                    OutUE4Data;                                        // 0x0018(0x0068)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgPackSURLParam_UnpackPackSURLParam) == 0x000008, "Wrong alignment on FlatBuffersYYMsgPackSURLParam_UnpackPackSURLParam");
static_assert(sizeof(FlatBuffersYYMsgPackSURLParam_UnpackPackSURLParam) == 0x000088, "Wrong size on FlatBuffersYYMsgPackSURLParam_UnpackPackSURLParam");
static_assert(offsetof(FlatBuffersYYMsgPackSURLParam_UnpackPackSURLParam, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgPackSURLParam_UnpackPackSURLParam::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPackSURLParam_UnpackPackSURLParam, InData) == 0x000008, "Member 'FlatBuffersYYMsgPackSURLParam_UnpackPackSURLParam::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPackSURLParam_UnpackPackSURLParam, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgPackSURLParam_UnpackPackSURLParam::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPackSURLParam_UnpackPackSURLParam, ReturnValue) == 0x000080, "Member 'FlatBuffersYYMsgPackSURLParam_UnpackPackSURLParam::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgReqAckPingPong.PackReqAckPingPong
// 0x0030 (0x0030 - 0x0000)
struct FlatBuffersYYMsgReqAckPingPong_PackReqAckPingPong final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgReqAckPingPong                   InUE4Data;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgReqAckPingPong_PackReqAckPingPong) == 0x000008, "Wrong alignment on FlatBuffersYYMsgReqAckPingPong_PackReqAckPingPong");
static_assert(sizeof(FlatBuffersYYMsgReqAckPingPong_PackReqAckPingPong) == 0x000030, "Wrong size on FlatBuffersYYMsgReqAckPingPong_PackReqAckPingPong");
static_assert(offsetof(FlatBuffersYYMsgReqAckPingPong_PackReqAckPingPong, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgReqAckPingPong_PackReqAckPingPong::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckPingPong_PackReqAckPingPong, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgReqAckPingPong_PackReqAckPingPong::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckPingPong_PackReqAckPingPong, OutData) == 0x000018, "Member 'FlatBuffersYYMsgReqAckPingPong_PackReqAckPingPong::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckPingPong_PackReqAckPingPong, ReturnValue) == 0x000028, "Member 'FlatBuffersYYMsgReqAckPingPong_PackReqAckPingPong::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgReqAckPingPong.UnpackReqAckPingPong
// 0x0030 (0x0030 - 0x0000)
struct FlatBuffersYYMsgReqAckPingPong_UnpackReqAckPingPong final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgReqAckPingPong                   OutUE4Data;                                        // 0x0018(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgReqAckPingPong_UnpackReqAckPingPong) == 0x000008, "Wrong alignment on FlatBuffersYYMsgReqAckPingPong_UnpackReqAckPingPong");
static_assert(sizeof(FlatBuffersYYMsgReqAckPingPong_UnpackReqAckPingPong) == 0x000030, "Wrong size on FlatBuffersYYMsgReqAckPingPong_UnpackReqAckPingPong");
static_assert(offsetof(FlatBuffersYYMsgReqAckPingPong_UnpackReqAckPingPong, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgReqAckPingPong_UnpackReqAckPingPong::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckPingPong_UnpackReqAckPingPong, InData) == 0x000008, "Member 'FlatBuffersYYMsgReqAckPingPong_UnpackReqAckPingPong::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckPingPong_UnpackReqAckPingPong, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgReqAckPingPong_UnpackReqAckPingPong::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckPingPong_UnpackReqAckPingPong, ReturnValue) == 0x000028, "Member 'FlatBuffersYYMsgReqAckPingPong_UnpackReqAckPingPong::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgReqAckLogin.PackReqAckLogin
// 0x0078 (0x0078 - 0x0000)
struct FlatBuffersYYMsgReqAckLogin_PackReqAckLogin final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgReqAckLogin                      InUE4Data;                                         // 0x0008(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0060(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgReqAckLogin_PackReqAckLogin) == 0x000008, "Wrong alignment on FlatBuffersYYMsgReqAckLogin_PackReqAckLogin");
static_assert(sizeof(FlatBuffersYYMsgReqAckLogin_PackReqAckLogin) == 0x000078, "Wrong size on FlatBuffersYYMsgReqAckLogin_PackReqAckLogin");
static_assert(offsetof(FlatBuffersYYMsgReqAckLogin_PackReqAckLogin, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgReqAckLogin_PackReqAckLogin::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckLogin_PackReqAckLogin, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgReqAckLogin_PackReqAckLogin::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckLogin_PackReqAckLogin, OutData) == 0x000060, "Member 'FlatBuffersYYMsgReqAckLogin_PackReqAckLogin::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckLogin_PackReqAckLogin, ReturnValue) == 0x000070, "Member 'FlatBuffersYYMsgReqAckLogin_PackReqAckLogin::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgReqAckLogin.UnpackReqAckLogin
// 0x0078 (0x0078 - 0x0000)
struct FlatBuffersYYMsgReqAckLogin_UnpackReqAckLogin final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgReqAckLogin                      OutUE4Data;                                        // 0x0018(0x0058)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgReqAckLogin_UnpackReqAckLogin) == 0x000008, "Wrong alignment on FlatBuffersYYMsgReqAckLogin_UnpackReqAckLogin");
static_assert(sizeof(FlatBuffersYYMsgReqAckLogin_UnpackReqAckLogin) == 0x000078, "Wrong size on FlatBuffersYYMsgReqAckLogin_UnpackReqAckLogin");
static_assert(offsetof(FlatBuffersYYMsgReqAckLogin_UnpackReqAckLogin, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgReqAckLogin_UnpackReqAckLogin::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckLogin_UnpackReqAckLogin, InData) == 0x000008, "Member 'FlatBuffersYYMsgReqAckLogin_UnpackReqAckLogin::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckLogin_UnpackReqAckLogin, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgReqAckLogin_UnpackReqAckLogin::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckLogin_UnpackReqAckLogin, ReturnValue) == 0x000070, "Member 'FlatBuffersYYMsgReqAckLogin_UnpackReqAckLogin::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgReqStartMatch.PackReqStartMatch
// 0x0048 (0x0048 - 0x0000)
struct FlatBuffersYYMsgReqStartMatch_PackReqStartMatch final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgReqStartMatch                    InUE4Data;                                         // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgReqStartMatch_PackReqStartMatch) == 0x000008, "Wrong alignment on FlatBuffersYYMsgReqStartMatch_PackReqStartMatch");
static_assert(sizeof(FlatBuffersYYMsgReqStartMatch_PackReqStartMatch) == 0x000048, "Wrong size on FlatBuffersYYMsgReqStartMatch_PackReqStartMatch");
static_assert(offsetof(FlatBuffersYYMsgReqStartMatch_PackReqStartMatch, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgReqStartMatch_PackReqStartMatch::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqStartMatch_PackReqStartMatch, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgReqStartMatch_PackReqStartMatch::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqStartMatch_PackReqStartMatch, OutData) == 0x000030, "Member 'FlatBuffersYYMsgReqStartMatch_PackReqStartMatch::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqStartMatch_PackReqStartMatch, ReturnValue) == 0x000040, "Member 'FlatBuffersYYMsgReqStartMatch_PackReqStartMatch::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgReqStartMatch.UnpackReqStartMatch
// 0x0048 (0x0048 - 0x0000)
struct FlatBuffersYYMsgReqStartMatch_UnpackReqStartMatch final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgReqStartMatch                    OutUE4Data;                                        // 0x0018(0x0028)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgReqStartMatch_UnpackReqStartMatch) == 0x000008, "Wrong alignment on FlatBuffersYYMsgReqStartMatch_UnpackReqStartMatch");
static_assert(sizeof(FlatBuffersYYMsgReqStartMatch_UnpackReqStartMatch) == 0x000048, "Wrong size on FlatBuffersYYMsgReqStartMatch_UnpackReqStartMatch");
static_assert(offsetof(FlatBuffersYYMsgReqStartMatch_UnpackReqStartMatch, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgReqStartMatch_UnpackReqStartMatch::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqStartMatch_UnpackReqStartMatch, InData) == 0x000008, "Member 'FlatBuffersYYMsgReqStartMatch_UnpackReqStartMatch::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqStartMatch_UnpackReqStartMatch, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgReqStartMatch_UnpackReqStartMatch::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqStartMatch_UnpackReqStartMatch, ReturnValue) == 0x000040, "Member 'FlatBuffersYYMsgReqStartMatch_UnpackReqStartMatch::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgRoomCampMember.PackRoomCampMember
// 0x0058 (0x0058 - 0x0000)
struct FlatBuffersYYMsgRoomCampMember_PackRoomCampMember final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgRoomCampMember                   InUE4Data;                                         // 0x0008(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgRoomCampMember_PackRoomCampMember) == 0x000008, "Wrong alignment on FlatBuffersYYMsgRoomCampMember_PackRoomCampMember");
static_assert(sizeof(FlatBuffersYYMsgRoomCampMember_PackRoomCampMember) == 0x000058, "Wrong size on FlatBuffersYYMsgRoomCampMember_PackRoomCampMember");
static_assert(offsetof(FlatBuffersYYMsgRoomCampMember_PackRoomCampMember, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgRoomCampMember_PackRoomCampMember::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRoomCampMember_PackRoomCampMember, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgRoomCampMember_PackRoomCampMember::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRoomCampMember_PackRoomCampMember, OutData) == 0x000040, "Member 'FlatBuffersYYMsgRoomCampMember_PackRoomCampMember::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRoomCampMember_PackRoomCampMember, ReturnValue) == 0x000050, "Member 'FlatBuffersYYMsgRoomCampMember_PackRoomCampMember::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgRoomCampMember.UnpackRoomCampMember
// 0x0058 (0x0058 - 0x0000)
struct FlatBuffersYYMsgRoomCampMember_UnpackRoomCampMember final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgRoomCampMember                   OutUE4Data;                                        // 0x0018(0x0038)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgRoomCampMember_UnpackRoomCampMember) == 0x000008, "Wrong alignment on FlatBuffersYYMsgRoomCampMember_UnpackRoomCampMember");
static_assert(sizeof(FlatBuffersYYMsgRoomCampMember_UnpackRoomCampMember) == 0x000058, "Wrong size on FlatBuffersYYMsgRoomCampMember_UnpackRoomCampMember");
static_assert(offsetof(FlatBuffersYYMsgRoomCampMember_UnpackRoomCampMember, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgRoomCampMember_UnpackRoomCampMember::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRoomCampMember_UnpackRoomCampMember, InData) == 0x000008, "Member 'FlatBuffersYYMsgRoomCampMember_UnpackRoomCampMember::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRoomCampMember_UnpackRoomCampMember, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgRoomCampMember_UnpackRoomCampMember::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRoomCampMember_UnpackRoomCampMember, ReturnValue) == 0x000050, "Member 'FlatBuffersYYMsgRoomCampMember_UnpackRoomCampMember::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgRoomCamp.PackRoomCamp
// 0x0038 (0x0038 - 0x0000)
struct FlatBuffersYYMsgRoomCamp_PackRoomCamp final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgRoomCamp                         InUE4Data;                                         // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgRoomCamp_PackRoomCamp) == 0x000008, "Wrong alignment on FlatBuffersYYMsgRoomCamp_PackRoomCamp");
static_assert(sizeof(FlatBuffersYYMsgRoomCamp_PackRoomCamp) == 0x000038, "Wrong size on FlatBuffersYYMsgRoomCamp_PackRoomCamp");
static_assert(offsetof(FlatBuffersYYMsgRoomCamp_PackRoomCamp, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgRoomCamp_PackRoomCamp::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRoomCamp_PackRoomCamp, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgRoomCamp_PackRoomCamp::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRoomCamp_PackRoomCamp, OutData) == 0x000020, "Member 'FlatBuffersYYMsgRoomCamp_PackRoomCamp::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRoomCamp_PackRoomCamp, ReturnValue) == 0x000030, "Member 'FlatBuffersYYMsgRoomCamp_PackRoomCamp::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgRoomCamp.UnpackRoomCamp
// 0x0038 (0x0038 - 0x0000)
struct FlatBuffersYYMsgRoomCamp_UnpackRoomCamp final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgRoomCamp                         OutUE4Data;                                        // 0x0018(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgRoomCamp_UnpackRoomCamp) == 0x000008, "Wrong alignment on FlatBuffersYYMsgRoomCamp_UnpackRoomCamp");
static_assert(sizeof(FlatBuffersYYMsgRoomCamp_UnpackRoomCamp) == 0x000038, "Wrong size on FlatBuffersYYMsgRoomCamp_UnpackRoomCamp");
static_assert(offsetof(FlatBuffersYYMsgRoomCamp_UnpackRoomCamp, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgRoomCamp_UnpackRoomCamp::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRoomCamp_UnpackRoomCamp, InData) == 0x000008, "Member 'FlatBuffersYYMsgRoomCamp_UnpackRoomCamp::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRoomCamp_UnpackRoomCamp, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgRoomCamp_UnpackRoomCamp::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgRoomCamp_UnpackRoomCamp, ReturnValue) == 0x000030, "Member 'FlatBuffersYYMsgRoomCamp_UnpackRoomCamp::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgAckStartMatch.PackAckStartMatch
// 0x0038 (0x0038 - 0x0000)
struct FlatBuffersYYMsgAckStartMatch_PackAckStartMatch final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgAckStartMatch                    InUE4Data;                                         // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgAckStartMatch_PackAckStartMatch) == 0x000008, "Wrong alignment on FlatBuffersYYMsgAckStartMatch_PackAckStartMatch");
static_assert(sizeof(FlatBuffersYYMsgAckStartMatch_PackAckStartMatch) == 0x000038, "Wrong size on FlatBuffersYYMsgAckStartMatch_PackAckStartMatch");
static_assert(offsetof(FlatBuffersYYMsgAckStartMatch_PackAckStartMatch, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgAckStartMatch_PackAckStartMatch::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgAckStartMatch_PackAckStartMatch, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgAckStartMatch_PackAckStartMatch::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgAckStartMatch_PackAckStartMatch, OutData) == 0x000020, "Member 'FlatBuffersYYMsgAckStartMatch_PackAckStartMatch::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgAckStartMatch_PackAckStartMatch, ReturnValue) == 0x000030, "Member 'FlatBuffersYYMsgAckStartMatch_PackAckStartMatch::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgAckStartMatch.UnpackAckStartMatch
// 0x0038 (0x0038 - 0x0000)
struct FlatBuffersYYMsgAckStartMatch_UnpackAckStartMatch final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgAckStartMatch                    OutUE4Data;                                        // 0x0018(0x0018)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgAckStartMatch_UnpackAckStartMatch) == 0x000008, "Wrong alignment on FlatBuffersYYMsgAckStartMatch_UnpackAckStartMatch");
static_assert(sizeof(FlatBuffersYYMsgAckStartMatch_UnpackAckStartMatch) == 0x000038, "Wrong size on FlatBuffersYYMsgAckStartMatch_UnpackAckStartMatch");
static_assert(offsetof(FlatBuffersYYMsgAckStartMatch_UnpackAckStartMatch, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgAckStartMatch_UnpackAckStartMatch::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgAckStartMatch_UnpackAckStartMatch, InData) == 0x000008, "Member 'FlatBuffersYYMsgAckStartMatch_UnpackAckStartMatch::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgAckStartMatch_UnpackAckStartMatch, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgAckStartMatch_UnpackAckStartMatch::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgAckStartMatch_UnpackAckStartMatch, ReturnValue) == 0x000030, "Member 'FlatBuffersYYMsgAckStartMatch_UnpackAckStartMatch::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgReqCancelMatch.PackReqCancelMatch
// 0x0040 (0x0040 - 0x0000)
struct FlatBuffersYYMsgReqCancelMatch_PackReqCancelMatch final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgReqCancelMatch                   InUE4Data;                                         // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgReqCancelMatch_PackReqCancelMatch) == 0x000008, "Wrong alignment on FlatBuffersYYMsgReqCancelMatch_PackReqCancelMatch");
static_assert(sizeof(FlatBuffersYYMsgReqCancelMatch_PackReqCancelMatch) == 0x000040, "Wrong size on FlatBuffersYYMsgReqCancelMatch_PackReqCancelMatch");
static_assert(offsetof(FlatBuffersYYMsgReqCancelMatch_PackReqCancelMatch, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgReqCancelMatch_PackReqCancelMatch::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqCancelMatch_PackReqCancelMatch, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgReqCancelMatch_PackReqCancelMatch::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqCancelMatch_PackReqCancelMatch, OutData) == 0x000028, "Member 'FlatBuffersYYMsgReqCancelMatch_PackReqCancelMatch::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqCancelMatch_PackReqCancelMatch, ReturnValue) == 0x000038, "Member 'FlatBuffersYYMsgReqCancelMatch_PackReqCancelMatch::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgReqCancelMatch.UnpackReqCancelMatch
// 0x0040 (0x0040 - 0x0000)
struct FlatBuffersYYMsgReqCancelMatch_UnpackReqCancelMatch final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgReqCancelMatch                   OutUE4Data;                                        // 0x0018(0x0020)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgReqCancelMatch_UnpackReqCancelMatch) == 0x000008, "Wrong alignment on FlatBuffersYYMsgReqCancelMatch_UnpackReqCancelMatch");
static_assert(sizeof(FlatBuffersYYMsgReqCancelMatch_UnpackReqCancelMatch) == 0x000040, "Wrong size on FlatBuffersYYMsgReqCancelMatch_UnpackReqCancelMatch");
static_assert(offsetof(FlatBuffersYYMsgReqCancelMatch_UnpackReqCancelMatch, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgReqCancelMatch_UnpackReqCancelMatch::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqCancelMatch_UnpackReqCancelMatch, InData) == 0x000008, "Member 'FlatBuffersYYMsgReqCancelMatch_UnpackReqCancelMatch::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqCancelMatch_UnpackReqCancelMatch, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgReqCancelMatch_UnpackReqCancelMatch::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqCancelMatch_UnpackReqCancelMatch, ReturnValue) == 0x000038, "Member 'FlatBuffersYYMsgReqCancelMatch_UnpackReqCancelMatch::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgAckCancelMatch.PackAckCancelMatch
// 0x0038 (0x0038 - 0x0000)
struct FlatBuffersYYMsgAckCancelMatch_PackAckCancelMatch final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgAckCancelMatch                   InUE4Data;                                         // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgAckCancelMatch_PackAckCancelMatch) == 0x000008, "Wrong alignment on FlatBuffersYYMsgAckCancelMatch_PackAckCancelMatch");
static_assert(sizeof(FlatBuffersYYMsgAckCancelMatch_PackAckCancelMatch) == 0x000038, "Wrong size on FlatBuffersYYMsgAckCancelMatch_PackAckCancelMatch");
static_assert(offsetof(FlatBuffersYYMsgAckCancelMatch_PackAckCancelMatch, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgAckCancelMatch_PackAckCancelMatch::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgAckCancelMatch_PackAckCancelMatch, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgAckCancelMatch_PackAckCancelMatch::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgAckCancelMatch_PackAckCancelMatch, OutData) == 0x000020, "Member 'FlatBuffersYYMsgAckCancelMatch_PackAckCancelMatch::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgAckCancelMatch_PackAckCancelMatch, ReturnValue) == 0x000030, "Member 'FlatBuffersYYMsgAckCancelMatch_PackAckCancelMatch::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgAckCancelMatch.UnpackAckCancelMatch
// 0x0038 (0x0038 - 0x0000)
struct FlatBuffersYYMsgAckCancelMatch_UnpackAckCancelMatch final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgAckCancelMatch                   OutUE4Data;                                        // 0x0018(0x0018)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgAckCancelMatch_UnpackAckCancelMatch) == 0x000008, "Wrong alignment on FlatBuffersYYMsgAckCancelMatch_UnpackAckCancelMatch");
static_assert(sizeof(FlatBuffersYYMsgAckCancelMatch_UnpackAckCancelMatch) == 0x000038, "Wrong size on FlatBuffersYYMsgAckCancelMatch_UnpackAckCancelMatch");
static_assert(offsetof(FlatBuffersYYMsgAckCancelMatch_UnpackAckCancelMatch, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgAckCancelMatch_UnpackAckCancelMatch::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgAckCancelMatch_UnpackAckCancelMatch, InData) == 0x000008, "Member 'FlatBuffersYYMsgAckCancelMatch_UnpackAckCancelMatch::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgAckCancelMatch_UnpackAckCancelMatch, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgAckCancelMatch_UnpackAckCancelMatch::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgAckCancelMatch_UnpackAckCancelMatch, ReturnValue) == 0x000030, "Member 'FlatBuffersYYMsgAckCancelMatch_UnpackAckCancelMatch::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgReqFinishMatch.PackReqFinishMatch
// 0x0030 (0x0030 - 0x0000)
struct FlatBuffersYYMsgReqFinishMatch_PackReqFinishMatch final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgReqFinishMatch                   InUE4Data;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgReqFinishMatch_PackReqFinishMatch) == 0x000008, "Wrong alignment on FlatBuffersYYMsgReqFinishMatch_PackReqFinishMatch");
static_assert(sizeof(FlatBuffersYYMsgReqFinishMatch_PackReqFinishMatch) == 0x000030, "Wrong size on FlatBuffersYYMsgReqFinishMatch_PackReqFinishMatch");
static_assert(offsetof(FlatBuffersYYMsgReqFinishMatch_PackReqFinishMatch, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgReqFinishMatch_PackReqFinishMatch::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqFinishMatch_PackReqFinishMatch, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgReqFinishMatch_PackReqFinishMatch::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqFinishMatch_PackReqFinishMatch, OutData) == 0x000018, "Member 'FlatBuffersYYMsgReqFinishMatch_PackReqFinishMatch::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqFinishMatch_PackReqFinishMatch, ReturnValue) == 0x000028, "Member 'FlatBuffersYYMsgReqFinishMatch_PackReqFinishMatch::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgReqFinishMatch.UnpackReqFinishMatch
// 0x0030 (0x0030 - 0x0000)
struct FlatBuffersYYMsgReqFinishMatch_UnpackReqFinishMatch final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgReqFinishMatch                   OutUE4Data;                                        // 0x0018(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgReqFinishMatch_UnpackReqFinishMatch) == 0x000008, "Wrong alignment on FlatBuffersYYMsgReqFinishMatch_UnpackReqFinishMatch");
static_assert(sizeof(FlatBuffersYYMsgReqFinishMatch_UnpackReqFinishMatch) == 0x000030, "Wrong size on FlatBuffersYYMsgReqFinishMatch_UnpackReqFinishMatch");
static_assert(offsetof(FlatBuffersYYMsgReqFinishMatch_UnpackReqFinishMatch, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgReqFinishMatch_UnpackReqFinishMatch::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqFinishMatch_UnpackReqFinishMatch, InData) == 0x000008, "Member 'FlatBuffersYYMsgReqFinishMatch_UnpackReqFinishMatch::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqFinishMatch_UnpackReqFinishMatch, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgReqFinishMatch_UnpackReqFinishMatch::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqFinishMatch_UnpackReqFinishMatch, ReturnValue) == 0x000028, "Member 'FlatBuffersYYMsgReqFinishMatch_UnpackReqFinishMatch::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgAckFinishMatch.PackAckFinishMatch
// 0x0070 (0x0070 - 0x0000)
struct FlatBuffersYYMsgAckFinishMatch_PackAckFinishMatch final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgAckFinishMatch                   InUE4Data;                                         // 0x0008(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0058(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgAckFinishMatch_PackAckFinishMatch) == 0x000008, "Wrong alignment on FlatBuffersYYMsgAckFinishMatch_PackAckFinishMatch");
static_assert(sizeof(FlatBuffersYYMsgAckFinishMatch_PackAckFinishMatch) == 0x000070, "Wrong size on FlatBuffersYYMsgAckFinishMatch_PackAckFinishMatch");
static_assert(offsetof(FlatBuffersYYMsgAckFinishMatch_PackAckFinishMatch, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgAckFinishMatch_PackAckFinishMatch::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgAckFinishMatch_PackAckFinishMatch, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgAckFinishMatch_PackAckFinishMatch::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgAckFinishMatch_PackAckFinishMatch, OutData) == 0x000058, "Member 'FlatBuffersYYMsgAckFinishMatch_PackAckFinishMatch::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgAckFinishMatch_PackAckFinishMatch, ReturnValue) == 0x000068, "Member 'FlatBuffersYYMsgAckFinishMatch_PackAckFinishMatch::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgAckFinishMatch.UnpackAckFinishMatch
// 0x0070 (0x0070 - 0x0000)
struct FlatBuffersYYMsgAckFinishMatch_UnpackAckFinishMatch final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgAckFinishMatch                   OutUE4Data;                                        // 0x0018(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgAckFinishMatch_UnpackAckFinishMatch) == 0x000008, "Wrong alignment on FlatBuffersYYMsgAckFinishMatch_UnpackAckFinishMatch");
static_assert(sizeof(FlatBuffersYYMsgAckFinishMatch_UnpackAckFinishMatch) == 0x000070, "Wrong size on FlatBuffersYYMsgAckFinishMatch_UnpackAckFinishMatch");
static_assert(offsetof(FlatBuffersYYMsgAckFinishMatch_UnpackAckFinishMatch, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgAckFinishMatch_UnpackAckFinishMatch::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgAckFinishMatch_UnpackAckFinishMatch, InData) == 0x000008, "Member 'FlatBuffersYYMsgAckFinishMatch_UnpackAckFinishMatch::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgAckFinishMatch_UnpackAckFinishMatch, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgAckFinishMatch_UnpackAckFinishMatch::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgAckFinishMatch_UnpackAckFinishMatch, ReturnValue) == 0x000068, "Member 'FlatBuffersYYMsgAckFinishMatch_UnpackAckFinishMatch::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgReqAckRoomMember.PackReqAckRoomMember
// 0x0068 (0x0068 - 0x0000)
struct FlatBuffersYYMsgReqAckRoomMember_PackReqAckRoomMember final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgReqAckRoomMember                 InUE4Data;                                         // 0x0008(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgReqAckRoomMember_PackReqAckRoomMember) == 0x000008, "Wrong alignment on FlatBuffersYYMsgReqAckRoomMember_PackReqAckRoomMember");
static_assert(sizeof(FlatBuffersYYMsgReqAckRoomMember_PackReqAckRoomMember) == 0x000068, "Wrong size on FlatBuffersYYMsgReqAckRoomMember_PackReqAckRoomMember");
static_assert(offsetof(FlatBuffersYYMsgReqAckRoomMember_PackReqAckRoomMember, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgReqAckRoomMember_PackReqAckRoomMember::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckRoomMember_PackReqAckRoomMember, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgReqAckRoomMember_PackReqAckRoomMember::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckRoomMember_PackReqAckRoomMember, OutData) == 0x000050, "Member 'FlatBuffersYYMsgReqAckRoomMember_PackReqAckRoomMember::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckRoomMember_PackReqAckRoomMember, ReturnValue) == 0x000060, "Member 'FlatBuffersYYMsgReqAckRoomMember_PackReqAckRoomMember::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgReqAckRoomMember.UnpackReqAckRoomMember
// 0x0068 (0x0068 - 0x0000)
struct FlatBuffersYYMsgReqAckRoomMember_UnpackReqAckRoomMember final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgReqAckRoomMember                 OutUE4Data;                                        // 0x0018(0x0048)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgReqAckRoomMember_UnpackReqAckRoomMember) == 0x000008, "Wrong alignment on FlatBuffersYYMsgReqAckRoomMember_UnpackReqAckRoomMember");
static_assert(sizeof(FlatBuffersYYMsgReqAckRoomMember_UnpackReqAckRoomMember) == 0x000068, "Wrong size on FlatBuffersYYMsgReqAckRoomMember_UnpackReqAckRoomMember");
static_assert(offsetof(FlatBuffersYYMsgReqAckRoomMember_UnpackReqAckRoomMember, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgReqAckRoomMember_UnpackReqAckRoomMember::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckRoomMember_UnpackReqAckRoomMember, InData) == 0x000008, "Member 'FlatBuffersYYMsgReqAckRoomMember_UnpackReqAckRoomMember::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckRoomMember_UnpackReqAckRoomMember, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgReqAckRoomMember_UnpackReqAckRoomMember::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckRoomMember_UnpackReqAckRoomMember, ReturnValue) == 0x000060, "Member 'FlatBuffersYYMsgReqAckRoomMember_UnpackReqAckRoomMember::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgReqAckEnterRoom.PackReqAckEnterRoom
// 0x0060 (0x0060 - 0x0000)
struct FlatBuffersYYMsgReqAckEnterRoom_PackReqAckEnterRoom final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgReqAckEnterRoom                  InUE4Data;                                         // 0x0008(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgReqAckEnterRoom_PackReqAckEnterRoom) == 0x000008, "Wrong alignment on FlatBuffersYYMsgReqAckEnterRoom_PackReqAckEnterRoom");
static_assert(sizeof(FlatBuffersYYMsgReqAckEnterRoom_PackReqAckEnterRoom) == 0x000060, "Wrong size on FlatBuffersYYMsgReqAckEnterRoom_PackReqAckEnterRoom");
static_assert(offsetof(FlatBuffersYYMsgReqAckEnterRoom_PackReqAckEnterRoom, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgReqAckEnterRoom_PackReqAckEnterRoom::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckEnterRoom_PackReqAckEnterRoom, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgReqAckEnterRoom_PackReqAckEnterRoom::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckEnterRoom_PackReqAckEnterRoom, OutData) == 0x000048, "Member 'FlatBuffersYYMsgReqAckEnterRoom_PackReqAckEnterRoom::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckEnterRoom_PackReqAckEnterRoom, ReturnValue) == 0x000058, "Member 'FlatBuffersYYMsgReqAckEnterRoom_PackReqAckEnterRoom::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgReqAckEnterRoom.UnpackReqAckEnterRoom
// 0x0060 (0x0060 - 0x0000)
struct FlatBuffersYYMsgReqAckEnterRoom_UnpackReqAckEnterRoom final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgReqAckEnterRoom                  OutUE4Data;                                        // 0x0018(0x0040)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgReqAckEnterRoom_UnpackReqAckEnterRoom) == 0x000008, "Wrong alignment on FlatBuffersYYMsgReqAckEnterRoom_UnpackReqAckEnterRoom");
static_assert(sizeof(FlatBuffersYYMsgReqAckEnterRoom_UnpackReqAckEnterRoom) == 0x000060, "Wrong size on FlatBuffersYYMsgReqAckEnterRoom_UnpackReqAckEnterRoom");
static_assert(offsetof(FlatBuffersYYMsgReqAckEnterRoom_UnpackReqAckEnterRoom, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgReqAckEnterRoom_UnpackReqAckEnterRoom::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckEnterRoom_UnpackReqAckEnterRoom, InData) == 0x000008, "Member 'FlatBuffersYYMsgReqAckEnterRoom_UnpackReqAckEnterRoom::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckEnterRoom_UnpackReqAckEnterRoom, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgReqAckEnterRoom_UnpackReqAckEnterRoom::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckEnterRoom_UnpackReqAckEnterRoom, ReturnValue) == 0x000058, "Member 'FlatBuffersYYMsgReqAckEnterRoom_UnpackReqAckEnterRoom::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgReqAckRoomInfo.PackReqAckRoomInfo
// 0x00A0 (0x00A0 - 0x0000)
struct FlatBuffersYYMsgReqAckRoomInfo_PackReqAckRoomInfo final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgReqAckRoomInfo                   InUE4Data;                                         // 0x0008(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0088(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0098(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgReqAckRoomInfo_PackReqAckRoomInfo) == 0x000008, "Wrong alignment on FlatBuffersYYMsgReqAckRoomInfo_PackReqAckRoomInfo");
static_assert(sizeof(FlatBuffersYYMsgReqAckRoomInfo_PackReqAckRoomInfo) == 0x0000A0, "Wrong size on FlatBuffersYYMsgReqAckRoomInfo_PackReqAckRoomInfo");
static_assert(offsetof(FlatBuffersYYMsgReqAckRoomInfo_PackReqAckRoomInfo, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgReqAckRoomInfo_PackReqAckRoomInfo::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckRoomInfo_PackReqAckRoomInfo, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgReqAckRoomInfo_PackReqAckRoomInfo::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckRoomInfo_PackReqAckRoomInfo, OutData) == 0x000088, "Member 'FlatBuffersYYMsgReqAckRoomInfo_PackReqAckRoomInfo::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckRoomInfo_PackReqAckRoomInfo, ReturnValue) == 0x000098, "Member 'FlatBuffersYYMsgReqAckRoomInfo_PackReqAckRoomInfo::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgReqAckRoomInfo.UnpackReqAckRoomInfo
// 0x00A0 (0x00A0 - 0x0000)
struct FlatBuffersYYMsgReqAckRoomInfo_UnpackReqAckRoomInfo final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgReqAckRoomInfo                   OutUE4Data;                                        // 0x0018(0x0080)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0098(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgReqAckRoomInfo_UnpackReqAckRoomInfo) == 0x000008, "Wrong alignment on FlatBuffersYYMsgReqAckRoomInfo_UnpackReqAckRoomInfo");
static_assert(sizeof(FlatBuffersYYMsgReqAckRoomInfo_UnpackReqAckRoomInfo) == 0x0000A0, "Wrong size on FlatBuffersYYMsgReqAckRoomInfo_UnpackReqAckRoomInfo");
static_assert(offsetof(FlatBuffersYYMsgReqAckRoomInfo_UnpackReqAckRoomInfo, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgReqAckRoomInfo_UnpackReqAckRoomInfo::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckRoomInfo_UnpackReqAckRoomInfo, InData) == 0x000008, "Member 'FlatBuffersYYMsgReqAckRoomInfo_UnpackReqAckRoomInfo::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckRoomInfo_UnpackReqAckRoomInfo, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgReqAckRoomInfo_UnpackReqAckRoomInfo::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckRoomInfo_UnpackReqAckRoomInfo, ReturnValue) == 0x000098, "Member 'FlatBuffersYYMsgReqAckRoomInfo_UnpackReqAckRoomInfo::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgReqAckRoomList.PackReqAckRoomList
// 0x0040 (0x0040 - 0x0000)
struct FlatBuffersYYMsgReqAckRoomList_PackReqAckRoomList final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgReqAckRoomList                   InUE4Data;                                         // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgReqAckRoomList_PackReqAckRoomList) == 0x000008, "Wrong alignment on FlatBuffersYYMsgReqAckRoomList_PackReqAckRoomList");
static_assert(sizeof(FlatBuffersYYMsgReqAckRoomList_PackReqAckRoomList) == 0x000040, "Wrong size on FlatBuffersYYMsgReqAckRoomList_PackReqAckRoomList");
static_assert(offsetof(FlatBuffersYYMsgReqAckRoomList_PackReqAckRoomList, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgReqAckRoomList_PackReqAckRoomList::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckRoomList_PackReqAckRoomList, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgReqAckRoomList_PackReqAckRoomList::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckRoomList_PackReqAckRoomList, OutData) == 0x000028, "Member 'FlatBuffersYYMsgReqAckRoomList_PackReqAckRoomList::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckRoomList_PackReqAckRoomList, ReturnValue) == 0x000038, "Member 'FlatBuffersYYMsgReqAckRoomList_PackReqAckRoomList::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgReqAckRoomList.UnpackReqAckRoomList
// 0x0040 (0x0040 - 0x0000)
struct FlatBuffersYYMsgReqAckRoomList_UnpackReqAckRoomList final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgReqAckRoomList                   OutUE4Data;                                        // 0x0018(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgReqAckRoomList_UnpackReqAckRoomList) == 0x000008, "Wrong alignment on FlatBuffersYYMsgReqAckRoomList_UnpackReqAckRoomList");
static_assert(sizeof(FlatBuffersYYMsgReqAckRoomList_UnpackReqAckRoomList) == 0x000040, "Wrong size on FlatBuffersYYMsgReqAckRoomList_UnpackReqAckRoomList");
static_assert(offsetof(FlatBuffersYYMsgReqAckRoomList_UnpackReqAckRoomList, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgReqAckRoomList_UnpackReqAckRoomList::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckRoomList_UnpackReqAckRoomList, InData) == 0x000008, "Member 'FlatBuffersYYMsgReqAckRoomList_UnpackReqAckRoomList::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckRoomList_UnpackReqAckRoomList, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgReqAckRoomList_UnpackReqAckRoomList::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckRoomList_UnpackReqAckRoomList, ReturnValue) == 0x000038, "Member 'FlatBuffersYYMsgReqAckRoomList_UnpackReqAckRoomList::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgReqAckCreateRoom.PackReqAckCreateRoom
// 0x00D0 (0x00D0 - 0x0000)
struct FlatBuffersYYMsgReqAckCreateRoom_PackReqAckCreateRoom final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgReqAckCreateRoom                 InUE4Data;                                         // 0x0008(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x00B8(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00C8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgReqAckCreateRoom_PackReqAckCreateRoom) == 0x000008, "Wrong alignment on FlatBuffersYYMsgReqAckCreateRoom_PackReqAckCreateRoom");
static_assert(sizeof(FlatBuffersYYMsgReqAckCreateRoom_PackReqAckCreateRoom) == 0x0000D0, "Wrong size on FlatBuffersYYMsgReqAckCreateRoom_PackReqAckCreateRoom");
static_assert(offsetof(FlatBuffersYYMsgReqAckCreateRoom_PackReqAckCreateRoom, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgReqAckCreateRoom_PackReqAckCreateRoom::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckCreateRoom_PackReqAckCreateRoom, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgReqAckCreateRoom_PackReqAckCreateRoom::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckCreateRoom_PackReqAckCreateRoom, OutData) == 0x0000B8, "Member 'FlatBuffersYYMsgReqAckCreateRoom_PackReqAckCreateRoom::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckCreateRoom_PackReqAckCreateRoom, ReturnValue) == 0x0000C8, "Member 'FlatBuffersYYMsgReqAckCreateRoom_PackReqAckCreateRoom::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgReqAckCreateRoom.UnpackReqAckCreateRoom
// 0x00D0 (0x00D0 - 0x0000)
struct FlatBuffersYYMsgReqAckCreateRoom_UnpackReqAckCreateRoom final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgReqAckCreateRoom                 OutUE4Data;                                        // 0x0018(0x00B0)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00C8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgReqAckCreateRoom_UnpackReqAckCreateRoom) == 0x000008, "Wrong alignment on FlatBuffersYYMsgReqAckCreateRoom_UnpackReqAckCreateRoom");
static_assert(sizeof(FlatBuffersYYMsgReqAckCreateRoom_UnpackReqAckCreateRoom) == 0x0000D0, "Wrong size on FlatBuffersYYMsgReqAckCreateRoom_UnpackReqAckCreateRoom");
static_assert(offsetof(FlatBuffersYYMsgReqAckCreateRoom_UnpackReqAckCreateRoom, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgReqAckCreateRoom_UnpackReqAckCreateRoom::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckCreateRoom_UnpackReqAckCreateRoom, InData) == 0x000008, "Member 'FlatBuffersYYMsgReqAckCreateRoom_UnpackReqAckCreateRoom::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckCreateRoom_UnpackReqAckCreateRoom, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgReqAckCreateRoom_UnpackReqAckCreateRoom::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckCreateRoom_UnpackReqAckCreateRoom, ReturnValue) == 0x0000C8, "Member 'FlatBuffersYYMsgReqAckCreateRoom_UnpackReqAckCreateRoom::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgReqAckQuickEnter.PackReqAckQuickEnter
// 0x00B0 (0x00B0 - 0x0000)
struct FlatBuffersYYMsgReqAckQuickEnter_PackReqAckQuickEnter final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgReqAckQuickEnter                 InUE4Data;                                         // 0x0008(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0098(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgReqAckQuickEnter_PackReqAckQuickEnter) == 0x000008, "Wrong alignment on FlatBuffersYYMsgReqAckQuickEnter_PackReqAckQuickEnter");
static_assert(sizeof(FlatBuffersYYMsgReqAckQuickEnter_PackReqAckQuickEnter) == 0x0000B0, "Wrong size on FlatBuffersYYMsgReqAckQuickEnter_PackReqAckQuickEnter");
static_assert(offsetof(FlatBuffersYYMsgReqAckQuickEnter_PackReqAckQuickEnter, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgReqAckQuickEnter_PackReqAckQuickEnter::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckQuickEnter_PackReqAckQuickEnter, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgReqAckQuickEnter_PackReqAckQuickEnter::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckQuickEnter_PackReqAckQuickEnter, OutData) == 0x000098, "Member 'FlatBuffersYYMsgReqAckQuickEnter_PackReqAckQuickEnter::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckQuickEnter_PackReqAckQuickEnter, ReturnValue) == 0x0000A8, "Member 'FlatBuffersYYMsgReqAckQuickEnter_PackReqAckQuickEnter::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgReqAckQuickEnter.UnpackReqAckQuickEnter
// 0x00B0 (0x00B0 - 0x0000)
struct FlatBuffersYYMsgReqAckQuickEnter_UnpackReqAckQuickEnter final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgReqAckQuickEnter                 OutUE4Data;                                        // 0x0018(0x0090)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgReqAckQuickEnter_UnpackReqAckQuickEnter) == 0x000008, "Wrong alignment on FlatBuffersYYMsgReqAckQuickEnter_UnpackReqAckQuickEnter");
static_assert(sizeof(FlatBuffersYYMsgReqAckQuickEnter_UnpackReqAckQuickEnter) == 0x0000B0, "Wrong size on FlatBuffersYYMsgReqAckQuickEnter_UnpackReqAckQuickEnter");
static_assert(offsetof(FlatBuffersYYMsgReqAckQuickEnter_UnpackReqAckQuickEnter, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgReqAckQuickEnter_UnpackReqAckQuickEnter::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckQuickEnter_UnpackReqAckQuickEnter, InData) == 0x000008, "Member 'FlatBuffersYYMsgReqAckQuickEnter_UnpackReqAckQuickEnter::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckQuickEnter_UnpackReqAckQuickEnter, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgReqAckQuickEnter_UnpackReqAckQuickEnter::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckQuickEnter_UnpackReqAckQuickEnter, ReturnValue) == 0x0000A8, "Member 'FlatBuffersYYMsgReqAckQuickEnter_UnpackReqAckQuickEnter::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgReqAckRoomStart.PackReqAckRoomStart
// 0x00C8 (0x00C8 - 0x0000)
struct FlatBuffersYYMsgReqAckRoomStart_PackReqAckRoomStart final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgReqAckRoomStart                  InUE4Data;                                         // 0x0008(0x00A8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x00B0(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00C0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgReqAckRoomStart_PackReqAckRoomStart) == 0x000008, "Wrong alignment on FlatBuffersYYMsgReqAckRoomStart_PackReqAckRoomStart");
static_assert(sizeof(FlatBuffersYYMsgReqAckRoomStart_PackReqAckRoomStart) == 0x0000C8, "Wrong size on FlatBuffersYYMsgReqAckRoomStart_PackReqAckRoomStart");
static_assert(offsetof(FlatBuffersYYMsgReqAckRoomStart_PackReqAckRoomStart, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgReqAckRoomStart_PackReqAckRoomStart::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckRoomStart_PackReqAckRoomStart, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgReqAckRoomStart_PackReqAckRoomStart::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckRoomStart_PackReqAckRoomStart, OutData) == 0x0000B0, "Member 'FlatBuffersYYMsgReqAckRoomStart_PackReqAckRoomStart::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckRoomStart_PackReqAckRoomStart, ReturnValue) == 0x0000C0, "Member 'FlatBuffersYYMsgReqAckRoomStart_PackReqAckRoomStart::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgReqAckRoomStart.UnpackReqAckRoomStart
// 0x00C8 (0x00C8 - 0x0000)
struct FlatBuffersYYMsgReqAckRoomStart_UnpackReqAckRoomStart final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgReqAckRoomStart                  OutUE4Data;                                        // 0x0018(0x00A8)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00C0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgReqAckRoomStart_UnpackReqAckRoomStart) == 0x000008, "Wrong alignment on FlatBuffersYYMsgReqAckRoomStart_UnpackReqAckRoomStart");
static_assert(sizeof(FlatBuffersYYMsgReqAckRoomStart_UnpackReqAckRoomStart) == 0x0000C8, "Wrong size on FlatBuffersYYMsgReqAckRoomStart_UnpackReqAckRoomStart");
static_assert(offsetof(FlatBuffersYYMsgReqAckRoomStart_UnpackReqAckRoomStart, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgReqAckRoomStart_UnpackReqAckRoomStart::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckRoomStart_UnpackReqAckRoomStart, InData) == 0x000008, "Member 'FlatBuffersYYMsgReqAckRoomStart_UnpackReqAckRoomStart::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckRoomStart_UnpackReqAckRoomStart, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgReqAckRoomStart_UnpackReqAckRoomStart::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckRoomStart_UnpackReqAckRoomStart, ReturnValue) == 0x0000C0, "Member 'FlatBuffersYYMsgReqAckRoomStart_UnpackReqAckRoomStart::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgReqAckHeadUrl.PackReqAckHeadUrl
// 0x0040 (0x0040 - 0x0000)
struct FlatBuffersYYMsgReqAckHeadUrl_PackReqAckHeadUrl final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgReqAckHeadUrl                    InUE4Data;                                         // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgReqAckHeadUrl_PackReqAckHeadUrl) == 0x000008, "Wrong alignment on FlatBuffersYYMsgReqAckHeadUrl_PackReqAckHeadUrl");
static_assert(sizeof(FlatBuffersYYMsgReqAckHeadUrl_PackReqAckHeadUrl) == 0x000040, "Wrong size on FlatBuffersYYMsgReqAckHeadUrl_PackReqAckHeadUrl");
static_assert(offsetof(FlatBuffersYYMsgReqAckHeadUrl_PackReqAckHeadUrl, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgReqAckHeadUrl_PackReqAckHeadUrl::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckHeadUrl_PackReqAckHeadUrl, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgReqAckHeadUrl_PackReqAckHeadUrl::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckHeadUrl_PackReqAckHeadUrl, OutData) == 0x000028, "Member 'FlatBuffersYYMsgReqAckHeadUrl_PackReqAckHeadUrl::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckHeadUrl_PackReqAckHeadUrl, ReturnValue) == 0x000038, "Member 'FlatBuffersYYMsgReqAckHeadUrl_PackReqAckHeadUrl::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgReqAckHeadUrl.UnpackReqAckHeadUrl
// 0x0040 (0x0040 - 0x0000)
struct FlatBuffersYYMsgReqAckHeadUrl_UnpackReqAckHeadUrl final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgReqAckHeadUrl                    OutUE4Data;                                        // 0x0018(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgReqAckHeadUrl_UnpackReqAckHeadUrl) == 0x000008, "Wrong alignment on FlatBuffersYYMsgReqAckHeadUrl_UnpackReqAckHeadUrl");
static_assert(sizeof(FlatBuffersYYMsgReqAckHeadUrl_UnpackReqAckHeadUrl) == 0x000040, "Wrong size on FlatBuffersYYMsgReqAckHeadUrl_UnpackReqAckHeadUrl");
static_assert(offsetof(FlatBuffersYYMsgReqAckHeadUrl_UnpackReqAckHeadUrl, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgReqAckHeadUrl_UnpackReqAckHeadUrl::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckHeadUrl_UnpackReqAckHeadUrl, InData) == 0x000008, "Member 'FlatBuffersYYMsgReqAckHeadUrl_UnpackReqAckHeadUrl::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckHeadUrl_UnpackReqAckHeadUrl, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgReqAckHeadUrl_UnpackReqAckHeadUrl::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckHeadUrl_UnpackReqAckHeadUrl, ReturnValue) == 0x000038, "Member 'FlatBuffersYYMsgReqAckHeadUrl_UnpackReqAckHeadUrl::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgReqAckLoaderServerRegister.PackReqAckLoaderServerRegister
// 0x0030 (0x0030 - 0x0000)
struct FlatBuffersYYMsgReqAckLoaderServerRegister_PackReqAckLoaderServerRegister final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgReqAckLoaderServerRegister       InUE4Data;                                         // 0x0008(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 OutData;                                           // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgReqAckLoaderServerRegister_PackReqAckLoaderServerRegister) == 0x000008, "Wrong alignment on FlatBuffersYYMsgReqAckLoaderServerRegister_PackReqAckLoaderServerRegister");
static_assert(sizeof(FlatBuffersYYMsgReqAckLoaderServerRegister_PackReqAckLoaderServerRegister) == 0x000030, "Wrong size on FlatBuffersYYMsgReqAckLoaderServerRegister_PackReqAckLoaderServerRegister");
static_assert(offsetof(FlatBuffersYYMsgReqAckLoaderServerRegister_PackReqAckLoaderServerRegister, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgReqAckLoaderServerRegister_PackReqAckLoaderServerRegister::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckLoaderServerRegister_PackReqAckLoaderServerRegister, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgReqAckLoaderServerRegister_PackReqAckLoaderServerRegister::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckLoaderServerRegister_PackReqAckLoaderServerRegister, OutData) == 0x000018, "Member 'FlatBuffersYYMsgReqAckLoaderServerRegister_PackReqAckLoaderServerRegister::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckLoaderServerRegister_PackReqAckLoaderServerRegister, ReturnValue) == 0x000028, "Member 'FlatBuffersYYMsgReqAckLoaderServerRegister_PackReqAckLoaderServerRegister::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgReqAckLoaderServerRegister.UnpackReqAckLoaderServerRegister
// 0x0028 (0x0028 - 0x0000)
struct FlatBuffersYYMsgReqAckLoaderServerRegister_UnpackReqAckLoaderServerRegister final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgReqAckLoaderServerRegister       OutUE4Data;                                        // 0x0018(0x000C)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgReqAckLoaderServerRegister_UnpackReqAckLoaderServerRegister) == 0x000008, "Wrong alignment on FlatBuffersYYMsgReqAckLoaderServerRegister_UnpackReqAckLoaderServerRegister");
static_assert(sizeof(FlatBuffersYYMsgReqAckLoaderServerRegister_UnpackReqAckLoaderServerRegister) == 0x000028, "Wrong size on FlatBuffersYYMsgReqAckLoaderServerRegister_UnpackReqAckLoaderServerRegister");
static_assert(offsetof(FlatBuffersYYMsgReqAckLoaderServerRegister_UnpackReqAckLoaderServerRegister, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgReqAckLoaderServerRegister_UnpackReqAckLoaderServerRegister::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckLoaderServerRegister_UnpackReqAckLoaderServerRegister, InData) == 0x000008, "Member 'FlatBuffersYYMsgReqAckLoaderServerRegister_UnpackReqAckLoaderServerRegister::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckLoaderServerRegister_UnpackReqAckLoaderServerRegister, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgReqAckLoaderServerRegister_UnpackReqAckLoaderServerRegister::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckLoaderServerRegister_UnpackReqAckLoaderServerRegister, ReturnValue) == 0x000024, "Member 'FlatBuffersYYMsgReqAckLoaderServerRegister_UnpackReqAckLoaderServerRegister::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgReqAckLoadPVPServer.PackReqAckLoadPVPServer
// 0x00D8 (0x00D8 - 0x0000)
struct FlatBuffersYYMsgReqAckLoadPVPServer_PackReqAckLoadPVPServer final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgReqAckLoadPVPServer              InUE4Data;                                         // 0x0008(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x00C0(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00D0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgReqAckLoadPVPServer_PackReqAckLoadPVPServer) == 0x000008, "Wrong alignment on FlatBuffersYYMsgReqAckLoadPVPServer_PackReqAckLoadPVPServer");
static_assert(sizeof(FlatBuffersYYMsgReqAckLoadPVPServer_PackReqAckLoadPVPServer) == 0x0000D8, "Wrong size on FlatBuffersYYMsgReqAckLoadPVPServer_PackReqAckLoadPVPServer");
static_assert(offsetof(FlatBuffersYYMsgReqAckLoadPVPServer_PackReqAckLoadPVPServer, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgReqAckLoadPVPServer_PackReqAckLoadPVPServer::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckLoadPVPServer_PackReqAckLoadPVPServer, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgReqAckLoadPVPServer_PackReqAckLoadPVPServer::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckLoadPVPServer_PackReqAckLoadPVPServer, OutData) == 0x0000C0, "Member 'FlatBuffersYYMsgReqAckLoadPVPServer_PackReqAckLoadPVPServer::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckLoadPVPServer_PackReqAckLoadPVPServer, ReturnValue) == 0x0000D0, "Member 'FlatBuffersYYMsgReqAckLoadPVPServer_PackReqAckLoadPVPServer::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgReqAckLoadPVPServer.UnpackReqAckLoadPVPServer
// 0x00D8 (0x00D8 - 0x0000)
struct FlatBuffersYYMsgReqAckLoadPVPServer_UnpackReqAckLoadPVPServer final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgReqAckLoadPVPServer              OutUE4Data;                                        // 0x0018(0x00B8)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00D0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgReqAckLoadPVPServer_UnpackReqAckLoadPVPServer) == 0x000008, "Wrong alignment on FlatBuffersYYMsgReqAckLoadPVPServer_UnpackReqAckLoadPVPServer");
static_assert(sizeof(FlatBuffersYYMsgReqAckLoadPVPServer_UnpackReqAckLoadPVPServer) == 0x0000D8, "Wrong size on FlatBuffersYYMsgReqAckLoadPVPServer_UnpackReqAckLoadPVPServer");
static_assert(offsetof(FlatBuffersYYMsgReqAckLoadPVPServer_UnpackReqAckLoadPVPServer, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgReqAckLoadPVPServer_UnpackReqAckLoadPVPServer::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckLoadPVPServer_UnpackReqAckLoadPVPServer, InData) == 0x000008, "Member 'FlatBuffersYYMsgReqAckLoadPVPServer_UnpackReqAckLoadPVPServer::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckLoadPVPServer_UnpackReqAckLoadPVPServer, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgReqAckLoadPVPServer_UnpackReqAckLoadPVPServer::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckLoadPVPServer_UnpackReqAckLoadPVPServer, ReturnValue) == 0x0000D0, "Member 'FlatBuffersYYMsgReqAckLoadPVPServer_UnpackReqAckLoadPVPServer::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgPVPPlayerInfo.PackPVPPlayerInfo
// 0x0050 (0x0050 - 0x0000)
struct FlatBuffersYYMsgPVPPlayerInfo_PackPVPPlayerInfo final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgPVPPlayerInfo                    InUE4Data;                                         // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgPVPPlayerInfo_PackPVPPlayerInfo) == 0x000008, "Wrong alignment on FlatBuffersYYMsgPVPPlayerInfo_PackPVPPlayerInfo");
static_assert(sizeof(FlatBuffersYYMsgPVPPlayerInfo_PackPVPPlayerInfo) == 0x000050, "Wrong size on FlatBuffersYYMsgPVPPlayerInfo_PackPVPPlayerInfo");
static_assert(offsetof(FlatBuffersYYMsgPVPPlayerInfo_PackPVPPlayerInfo, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgPVPPlayerInfo_PackPVPPlayerInfo::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPVPPlayerInfo_PackPVPPlayerInfo, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgPVPPlayerInfo_PackPVPPlayerInfo::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPVPPlayerInfo_PackPVPPlayerInfo, OutData) == 0x000038, "Member 'FlatBuffersYYMsgPVPPlayerInfo_PackPVPPlayerInfo::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPVPPlayerInfo_PackPVPPlayerInfo, ReturnValue) == 0x000048, "Member 'FlatBuffersYYMsgPVPPlayerInfo_PackPVPPlayerInfo::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgPVPPlayerInfo.UnpackPVPPlayerInfo
// 0x0050 (0x0050 - 0x0000)
struct FlatBuffersYYMsgPVPPlayerInfo_UnpackPVPPlayerInfo final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgPVPPlayerInfo                    OutUE4Data;                                        // 0x0018(0x0030)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgPVPPlayerInfo_UnpackPVPPlayerInfo) == 0x000008, "Wrong alignment on FlatBuffersYYMsgPVPPlayerInfo_UnpackPVPPlayerInfo");
static_assert(sizeof(FlatBuffersYYMsgPVPPlayerInfo_UnpackPVPPlayerInfo) == 0x000050, "Wrong size on FlatBuffersYYMsgPVPPlayerInfo_UnpackPVPPlayerInfo");
static_assert(offsetof(FlatBuffersYYMsgPVPPlayerInfo_UnpackPVPPlayerInfo, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgPVPPlayerInfo_UnpackPVPPlayerInfo::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPVPPlayerInfo_UnpackPVPPlayerInfo, InData) == 0x000008, "Member 'FlatBuffersYYMsgPVPPlayerInfo_UnpackPVPPlayerInfo::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPVPPlayerInfo_UnpackPVPPlayerInfo, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgPVPPlayerInfo_UnpackPVPPlayerInfo::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgPVPPlayerInfo_UnpackPVPPlayerInfo, ReturnValue) == 0x000048, "Member 'FlatBuffersYYMsgPVPPlayerInfo_UnpackPVPPlayerInfo::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgReqAckPVPServerRegister.PackReqAckPVPServerRegister
// 0x00C0 (0x00C0 - 0x0000)
struct FlatBuffersYYMsgReqAckPVPServerRegister_PackReqAckPVPServerRegister final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgReqAckPVPServerRegister          InUE4Data;                                         // 0x0008(0x00A0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x00A8(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00B8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgReqAckPVPServerRegister_PackReqAckPVPServerRegister) == 0x000008, "Wrong alignment on FlatBuffersYYMsgReqAckPVPServerRegister_PackReqAckPVPServerRegister");
static_assert(sizeof(FlatBuffersYYMsgReqAckPVPServerRegister_PackReqAckPVPServerRegister) == 0x0000C0, "Wrong size on FlatBuffersYYMsgReqAckPVPServerRegister_PackReqAckPVPServerRegister");
static_assert(offsetof(FlatBuffersYYMsgReqAckPVPServerRegister_PackReqAckPVPServerRegister, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgReqAckPVPServerRegister_PackReqAckPVPServerRegister::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckPVPServerRegister_PackReqAckPVPServerRegister, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgReqAckPVPServerRegister_PackReqAckPVPServerRegister::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckPVPServerRegister_PackReqAckPVPServerRegister, OutData) == 0x0000A8, "Member 'FlatBuffersYYMsgReqAckPVPServerRegister_PackReqAckPVPServerRegister::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckPVPServerRegister_PackReqAckPVPServerRegister, ReturnValue) == 0x0000B8, "Member 'FlatBuffersYYMsgReqAckPVPServerRegister_PackReqAckPVPServerRegister::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgReqAckPVPServerRegister.UnpackReqAckPVPServerRegister
// 0x00C0 (0x00C0 - 0x0000)
struct FlatBuffersYYMsgReqAckPVPServerRegister_UnpackReqAckPVPServerRegister final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgReqAckPVPServerRegister          OutUE4Data;                                        // 0x0018(0x00A0)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00B8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgReqAckPVPServerRegister_UnpackReqAckPVPServerRegister) == 0x000008, "Wrong alignment on FlatBuffersYYMsgReqAckPVPServerRegister_UnpackReqAckPVPServerRegister");
static_assert(sizeof(FlatBuffersYYMsgReqAckPVPServerRegister_UnpackReqAckPVPServerRegister) == 0x0000C0, "Wrong size on FlatBuffersYYMsgReqAckPVPServerRegister_UnpackReqAckPVPServerRegister");
static_assert(offsetof(FlatBuffersYYMsgReqAckPVPServerRegister_UnpackReqAckPVPServerRegister, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgReqAckPVPServerRegister_UnpackReqAckPVPServerRegister::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckPVPServerRegister_UnpackReqAckPVPServerRegister, InData) == 0x000008, "Member 'FlatBuffersYYMsgReqAckPVPServerRegister_UnpackReqAckPVPServerRegister::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckPVPServerRegister_UnpackReqAckPVPServerRegister, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgReqAckPVPServerRegister_UnpackReqAckPVPServerRegister::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckPVPServerRegister_UnpackReqAckPVPServerRegister, ReturnValue) == 0x0000B8, "Member 'FlatBuffersYYMsgReqAckPVPServerRegister_UnpackReqAckPVPServerRegister::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgReqAckPVPServerStart.PackReqAckPVPServerStart
// 0x0030 (0x0030 - 0x0000)
struct FlatBuffersYYMsgReqAckPVPServerStart_PackReqAckPVPServerStart final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgReqAckPVPServerStart             InUE4Data;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgReqAckPVPServerStart_PackReqAckPVPServerStart) == 0x000008, "Wrong alignment on FlatBuffersYYMsgReqAckPVPServerStart_PackReqAckPVPServerStart");
static_assert(sizeof(FlatBuffersYYMsgReqAckPVPServerStart_PackReqAckPVPServerStart) == 0x000030, "Wrong size on FlatBuffersYYMsgReqAckPVPServerStart_PackReqAckPVPServerStart");
static_assert(offsetof(FlatBuffersYYMsgReqAckPVPServerStart_PackReqAckPVPServerStart, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgReqAckPVPServerStart_PackReqAckPVPServerStart::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckPVPServerStart_PackReqAckPVPServerStart, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgReqAckPVPServerStart_PackReqAckPVPServerStart::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckPVPServerStart_PackReqAckPVPServerStart, OutData) == 0x000018, "Member 'FlatBuffersYYMsgReqAckPVPServerStart_PackReqAckPVPServerStart::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckPVPServerStart_PackReqAckPVPServerStart, ReturnValue) == 0x000028, "Member 'FlatBuffersYYMsgReqAckPVPServerStart_PackReqAckPVPServerStart::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgReqAckPVPServerStart.UnpackReqAckPVPServerStart
// 0x0030 (0x0030 - 0x0000)
struct FlatBuffersYYMsgReqAckPVPServerStart_UnpackReqAckPVPServerStart final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgReqAckPVPServerStart             OutUE4Data;                                        // 0x0018(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgReqAckPVPServerStart_UnpackReqAckPVPServerStart) == 0x000008, "Wrong alignment on FlatBuffersYYMsgReqAckPVPServerStart_UnpackReqAckPVPServerStart");
static_assert(sizeof(FlatBuffersYYMsgReqAckPVPServerStart_UnpackReqAckPVPServerStart) == 0x000030, "Wrong size on FlatBuffersYYMsgReqAckPVPServerStart_UnpackReqAckPVPServerStart");
static_assert(offsetof(FlatBuffersYYMsgReqAckPVPServerStart_UnpackReqAckPVPServerStart, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgReqAckPVPServerStart_UnpackReqAckPVPServerStart::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckPVPServerStart_UnpackReqAckPVPServerStart, InData) == 0x000008, "Member 'FlatBuffersYYMsgReqAckPVPServerStart_UnpackReqAckPVPServerStart::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckPVPServerStart_UnpackReqAckPVPServerStart, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgReqAckPVPServerStart_UnpackReqAckPVPServerStart::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckPVPServerStart_UnpackReqAckPVPServerStart, ReturnValue) == 0x000028, "Member 'FlatBuffersYYMsgReqAckPVPServerStart_UnpackReqAckPVPServerStart::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgReqAckPVPServerInfo.PackReqAckPVPServerInfo
// 0x0040 (0x0040 - 0x0000)
struct FlatBuffersYYMsgReqAckPVPServerInfo_PackReqAckPVPServerInfo final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgReqAckPVPServerInfo              InUE4Data;                                         // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgReqAckPVPServerInfo_PackReqAckPVPServerInfo) == 0x000008, "Wrong alignment on FlatBuffersYYMsgReqAckPVPServerInfo_PackReqAckPVPServerInfo");
static_assert(sizeof(FlatBuffersYYMsgReqAckPVPServerInfo_PackReqAckPVPServerInfo) == 0x000040, "Wrong size on FlatBuffersYYMsgReqAckPVPServerInfo_PackReqAckPVPServerInfo");
static_assert(offsetof(FlatBuffersYYMsgReqAckPVPServerInfo_PackReqAckPVPServerInfo, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgReqAckPVPServerInfo_PackReqAckPVPServerInfo::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckPVPServerInfo_PackReqAckPVPServerInfo, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgReqAckPVPServerInfo_PackReqAckPVPServerInfo::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckPVPServerInfo_PackReqAckPVPServerInfo, OutData) == 0x000028, "Member 'FlatBuffersYYMsgReqAckPVPServerInfo_PackReqAckPVPServerInfo::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckPVPServerInfo_PackReqAckPVPServerInfo, ReturnValue) == 0x000038, "Member 'FlatBuffersYYMsgReqAckPVPServerInfo_PackReqAckPVPServerInfo::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgReqAckPVPServerInfo.UnpackReqAckPVPServerInfo
// 0x0040 (0x0040 - 0x0000)
struct FlatBuffersYYMsgReqAckPVPServerInfo_UnpackReqAckPVPServerInfo final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgReqAckPVPServerInfo              OutUE4Data;                                        // 0x0018(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgReqAckPVPServerInfo_UnpackReqAckPVPServerInfo) == 0x000008, "Wrong alignment on FlatBuffersYYMsgReqAckPVPServerInfo_UnpackReqAckPVPServerInfo");
static_assert(sizeof(FlatBuffersYYMsgReqAckPVPServerInfo_UnpackReqAckPVPServerInfo) == 0x000040, "Wrong size on FlatBuffersYYMsgReqAckPVPServerInfo_UnpackReqAckPVPServerInfo");
static_assert(offsetof(FlatBuffersYYMsgReqAckPVPServerInfo_UnpackReqAckPVPServerInfo, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgReqAckPVPServerInfo_UnpackReqAckPVPServerInfo::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckPVPServerInfo_UnpackReqAckPVPServerInfo, InData) == 0x000008, "Member 'FlatBuffersYYMsgReqAckPVPServerInfo_UnpackReqAckPVPServerInfo::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckPVPServerInfo_UnpackReqAckPVPServerInfo, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgReqAckPVPServerInfo_UnpackReqAckPVPServerInfo::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckPVPServerInfo_UnpackReqAckPVPServerInfo, ReturnValue) == 0x000038, "Member 'FlatBuffersYYMsgReqAckPVPServerInfo_UnpackReqAckPVPServerInfo::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgReqAckPVPServerFinished.PackReqAckPVPServerFinished
// 0x00B0 (0x00B0 - 0x0000)
struct FlatBuffersYYMsgReqAckPVPServerFinished_PackReqAckPVPServerFinished final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgReqAckPVPServerFinished          InUE4Data;                                         // 0x0008(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0098(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgReqAckPVPServerFinished_PackReqAckPVPServerFinished) == 0x000008, "Wrong alignment on FlatBuffersYYMsgReqAckPVPServerFinished_PackReqAckPVPServerFinished");
static_assert(sizeof(FlatBuffersYYMsgReqAckPVPServerFinished_PackReqAckPVPServerFinished) == 0x0000B0, "Wrong size on FlatBuffersYYMsgReqAckPVPServerFinished_PackReqAckPVPServerFinished");
static_assert(offsetof(FlatBuffersYYMsgReqAckPVPServerFinished_PackReqAckPVPServerFinished, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgReqAckPVPServerFinished_PackReqAckPVPServerFinished::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckPVPServerFinished_PackReqAckPVPServerFinished, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgReqAckPVPServerFinished_PackReqAckPVPServerFinished::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckPVPServerFinished_PackReqAckPVPServerFinished, OutData) == 0x000098, "Member 'FlatBuffersYYMsgReqAckPVPServerFinished_PackReqAckPVPServerFinished::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckPVPServerFinished_PackReqAckPVPServerFinished, ReturnValue) == 0x0000A8, "Member 'FlatBuffersYYMsgReqAckPVPServerFinished_PackReqAckPVPServerFinished::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgReqAckPVPServerFinished.UnpackReqAckPVPServerFinished
// 0x00B0 (0x00B0 - 0x0000)
struct FlatBuffersYYMsgReqAckPVPServerFinished_UnpackReqAckPVPServerFinished final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgReqAckPVPServerFinished          OutUE4Data;                                        // 0x0018(0x0090)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgReqAckPVPServerFinished_UnpackReqAckPVPServerFinished) == 0x000008, "Wrong alignment on FlatBuffersYYMsgReqAckPVPServerFinished_UnpackReqAckPVPServerFinished");
static_assert(sizeof(FlatBuffersYYMsgReqAckPVPServerFinished_UnpackReqAckPVPServerFinished) == 0x0000B0, "Wrong size on FlatBuffersYYMsgReqAckPVPServerFinished_UnpackReqAckPVPServerFinished");
static_assert(offsetof(FlatBuffersYYMsgReqAckPVPServerFinished_UnpackReqAckPVPServerFinished, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgReqAckPVPServerFinished_UnpackReqAckPVPServerFinished::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckPVPServerFinished_UnpackReqAckPVPServerFinished, InData) == 0x000008, "Member 'FlatBuffersYYMsgReqAckPVPServerFinished_UnpackReqAckPVPServerFinished::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckPVPServerFinished_UnpackReqAckPVPServerFinished, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgReqAckPVPServerFinished_UnpackReqAckPVPServerFinished::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckPVPServerFinished_UnpackReqAckPVPServerFinished, ReturnValue) == 0x0000A8, "Member 'FlatBuffersYYMsgReqAckPVPServerFinished_UnpackReqAckPVPServerFinished::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgReqAckPVPShutDown.PackReqAckPVPShutDown
// 0x0030 (0x0030 - 0x0000)
struct FlatBuffersYYMsgReqAckPVPShutDown_PackReqAckPVPShutDown final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgReqAckPVPShutDown                InUE4Data;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutData;                                           // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgReqAckPVPShutDown_PackReqAckPVPShutDown) == 0x000008, "Wrong alignment on FlatBuffersYYMsgReqAckPVPShutDown_PackReqAckPVPShutDown");
static_assert(sizeof(FlatBuffersYYMsgReqAckPVPShutDown_PackReqAckPVPShutDown) == 0x000030, "Wrong size on FlatBuffersYYMsgReqAckPVPShutDown_PackReqAckPVPShutDown");
static_assert(offsetof(FlatBuffersYYMsgReqAckPVPShutDown_PackReqAckPVPShutDown, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgReqAckPVPShutDown_PackReqAckPVPShutDown::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckPVPShutDown_PackReqAckPVPShutDown, InUE4Data) == 0x000008, "Member 'FlatBuffersYYMsgReqAckPVPShutDown_PackReqAckPVPShutDown::InUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckPVPShutDown_PackReqAckPVPShutDown, OutData) == 0x000018, "Member 'FlatBuffersYYMsgReqAckPVPShutDown_PackReqAckPVPShutDown::OutData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckPVPShutDown_PackReqAckPVPShutDown, ReturnValue) == 0x000028, "Member 'FlatBuffersYYMsgReqAckPVPShutDown_PackReqAckPVPShutDown::ReturnValue' has a wrong offset!");

// Function SiliconRising.FlatBuffersYYMsgReqAckPVPShutDown.UnpackReqAckPVPShutDown
// 0x0030 (0x0030 - 0x0000)
struct FlatBuffersYYMsgReqAckPVPShutDown_UnpackReqAckPVPShutDown final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InData;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FYYMsgReqAckPVPShutDown                OutUE4Data;                                        // 0x0018(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlatBuffersYYMsgReqAckPVPShutDown_UnpackReqAckPVPShutDown) == 0x000008, "Wrong alignment on FlatBuffersYYMsgReqAckPVPShutDown_UnpackReqAckPVPShutDown");
static_assert(sizeof(FlatBuffersYYMsgReqAckPVPShutDown_UnpackReqAckPVPShutDown) == 0x000030, "Wrong size on FlatBuffersYYMsgReqAckPVPShutDown_UnpackReqAckPVPShutDown");
static_assert(offsetof(FlatBuffersYYMsgReqAckPVPShutDown_UnpackReqAckPVPShutDown, InWorldContextObject) == 0x000000, "Member 'FlatBuffersYYMsgReqAckPVPShutDown_UnpackReqAckPVPShutDown::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckPVPShutDown_UnpackReqAckPVPShutDown, InData) == 0x000008, "Member 'FlatBuffersYYMsgReqAckPVPShutDown_UnpackReqAckPVPShutDown::InData' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckPVPShutDown_UnpackReqAckPVPShutDown, OutUE4Data) == 0x000018, "Member 'FlatBuffersYYMsgReqAckPVPShutDown_UnpackReqAckPVPShutDown::OutUE4Data' has a wrong offset!");
static_assert(offsetof(FlatBuffersYYMsgReqAckPVPShutDown_UnpackReqAckPVPShutDown, ReturnValue) == 0x000028, "Member 'FlatBuffersYYMsgReqAckPVPShutDown_UnpackReqAckPVPShutDown::ReturnValue' has a wrong offset!");

}

