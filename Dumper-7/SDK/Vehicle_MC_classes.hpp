#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Vehicle_MC

#include "Basic.hpp"

#include "BE_Lv3_ClimberJumpDir_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_Lv4BaseCar_classes.hpp"
#include "Enum_ControllerType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Vehicle_MC.Vehicle_MC_C
// 0x0158 (0x07E8 - 0x0690)
class AVehicle_MC_C final : public ABP_Lv4BaseCar_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_Vehicle_MC_C;                       // 0x0690(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        HoldPoint_R;                                       // 0x0698(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene1;                                            // 0x06A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BoxLeft;                                           // 0x06A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BoxRight;                                          // 0x06B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        WheelControllerCenter;                             // 0x06B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        HoldPoint;                                         // 0x06C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x06C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               effect_wheel_ui_01;                                // 0x06D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       Gps;                                               // 0x06D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       FrontHUD;                                          // 0x06E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Rearview_mirror;                                   // 0x06E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneCaptureComponent2D*               SceneCaptureComponent2D;                           // 0x06F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   glass6;                                            // 0x06F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   glass5;                                            // 0x0700(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   glass4;                                            // 0x0708(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   glass3;                                            // 0x0710(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   glass2;                                            // 0x0718(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   glass1;                                            // 0x0720(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        JumpPointL;                                        // 0x0728(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        JumpPointR;                                        // 0x0730(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        JumpPointB;                                        // 0x0738(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        PlayerAttachPoint;                                 // 0x0740(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         CurRotation;                                       // 0x0748(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BeginZ;                                            // 0x074C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          canTurn;                                           // 0x0750(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_751[0x3];                                      // 0x0751(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayerSteer;                                       // 0x0754(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PLayerGear;                                        // 0x0758(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AIController_0;                                    // 0x075C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_75D[0x3];                                      // 0x075D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AEnemy_Climber_C*                       JumperB;                                           // 0x0760(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ForawaryRoad;                                      // 0x0768(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_769[0x7];                                      // 0x0769(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AEnemy_Climber_C*                       JumperL;                                           // 0x0770(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AEnemy_Climber_C*                       JumperR;                                           // 0x0778(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Degree;                                            // 0x0780(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurnRatio;                                         // 0x0784(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SteeringInputAI;                                   // 0x0788(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AITurnRatio;                                       // 0x078C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeviationDistance;                                 // 0x0790(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeviationAngle;                                    // 0x0794(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldCorrect;                                     // 0x0798(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_799[0x7];                                      // 0x0799(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Lv3_characterBase_C*                Player;                                            // 0x07A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UKRVRMotionController_C*                ControlWheelHand;                                  // 0x07A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StartDriving;                                      // 0x07B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B1[0x7];                                      // 0x07B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        Hit20;                                             // 0x07B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TeleportLoc;                                       // 0x07C0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HitDamge;                                          // 0x07CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HitCooldown;                                       // 0x07D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D4[0x4];                                      // 0x07D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ALv4_PrisonCar_C*                       PrisonCar;                                         // 0x07D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BIntoTunnel;                                       // 0x07E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_Vehicle_MC(int32 EntryPoint);
	void DettachPlayerFromCar(class ABP_Lv3_characterBase_C* Player_0);
	void ConstructTeleport(bool Teleport);
	void CZ();
	void BndEvt__glass6_K2Node_ComponentBoundEvent_10_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void BndEvt__glass5_K2Node_ComponentBoundEvent_9_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void BndEvt__glass4_K2Node_ComponentBoundEvent_8_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void BndEvt__glass3_K2Node_ComponentBoundEvent_7_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void BndEvt__glass2_K2Node_ComponentBoundEvent_6_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ReceiveAnyDamage(float Damage, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void BndEvt__Tunnel_Vehicle_MC_Glass01_Static_K2Node_ComponentBoundEvent_5_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void TurnSteeringWheeByRocker(float PlayerSteer_0);
	void BndEvt__Mesh_K2Node_ComponentBoundEvent_2_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void AttachPlayerToCar(class ABP_Lv3_characterBase_C* Player_0);
	void CustomEvent_0();
	void TeleportCheck(float Delta);
	void AiControlled(float SteeringInput_0);
	void Spawnjump(class AEnemy_Climber_C* Jumper);
	void XYTargetLocation();
	void TurnSteeringWheeByHand(bool Bool);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void JumperToCar(class AEnemy_Climber_C* Jumper, float Delta, EBE_Lv3_ClimberJumpDir NewParam);
	void CheckCanJump(EBE_Lv3_ClimberJumpDir JumpDir, class AEnemy_Climber_C* NPC, bool* Result, EBE_Lv3_ClimberJumpDir* NewParam1);
	void ClearJumper(EBE_Lv3_ClimberJumpDir NewParam);
	void ResetPlayerHMDLocation();
	void SpawnSlidingSound(float PlayerSteer_0);
	void GlassHit(class UPrimitiveComponent* Glass, const struct FHitResult& Hit, class AActor* OtherActor);
	void TeleportPointCheck(const struct FVector& A, struct FVector* Loc);
	void SetHUD();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Vehicle_MC_C">();
	}
	static class AVehicle_MC_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AVehicle_MC_C>();
	}
};
static_assert(alignof(AVehicle_MC_C) == 0x000008, "Wrong alignment on AVehicle_MC_C");
static_assert(sizeof(AVehicle_MC_C) == 0x0007E8, "Wrong size on AVehicle_MC_C");
static_assert(offsetof(AVehicle_MC_C, UberGraphFrame_Vehicle_MC_C) == 0x000690, "Member 'AVehicle_MC_C::UberGraphFrame_Vehicle_MC_C' has a wrong offset!");
static_assert(offsetof(AVehicle_MC_C, HoldPoint_R) == 0x000698, "Member 'AVehicle_MC_C::HoldPoint_R' has a wrong offset!");
static_assert(offsetof(AVehicle_MC_C, Scene1) == 0x0006A0, "Member 'AVehicle_MC_C::Scene1' has a wrong offset!");
static_assert(offsetof(AVehicle_MC_C, BoxLeft) == 0x0006A8, "Member 'AVehicle_MC_C::BoxLeft' has a wrong offset!");
static_assert(offsetof(AVehicle_MC_C, BoxRight) == 0x0006B0, "Member 'AVehicle_MC_C::BoxRight' has a wrong offset!");
static_assert(offsetof(AVehicle_MC_C, WheelControllerCenter) == 0x0006B8, "Member 'AVehicle_MC_C::WheelControllerCenter' has a wrong offset!");
static_assert(offsetof(AVehicle_MC_C, HoldPoint) == 0x0006C0, "Member 'AVehicle_MC_C::HoldPoint' has a wrong offset!");
static_assert(offsetof(AVehicle_MC_C, Scene) == 0x0006C8, "Member 'AVehicle_MC_C::Scene' has a wrong offset!");
static_assert(offsetof(AVehicle_MC_C, effect_wheel_ui_01) == 0x0006D0, "Member 'AVehicle_MC_C::effect_wheel_ui_01' has a wrong offset!");
static_assert(offsetof(AVehicle_MC_C, Gps) == 0x0006D8, "Member 'AVehicle_MC_C::Gps' has a wrong offset!");
static_assert(offsetof(AVehicle_MC_C, FrontHUD) == 0x0006E0, "Member 'AVehicle_MC_C::FrontHUD' has a wrong offset!");
static_assert(offsetof(AVehicle_MC_C, Rearview_mirror) == 0x0006E8, "Member 'AVehicle_MC_C::Rearview_mirror' has a wrong offset!");
static_assert(offsetof(AVehicle_MC_C, SceneCaptureComponent2D) == 0x0006F0, "Member 'AVehicle_MC_C::SceneCaptureComponent2D' has a wrong offset!");
static_assert(offsetof(AVehicle_MC_C, glass6) == 0x0006F8, "Member 'AVehicle_MC_C::glass6' has a wrong offset!");
static_assert(offsetof(AVehicle_MC_C, glass5) == 0x000700, "Member 'AVehicle_MC_C::glass5' has a wrong offset!");
static_assert(offsetof(AVehicle_MC_C, glass4) == 0x000708, "Member 'AVehicle_MC_C::glass4' has a wrong offset!");
static_assert(offsetof(AVehicle_MC_C, glass3) == 0x000710, "Member 'AVehicle_MC_C::glass3' has a wrong offset!");
static_assert(offsetof(AVehicle_MC_C, glass2) == 0x000718, "Member 'AVehicle_MC_C::glass2' has a wrong offset!");
static_assert(offsetof(AVehicle_MC_C, glass1) == 0x000720, "Member 'AVehicle_MC_C::glass1' has a wrong offset!");
static_assert(offsetof(AVehicle_MC_C, JumpPointL) == 0x000728, "Member 'AVehicle_MC_C::JumpPointL' has a wrong offset!");
static_assert(offsetof(AVehicle_MC_C, JumpPointR) == 0x000730, "Member 'AVehicle_MC_C::JumpPointR' has a wrong offset!");
static_assert(offsetof(AVehicle_MC_C, JumpPointB) == 0x000738, "Member 'AVehicle_MC_C::JumpPointB' has a wrong offset!");
static_assert(offsetof(AVehicle_MC_C, PlayerAttachPoint) == 0x000740, "Member 'AVehicle_MC_C::PlayerAttachPoint' has a wrong offset!");
static_assert(offsetof(AVehicle_MC_C, CurRotation) == 0x000748, "Member 'AVehicle_MC_C::CurRotation' has a wrong offset!");
static_assert(offsetof(AVehicle_MC_C, BeginZ) == 0x00074C, "Member 'AVehicle_MC_C::BeginZ' has a wrong offset!");
static_assert(offsetof(AVehicle_MC_C, canTurn) == 0x000750, "Member 'AVehicle_MC_C::canTurn' has a wrong offset!");
static_assert(offsetof(AVehicle_MC_C, PlayerSteer) == 0x000754, "Member 'AVehicle_MC_C::PlayerSteer' has a wrong offset!");
static_assert(offsetof(AVehicle_MC_C, PLayerGear) == 0x000758, "Member 'AVehicle_MC_C::PLayerGear' has a wrong offset!");
static_assert(offsetof(AVehicle_MC_C, AIController_0) == 0x00075C, "Member 'AVehicle_MC_C::AIController_0' has a wrong offset!");
static_assert(offsetof(AVehicle_MC_C, JumperB) == 0x000760, "Member 'AVehicle_MC_C::JumperB' has a wrong offset!");
static_assert(offsetof(AVehicle_MC_C, ForawaryRoad) == 0x000768, "Member 'AVehicle_MC_C::ForawaryRoad' has a wrong offset!");
static_assert(offsetof(AVehicle_MC_C, JumperL) == 0x000770, "Member 'AVehicle_MC_C::JumperL' has a wrong offset!");
static_assert(offsetof(AVehicle_MC_C, JumperR) == 0x000778, "Member 'AVehicle_MC_C::JumperR' has a wrong offset!");
static_assert(offsetof(AVehicle_MC_C, Degree) == 0x000780, "Member 'AVehicle_MC_C::Degree' has a wrong offset!");
static_assert(offsetof(AVehicle_MC_C, TurnRatio) == 0x000784, "Member 'AVehicle_MC_C::TurnRatio' has a wrong offset!");
static_assert(offsetof(AVehicle_MC_C, SteeringInputAI) == 0x000788, "Member 'AVehicle_MC_C::SteeringInputAI' has a wrong offset!");
static_assert(offsetof(AVehicle_MC_C, AITurnRatio) == 0x00078C, "Member 'AVehicle_MC_C::AITurnRatio' has a wrong offset!");
static_assert(offsetof(AVehicle_MC_C, DeviationDistance) == 0x000790, "Member 'AVehicle_MC_C::DeviationDistance' has a wrong offset!");
static_assert(offsetof(AVehicle_MC_C, DeviationAngle) == 0x000794, "Member 'AVehicle_MC_C::DeviationAngle' has a wrong offset!");
static_assert(offsetof(AVehicle_MC_C, ShouldCorrect) == 0x000798, "Member 'AVehicle_MC_C::ShouldCorrect' has a wrong offset!");
static_assert(offsetof(AVehicle_MC_C, Player) == 0x0007A0, "Member 'AVehicle_MC_C::Player' has a wrong offset!");
static_assert(offsetof(AVehicle_MC_C, ControlWheelHand) == 0x0007A8, "Member 'AVehicle_MC_C::ControlWheelHand' has a wrong offset!");
static_assert(offsetof(AVehicle_MC_C, StartDriving) == 0x0007B0, "Member 'AVehicle_MC_C::StartDriving' has a wrong offset!");
static_assert(offsetof(AVehicle_MC_C, Hit20) == 0x0007B8, "Member 'AVehicle_MC_C::Hit20' has a wrong offset!");
static_assert(offsetof(AVehicle_MC_C, TeleportLoc) == 0x0007C0, "Member 'AVehicle_MC_C::TeleportLoc' has a wrong offset!");
static_assert(offsetof(AVehicle_MC_C, HitDamge) == 0x0007CC, "Member 'AVehicle_MC_C::HitDamge' has a wrong offset!");
static_assert(offsetof(AVehicle_MC_C, HitCooldown) == 0x0007D0, "Member 'AVehicle_MC_C::HitCooldown' has a wrong offset!");
static_assert(offsetof(AVehicle_MC_C, PrisonCar) == 0x0007D8, "Member 'AVehicle_MC_C::PrisonCar' has a wrong offset!");
static_assert(offsetof(AVehicle_MC_C, BIntoTunnel) == 0x0007E0, "Member 'AVehicle_MC_C::BIntoTunnel' has a wrong offset!");

}

