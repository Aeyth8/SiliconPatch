#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Lv3_BaseCar

#include "Basic.hpp"

#include "CarState_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SiliconRising_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Lv3_BaseCar.BP_Lv3_BaseCar_C
// 0x02D0 (0x0668 - 0x0398)
class ABP_Lv3_BaseCar_C : public AMer2WheeldVehicle
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0398(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   Taillight_L;                                       // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Taillight_R;                                       // 0x03A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          head;                                              // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        WheelAudio;                                        // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        EngineAudio;                                       // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               ParticleSystem1;                                   // 0x03C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               ParticleSystem;                                    // 0x03D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               marks_R;                                           // 0x03D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               marks_L;                                           // 0x03E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        ArrowBF;                                           // 0x03E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        ArrowR;                                            // 0x03F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        ArrowL;                                            // 0x03F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        ArrowF;                                            // 0x0400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        TurnPoint;                                         // 0x0408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        NPCAttacker2;                                      // 0x0410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        NPCAttacker;                                       // 0x0418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        NPCDriver;                                         // 0x0420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   InCarGear;                                         // 0x0428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   InCarSpeed;                                        // 0x0430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           GearDisplayColor;                                  // 0x0438(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           GearDisplayReverseColor;                           // 0x0448(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InReverseGear;                                     // 0x0458(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_459[0x7];                                      // 0x0459(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Speed_Display_String;                              // 0x0460(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Gear_Display_String;                               // 0x0470(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	struct FVector                                XLocation;                                         // 0x0480(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Ylocation;                                         // 0x048C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BaseXLoc;                                          // 0x0498(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               BaseRotation;                                      // 0x04A4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         SteeringInput;                                     // 0x04B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Throttle;                                          // 0x04B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Speed;                                             // 0x04B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Gear;                                              // 0x04BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECarState                                     CarState;                                          // 0x04C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C1[0x3];                                      // 0x04C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AIMaxTurnAngle;                                    // 0x04C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BeginHit;                                          // 0x04C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C9[0x7];                                      // 0x04C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 Driver;                                            // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_NVSplineMesh_C*                     Road;                                              // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Lv3_BaseCar_C*                      PlayerCar;                                         // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RoadOffsetY;                                       // 0x04E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RoadOffsetX;                                       // 0x04EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Attacker;                                          // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Attacker2;                                         // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               TurnDirection;                                     // 0x0500(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         TurnImpuse;                                        // 0x050C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlyX;                                              // 0x0510(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxHP;                                             // 0x0514(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurHP;                                             // 0x0518(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51C[0x4];                                      // 0x051C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         DriverPawn;                                        // 0x0520(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	class ABP_lv3_ActiveBox_C*                    ActiveBox;                                         // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              TargetOffest;                                      // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              BeginOffest;                                       // 0x0540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ClosestSplineLoc;                                  // 0x0548(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OutOfControl;                                      // 0x0554(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsAvoid;                                           // 0x0555(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_556[0x2];                                      // 0x0556(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AttackerNum;                                       // 0x0558(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LookatPlayerYaw;                                   // 0x055C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurXRelative;                                      // 0x0560(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanHit;                                            // 0x0564(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_565[0x3];                                      // 0x0565(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TeleportCD;                                        // 0x0568(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RightTrace;                                        // 0x056C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FrontTrace;                                        // 0x0578(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurYRelative;                                      // 0x0584(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlyZ;                                              // 0x0588(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_58C[0x4];                                      // 0x058C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 TargetActor;                                       // 0x0590(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   OnDead;                                            // 0x0598(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          HitFromRight;                                      // 0x05A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A9[0x3];                                      // 0x05A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Distance;                                          // 0x05AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BeginXOffset;                                      // 0x05B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B4[0x4];                                      // 0x05B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        HitParticle;                                       // 0x05B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        explodedParticle;                                  // 0x05C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBehaviorTree*                          BehaviorTree;                                      // 0x05C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Engine;                                            // 0x05D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             StartUp;                                           // 0x05D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             BlowUp;                                            // 0x05E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Fire;                                              // 0x05E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USoundBase*>                     NPCHorn;                                           // 0x05F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class USoundBase*>                     NPCSliding;                                        // 0x0600(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class USoundBase*>                     CrashBody;                                         // 0x0610(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class USoundBase*>                     CrashHead;                                         // 0x0620(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                          HeadHit;                                           // 0x0630(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_631[0x7];                                      // 0x0631(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               TaillightMaterial_R;                               // 0x0638(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               TaillightMaterial_L;                               // 0x0640(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DoubleLightCD;                                     // 0x0648(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64C[0x4];                                      // 0x064C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        BlowupHitParticle;                                 // 0x0650(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMer2GameInstance_C*                    GameInstance;                                      // 0x0658(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldWait;                                        // 0x0660(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsShouldWait;                                      // 0x0661(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsWithPrisonCar;                                   // 0x0662(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_Lv3_BaseCar(int32 EntryPoint);
	void CarDead();
	void HitSound(class AActor* HitActor, const struct FVector& Loc);
	void BndEvt__head_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__head_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void StartUpCar();
	void TeleportCheck(float Delta);
	void BndEvt__Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ReceiveAnyDamage(float Damage, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void AiControlled(float SteeringInput_0);
	void XYTargetLocation();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void InpAxisEvt_MoveRight_K2Node_InputAxisEvent_15(float AxisValue);
	void InpAxisEvt_MoveForward_K2Node_InputAxisEvent_6(float AxisValue);
	void UserConstructionScript();
	void Setup_Incar_HUD(bool IsInCar);
	void Update_HUD_Strings();
	void SpawnNPC();
	void LeaveRoad(float X, float Y);
	void InitCar(const struct FVector2D& Pos, class UClass* Driver_0, class UClass* Attack01, class UClass* Attack02, class ABP_lv3_ActiveBox_C* ActiveBox_0, int32 MaxRPM, float InitSpeed);
	void BlowUpCar();
	void XYLocation(class AActor* Target);
	void SetCarLifeSpan(float LifeSpan);
	void SetTargetActor(class AActor* Traget, bool ChangeTargetOffset, const struct FVector2D& TargetOffset);
	void StopCar();
	void MCEngineSound();
	void GetRandomSound(TArray<class USoundBase*>& NewParam, class USoundBase** NewParam1);
	void SpawnHitSound(class AActor* HitActor);
	void CarDistortion();
	void TaillightController(float Delta);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Lv3_BaseCar_C">();
	}
	static class ABP_Lv3_BaseCar_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Lv3_BaseCar_C>();
	}
};
static_assert(alignof(ABP_Lv3_BaseCar_C) == 0x000008, "Wrong alignment on ABP_Lv3_BaseCar_C");
static_assert(sizeof(ABP_Lv3_BaseCar_C) == 0x000668, "Wrong size on ABP_Lv3_BaseCar_C");
static_assert(offsetof(ABP_Lv3_BaseCar_C, UberGraphFrame) == 0x000398, "Member 'ABP_Lv3_BaseCar_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, Taillight_L) == 0x0003A0, "Member 'ABP_Lv3_BaseCar_C::Taillight_L' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, Taillight_R) == 0x0003A8, "Member 'ABP_Lv3_BaseCar_C::Taillight_R' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, head) == 0x0003B0, "Member 'ABP_Lv3_BaseCar_C::head' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, WheelAudio) == 0x0003B8, "Member 'ABP_Lv3_BaseCar_C::WheelAudio' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, EngineAudio) == 0x0003C0, "Member 'ABP_Lv3_BaseCar_C::EngineAudio' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, ParticleSystem1) == 0x0003C8, "Member 'ABP_Lv3_BaseCar_C::ParticleSystem1' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, ParticleSystem) == 0x0003D0, "Member 'ABP_Lv3_BaseCar_C::ParticleSystem' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, marks_R) == 0x0003D8, "Member 'ABP_Lv3_BaseCar_C::marks_R' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, marks_L) == 0x0003E0, "Member 'ABP_Lv3_BaseCar_C::marks_L' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, ArrowBF) == 0x0003E8, "Member 'ABP_Lv3_BaseCar_C::ArrowBF' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, ArrowR) == 0x0003F0, "Member 'ABP_Lv3_BaseCar_C::ArrowR' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, ArrowL) == 0x0003F8, "Member 'ABP_Lv3_BaseCar_C::ArrowL' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, ArrowF) == 0x000400, "Member 'ABP_Lv3_BaseCar_C::ArrowF' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, TurnPoint) == 0x000408, "Member 'ABP_Lv3_BaseCar_C::TurnPoint' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, NPCAttacker2) == 0x000410, "Member 'ABP_Lv3_BaseCar_C::NPCAttacker2' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, NPCAttacker) == 0x000418, "Member 'ABP_Lv3_BaseCar_C::NPCAttacker' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, NPCDriver) == 0x000420, "Member 'ABP_Lv3_BaseCar_C::NPCDriver' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, InCarGear) == 0x000428, "Member 'ABP_Lv3_BaseCar_C::InCarGear' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, InCarSpeed) == 0x000430, "Member 'ABP_Lv3_BaseCar_C::InCarSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, GearDisplayColor) == 0x000438, "Member 'ABP_Lv3_BaseCar_C::GearDisplayColor' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, GearDisplayReverseColor) == 0x000448, "Member 'ABP_Lv3_BaseCar_C::GearDisplayReverseColor' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, InReverseGear) == 0x000458, "Member 'ABP_Lv3_BaseCar_C::InReverseGear' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, Speed_Display_String) == 0x000460, "Member 'ABP_Lv3_BaseCar_C::Speed_Display_String' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, Gear_Display_String) == 0x000470, "Member 'ABP_Lv3_BaseCar_C::Gear_Display_String' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, XLocation) == 0x000480, "Member 'ABP_Lv3_BaseCar_C::XLocation' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, Ylocation) == 0x00048C, "Member 'ABP_Lv3_BaseCar_C::Ylocation' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, BaseXLoc) == 0x000498, "Member 'ABP_Lv3_BaseCar_C::BaseXLoc' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, BaseRotation) == 0x0004A4, "Member 'ABP_Lv3_BaseCar_C::BaseRotation' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, SteeringInput) == 0x0004B0, "Member 'ABP_Lv3_BaseCar_C::SteeringInput' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, Throttle) == 0x0004B4, "Member 'ABP_Lv3_BaseCar_C::Throttle' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, Speed) == 0x0004B8, "Member 'ABP_Lv3_BaseCar_C::Speed' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, Gear) == 0x0004BC, "Member 'ABP_Lv3_BaseCar_C::Gear' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, CarState) == 0x0004C0, "Member 'ABP_Lv3_BaseCar_C::CarState' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, AIMaxTurnAngle) == 0x0004C4, "Member 'ABP_Lv3_BaseCar_C::AIMaxTurnAngle' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, BeginHit) == 0x0004C8, "Member 'ABP_Lv3_BaseCar_C::BeginHit' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, Driver) == 0x0004D0, "Member 'ABP_Lv3_BaseCar_C::Driver' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, Road) == 0x0004D8, "Member 'ABP_Lv3_BaseCar_C::Road' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, PlayerCar) == 0x0004E0, "Member 'ABP_Lv3_BaseCar_C::PlayerCar' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, RoadOffsetY) == 0x0004E8, "Member 'ABP_Lv3_BaseCar_C::RoadOffsetY' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, RoadOffsetX) == 0x0004EC, "Member 'ABP_Lv3_BaseCar_C::RoadOffsetX' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, Attacker) == 0x0004F0, "Member 'ABP_Lv3_BaseCar_C::Attacker' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, Attacker2) == 0x0004F8, "Member 'ABP_Lv3_BaseCar_C::Attacker2' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, TurnDirection) == 0x000500, "Member 'ABP_Lv3_BaseCar_C::TurnDirection' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, TurnImpuse) == 0x00050C, "Member 'ABP_Lv3_BaseCar_C::TurnImpuse' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, FlyX) == 0x000510, "Member 'ABP_Lv3_BaseCar_C::FlyX' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, MaxHP) == 0x000514, "Member 'ABP_Lv3_BaseCar_C::MaxHP' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, CurHP) == 0x000518, "Member 'ABP_Lv3_BaseCar_C::CurHP' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, DriverPawn) == 0x000520, "Member 'ABP_Lv3_BaseCar_C::DriverPawn' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, ActiveBox) == 0x000530, "Member 'ABP_Lv3_BaseCar_C::ActiveBox' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, TargetOffest) == 0x000538, "Member 'ABP_Lv3_BaseCar_C::TargetOffest' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, BeginOffest) == 0x000540, "Member 'ABP_Lv3_BaseCar_C::BeginOffest' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, ClosestSplineLoc) == 0x000548, "Member 'ABP_Lv3_BaseCar_C::ClosestSplineLoc' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, OutOfControl) == 0x000554, "Member 'ABP_Lv3_BaseCar_C::OutOfControl' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, IsAvoid) == 0x000555, "Member 'ABP_Lv3_BaseCar_C::IsAvoid' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, AttackerNum) == 0x000558, "Member 'ABP_Lv3_BaseCar_C::AttackerNum' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, LookatPlayerYaw) == 0x00055C, "Member 'ABP_Lv3_BaseCar_C::LookatPlayerYaw' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, CurXRelative) == 0x000560, "Member 'ABP_Lv3_BaseCar_C::CurXRelative' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, CanHit) == 0x000564, "Member 'ABP_Lv3_BaseCar_C::CanHit' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, TeleportCD) == 0x000568, "Member 'ABP_Lv3_BaseCar_C::TeleportCD' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, RightTrace) == 0x00056C, "Member 'ABP_Lv3_BaseCar_C::RightTrace' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, FrontTrace) == 0x000578, "Member 'ABP_Lv3_BaseCar_C::FrontTrace' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, CurYRelative) == 0x000584, "Member 'ABP_Lv3_BaseCar_C::CurYRelative' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, FlyZ) == 0x000588, "Member 'ABP_Lv3_BaseCar_C::FlyZ' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, TargetActor) == 0x000590, "Member 'ABP_Lv3_BaseCar_C::TargetActor' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, OnDead) == 0x000598, "Member 'ABP_Lv3_BaseCar_C::OnDead' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, HitFromRight) == 0x0005A8, "Member 'ABP_Lv3_BaseCar_C::HitFromRight' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, Distance) == 0x0005AC, "Member 'ABP_Lv3_BaseCar_C::Distance' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, BeginXOffset) == 0x0005B0, "Member 'ABP_Lv3_BaseCar_C::BeginXOffset' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, HitParticle) == 0x0005B8, "Member 'ABP_Lv3_BaseCar_C::HitParticle' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, explodedParticle) == 0x0005C0, "Member 'ABP_Lv3_BaseCar_C::explodedParticle' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, BehaviorTree) == 0x0005C8, "Member 'ABP_Lv3_BaseCar_C::BehaviorTree' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, Engine) == 0x0005D0, "Member 'ABP_Lv3_BaseCar_C::Engine' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, StartUp) == 0x0005D8, "Member 'ABP_Lv3_BaseCar_C::StartUp' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, BlowUp) == 0x0005E0, "Member 'ABP_Lv3_BaseCar_C::BlowUp' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, Fire) == 0x0005E8, "Member 'ABP_Lv3_BaseCar_C::Fire' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, NPCHorn) == 0x0005F0, "Member 'ABP_Lv3_BaseCar_C::NPCHorn' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, NPCSliding) == 0x000600, "Member 'ABP_Lv3_BaseCar_C::NPCSliding' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, CrashBody) == 0x000610, "Member 'ABP_Lv3_BaseCar_C::CrashBody' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, CrashHead) == 0x000620, "Member 'ABP_Lv3_BaseCar_C::CrashHead' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, HeadHit) == 0x000630, "Member 'ABP_Lv3_BaseCar_C::HeadHit' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, TaillightMaterial_R) == 0x000638, "Member 'ABP_Lv3_BaseCar_C::TaillightMaterial_R' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, TaillightMaterial_L) == 0x000640, "Member 'ABP_Lv3_BaseCar_C::TaillightMaterial_L' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, DoubleLightCD) == 0x000648, "Member 'ABP_Lv3_BaseCar_C::DoubleLightCD' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, BlowupHitParticle) == 0x000650, "Member 'ABP_Lv3_BaseCar_C::BlowupHitParticle' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, GameInstance) == 0x000658, "Member 'ABP_Lv3_BaseCar_C::GameInstance' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, ShouldWait) == 0x000660, "Member 'ABP_Lv3_BaseCar_C::ShouldWait' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, IsShouldWait) == 0x000661, "Member 'ABP_Lv3_BaseCar_C::IsShouldWait' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_BaseCar_C, IsWithPrisonCar) == 0x000662, "Member 'ABP_Lv3_BaseCar_C::IsWithPrisonCar' has a wrong offset!");

}

