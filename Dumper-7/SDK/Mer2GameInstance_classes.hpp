#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Mer2GameInstance

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Struct_PlayerData_structs.hpp"
#include "AdvancedSessions_structs.hpp"
#include "scoreType_structs.hpp"
#include "OnlineSubsystemUtils_structs.hpp"
#include "GameState_structs.hpp"
#include "EnumDifficuty_structs.hpp"
#include "Enum_Language_structs.hpp"
#include "SiliconRising_structs.hpp"
#include "SiliconRising_classes.hpp"
#include "Lv4_ScoreType_structs.hpp"
#include "Lv2_Scoretype_structs.hpp"
#include "EnumScoreType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Mer2GameInstance.Mer2GameInstance_C
// 0x0298 (0x0348 - 0x00B0)
class UMer2GameInstance_C final : public UMer2GameInstanceBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FStruct_PlayerData                     PlayerData;                                        // 0x00B8(0x0002)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BA[0x6];                                       // 0x00BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AI_Wave_C*                          CurrentAIWave;                                     // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AI_WaveNEW_C*                       CurrrentAINewWave;                                 // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          lsGoingGame;                                       // 0x00D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBlueprintSessionResult                Session;                                           // 0x00D8(0x00B8)(Edit, BlueprintVisible, DisableEditOnInstance)
	EGameState                                    CurrentGameState;                                  // 0x0190(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_191[0x7];                                      // 0x0191(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MapName;                                           // 0x0198(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMultiPlayer;                                     // 0x01A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A1[0x7];                                      // 0x01A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         IDPool;                                            // 0x01A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	EnumDifficuty                                 CurrentDifficuty;                                  // 0x01B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B9[0x7];                                      // 0x01B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHttpUtilities*                         HttpRequest;                                       // 0x01C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          lsBackMM;                                          // 0x01C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1C9[0x3];                                      // 0x01C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FscoreType                             currentDifficutyData;                              // 0x01CC(0x004C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABPMainMenu_C*                          MultiplayerUI;                                     // 0x0218(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 ServerName;                                        // 0x0220(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FBlueprintSessionResult>        Servers;                                           // 0x0230(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                          IsShowResult;                                      // 0x0240(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_241[0x3];                                      // 0x0241(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Accuracy;                                          // 0x0244(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Progress;                                          // 0x0248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Kill;                                              // 0x024C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Bonus;                                             // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AreaScore;                                         // 0x0254(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   FindSomeGameSession;                               // 0x0258(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         HeadShot;                                          // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BulletScore;                                       // 0x026C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FSessionsSearchSetting>         Filters;                                           // 0x0270(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FSessionPropertyKeyPair>        ExtraSettings;                                     // 0x0280(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	int32                                         StartLevel;                                        // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsParticleEnable;                                  // 0x0294(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_295[0x3];                                      // 0x0295(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StartWave;                                         // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsContinue;                                        // 0x029C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29D[0x3];                                      // 0x029D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SoundLevel;                                        // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_Language                                 MainLanguage;                                      // 0x02A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsUsedCheckPoint;                                  // 0x02A5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsHitHead;                                         // 0x02A6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A7[0x1];                                      // 0x02A7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Frame;                                             // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HitHeadFrame;                                      // 0x02AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         PrintMsg;                                          // 0x02B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                          IsBossStart;                                       // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C1[0x3];                                      // 0x02C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BossAssistCount;                                   // 0x02C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 PrintOtherMsg;                                     // 0x02C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         PrintCount_1P;                                     // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PrintCount_2P;                                     // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Subtitles;                                         // 0x02E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PlanerReflection;                                  // 0x02E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E2[0x2];                                      // 0x02E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Resolution;                                        // 0x02E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MSAA;                                              // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LevelLock;                                         // 0x02EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FLeaderBoardData>               LastLeaderboard;                                   // 0x02F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	int32                                         GiaHitTotal;                                       // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NPCAlertTotal;                                     // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BirdTotal;                                         // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldResetHMD;                                    // 0x030C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_30D[0x3];                                      // 0x030D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   PrintDebugStringOnNet;                             // 0x0310(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         StartElevator;                                     // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LastLevelPoint;                                    // 0x0324(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxLoadingDelay;                                   // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ContinueTotalScore;                                // 0x032C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 PVPServerIP;                                       // 0x0330(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          DominantHandLeft;                                  // 0x0340(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PlayBGM;                                           // 0x0341(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsFreeMoveMode;                                    // 0x0342(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_Mer2GameInstance(int32 EntryPoint);
	void DestroySession();
	void ServerTravel(const class FString& LevelName);
	void OnDestroySession();
	void OnDeadTravel(const class FString& MapName_0);
	void JoinSession(const struct FBlueprintSessionResult& Session_0);
	void FindSession(const class FString& Filter);
	void CreateSession(class FName MapName_0, const class FString& Filter);
	void OnSuccess_71D495664CA468B47AD144903E62CF67();
	void OnFailure_71D495664CA468B47AD144903E62CF67();
	void OnSuccess_186A8A38480B0CDB4BDD3EBE78F57E38();
	void OnFailure_186A8A38480B0CDB4BDD3EBE78F57E38();
	void OnSuccess_B37144804BB00E9A5BC6F9B784641DA1(const TArray<struct FBlueprintSessionResult>& Results);
	void OnFailure_B37144804BB00E9A5BC6F9B784641DA1(const TArray<struct FBlueprintSessionResult>& Results);
	void OnSuccess_E528ACA74FB71494490B019C5DDD2A0C();
	void OnFailure_E528ACA74FB71494490B019C5DDD2A0C();
	void OnSuccess_0BCD089B4D551E4D8C169BBA55CA2CA4();
	void OnFailure_0BCD089B4D551E4D8C169BBA55CA2CA4();
	void SavePlayerData(class ABP_CharacterBase_C* Player);
	void LoadPlayerData(class ABP_CharacterBase_C* Player, bool* Success);
	void lsPhoneDevice(bool* outlsPhone);
	void lsAnroid(bool* blsAndroid);
	void AddBulletScore(EnumScoreType scoreType, class APlayerController* PlayerController);
	void AddBulletShotNum(int32 Num, class APlayerController* PlayerController);
	void GetHitRatio(class APlayerController* PlayerController, float* Ratio);
	void GetBulletScore(class APlayerController* PlayerController, int32* Score);
	void AddPlayerHit(int32 Num, class APlayerController* PlayerController);
	void GetTotalScore(class APlayerController* PlayerController, bool IsPass, int32* Score, int32* CheckPoint);
	void GetHeadShot(class APlayerController* PlayerController, int32* Count);
	void ClearScore(class APlayerController* PlayerController);
	void BackToMM();
	void lsGameINP1(bool* _flag);
	void SetGameState(EGameState _state);
	void GenerateUniqueID(class FString* Result);
	void SaveTutorail();
	void lsNoTutorial(bool* lsSkipTutorail);
	void GetBulletShot(class APlayerController* PlayerController, int32* Count);
	void GetBulletHit(class APlayerController* PlayerController, int32* Count);
	void SetStartTIME();
	void GetKillNum(class APlayerController* PlayerController, int32* Count);
	void GetGameTime(int32* _time);
	void FreshVariables(class APlayerController* Object);
	void SetDeadTime();
	void SetCurrentDifficulty(EnumDifficuty _difficulty);
	void GetTimeScore(int32* _score);
	void GetDodgoScore(class APlayerController* PlayerController, int32* _score);
	void SetCurrentSoundLevel();
	void GetCurrentDodgoScore(bool Is1P, int32* _score);
	void GetCurrentTimeScore(int32* _score);
	void AddFrame();
	void UpdatePrintMsg(EnumScoreType scoreType, const struct FscoreType& ScoreConfig, bool IsLocal);
	void AddLv2Score(ELv2_ScoreType scoreType, class APlayerController* PlayerController);
	void GetLv1CurrentScoreType(struct FscoreType* scoreType);
	void AddLv4Score(ELv4_ScoreType Type);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Mer2GameInstance_C">();
	}
	static class UMer2GameInstance_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMer2GameInstance_C>();
	}
};
static_assert(alignof(UMer2GameInstance_C) == 0x000008, "Wrong alignment on UMer2GameInstance_C");
static_assert(sizeof(UMer2GameInstance_C) == 0x000348, "Wrong size on UMer2GameInstance_C");
static_assert(offsetof(UMer2GameInstance_C, UberGraphFrame) == 0x0000B0, "Member 'UMer2GameInstance_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, PlayerData) == 0x0000B8, "Member 'UMer2GameInstance_C::PlayerData' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, CurrentAIWave) == 0x0000C0, "Member 'UMer2GameInstance_C::CurrentAIWave' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, CurrrentAINewWave) == 0x0000C8, "Member 'UMer2GameInstance_C::CurrrentAINewWave' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, lsGoingGame) == 0x0000D0, "Member 'UMer2GameInstance_C::lsGoingGame' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, Session) == 0x0000D8, "Member 'UMer2GameInstance_C::Session' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, CurrentGameState) == 0x000190, "Member 'UMer2GameInstance_C::CurrentGameState' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, MapName) == 0x000198, "Member 'UMer2GameInstance_C::MapName' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, IsMultiPlayer) == 0x0001A0, "Member 'UMer2GameInstance_C::IsMultiPlayer' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, IDPool) == 0x0001A8, "Member 'UMer2GameInstance_C::IDPool' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, CurrentDifficuty) == 0x0001B8, "Member 'UMer2GameInstance_C::CurrentDifficuty' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, HttpRequest) == 0x0001C0, "Member 'UMer2GameInstance_C::HttpRequest' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, lsBackMM) == 0x0001C8, "Member 'UMer2GameInstance_C::lsBackMM' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, currentDifficutyData) == 0x0001CC, "Member 'UMer2GameInstance_C::currentDifficutyData' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, MultiplayerUI) == 0x000218, "Member 'UMer2GameInstance_C::MultiplayerUI' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, ServerName) == 0x000220, "Member 'UMer2GameInstance_C::ServerName' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, Servers) == 0x000230, "Member 'UMer2GameInstance_C::Servers' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, IsShowResult) == 0x000240, "Member 'UMer2GameInstance_C::IsShowResult' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, Accuracy) == 0x000244, "Member 'UMer2GameInstance_C::Accuracy' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, Progress) == 0x000248, "Member 'UMer2GameInstance_C::Progress' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, Kill) == 0x00024C, "Member 'UMer2GameInstance_C::Kill' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, Bonus) == 0x000250, "Member 'UMer2GameInstance_C::Bonus' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, AreaScore) == 0x000254, "Member 'UMer2GameInstance_C::AreaScore' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, FindSomeGameSession) == 0x000258, "Member 'UMer2GameInstance_C::FindSomeGameSession' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, HeadShot) == 0x000268, "Member 'UMer2GameInstance_C::HeadShot' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, BulletScore) == 0x00026C, "Member 'UMer2GameInstance_C::BulletScore' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, Filters) == 0x000270, "Member 'UMer2GameInstance_C::Filters' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, ExtraSettings) == 0x000280, "Member 'UMer2GameInstance_C::ExtraSettings' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, StartLevel) == 0x000290, "Member 'UMer2GameInstance_C::StartLevel' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, IsParticleEnable) == 0x000294, "Member 'UMer2GameInstance_C::IsParticleEnable' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, StartWave) == 0x000298, "Member 'UMer2GameInstance_C::StartWave' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, IsContinue) == 0x00029C, "Member 'UMer2GameInstance_C::IsContinue' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, SoundLevel) == 0x0002A0, "Member 'UMer2GameInstance_C::SoundLevel' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, MainLanguage) == 0x0002A4, "Member 'UMer2GameInstance_C::MainLanguage' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, IsUsedCheckPoint) == 0x0002A5, "Member 'UMer2GameInstance_C::IsUsedCheckPoint' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, IsHitHead) == 0x0002A6, "Member 'UMer2GameInstance_C::IsHitHead' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, Frame) == 0x0002A8, "Member 'UMer2GameInstance_C::Frame' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, HitHeadFrame) == 0x0002AC, "Member 'UMer2GameInstance_C::HitHeadFrame' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, PrintMsg) == 0x0002B0, "Member 'UMer2GameInstance_C::PrintMsg' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, IsBossStart) == 0x0002C0, "Member 'UMer2GameInstance_C::IsBossStart' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, BossAssistCount) == 0x0002C4, "Member 'UMer2GameInstance_C::BossAssistCount' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, PrintOtherMsg) == 0x0002C8, "Member 'UMer2GameInstance_C::PrintOtherMsg' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, PrintCount_1P) == 0x0002D8, "Member 'UMer2GameInstance_C::PrintCount_1P' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, PrintCount_2P) == 0x0002DC, "Member 'UMer2GameInstance_C::PrintCount_2P' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, Subtitles) == 0x0002E0, "Member 'UMer2GameInstance_C::Subtitles' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, PlanerReflection) == 0x0002E1, "Member 'UMer2GameInstance_C::PlanerReflection' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, Resolution) == 0x0002E4, "Member 'UMer2GameInstance_C::Resolution' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, MSAA) == 0x0002E8, "Member 'UMer2GameInstance_C::MSAA' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, LevelLock) == 0x0002EC, "Member 'UMer2GameInstance_C::LevelLock' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, LastLeaderboard) == 0x0002F0, "Member 'UMer2GameInstance_C::LastLeaderboard' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, GiaHitTotal) == 0x000300, "Member 'UMer2GameInstance_C::GiaHitTotal' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, NPCAlertTotal) == 0x000304, "Member 'UMer2GameInstance_C::NPCAlertTotal' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, BirdTotal) == 0x000308, "Member 'UMer2GameInstance_C::BirdTotal' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, ShouldResetHMD) == 0x00030C, "Member 'UMer2GameInstance_C::ShouldResetHMD' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, PrintDebugStringOnNet) == 0x000310, "Member 'UMer2GameInstance_C::PrintDebugStringOnNet' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, StartElevator) == 0x000320, "Member 'UMer2GameInstance_C::StartElevator' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, LastLevelPoint) == 0x000324, "Member 'UMer2GameInstance_C::LastLevelPoint' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, MaxLoadingDelay) == 0x000328, "Member 'UMer2GameInstance_C::MaxLoadingDelay' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, ContinueTotalScore) == 0x00032C, "Member 'UMer2GameInstance_C::ContinueTotalScore' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, PVPServerIP) == 0x000330, "Member 'UMer2GameInstance_C::PVPServerIP' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, DominantHandLeft) == 0x000340, "Member 'UMer2GameInstance_C::DominantHandLeft' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, PlayBGM) == 0x000341, "Member 'UMer2GameInstance_C::PlayBGM' has a wrong offset!");
static_assert(offsetof(UMer2GameInstance_C, IsFreeMoveMode) == 0x000342, "Member 'UMer2GameInstance_C::IsFreeMoveMode' has a wrong offset!");

}

