#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CharacterBase

#include "Basic.hpp"

#include "BP_CharacterBase_classes.hpp"
#include "BP_CharacterBase_parameters.hpp"


namespace SDK
{

// Function BP_CharacterBase.BP_CharacterBase_C.ExecuteUbergraph_BP_CharacterBase
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CharacterBase_C::ExecuteUbergraph_BP_CharacterBase(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "ExecuteUbergraph_BP_CharacterBase");

	Params::BP_CharacterBase_C_ExecuteUbergraph_BP_CharacterBase Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.OnBonus
// (BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::OnBonus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "OnBonus");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.EnableBonusTips
// (BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::EnableBonusTips()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "EnableBonusTips");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.OnHitAnyBonus
// (BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::OnHitAnyBonus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "OnHitAnyBonus");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.ShowBonusTips
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Show                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CharacterBase_C::ShowBonusTips(bool Show)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "ShowBonusTips");

	Params::BP_CharacterBase_C_ShowBonusTips Parms{};

	Parms.Show = Show;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.ShowPullBoltTips
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Show                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CharacterBase_C::ShowPullBoltTips(bool Show)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "ShowPullBoltTips");

	Params::BP_CharacterBase_C_ShowPullBoltTips Parms{};

	Parms.Show = Show;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.SwitchPlayerFlashLight
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    On                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CharacterBase_C::SwitchPlayerFlashLight(bool On)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "SwitchPlayerFlashLight");

	Params::BP_CharacterBase_C_SwitchPlayerFlashLight Parms{};

	Parms.On = On;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.OnReleaseBothHand
// (BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::OnReleaseBothHand()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "OnReleaseBothHand");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.HighlightClip
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CharacterBase_C::HighlightClip(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "HighlightClip");

	Params::BP_CharacterBase_C_HighlightClip Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.ShowFireTips
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Show                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CharacterBase_C::ShowFireTips(bool Show)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "ShowFireTips");

	Params::BP_CharacterBase_C_ShowFireTips Parms{};

	Parms.Show = Show;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.SetInifinite
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsRightHand                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CharacterBase_C::SetInifinite(bool IsRightHand)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "SetInifinite");

	Params::BP_CharacterBase_C_SetInifinite Parms{};

	Parms.IsRightHand = IsRightHand;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.SendScoreNow
// (BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::SendScoreNow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "SendScoreNow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.CustomEvent_10
// (BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::CustomEvent_10()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "CustomEvent_10");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.ShowToBeContinue
// (BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::ShowToBeContinue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "ShowToBeContinue");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.CustomEvent_9
// (BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::CustomEvent_9()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "CustomEvent_9");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.CustomEvent_10000
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FLeaderBoardData>&        LeaderBoardData                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)

void ABP_CharacterBase_C::CustomEvent_10000(TArray<struct FLeaderBoardData>& LeaderBoardData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "CustomEvent_10000");

	Params::BP_CharacterBase_C_CustomEvent_10000 Parms{};

	Parms.LeaderBoardData = std::move(LeaderBoardData);

	UObject::ProcessEvent(Func, &Parms);

	LeaderBoardData = std::move(Parms.LeaderBoardData);
}


// Function BP_CharacterBase.BP_CharacterBase_C.OnSendScoreRightNow
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPass                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   LevelNumber                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CharacterBase_C::OnSendScoreRightNow(bool IsPass, int32 LevelNumber)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "OnSendScoreRightNow");

	Params::BP_CharacterBase_C_OnSendScoreRightNow Parms{};

	Parms.IsPass = IsPass;
	Parms.LevelNumber = LevelNumber;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.GameOverRightNow
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   LevelNumber                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CharacterBase_C::GameOverRightNow(int32 LevelNumber)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "GameOverRightNow");

	Params::BP_CharacterBase_C_GameOverRightNow Parms{};

	Parms.LevelNumber = LevelNumber;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.GameOverOnlyShowTips
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::GameOverOnlyShowTips()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "GameOverOnlyShowTips");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.CustomEvent_8
// (BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::CustomEvent_8()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "CustomEvent_8");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.SendPlayerID
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    ID                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// const class FString&                    nickName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    IsServer                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CharacterBase_C::SendPlayerID(const class FString& ID, const class FString& nickName, bool IsServer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "SendPlayerID");

	Params::BP_CharacterBase_C_SendPlayerID Parms{};

	Parms.ID = std::move(ID);
	Parms.nickName = std::move(nickName);
	Parms.IsServer = IsServer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.MulticastDebugString
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    inString                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    PrintToScreen                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    PrintToLog                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FLinearColor&              TextColor                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Duration                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsServer                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CharacterBase_C::MulticastDebugString(const class FString& inString, bool PrintToScreen, bool PrintToLog, const struct FLinearColor& TextColor, float Duration, bool IsServer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "MulticastDebugString");

	Params::BP_CharacterBase_C_MulticastDebugString Parms{};

	Parms.inString = std::move(inString);
	Parms.PrintToScreen = PrintToScreen;
	Parms.PrintToLog = PrintToLog;
	Parms.TextColor = std::move(TextColor);
	Parms.Duration = Duration;
	Parms.IsServer = IsServer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.CustomEvent_7
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    inString                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    PrintToScreen                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    PrintToLog                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FLinearColor&              TextColor                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Duration                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CharacterBase_C::CustomEvent_7(const class FString& inString, bool PrintToScreen, bool PrintToLog, const struct FLinearColor& TextColor, float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "CustomEvent_7");

	Params::BP_CharacterBase_C_CustomEvent_7 Parms{};

	Parms.inString = std::move(inString);
	Parms.PrintToScreen = PrintToScreen;
	Parms.PrintToLog = PrintToLog;
	Parms.TextColor = std::move(TextColor);
	Parms.Duration = Duration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.LevelJumpLogic
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPass                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CharacterBase_C::LevelJumpLogic(bool IsPass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "LevelJumpLogic");

	Params::BP_CharacterBase_C_LevelJumpLogic Parms{};

	Parms.IsPass = IsPass;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.ReceivePossessed
// (Event, Public, BlueprintEvent)
// Parameters:
// class AController*                      NewController                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CharacterBase_C::ReceivePossessed(class AController* NewController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "ReceivePossessed");

	Params::BP_CharacterBase_C_ReceivePossessed Parms{};

	Parms.NewController = NewController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.OnSetSkipProgressMulticast
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Progress                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CharacterBase_C::OnSetSkipProgressMulticast(float Progress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "OnSetSkipProgressMulticast");

	Params::BP_CharacterBase_C_OnSetSkipProgressMulticast Parms{};

	Parms.Progress = Progress;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.OnSetSkip
// (BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::OnSetSkip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "OnSetSkip");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.AllFadeOut
// (BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::AllFadeOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "AllFadeOut");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.AllFadeIn
// (BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::AllFadeIn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "AllFadeIn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.OnDoSkip
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::OnDoSkip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "OnDoSkip");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.ReloadLeftRelease
// (BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::ReloadLeftRelease()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "ReloadLeftRelease");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.ReloadLeftPress
// (BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::ReloadLeftPress()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "ReloadLeftPress");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.ReloadRightRelease
// (BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::ReloadRightRelease()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "ReloadRightRelease");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.ReloadRightPress
// (BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::ReloadRightPress()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "ReloadRightPress");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.CustomEvent_6
// (BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::CustomEvent_6()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "CustomEvent_6");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.CustomEvent_5
// (BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::CustomEvent_5()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "CustomEvent_5");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.CustomEvent_4
// (BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::CustomEvent_4()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "CustomEvent_4");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.ShowLeaderboard
// (BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::ShowLeaderboard()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "ShowLeaderboard");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.CustomEvent_1
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FLeaderBoardData>&        LeaderBoardData                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)

void ABP_CharacterBase_C::CustomEvent_1(TArray<struct FLeaderBoardData>& LeaderBoardData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "CustomEvent_1");

	Params::BP_CharacterBase_C_CustomEvent_1 Parms{};

	Parms.LeaderBoardData = std::move(LeaderBoardData);

	UObject::ProcessEvent(Func, &Parms);

	LeaderBoardData = std::move(Parms.LeaderBoardData);
}


// Function BP_CharacterBase.BP_CharacterBase_C.OnShowSkip
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Show                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CharacterBase_C::OnShowSkip(bool Show)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "OnShowSkip");

	Params::BP_CharacterBase_C_OnShowSkip Parms{};

	Parms.Show = Show;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.OnSetSkipProgress
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Progress                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CharacterBase_C::OnSetSkipProgress(float Progress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "OnSetSkipProgress");

	Params::BP_CharacterBase_C_OnSetSkipProgress Parms{};

	Parms.Progress = Progress;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.OnSendScore
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPass                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   LevelNumber                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CharacterBase_C::OnSendScore(bool IsPass, int32 LevelNumber)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "OnSendScore");

	Params::BP_CharacterBase_C_OnSendScore Parms{};

	Parms.IsPass = IsPass;
	Parms.LevelNumber = LevelNumber;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.ApplyTipsLanguage
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::ApplyTipsLanguage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "ApplyTipsLanguage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.ShowTeleportTips
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Show                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CharacterBase_C::ShowTeleportTips(bool Show)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "ShowTeleportTips");

	Params::BP_CharacterBase_C_ShowTeleportTips Parms{};

	Parms.Show = Show;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.ShowReloadTips
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Show                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CharacterBase_C::ShowReloadTips(bool Show)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "ShowReloadTips");

	Params::BP_CharacterBase_C_ShowReloadTips Parms{};

	Parms.Show = Show;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.OnVerifyGameFailed
// (BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::OnVerifyGameFailed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "OnVerifyGameFailed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.SetGameOver
// (BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::SetGameOver()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "SetGameOver");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.OnPlayMotionSound
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPlay                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CharacterBase_C::OnPlayMotionSound(bool IsPlay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "OnPlayMotionSound");

	Params::BP_CharacterBase_C_OnPlayMotionSound Parms{};

	Parms.IsPlay = IsPlay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.SetCheat
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CharacterBase_C::SetCheat(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "SetCheat");

	Params::BP_CharacterBase_C_SetCheat Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.ComputeScore
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Accuracy                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Progress                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Bonus                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Kill                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AreaScore                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   HeadShot                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   BulletScore                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CharacterBase_C::ComputeScore(float Accuracy, float Progress, int32 Bonus, int32 Kill, int32 AreaScore, int32 HeadShot, int32 BulletScore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "ComputeScore");

	Params::BP_CharacterBase_C_ComputeScore Parms{};

	Parms.Accuracy = Accuracy;
	Parms.Progress = Progress;
	Parms.Bonus = Bonus;
	Parms.Kill = Kill;
	Parms.AreaScore = AreaScore;
	Parms.HeadShot = HeadShot;
	Parms.BulletScore = BulletScore;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.CheatOnDead
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::CheatOnDead()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "CheatOnDead");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.ShowDeadPostprocess
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Show                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CharacterBase_C::ShowDeadPostprocess(bool Show)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "ShowDeadPostprocess");

	Params::BP_CharacterBase_C_ShowDeadPostprocess Parms{};

	Parms.Show = Show;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.DeadLogic
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::DeadLogic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "DeadLogic");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.SetMultiplayer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::SetMultiplayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "SetMultiplayer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.OnSetManCenter
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::OnSetManCenter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "OnSetManCenter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.CustomEvent_0
// (BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::CustomEvent_0()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "CustomEvent_0");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.GameOver
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   LevelNumber                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    RightNow                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CharacterBase_C::GameOver(int32 LevelNumber, bool RightNow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "GameOver");

	Params::BP_CharacterBase_C_GameOver Parms{};

	Parms.LevelNumber = LevelNumber;
	Parms.RightNow = RightNow;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.CheckTutorial
// (BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::CheckTutorial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "CheckTutorial");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.ControllerTriggerRightRelease
// (BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::ControllerTriggerRightRelease()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "ControllerTriggerRightRelease");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.ControllerTriggerLeftRelease
// (BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::ControllerTriggerLeftRelease()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "ControllerTriggerLeftRelease");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.ControllerTriggerLeftPress
// (BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::ControllerTriggerLeftPress()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "ControllerTriggerLeftPress");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.ControllerTriggerRightPress
// (BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::ControllerTriggerRightPress()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "ControllerTriggerRightPress");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.ReleaseFireL
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::ReleaseFireL()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "ReleaseFireL");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.FireL
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::FireL()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "FireL");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.CheckPlungerNpc
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           _hitActor                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   _hitPos                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CharacterBase_C::CheckPlungerNpc(class AActor* _hitActor, const struct FVector& _hitPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "CheckPlungerNpc");

	Params::BP_CharacterBase_C_CheckPlungerNpc Parms{};

	Parms._hitActor = _hitActor;
	Parms._hitPos = std::move(_hitPos);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.MissionFail
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    txt                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_CharacterBase_C::MissionFail(const class FString& txt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "MissionFail");

	Params::BP_CharacterBase_C_MissionFail Parms{};

	Parms.txt = std::move(txt);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.BndEvt__BoxHead_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   NormalImpulse                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FHitResult&                Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_CharacterBase_C::BndEvt__BoxHead_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "BndEvt__BoxHead_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature");

	Params::BP_CharacterBase_C_BndEvt__BoxHead_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.OnLevelStart
// (BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::OnLevelStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "OnLevelStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.OnDead
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::OnDead()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "OnDead");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.ReleaseFireR
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::ReleaseFireR()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "ReleaseFireR");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.FireR
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::FireR()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "FireR");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.ReloadL
// (Net, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::ReloadL()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "ReloadL");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.ReloadR
// (Net, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::ReloadR()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "ReloadR");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.OnHealEffect
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::OnHealEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "OnHealEffect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.OnDamgeEffect
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::OnDamgeEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "OnDamgeEffect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.LaserDamge
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Causor                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CharacterBase_C::LaserDamge(float Damage, class AActor* Causor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "LaserDamge");

	Params::BP_CharacterBase_C_LaserDamge Parms{};

	Parms.Damage = Damage;
	Parms.Causor = Causor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.ReceiveRadialDamage
// (BlueprintAuthorityOnly, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// float                                   DamageReceived                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class UDamageType*                DamageType                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Origin                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FHitResult&                HitInfo                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// class AController*                      InstigatedBy                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CharacterBase_C::ReceiveRadialDamage(float DamageReceived, const class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "ReceiveRadialDamage");

	Params::BP_CharacterBase_C_ReceiveRadialDamage Parms{};

	Parms.DamageReceived = DamageReceived;
	Parms.DamageType = DamageType;
	Parms.Origin = std::move(Origin);
	Parms.HitInfo = std::move(HitInfo);
	Parms.InstigatedBy = InstigatedBy;
	Parms.DamageCauser = DamageCauser;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.AddHealth
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AddHP                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CharacterBase_C::AddHealth(float AddHP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "AddHealth");

	Params::BP_CharacterBase_C_AddHealth Parms{};

	Parms.AddHP = AddHP;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.Evt_GetItem
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsRightHand                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// EItemTypes                              ItemType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FTransform&                StartTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// class AActor*                           CurrentItemActor                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           ItemActor                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CharacterBase_C::Evt_GetItem(bool IsRightHand, EItemTypes ItemType, const struct FTransform& StartTransform, class AActor* CurrentItemActor, class AActor* ItemActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "Evt_GetItem");

	Params::BP_CharacterBase_C_Evt_GetItem Parms{};

	Parms.IsRightHand = IsRightHand;
	Parms.ItemType = ItemType;
	Parms.StartTransform = std::move(StartTransform);
	Parms.CurrentItemActor = CurrentItemActor;
	Parms.ItemActor = ItemActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CharacterBase_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "ReceiveTick");

	Params::BP_CharacterBase_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_CharacterBase_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpAxisEvt_MoveRight_K2Node_InputAxisEvent_192
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpAxisEvt_MoveRight_K2Node_InputAxisEvent_192(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpAxisEvt_MoveRight_K2Node_InputAxisEvent_192");

	Params::BP_CharacterBase_C_InpAxisEvt_MoveRight_K2Node_InputAxisEvent_192 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpAxisEvt_MoveForward_K2Node_InputAxisEvent_181
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpAxisEvt_MoveForward_K2Node_InputAxisEvent_181(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpAxisEvt_MoveForward_K2Node_InputAxisEvent_181");

	Params::BP_CharacterBase_C_InpAxisEvt_MoveForward_K2Node_InputAxisEvent_181 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpAxisEvt_LookUp_K2Node_InputAxisEvent_172
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpAxisEvt_LookUp_K2Node_InputAxisEvent_172(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpAxisEvt_LookUp_K2Node_InputAxisEvent_172");

	Params::BP_CharacterBase_C_InpAxisEvt_LookUp_K2Node_InputAxisEvent_172 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpAxisEvt_Turn_K2Node_InputAxisEvent_157
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpAxisEvt_Turn_K2Node_InputAxisEvent_157(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpAxisEvt_Turn_K2Node_InputAxisEvent_157");

	Params::BP_CharacterBase_C_InpAxisEvt_Turn_K2Node_InputAxisEvent_157 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.TeleportRight
// (BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::TeleportRight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "TeleportRight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.TeleportLeft
// (BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::TeleportLeft()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "TeleportLeft");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.StopSwitchCover
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsStop                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CharacterBase_C::StopSwitchCover(bool IsStop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "StopSwitchCover");

	Params::BP_CharacterBase_C_StopSwitchCover Parms{};

	Parms.IsStop = IsStop;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.OnSwitchCover
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsLeft                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CharacterBase_C::OnSwitchCover(bool IsLeft)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "OnSwitchCover");

	Params::BP_CharacterBase_C_OnSwitchCover Parms{};

	Parms.IsLeft = IsLeft;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.TickFootStep
// (BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::TickFootStep()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "TickFootStep");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.RefreshBGM
// (BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::RefreshBGM()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "RefreshBGM");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.BindOnInsertCip
// (BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::BindOnInsertCip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "BindOnInsertCip");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.OnDisableReloadTipc
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AWpn_Clip_C*                      Clip                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsDelay                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CharacterBase_C::OnDisableReloadTipc(class AWpn_Clip_C* Clip, bool IsDelay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "OnDisableReloadTipc");

	Params::BP_CharacterBase_C_OnDisableReloadTipc Parms{};

	Parms.Clip = Clip;
	Parms.IsDelay = IsDelay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.CheatSpawnWeapon
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsRight                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// EItemTypes                              WeaponType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CharacterBase_C::CheatSpawnWeapon(bool IsRight, EItemTypes WeaponType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "CheatSpawnWeapon");

	Params::BP_CharacterBase_C_CheatSpawnWeapon Parms{};

	Parms.IsRight = IsRight;
	Parms.WeaponType = WeaponType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.SkipWave
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::SkipWave()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "SkipWave");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.OnSetUnDead
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::OnSetUnDead()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "OnSetUnDead");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.UpdateClipMesh
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABPWeaponBase_C*                  Weapon                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CharacterBase_C::UpdateClipMesh(class ABPWeaponBase_C* Weapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "UpdateClipMesh");

	Params::BP_CharacterBase_C_UpdateClipMesh Parms{};

	Parms.Weapon = Weapon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.OnInitCurWeapon
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::OnInitCurWeapon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "OnInitCurWeapon");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.OnResumeBGM
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::OnResumeBGM()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "OnResumeBGM");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.OnPauseBGM
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::OnPauseBGM()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "OnPauseBGM");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.OnPlayBossBGM
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::OnPlayBossBGM()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "OnPlayBossBGM");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.OnPlayNormalBGM
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::OnPlayNormalBGM()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "OnPlayNormalBGM");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.OnPlayHelicopterBGM
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::OnPlayHelicopterBGM()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "OnPlayHelicopterBGM");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.OnShowDebugLine
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CharacterBase_C::OnShowDebugLine(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "OnShowDebugLine");

	Params::BP_CharacterBase_C_OnShowDebugLine Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.OnCameraFadeOut
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   _Dt                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CharacterBase_C::OnCameraFadeOut(float _Dt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "OnCameraFadeOut");

	Params::BP_CharacterBase_C_OnCameraFadeOut Parms{};

	Parms._Dt = _Dt;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.OnCameraFadeIn
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   _Dt                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CharacterBase_C::OnCameraFadeIn(float _Dt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "OnCameraFadeIn");

	Params::BP_CharacterBase_C_OnCameraFadeIn Parms{};

	Parms._Dt = _Dt;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.OnHapticEffect
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UHapticFeedbackEffect_Base*       HapticEffect                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EControllerHand                         hand                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Loop                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CharacterBase_C::OnHapticEffect(class UHapticFeedbackEffect_Base* HapticEffect, EControllerHand hand, float Scale, bool Loop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "OnHapticEffect");

	Params::BP_CharacterBase_C_OnHapticEffect Parms{};

	Parms.HapticEffect = HapticEffect;
	Parms.hand = hand;
	Parms.Scale = Scale;
	Parms.Loop = Loop;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.UpdateHandWeaponType
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsRight                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// EItemTypes                              WeaponType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CharacterBase_C::UpdateHandWeaponType(bool IsRight, EItemTypes WeaponType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "UpdateHandWeaponType");

	Params::BP_CharacterBase_C_UpdateHandWeaponType Parms{};

	Parms.IsRight = IsRight;
	Parms.WeaponType = WeaponType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.RightMenuPress
// (BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::RightMenuPress()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "RightMenuPress");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.LeftMenuPress
// (BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::LeftMenuPress()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "LeftMenuPress");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.ShowUI
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsShow                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CharacterBase_C::ShowUI(bool IsShow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "ShowUI");

	Params::BP_CharacterBase_C_ShowUI Parms{};

	Parms.IsShow = IsShow;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.OnIGMTick
// (BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::OnIGMTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "OnIGMTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.OnReleaseIGMKey
// (BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::OnReleaseIGMKey()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "OnReleaseIGMKey");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.OnPressIGMKey
// (BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::OnPressIGMKey()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "OnPressIGMKey");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.OnShowIGM
// (BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::OnShowIGM()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "OnShowIGM");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.CustomEvent_3
// (BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::CustomEvent_3()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "CustomEvent_3");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.CustomEvent_2
// (BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::CustomEvent_2()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "CustomEvent_2");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.CustomEvent
// (BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::CustomEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "CustomEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.Resuse
// (BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::Resuse()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "Resuse");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.UnlockAchievement
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// Enum_Achievement                        Achievement                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CharacterBase_C::UnlockAchievement(Enum_Achievement Achievement)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "UnlockAchievement");

	Params::BP_CharacterBase_C_UnlockAchievement Parms{};

	Parms.Achievement = Achievement;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.OnGripButton_Right_Pressed
// (BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::OnGripButton_Right_Pressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "OnGripButton_Right_Pressed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.OnGripButton_Right_Released
// (BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::OnGripButton_Right_Released()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "OnGripButton_Right_Released");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.OnGripButton_Left_Released
// (BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::OnGripButton_Left_Released()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "OnGripButton_Left_Released");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.OnGripButton_Left_Pressed
// (BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::OnGripButton_Left_Pressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "OnGripButton_Left_Pressed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.OnPullBoltEvent
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABPDefaultHand_C*                 GunHand                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABPDefaultHand_C*                 PullHand                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABPWeaponBase_C*                  HideWeapon                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABPWeaponBase_C*                  GunToPull                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsPull                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    RightHand                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CharacterBase_C::OnPullBoltEvent(class ABPDefaultHand_C* GunHand, class ABPDefaultHand_C* PullHand, class ABPWeaponBase_C* HideWeapon, class ABPWeaponBase_C* GunToPull, bool IsPull, bool RightHand)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "OnPullBoltEvent");

	Params::BP_CharacterBase_C_OnPullBoltEvent Parms{};

	Parms.GunHand = GunHand;
	Parms.PullHand = PullHand;
	Parms.HideWeapon = HideWeapon;
	Parms.GunToPull = GunToPull;
	Parms.IsPull = IsPull;
	Parms.RightHand = RightHand;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.SpawnClipToHold
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsLeft                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CharacterBase_C::SpawnClipToHold(bool IsLeft)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "SpawnClipToHold");

	Params::BP_CharacterBase_C_SpawnClipToHold Parms{};

	Parms.IsLeft = IsLeft;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.BndEvt__Capsule_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CharacterBase_C::BndEvt__Capsule_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "BndEvt__Capsule_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");

	Params::BP_CharacterBase_C_BndEvt__Capsule_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.BndEvt__Capsule_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FHitResult&                SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_CharacterBase_C::BndEvt__Capsule_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "BndEvt__Capsule_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");

	Params::BP_CharacterBase_C_BndEvt__Capsule_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.TickCheck
// (BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::TickCheck()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "TickCheck");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.OnSuccess_093E6CA54970C44F79A315B35CCB2800
// (BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::OnSuccess_093E6CA54970C44F79A315B35CCB2800()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "OnSuccess_093E6CA54970C44F79A315B35CCB2800");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.OnFailure_093E6CA54970C44F79A315B35CCB2800
// (BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::OnFailure_093E6CA54970C44F79A315B35CCB2800()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "OnFailure_093E6CA54970C44F79A315B35CCB2800");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpActEvt_Fire_K2Node_InputActionEvent_0
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpActEvt_Fire_K2Node_InputActionEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpActEvt_Fire_K2Node_InputActionEvent_0");

	Params::BP_CharacterBase_C_InpActEvt_Fire_K2Node_InputActionEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpActEvt_Fire_K2Node_InputActionEvent_1
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpActEvt_Fire_K2Node_InputActionEvent_1(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpActEvt_Fire_K2Node_InputActionEvent_1");

	Params::BP_CharacterBase_C_InpActEvt_Fire_K2Node_InputActionEvent_1 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpActEvt_Decimal_K2Node_InputKeyEvent_0
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpActEvt_Decimal_K2Node_InputKeyEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpActEvt_Decimal_K2Node_InputKeyEvent_0");

	Params::BP_CharacterBase_C_InpActEvt_Decimal_K2Node_InputKeyEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpActEvt_NumPadZero_K2Node_InputKeyEvent_1
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpActEvt_NumPadZero_K2Node_InputKeyEvent_1(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpActEvt_NumPadZero_K2Node_InputKeyEvent_1");

	Params::BP_CharacterBase_C_InpActEvt_NumPadZero_K2Node_InputKeyEvent_1 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpActEvt_NumPadTwo_K2Node_InputKeyEvent_2
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpActEvt_NumPadTwo_K2Node_InputKeyEvent_2(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpActEvt_NumPadTwo_K2Node_InputKeyEvent_2");

	Params::BP_CharacterBase_C_InpActEvt_NumPadTwo_K2Node_InputKeyEvent_2 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpActEvt_NumPadOne_K2Node_InputKeyEvent_3
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpActEvt_NumPadOne_K2Node_InputKeyEvent_3(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpActEvt_NumPadOne_K2Node_InputKeyEvent_3");

	Params::BP_CharacterBase_C_InpActEvt_NumPadOne_K2Node_InputKeyEvent_3 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpActEvt_NumPadNine_K2Node_InputKeyEvent_4
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpActEvt_NumPadNine_K2Node_InputKeyEvent_4(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpActEvt_NumPadNine_K2Node_InputKeyEvent_4");

	Params::BP_CharacterBase_C_InpActEvt_NumPadNine_K2Node_InputKeyEvent_4 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpActEvt_NumPadSeven_K2Node_InputKeyEvent_5
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpActEvt_NumPadSeven_K2Node_InputKeyEvent_5(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpActEvt_NumPadSeven_K2Node_InputKeyEvent_5");

	Params::BP_CharacterBase_C_InpActEvt_NumPadSeven_K2Node_InputKeyEvent_5 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpActEvt_NumPadSix_K2Node_InputKeyEvent_6
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpActEvt_NumPadSix_K2Node_InputKeyEvent_6(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpActEvt_NumPadSix_K2Node_InputKeyEvent_6");

	Params::BP_CharacterBase_C_InpActEvt_NumPadSix_K2Node_InputKeyEvent_6 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpActEvt_NumPadFour_K2Node_InputKeyEvent_7
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpActEvt_NumPadFour_K2Node_InputKeyEvent_7(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpActEvt_NumPadFour_K2Node_InputKeyEvent_7");

	Params::BP_CharacterBase_C_InpActEvt_NumPadFour_K2Node_InputKeyEvent_7 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpActEvt_NumPadFive_K2Node_InputKeyEvent_8
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpActEvt_NumPadFive_K2Node_InputKeyEvent_8(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpActEvt_NumPadFive_K2Node_InputKeyEvent_8");

	Params::BP_CharacterBase_C_InpActEvt_NumPadFive_K2Node_InputKeyEvent_8 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpActEvt_NumPadEight_K2Node_InputKeyEvent_9
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpActEvt_NumPadEight_K2Node_InputKeyEvent_9(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpActEvt_NumPadEight_K2Node_InputKeyEvent_9");

	Params::BP_CharacterBase_C_InpActEvt_NumPadEight_K2Node_InputKeyEvent_9 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpActEvt_Fire_L_K2Node_InputActionEvent_2
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpActEvt_Fire_L_K2Node_InputActionEvent_2(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpActEvt_Fire_L_K2Node_InputActionEvent_2");

	Params::BP_CharacterBase_C_InpActEvt_Fire_L_K2Node_InputActionEvent_2 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpActEvt_Fire_L_K2Node_InputActionEvent_3
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpActEvt_Fire_L_K2Node_InputActionEvent_3(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpActEvt_Fire_L_K2Node_InputActionEvent_3");

	Params::BP_CharacterBase_C_InpActEvt_Fire_L_K2Node_InputActionEvent_3 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpActEvt_Jump_K2Node_InputActionEvent_4
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpActEvt_Jump_K2Node_InputActionEvent_4(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpActEvt_Jump_K2Node_InputActionEvent_4");

	Params::BP_CharacterBase_C_InpActEvt_Jump_K2Node_InputActionEvent_4 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpActEvt_Jump_K2Node_InputActionEvent_5
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpActEvt_Jump_K2Node_InputActionEvent_5(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpActEvt_Jump_K2Node_InputActionEvent_5");

	Params::BP_CharacterBase_C_InpActEvt_Jump_K2Node_InputActionEvent_5 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpActEvt_M_K2Node_InputKeyEvent_10
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpActEvt_M_K2Node_InputKeyEvent_10(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpActEvt_M_K2Node_InputKeyEvent_10");

	Params::BP_CharacterBase_C_InpActEvt_M_K2Node_InputKeyEvent_10 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpActEvt_Seven_K2Node_InputKeyEvent_11
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpActEvt_Seven_K2Node_InputKeyEvent_11(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpActEvt_Seven_K2Node_InputKeyEvent_11");

	Params::BP_CharacterBase_C_InpActEvt_Seven_K2Node_InputKeyEvent_11 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpActEvt_L_K2Node_InputKeyEvent_12
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpActEvt_L_K2Node_InputKeyEvent_12(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpActEvt_L_K2Node_InputKeyEvent_12");

	Params::BP_CharacterBase_C_InpActEvt_L_K2Node_InputKeyEvent_12 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpActEvt_Six_K2Node_InputKeyEvent_13
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpActEvt_Six_K2Node_InputKeyEvent_13(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpActEvt_Six_K2Node_InputKeyEvent_13");

	Params::BP_CharacterBase_C_InpActEvt_Six_K2Node_InputKeyEvent_13 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpActEvt_Five_K2Node_InputKeyEvent_14
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpActEvt_Five_K2Node_InputKeyEvent_14(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpActEvt_Five_K2Node_InputKeyEvent_14");

	Params::BP_CharacterBase_C_InpActEvt_Five_K2Node_InputKeyEvent_14 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpActEvt_Four_K2Node_InputKeyEvent_15
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpActEvt_Four_K2Node_InputKeyEvent_15(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpActEvt_Four_K2Node_InputKeyEvent_15");

	Params::BP_CharacterBase_C_InpActEvt_Four_K2Node_InputKeyEvent_15 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpActEvt_E_K2Node_InputKeyEvent_16
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpActEvt_E_K2Node_InputKeyEvent_16(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpActEvt_E_K2Node_InputKeyEvent_16");

	Params::BP_CharacterBase_C_InpActEvt_E_K2Node_InputKeyEvent_16 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpActEvt_Q_K2Node_InputKeyEvent_17
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpActEvt_Q_K2Node_InputKeyEvent_17(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpActEvt_Q_K2Node_InputKeyEvent_17");

	Params::BP_CharacterBase_C_InpActEvt_Q_K2Node_InputKeyEvent_17 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpActEvt_F12_K2Node_InputKeyEvent_18
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpActEvt_F12_K2Node_InputKeyEvent_18(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpActEvt_F12_K2Node_InputKeyEvent_18");

	Params::BP_CharacterBase_C_InpActEvt_F12_K2Node_InputKeyEvent_18 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpActEvt_C_K2Node_InputKeyEvent_19
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpActEvt_C_K2Node_InputKeyEvent_19(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpActEvt_C_K2Node_InputKeyEvent_19");

	Params::BP_CharacterBase_C_InpActEvt_C_K2Node_InputKeyEvent_19 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpActEvt_V_K2Node_InputKeyEvent_20
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpActEvt_V_K2Node_InputKeyEvent_20(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpActEvt_V_K2Node_InputKeyEvent_20");

	Params::BP_CharacterBase_C_InpActEvt_V_K2Node_InputKeyEvent_20 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpActEvt_RightBracket_K2Node_InputKeyEvent_21
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpActEvt_RightBracket_K2Node_InputKeyEvent_21(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpActEvt_RightBracket_K2Node_InputKeyEvent_21");

	Params::BP_CharacterBase_C_InpActEvt_RightBracket_K2Node_InputKeyEvent_21 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpActEvt_LeftBracket_K2Node_InputKeyEvent_22
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpActEvt_LeftBracket_K2Node_InputKeyEvent_22(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpActEvt_LeftBracket_K2Node_InputKeyEvent_22");

	Params::BP_CharacterBase_C_InpActEvt_LeftBracket_K2Node_InputKeyEvent_22 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpActEvt_NumPadTwo_K2Node_InputKeyEvent_23
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpActEvt_NumPadTwo_K2Node_InputKeyEvent_23(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpActEvt_NumPadTwo_K2Node_InputKeyEvent_23");

	Params::BP_CharacterBase_C_InpActEvt_NumPadTwo_K2Node_InputKeyEvent_23 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpActEvt_NumPadOne_K2Node_InputKeyEvent_24
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpActEvt_NumPadOne_K2Node_InputKeyEvent_24(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpActEvt_NumPadOne_K2Node_InputKeyEvent_24");

	Params::BP_CharacterBase_C_InpActEvt_NumPadOne_K2Node_InputKeyEvent_24 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpActEvt_Three_K2Node_InputKeyEvent_25
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpActEvt_Three_K2Node_InputKeyEvent_25(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpActEvt_Three_K2Node_InputKeyEvent_25");

	Params::BP_CharacterBase_C_InpActEvt_Three_K2Node_InputKeyEvent_25 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpActEvt_Two_K2Node_InputKeyEvent_26
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpActEvt_Two_K2Node_InputKeyEvent_26(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpActEvt_Two_K2Node_InputKeyEvent_26");

	Params::BP_CharacterBase_C_InpActEvt_Two_K2Node_InputKeyEvent_26 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpActEvt_One_K2Node_InputKeyEvent_27
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpActEvt_One_K2Node_InputKeyEvent_27(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpActEvt_One_K2Node_InputKeyEvent_27");

	Params::BP_CharacterBase_C_InpActEvt_One_K2Node_InputKeyEvent_27 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpActEvt_U_K2Node_InputKeyEvent_28
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpActEvt_U_K2Node_InputKeyEvent_28(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpActEvt_U_K2Node_InputKeyEvent_28");

	Params::BP_CharacterBase_C_InpActEvt_U_K2Node_InputKeyEvent_28 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpActEvt_Crouch_K2Node_InputActionEvent_6
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpActEvt_Crouch_K2Node_InputActionEvent_6(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpActEvt_Crouch_K2Node_InputActionEvent_6");

	Params::BP_CharacterBase_C_InpActEvt_Crouch_K2Node_InputActionEvent_6 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpActEvt_Crouch_K2Node_InputActionEvent_7
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpActEvt_Crouch_K2Node_InputActionEvent_7(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpActEvt_Crouch_K2Node_InputActionEvent_7");

	Params::BP_CharacterBase_C_InpActEvt_Crouch_K2Node_InputActionEvent_7 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpActEvt_Tab_K2Node_InputKeyEvent_29
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpActEvt_Tab_K2Node_InputKeyEvent_29(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpActEvt_Tab_K2Node_InputKeyEvent_29");

	Params::BP_CharacterBase_C_InpActEvt_Tab_K2Node_InputKeyEvent_29 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpActEvt_J_K2Node_InputKeyEvent_30
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpActEvt_J_K2Node_InputKeyEvent_30(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpActEvt_J_K2Node_InputKeyEvent_30");

	Params::BP_CharacterBase_C_InpActEvt_J_K2Node_InputKeyEvent_30 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpActEvt_Y_K2Node_InputKeyEvent_31
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpActEvt_Y_K2Node_InputKeyEvent_31(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpActEvt_Y_K2Node_InputKeyEvent_31");

	Params::BP_CharacterBase_C_InpActEvt_Y_K2Node_InputKeyEvent_31 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpActEvt_T_K2Node_InputKeyEvent_32
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpActEvt_T_K2Node_InputKeyEvent_32(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpActEvt_T_K2Node_InputKeyEvent_32");

	Params::BP_CharacterBase_C_InpActEvt_T_K2Node_InputKeyEvent_32 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpActEvt_Delete_K2Node_InputKeyEvent_33
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpActEvt_Delete_K2Node_InputKeyEvent_33(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpActEvt_Delete_K2Node_InputKeyEvent_33");

	Params::BP_CharacterBase_C_InpActEvt_Delete_K2Node_InputKeyEvent_33 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpActEvt_InGameMenu_L_K2Node_InputActionEvent_8
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpActEvt_InGameMenu_L_K2Node_InputActionEvent_8(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpActEvt_InGameMenu_L_K2Node_InputActionEvent_8");

	Params::BP_CharacterBase_C_InpActEvt_InGameMenu_L_K2Node_InputActionEvent_8 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpActEvt_InGameMenu_K2Node_InputActionEvent_9
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpActEvt_InGameMenu_K2Node_InputActionEvent_9(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpActEvt_InGameMenu_K2Node_InputActionEvent_9");

	Params::BP_CharacterBase_C_InpActEvt_InGameMenu_K2Node_InputActionEvent_9 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpActEvt_Reload_L_K2Node_InputActionEvent_10
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpActEvt_Reload_L_K2Node_InputActionEvent_10(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpActEvt_Reload_L_K2Node_InputActionEvent_10");

	Params::BP_CharacterBase_C_InpActEvt_Reload_L_K2Node_InputActionEvent_10 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpActEvt_Reload_L_K2Node_InputActionEvent_11
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpActEvt_Reload_L_K2Node_InputActionEvent_11(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpActEvt_Reload_L_K2Node_InputActionEvent_11");

	Params::BP_CharacterBase_C_InpActEvt_Reload_L_K2Node_InputActionEvent_11 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpActEvt_TeleportRight_K2Node_InputActionEvent_12
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpActEvt_TeleportRight_K2Node_InputActionEvent_12(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpActEvt_TeleportRight_K2Node_InputActionEvent_12");

	Params::BP_CharacterBase_C_InpActEvt_TeleportRight_K2Node_InputActionEvent_12 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpActEvt_TeleportLeft_K2Node_InputActionEvent_13
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpActEvt_TeleportLeft_K2Node_InputActionEvent_13(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpActEvt_TeleportLeft_K2Node_InputActionEvent_13");

	Params::BP_CharacterBase_C_InpActEvt_TeleportLeft_K2Node_InputActionEvent_13 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpActEvt_Reload_K2Node_InputActionEvent_14
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpActEvt_Reload_K2Node_InputActionEvent_14(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpActEvt_Reload_K2Node_InputActionEvent_14");

	Params::BP_CharacterBase_C_InpActEvt_Reload_K2Node_InputActionEvent_14 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpActEvt_Reload_K2Node_InputActionEvent_15
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpActEvt_Reload_K2Node_InputActionEvent_15(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpActEvt_Reload_K2Node_InputActionEvent_15");

	Params::BP_CharacterBase_C_InpActEvt_Reload_K2Node_InputActionEvent_15 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpActEvt_GripButton_R_K2Node_InputActionEvent_16
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpActEvt_GripButton_R_K2Node_InputActionEvent_16(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpActEvt_GripButton_R_K2Node_InputActionEvent_16");

	Params::BP_CharacterBase_C_InpActEvt_GripButton_R_K2Node_InputActionEvent_16 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpActEvt_GripButton_R_K2Node_InputActionEvent_17
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpActEvt_GripButton_R_K2Node_InputActionEvent_17(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpActEvt_GripButton_R_K2Node_InputActionEvent_17");

	Params::BP_CharacterBase_C_InpActEvt_GripButton_R_K2Node_InputActionEvent_17 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpActEvt_GripButton_L_K2Node_InputActionEvent_18
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpActEvt_GripButton_L_K2Node_InputActionEvent_18(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpActEvt_GripButton_L_K2Node_InputActionEvent_18");

	Params::BP_CharacterBase_C_InpActEvt_GripButton_L_K2Node_InputActionEvent_18 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InpActEvt_GripButton_L_K2Node_InputActionEvent_19
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_CharacterBase_C::InpActEvt_GripButton_L_K2Node_InputActionEvent_19(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InpActEvt_GripButton_L_K2Node_InputActionEvent_19");

	Params::BP_CharacterBase_C_InpActEvt_GripButton_L_K2Node_InputActionEvent_19 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.HealEffectTimeline__UpdateFunc
// (BlueprintEvent)

void ABP_CharacterBase_C::HealEffectTimeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "HealEffectTimeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.HealEffectTimeline__FinishedFunc
// (BlueprintEvent)

void ABP_CharacterBase_C::HealEffectTimeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "HealEffectTimeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.DamegEffectTimeline__UpdateFunc
// (BlueprintEvent)

void ABP_CharacterBase_C::DamegEffectTimeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "DamegEffectTimeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.DamegEffectTimeline__FinishedFunc
// (BlueprintEvent)

void ABP_CharacterBase_C::DamegEffectTimeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "DamegEffectTimeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.Timeline_SwitchCover__UpdateFunc
// (BlueprintEvent)

void ABP_CharacterBase_C::Timeline_SwitchCover__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "Timeline_SwitchCover__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.Timeline_SwitchCover__FinishedFunc
// (BlueprintEvent)

void ABP_CharacterBase_C::Timeline_SwitchCover__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "Timeline_SwitchCover__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.PickUpItem
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           self2                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CharacterBase_C::PickUpItem(class AActor* self2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "PickUpItem");

	Params::BP_CharacterBase_C_PickUpItem Parms{};

	Parms.self2 = self2;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InitCurWeapon
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::InitCurWeapon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InitCurWeapon");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.SetHeldItem_R
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           InputPin                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsHideOld                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CharacterBase_C::SetHeldItem_R(class AActor* InputPin, bool IsHideOld)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "SetHeldItem_R");

	Params::BP_CharacterBase_C_SetHeldItem_R Parms{};

	Parms.InputPin = InputPin;
	Parms.IsHideOld = IsHideOld;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.GetAimPos
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector*                         AimPos                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CharacterBase_C::GetAimPos(struct FVector* AimPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "GetAimPos");

	Params::BP_CharacterBase_C_GetAimPos Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AimPos != nullptr)
		*AimPos = std::move(Parms.AimPos);
}


// Function BP_CharacterBase.BP_CharacterBase_C.DetectInteractionItem
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsRightHand                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class ABPWeaponBase_C**                 PointedWeapon                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CharacterBase_C::DetectInteractionItem(bool IsRightHand, class ABPWeaponBase_C** PointedWeapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "DetectInteractionItem");

	Params::BP_CharacterBase_C_DetectInteractionItem Parms{};

	Parms.IsRightHand = IsRightHand;

	UObject::ProcessEvent(Func, &Parms);

	if (PointedWeapon != nullptr)
		*PointedWeapon = Parms.PointedWeapon;
}


// Function BP_CharacterBase.BP_CharacterBase_C.GetWeaponAttachNode_R
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor)

struct FTransform ABP_CharacterBase_C::GetWeaponAttachNode_R()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "GetWeaponAttachNode_R");

	Params::BP_CharacterBase_C_GetWeaponAttachNode_R Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_CharacterBase.BP_CharacterBase_C.IsCurWeaponValid
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABPWeaponBase_C**                 Weapon                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CharacterBase_C::IsCurWeaponValid(class ABPWeaponBase_C** Weapon, bool* IsValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "IsCurWeaponValid");

	Params::BP_CharacterBase_C_IsCurWeaponValid Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Weapon != nullptr)
		*Weapon = Parms.Weapon;

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;
}


// Function BP_CharacterBase.BP_CharacterBase_C.GetSwitchPoint
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsLeft                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<class ABP_PlayerSwitchPoint_C*>* NewParam                                               (Parm, OutParm, ZeroConstructor)

void ABP_CharacterBase_C::GetSwitchPoint(bool IsLeft, TArray<class ABP_PlayerSwitchPoint_C*>* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "GetSwitchPoint");

	Params::BP_CharacterBase_C_GetSwitchPoint Parms{};

	Parms.IsLeft = IsLeft;

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = std::move(Parms.NewParam);
}


// Function BP_CharacterBase.BP_CharacterBase_C.GetClosetPoint
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABP_PlayerSwitchPoint_C*>& PointList                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class ABP_PlayerSwitchPoint_C**         TargetPoint                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CharacterBase_C::GetClosetPoint(TArray<class ABP_PlayerSwitchPoint_C*>& PointList, class ABP_PlayerSwitchPoint_C** TargetPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "GetClosetPoint");

	Params::BP_CharacterBase_C_GetClosetPoint Parms{};

	Parms.PointList = std::move(PointList);

	UObject::ProcessEvent(Func, &Parms);

	PointList = std::move(Parms.PointList);

	if (TargetPoint != nullptr)
		*TargetPoint = Parms.TargetPoint;
}


// Function BP_CharacterBase.BP_CharacterBase_C.SetSwitchCoveToken
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerSwitchPoint_C*          Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CharacterBase_C::SetSwitchCoveToken(class ABP_PlayerSwitchPoint_C* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "SetSwitchCoveToken");

	Params::BP_CharacterBase_C_SetSwitchCoveToken Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.CheckSwitchCD
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   isOK                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CharacterBase_C::CheckSwitchCD(bool* isOK)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "CheckSwitchCD");

	Params::BP_CharacterBase_C_CheckSwitchCD Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (isOK != nullptr)
		*isOK = Parms.isOK;
}


// Function BP_CharacterBase.BP_CharacterBase_C.GetWeaponAttachNode_L
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor)

struct FTransform ABP_CharacterBase_C::GetWeaponAttachNode_L()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "GetWeaponAttachNode_L");

	Params::BP_CharacterBase_C_GetWeaponAttachNode_L Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_CharacterBase.BP_CharacterBase_C.SetHeldItem_L
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           InputPin                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsHideOld                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CharacterBase_C::SetHeldItem_L(class AActor* InputPin, bool IsHideOld)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "SetHeldItem_L");

	Params::BP_CharacterBase_C_SetHeldItem_L Parms{};

	Parms.InputPin = InputPin;
	Parms.IsHideOld = IsHideOld;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.SpawnWeapon
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsRight                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// EItemTypes                              WeaponType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CharacterBase_C::SpawnWeapon(bool IsRight, EItemTypes WeaponType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "SpawnWeapon");

	Params::BP_CharacterBase_C_SpawnWeapon Parms{};

	Parms.IsRight = IsRight;
	Parms.WeaponType = WeaponType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.HealRepCheck
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::HealRepCheck()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "HealRepCheck");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.CheckWeaponBulletCount
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EItemTypes                              DefaultWeapon_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CharacterBase_C::CheckWeaponBulletCount(EItemTypes DefaultWeapon_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "CheckWeaponBulletCount");

	Params::BP_CharacterBase_C_CheckWeaponBulletCount Parms{};

	Parms.DefaultWeapon_0 = DefaultWeapon_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.DropWeapon
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABPWeaponBase_C*                  Weapon                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    DestroyOld                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CharacterBase_C::DropWeapon(class ABPWeaponBase_C* Weapon, bool DestroyOld)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "DropWeapon");

	Params::BP_CharacterBase_C_DropWeapon Parms{};

	Parms.Weapon = Weapon;
	Parms.DestroyOld = DestroyOld;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InitHand
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::InitHand()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InitHand");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.InitDamageSphere
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::InitDamageSphere()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "InitDamageSphere");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.UpdateDamageHp
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::UpdateDamageHp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "UpdateDamageHp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.UpdateHandUI
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::UpdateHandUI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "UpdateHandUI");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.PlayHelicopterBGM
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::PlayHelicopterBGM()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "PlayHelicopterBGM");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.PlayNormalBGM
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::PlayNormalBGM()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "PlayNormalBGM");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.PlayBossBGM
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::PlayBossBGM()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "PlayBossBGM");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.StopBGM
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::StopBGM()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "StopBGM");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.GetCameraTargetPoint
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector*                         Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CharacterBase_C::GetCameraTargetPoint(struct FVector* Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "GetCameraTargetPoint");

	Params::BP_CharacterBase_C_GetCameraTargetPoint Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}


// Function BP_CharacterBase.BP_CharacterBase_C.DodgeCheck
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::DodgeCheck()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "DodgeCheck");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.ChangeMouseInputSence
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   _param                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CharacterBase_C::ChangeMouseInputSence(float _param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "ChangeMouseInputSence");

	Params::BP_CharacterBase_C_ChangeMouseInputSence Parms{};

	Parms._param = _param;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.OnRep_IsUndead
// (BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::OnRep_IsUndead()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "OnRep_IsUndead");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.GetAllPlayerCharacter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class ACharacter*>*              Array                                                  (Parm, OutParm, ZeroConstructor)

void ABP_CharacterBase_C::GetAllPlayerCharacter(TArray<class ACharacter*>* Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "GetAllPlayerCharacter");

	Params::BP_CharacterBase_C_GetAllPlayerCharacter Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Array != nullptr)
		*Array = std::move(Parms.Array);
}


// Function BP_CharacterBase.BP_CharacterBase_C.TeleportTarget
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   _pos                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   _forward                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CharacterBase_C::TeleportTarget(const struct FVector& _pos, const struct FVector& _forward)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "TeleportTarget");

	Params::BP_CharacterBase_C_TeleportTarget Parms{};

	Parms._pos = std::move(_pos);
	Parms._forward = std::move(_forward);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.lsSkipTutorai?
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   lsSkipTutorail                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CharacterBase_C::lsSkipTutorai_(bool* lsSkipTutorail)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "lsSkipTutorai?");

	Params::BP_CharacterBase_C_lsSkipTutorai_ Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (lsSkipTutorail != nullptr)
		*lsSkipTutorail = Parms.lsSkipTutorail;
}


// Function BP_CharacterBase.BP_CharacterBase_C.SetManCenter
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::SetManCenter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "SetManCenter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.ShowGameOverTips
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    _visible                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CharacterBase_C::ShowGameOverTips(bool _visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "ShowGameOverTips");

	Params::BP_CharacterBase_C_ShowGameOverTips Parms{};

	Parms._visible = _visible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.EnableGravity
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bGravityEnabled                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CharacterBase_C::EnableGravity(bool bGravityEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "EnableGravity");

	Params::BP_CharacterBase_C_EnableGravity Parms{};

	Parms.bGravityEnabled = bGravityEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.ShowGameStartTips
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    _visible                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CharacterBase_C::ShowGameStartTips(bool _visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "ShowGameStartTips");

	Params::BP_CharacterBase_C_ShowGameStartTips Parms{};

	Parms._visible = _visible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.OnRep_TargetRotationRep
// (BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::OnRep_TargetRotationRep()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "OnRep_TargetRotationRep");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.OnRep_TargetLoctionRep
// (HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::OnRep_TargetLoctionRep()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "OnRep_TargetLoctionRep");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.CalculateScores
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerController*                Controller_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsPass                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float*                                  Accuracy                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  Progress                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  Bonus                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  Kill                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  TotalScore                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  HeadShot                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  BulletScore                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CharacterBase_C::CalculateScores(class APlayerController* Controller_0, bool IsPass, float* Accuracy, float* Progress, int32* Bonus, int32* Kill, int32* TotalScore, int32* HeadShot, int32* BulletScore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "CalculateScores");

	Params::BP_CharacterBase_C_CalculateScores Parms{};

	Parms.Controller_0 = Controller_0;
	Parms.IsPass = IsPass;

	UObject::ProcessEvent(Func, &Parms);

	if (Accuracy != nullptr)
		*Accuracy = Parms.Accuracy;

	if (Progress != nullptr)
		*Progress = Parms.Progress;

	if (Bonus != nullptr)
		*Bonus = Parms.Bonus;

	if (Kill != nullptr)
		*Kill = Parms.Kill;

	if (TotalScore != nullptr)
		*TotalScore = Parms.TotalScore;

	if (HeadShot != nullptr)
		*HeadShot = Parms.HeadShot;

	if (BulletScore != nullptr)
		*BulletScore = Parms.BulletScore;
}


// Function BP_CharacterBase.BP_CharacterBase_C.CheckCheat
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::CheckCheat()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "CheckCheat");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.ShowGameDeathTips
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CharacterBase_C::ShowGameDeathTips(bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "ShowGameDeathTips");

	Params::BP_CharacterBase_C_ShowGameDeathTips Parms{};

	Parms.Visible = Visible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.UpdateLaser
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWidgetInteractionComponent*      WidgetInteraction_0                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Sickness                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CharacterBase_C::UpdateLaser(class UWidgetInteractionComponent* WidgetInteraction_0, float Sickness)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "UpdateLaser");

	Params::BP_CharacterBase_C_UpdateLaser Parms{};

	Parms.WidgetInteraction_0 = WidgetInteraction_0;
	Parms.Sickness = Sickness;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CharacterBase.BP_CharacterBase_C.ClearCheckPoint
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::ClearCheckPoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "ClearCheckPoint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.OnRep_BPHandL
// (BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::OnRep_BPHandL()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "OnRep_BPHandL");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.OnRep_BPHandR
// (BlueprintCallable, BlueprintEvent)

void ABP_CharacterBase_C::OnRep_BPHandR()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "OnRep_BPHandR");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CharacterBase.BP_CharacterBase_C.CheckTargetSwitchPoint
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerSwitchPoint_C**         TargetPoint                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsWaveChoice                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CharacterBase_C::CheckTargetSwitchPoint(class ABP_PlayerSwitchPoint_C** TargetPoint, bool* IsWaveChoice)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "CheckTargetSwitchPoint");

	Params::BP_CharacterBase_C_CheckTargetSwitchPoint Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TargetPoint != nullptr)
		*TargetPoint = Parms.TargetPoint;

	if (IsWaveChoice != nullptr)
		*IsWaveChoice = Parms.IsWaveChoice;
}


// Function BP_CharacterBase.BP_CharacterBase_C.OpenVideo
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMediaPlayer*                     Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMediaSource*                     MediaSource                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CharacterBase_C::OpenVideo(class UMediaPlayer* Player, class UMediaSource* MediaSource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CharacterBase_C", "OpenVideo");

	Params::BP_CharacterBase_C_OpenVideo Parms{};

	Parms.Player = Player;
	Parms.MediaSource = MediaSource;

	UObject::ProcessEvent(Func, &Parms);
}

}

