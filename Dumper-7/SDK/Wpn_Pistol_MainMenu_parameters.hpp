#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Wpn_Pistol_MainMenu

#include "Basic.hpp"

#include "SiliconRising_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function Wpn_Pistol_MainMenu.Wpn_Pistol_MainMenu_C.ExecuteUbergraph_Wpn_Pistol_MainMenu
// 0x0100 (0x0100 - 0x0000)
struct Wpn_Pistol_MainMenu_C_ExecuteUbergraph_Wpn_Pistol_MainMenu final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsFromRightHand;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Hand;                                 // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue1;     // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue2;     // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult;       // 0x0078(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Wpn_Pistol_MainMenu_C_ExecuteUbergraph_Wpn_Pistol_MainMenu) == 0x000008, "Wrong alignment on Wpn_Pistol_MainMenu_C_ExecuteUbergraph_Wpn_Pistol_MainMenu");
static_assert(sizeof(Wpn_Pistol_MainMenu_C_ExecuteUbergraph_Wpn_Pistol_MainMenu) == 0x000100, "Wrong size on Wpn_Pistol_MainMenu_C_ExecuteUbergraph_Wpn_Pistol_MainMenu");
static_assert(offsetof(Wpn_Pistol_MainMenu_C_ExecuteUbergraph_Wpn_Pistol_MainMenu, EntryPoint) == 0x000000, "Member 'Wpn_Pistol_MainMenu_C_ExecuteUbergraph_Wpn_Pistol_MainMenu::EntryPoint' has a wrong offset!");
static_assert(offsetof(Wpn_Pistol_MainMenu_C_ExecuteUbergraph_Wpn_Pistol_MainMenu, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000004, "Member 'Wpn_Pistol_MainMenu_C_ExecuteUbergraph_Wpn_Pistol_MainMenu::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Pistol_MainMenu_C_ExecuteUbergraph_Wpn_Pistol_MainMenu, CallFunc_HasAuthority_ReturnValue) == 0x000010, "Member 'Wpn_Pistol_MainMenu_C_ExecuteUbergraph_Wpn_Pistol_MainMenu::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Pistol_MainMenu_C_ExecuteUbergraph_Wpn_Pistol_MainMenu, K2Node_Event_DeltaSeconds) == 0x000014, "Member 'Wpn_Pistol_MainMenu_C_ExecuteUbergraph_Wpn_Pistol_MainMenu::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(Wpn_Pistol_MainMenu_C_ExecuteUbergraph_Wpn_Pistol_MainMenu, K2Node_Event_IsFromRightHand) == 0x000018, "Member 'Wpn_Pistol_MainMenu_C_ExecuteUbergraph_Wpn_Pistol_MainMenu::K2Node_Event_IsFromRightHand' has a wrong offset!");
static_assert(offsetof(Wpn_Pistol_MainMenu_C_ExecuteUbergraph_Wpn_Pistol_MainMenu, K2Node_Event_Hand) == 0x000020, "Member 'Wpn_Pistol_MainMenu_C_ExecuteUbergraph_Wpn_Pistol_MainMenu::K2Node_Event_Hand' has a wrong offset!");
static_assert(offsetof(Wpn_Pistol_MainMenu_C_ExecuteUbergraph_Wpn_Pistol_MainMenu, CallFunc_K2_GetComponentLocation_ReturnValue1) == 0x000028, "Member 'Wpn_Pistol_MainMenu_C_ExecuteUbergraph_Wpn_Pistol_MainMenu::CallFunc_K2_GetComponentLocation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(Wpn_Pistol_MainMenu_C_ExecuteUbergraph_Wpn_Pistol_MainMenu, CallFunc_Multiply_IntInt_ReturnValue) == 0x000034, "Member 'Wpn_Pistol_MainMenu_C_ExecuteUbergraph_Wpn_Pistol_MainMenu::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Pistol_MainMenu_C_ExecuteUbergraph_Wpn_Pistol_MainMenu, CallFunc_K2_GetComponentLocation_ReturnValue2) == 0x000038, "Member 'Wpn_Pistol_MainMenu_C_ExecuteUbergraph_Wpn_Pistol_MainMenu::CallFunc_K2_GetComponentLocation_ReturnValue2' has a wrong offset!");
static_assert(offsetof(Wpn_Pistol_MainMenu_C_ExecuteUbergraph_Wpn_Pistol_MainMenu, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000044, "Member 'Wpn_Pistol_MainMenu_C_ExecuteUbergraph_Wpn_Pistol_MainMenu::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Pistol_MainMenu_C_ExecuteUbergraph_Wpn_Pistol_MainMenu, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000050, "Member 'Wpn_Pistol_MainMenu_C_ExecuteUbergraph_Wpn_Pistol_MainMenu::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Pistol_MainMenu_C_ExecuteUbergraph_Wpn_Pistol_MainMenu, CallFunc_Add_VectorVector_ReturnValue) == 0x00005C, "Member 'Wpn_Pistol_MainMenu_C_ExecuteUbergraph_Wpn_Pistol_MainMenu::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Pistol_MainMenu_C_ExecuteUbergraph_Wpn_Pistol_MainMenu, CallFunc_FindLookAtRotation_ReturnValue) == 0x000068, "Member 'Wpn_Pistol_MainMenu_C_ExecuteUbergraph_Wpn_Pistol_MainMenu::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Pistol_MainMenu_C_ExecuteUbergraph_Wpn_Pistol_MainMenu, CallFunc_K2_SetWorldRotation_SweepHitResult) == 0x000078, "Member 'Wpn_Pistol_MainMenu_C_ExecuteUbergraph_Wpn_Pistol_MainMenu::CallFunc_K2_SetWorldRotation_SweepHitResult' has a wrong offset!");

// Function Wpn_Pistol_MainMenu.Wpn_Pistol_MainMenu_C.ChangeAnimState
// 0x0002 (0x0002 - 0x0000)
struct Wpn_Pistol_MainMenu_C_ChangeAnimState final
{
public:
	EWState                                       CurState;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewValue;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wpn_Pistol_MainMenu_C_ChangeAnimState) == 0x000001, "Wrong alignment on Wpn_Pistol_MainMenu_C_ChangeAnimState");
static_assert(sizeof(Wpn_Pistol_MainMenu_C_ChangeAnimState) == 0x000002, "Wrong size on Wpn_Pistol_MainMenu_C_ChangeAnimState");
static_assert(offsetof(Wpn_Pistol_MainMenu_C_ChangeAnimState, CurState) == 0x000000, "Member 'Wpn_Pistol_MainMenu_C_ChangeAnimState::CurState' has a wrong offset!");
static_assert(offsetof(Wpn_Pistol_MainMenu_C_ChangeAnimState, NewValue) == 0x000001, "Member 'Wpn_Pistol_MainMenu_C_ChangeAnimState::NewValue' has a wrong offset!");

// Function Wpn_Pistol_MainMenu.Wpn_Pistol_MainMenu_C.OnLineTriggerPull
// 0x0010 (0x0010 - 0x0000)
struct Wpn_Pistol_MainMenu_C_OnLineTriggerPull final
{
public:
	bool                                          IsFromRightHand;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 hand;                                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wpn_Pistol_MainMenu_C_OnLineTriggerPull) == 0x000008, "Wrong alignment on Wpn_Pistol_MainMenu_C_OnLineTriggerPull");
static_assert(sizeof(Wpn_Pistol_MainMenu_C_OnLineTriggerPull) == 0x000010, "Wrong size on Wpn_Pistol_MainMenu_C_OnLineTriggerPull");
static_assert(offsetof(Wpn_Pistol_MainMenu_C_OnLineTriggerPull, IsFromRightHand) == 0x000000, "Member 'Wpn_Pistol_MainMenu_C_OnLineTriggerPull::IsFromRightHand' has a wrong offset!");
static_assert(offsetof(Wpn_Pistol_MainMenu_C_OnLineTriggerPull, hand) == 0x000008, "Member 'Wpn_Pistol_MainMenu_C_OnLineTriggerPull::hand' has a wrong offset!");

// Function Wpn_Pistol_MainMenu.Wpn_Pistol_MainMenu_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct Wpn_Pistol_MainMenu_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wpn_Pistol_MainMenu_C_ReceiveTick) == 0x000004, "Wrong alignment on Wpn_Pistol_MainMenu_C_ReceiveTick");
static_assert(sizeof(Wpn_Pistol_MainMenu_C_ReceiveTick) == 0x000004, "Wrong size on Wpn_Pistol_MainMenu_C_ReceiveTick");
static_assert(offsetof(Wpn_Pistol_MainMenu_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'Wpn_Pistol_MainMenu_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

}

