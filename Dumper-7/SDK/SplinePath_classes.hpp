#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SplinePath

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass SplinePath.SplinePath_C
// 0x0050 (0x0378 - 0x0328)
class ASplinePath_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0328(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USplineComponent*                       Path;                                              // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<float>                                 SegmentLocations;                                  // 0x0340(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	int32                                         CurrSplineNdx;                                     // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DistanceTillNextShift;                             // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrDistance;                                      // 0x035C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WaitAtPoint;                                       // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WaitTilNextDestination;                            // 0x0364(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_365[0x3];                                      // 0x0365(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             TargetOwer;                                        // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsActive;                                          // 0x0370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_SplinePath(int32 EntryPoint);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void UserConstructionScript();
	void ResetPath();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SplinePath_C">();
	}
	static class ASplinePath_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASplinePath_C>();
	}
};
static_assert(alignof(ASplinePath_C) == 0x000008, "Wrong alignment on ASplinePath_C");
static_assert(sizeof(ASplinePath_C) == 0x000378, "Wrong size on ASplinePath_C");
static_assert(offsetof(ASplinePath_C, UberGraphFrame) == 0x000328, "Member 'ASplinePath_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ASplinePath_C, Path) == 0x000330, "Member 'ASplinePath_C::Path' has a wrong offset!");
static_assert(offsetof(ASplinePath_C, DefaultSceneRoot) == 0x000338, "Member 'ASplinePath_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ASplinePath_C, SegmentLocations) == 0x000340, "Member 'ASplinePath_C::SegmentLocations' has a wrong offset!");
static_assert(offsetof(ASplinePath_C, CurrSplineNdx) == 0x000350, "Member 'ASplinePath_C::CurrSplineNdx' has a wrong offset!");
static_assert(offsetof(ASplinePath_C, Speed) == 0x000354, "Member 'ASplinePath_C::Speed' has a wrong offset!");
static_assert(offsetof(ASplinePath_C, DistanceTillNextShift) == 0x000358, "Member 'ASplinePath_C::DistanceTillNextShift' has a wrong offset!");
static_assert(offsetof(ASplinePath_C, CurrDistance) == 0x00035C, "Member 'ASplinePath_C::CurrDistance' has a wrong offset!");
static_assert(offsetof(ASplinePath_C, WaitAtPoint) == 0x000360, "Member 'ASplinePath_C::WaitAtPoint' has a wrong offset!");
static_assert(offsetof(ASplinePath_C, WaitTilNextDestination) == 0x000364, "Member 'ASplinePath_C::WaitTilNextDestination' has a wrong offset!");
static_assert(offsetof(ASplinePath_C, TargetOwer) == 0x000368, "Member 'ASplinePath_C::TargetOwer' has a wrong offset!");
static_assert(offsetof(ASplinePath_C, IsActive) == 0x000370, "Member 'ASplinePath_C::IsActive' has a wrong offset!");

}

