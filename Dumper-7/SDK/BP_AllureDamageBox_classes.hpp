#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AllureDamageBox

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AllureDamageBox.BP_AllureDamageBox_C
// 0x0058 (0x0380 - 0x0328)
class ABP_AllureDamageBox_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0328(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          Box;                                               // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class ACharacter*>                     CharSet;                                           // 0x0340(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	float                                         Damage;                                            // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DecayFactor;                                       // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        VFX;                                               // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          lsOneTimeDamage_;                                  // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_361[0x7];                                      // 0x0361(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_DamageTriggerBox_C*                 TriggerBox;                                        // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         UseCount;                                          // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          lsContinuity_;                                     // 0x0374(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          lsdamaging_;                                       // 0x0375(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_376[0x2];                                      // 0x0376(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         dt;                                                // 0x0378(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AllureDamageBox(int32 EntryPoint);
	void OneTimeDamge(const struct FHitResult& _hit);
	void DamgeUse(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AllureDamageBox_C">();
	}
	static class ABP_AllureDamageBox_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AllureDamageBox_C>();
	}
};
static_assert(alignof(ABP_AllureDamageBox_C) == 0x000008, "Wrong alignment on ABP_AllureDamageBox_C");
static_assert(sizeof(ABP_AllureDamageBox_C) == 0x000380, "Wrong size on ABP_AllureDamageBox_C");
static_assert(offsetof(ABP_AllureDamageBox_C, UberGraphFrame) == 0x000328, "Member 'ABP_AllureDamageBox_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_AllureDamageBox_C, Box) == 0x000330, "Member 'ABP_AllureDamageBox_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_AllureDamageBox_C, DefaultSceneRoot) == 0x000338, "Member 'ABP_AllureDamageBox_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_AllureDamageBox_C, CharSet) == 0x000340, "Member 'ABP_AllureDamageBox_C::CharSet' has a wrong offset!");
static_assert(offsetof(ABP_AllureDamageBox_C, Damage) == 0x000350, "Member 'ABP_AllureDamageBox_C::Damage' has a wrong offset!");
static_assert(offsetof(ABP_AllureDamageBox_C, DecayFactor) == 0x000354, "Member 'ABP_AllureDamageBox_C::DecayFactor' has a wrong offset!");
static_assert(offsetof(ABP_AllureDamageBox_C, VFX) == 0x000358, "Member 'ABP_AllureDamageBox_C::VFX' has a wrong offset!");
static_assert(offsetof(ABP_AllureDamageBox_C, lsOneTimeDamage_) == 0x000360, "Member 'ABP_AllureDamageBox_C::lsOneTimeDamage_' has a wrong offset!");
static_assert(offsetof(ABP_AllureDamageBox_C, TriggerBox) == 0x000368, "Member 'ABP_AllureDamageBox_C::TriggerBox' has a wrong offset!");
static_assert(offsetof(ABP_AllureDamageBox_C, UseCount) == 0x000370, "Member 'ABP_AllureDamageBox_C::UseCount' has a wrong offset!");
static_assert(offsetof(ABP_AllureDamageBox_C, lsContinuity_) == 0x000374, "Member 'ABP_AllureDamageBox_C::lsContinuity_' has a wrong offset!");
static_assert(offsetof(ABP_AllureDamageBox_C, lsdamaging_) == 0x000375, "Member 'ABP_AllureDamageBox_C::lsdamaging_' has a wrong offset!");
static_assert(offsetof(ABP_AllureDamageBox_C, dt) == 0x000378, "Member 'ABP_AllureDamageBox_C::dt' has a wrong offset!");

}

