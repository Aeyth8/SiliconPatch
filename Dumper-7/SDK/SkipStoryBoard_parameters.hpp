#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SkipStoryBoard

#include "Basic.hpp"

#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function SkipStoryBoard.SkipStoryBoard_C.ExecuteUbergraph_SkipStoryBoard
// 0x00A0 (0x00A0 - 0x0000)
struct SkipStoryBoard_C_ExecuteUbergraph_SkipStoryBoard final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Temp_string_Variable;                              // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x001C(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetLanguageText_Found;                    // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetLanguageText_Lan_Text;                 // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetLanguageText_FontSize;                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_Select_Default;                             // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0088(0x0018)()
};
static_assert(alignof(SkipStoryBoard_C_ExecuteUbergraph_SkipStoryBoard) == 0x000008, "Wrong alignment on SkipStoryBoard_C_ExecuteUbergraph_SkipStoryBoard");
static_assert(sizeof(SkipStoryBoard_C_ExecuteUbergraph_SkipStoryBoard) == 0x0000A0, "Wrong size on SkipStoryBoard_C_ExecuteUbergraph_SkipStoryBoard");
static_assert(offsetof(SkipStoryBoard_C_ExecuteUbergraph_SkipStoryBoard, EntryPoint) == 0x000000, "Member 'SkipStoryBoard_C_ExecuteUbergraph_SkipStoryBoard::EntryPoint' has a wrong offset!");
static_assert(offsetof(SkipStoryBoard_C_ExecuteUbergraph_SkipStoryBoard, Temp_bool_Variable) == 0x000004, "Member 'SkipStoryBoard_C_ExecuteUbergraph_SkipStoryBoard::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(SkipStoryBoard_C_ExecuteUbergraph_SkipStoryBoard, Temp_string_Variable) == 0x000008, "Member 'SkipStoryBoard_C_ExecuteUbergraph_SkipStoryBoard::Temp_string_Variable' has a wrong offset!");
static_assert(offsetof(SkipStoryBoard_C_ExecuteUbergraph_SkipStoryBoard, K2Node_Event_IsDesignTime) == 0x000018, "Member 'SkipStoryBoard_C_ExecuteUbergraph_SkipStoryBoard::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(SkipStoryBoard_C_ExecuteUbergraph_SkipStoryBoard, K2Node_Event_MyGeometry) == 0x00001C, "Member 'SkipStoryBoard_C_ExecuteUbergraph_SkipStoryBoard::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(SkipStoryBoard_C_ExecuteUbergraph_SkipStoryBoard, K2Node_Event_InDeltaTime) == 0x000054, "Member 'SkipStoryBoard_C_ExecuteUbergraph_SkipStoryBoard::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(SkipStoryBoard_C_ExecuteUbergraph_SkipStoryBoard, CallFunc_GetLanguageText_Found) == 0x000058, "Member 'SkipStoryBoard_C_ExecuteUbergraph_SkipStoryBoard::CallFunc_GetLanguageText_Found' has a wrong offset!");
static_assert(offsetof(SkipStoryBoard_C_ExecuteUbergraph_SkipStoryBoard, CallFunc_GetLanguageText_Lan_Text) == 0x000060, "Member 'SkipStoryBoard_C_ExecuteUbergraph_SkipStoryBoard::CallFunc_GetLanguageText_Lan_Text' has a wrong offset!");
static_assert(offsetof(SkipStoryBoard_C_ExecuteUbergraph_SkipStoryBoard, CallFunc_GetLanguageText_FontSize) == 0x000070, "Member 'SkipStoryBoard_C_ExecuteUbergraph_SkipStoryBoard::CallFunc_GetLanguageText_FontSize' has a wrong offset!");
static_assert(offsetof(SkipStoryBoard_C_ExecuteUbergraph_SkipStoryBoard, K2Node_Select_Default) == 0x000078, "Member 'SkipStoryBoard_C_ExecuteUbergraph_SkipStoryBoard::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(SkipStoryBoard_C_ExecuteUbergraph_SkipStoryBoard, CallFunc_Conv_StringToText_ReturnValue) == 0x000088, "Member 'SkipStoryBoard_C_ExecuteUbergraph_SkipStoryBoard::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");

// Function SkipStoryBoard.SkipStoryBoard_C.Tick
// 0x003C (0x003C - 0x0000)
struct SkipStoryBoard_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SkipStoryBoard_C_Tick) == 0x000004, "Wrong alignment on SkipStoryBoard_C_Tick");
static_assert(sizeof(SkipStoryBoard_C_Tick) == 0x00003C, "Wrong size on SkipStoryBoard_C_Tick");
static_assert(offsetof(SkipStoryBoard_C_Tick, MyGeometry) == 0x000000, "Member 'SkipStoryBoard_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(SkipStoryBoard_C_Tick, InDeltaTime) == 0x000038, "Member 'SkipStoryBoard_C_Tick::InDeltaTime' has a wrong offset!");

// Function SkipStoryBoard.SkipStoryBoard_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct SkipStoryBoard_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(SkipStoryBoard_C_PreConstruct) == 0x000001, "Wrong alignment on SkipStoryBoard_C_PreConstruct");
static_assert(sizeof(SkipStoryBoard_C_PreConstruct) == 0x000001, "Wrong size on SkipStoryBoard_C_PreConstruct");
static_assert(offsetof(SkipStoryBoard_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'SkipStoryBoard_C_PreConstruct::IsDesignTime' has a wrong offset!");

}

