#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BlueMan_VehicleAI

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "PhysXVehicles_classes.hpp"
#include "BlueMan_VehicleAI_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Class BlueMan_VehicleAI.RollDetectionModule
// 0x0020 (0x0110 - 0x00F0)
class URollDetectionModule final : public UActorComponent
{
public:
	class AActor*                                 ActorReference;                                    // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        SceneComponent;                                    // 0x00F8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceLength;                                       // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Teleport_Z_Offset;                                 // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DebugLine;                                         // 0x0108(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RollDetectionModule">();
	}
	static class URollDetectionModule* GetDefaultObj()
	{
		return GetDefaultObjImpl<URollDetectionModule>();
	}
};
static_assert(alignof(URollDetectionModule) == 0x000008, "Wrong alignment on URollDetectionModule");
static_assert(sizeof(URollDetectionModule) == 0x000110, "Wrong size on URollDetectionModule");
static_assert(offsetof(URollDetectionModule, ActorReference) == 0x0000F0, "Member 'URollDetectionModule::ActorReference' has a wrong offset!");
static_assert(offsetof(URollDetectionModule, SceneComponent) == 0x0000F8, "Member 'URollDetectionModule::SceneComponent' has a wrong offset!");
static_assert(offsetof(URollDetectionModule, TraceLength) == 0x000100, "Member 'URollDetectionModule::TraceLength' has a wrong offset!");
static_assert(offsetof(URollDetectionModule, Teleport_Z_Offset) == 0x000104, "Member 'URollDetectionModule::Teleport_Z_Offset' has a wrong offset!");
static_assert(offsetof(URollDetectionModule, DebugLine) == 0x000108, "Member 'URollDetectionModule::DebugLine' has a wrong offset!");

// Class BlueMan_VehicleAI.AdvancedPathfindingController
// 0x0050 (0x0378 - 0x0328)
class AAdvancedPathfindingController final : public AActor
{
public:
	TArray<class AActor*>                         Waypoints_Input;                                   // 0x0328(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MaxNeighboursToCheck_Input;                        // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             CollisionChannel_Input;                            // 0x033C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Debug_Input;                                       // 0x033D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33E[0x2];                                      // 0x033E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CheckRate;                                         // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_344[0x34];                                     // 0x0344(0x0034)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SearchForNewVehicles();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AdvancedPathfindingController">();
	}
	static class AAdvancedPathfindingController* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAdvancedPathfindingController>();
	}
};
static_assert(alignof(AAdvancedPathfindingController) == 0x000008, "Wrong alignment on AAdvancedPathfindingController");
static_assert(sizeof(AAdvancedPathfindingController) == 0x000378, "Wrong size on AAdvancedPathfindingController");
static_assert(offsetof(AAdvancedPathfindingController, Waypoints_Input) == 0x000328, "Member 'AAdvancedPathfindingController::Waypoints_Input' has a wrong offset!");
static_assert(offsetof(AAdvancedPathfindingController, MaxNeighboursToCheck_Input) == 0x000338, "Member 'AAdvancedPathfindingController::MaxNeighboursToCheck_Input' has a wrong offset!");
static_assert(offsetof(AAdvancedPathfindingController, CollisionChannel_Input) == 0x00033C, "Member 'AAdvancedPathfindingController::CollisionChannel_Input' has a wrong offset!");
static_assert(offsetof(AAdvancedPathfindingController, Debug_Input) == 0x00033D, "Member 'AAdvancedPathfindingController::Debug_Input' has a wrong offset!");
static_assert(offsetof(AAdvancedPathfindingController, CheckRate) == 0x000340, "Member 'AAdvancedPathfindingController::CheckRate' has a wrong offset!");

// Class BlueMan_VehicleAI.AdvancedPathfindingVehicle
// 0x0008 (0x03A0 - 0x0398)
class AAdvancedPathfindingVehicle final : public AWheeledVehicle
{
public:
	class UVehicleAI_AdvancedPathfinding*         VehicleAI_AdvancedPathfinding;                     // 0x0398(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AdvancedPathfindingVehicle">();
	}
	static class AAdvancedPathfindingVehicle* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAdvancedPathfindingVehicle>();
	}
};
static_assert(alignof(AAdvancedPathfindingVehicle) == 0x000008, "Wrong alignment on AAdvancedPathfindingVehicle");
static_assert(sizeof(AAdvancedPathfindingVehicle) == 0x0003A0, "Wrong size on AAdvancedPathfindingVehicle");
static_assert(offsetof(AAdvancedPathfindingVehicle, VehicleAI_AdvancedPathfinding) == 0x000398, "Member 'AAdvancedPathfindingVehicle::VehicleAI_AdvancedPathfinding' has a wrong offset!");

// Class BlueMan_VehicleAI.PathfindingWaypoint
// 0x0008 (0x0330 - 0x0328)
class APathfindingWaypoint final : public AActor
{
public:
	float                                         CorrectionHightInMeters;                           // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Debug;                                             // 0x032C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32D[0x3];                                      // 0x032D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PathfindingWaypoint">();
	}
	static class APathfindingWaypoint* GetDefaultObj()
	{
		return GetDefaultObjImpl<APathfindingWaypoint>();
	}
};
static_assert(alignof(APathfindingWaypoint) == 0x000008, "Wrong alignment on APathfindingWaypoint");
static_assert(sizeof(APathfindingWaypoint) == 0x000330, "Wrong size on APathfindingWaypoint");
static_assert(offsetof(APathfindingWaypoint, CorrectionHightInMeters) == 0x000328, "Member 'APathfindingWaypoint::CorrectionHightInMeters' has a wrong offset!");
static_assert(offsetof(APathfindingWaypoint, Debug) == 0x00032C, "Member 'APathfindingWaypoint::Debug' has a wrong offset!");

// Class BlueMan_VehicleAI.RacingAI_RacingLineWaypoint
// 0x0000 (0x0328 - 0x0328)
class ARacingAI_RacingLineWaypoint final : public AActor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RacingAI_RacingLineWaypoint">();
	}
	static class ARacingAI_RacingLineWaypoint* GetDefaultObj()
	{
		return GetDefaultObjImpl<ARacingAI_RacingLineWaypoint>();
	}
};
static_assert(alignof(ARacingAI_RacingLineWaypoint) == 0x000008, "Wrong alignment on ARacingAI_RacingLineWaypoint");
static_assert(sizeof(ARacingAI_RacingLineWaypoint) == 0x000328, "Wrong size on ARacingAI_RacingLineWaypoint");

// Class BlueMan_VehicleAI.RacingAI_Waypoint
// 0x0038 (0x0360 - 0x0328)
class ARacingAI_Waypoint final : public AActor
{
public:
	class ARacingAI_Waypoint*                     NextWaypoint;                                      // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DebugLine;                                         // 0x0330(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DebugInEditor;                                     // 0x0331(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_332[0x2];                                      // 0x0332(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DistancePerWaypoint;                               // 0x0334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ARacingAI_RacingLineWaypoint*>   RacingLines;                                       // 0x0338(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          TryToSlowDownToMinimumSpeed;                       // 0x0348(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_349[0x3];                                      // 0x0349(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinimumSpeed;                                      // 0x034C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_350[0x10];                                     // 0x0350(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RacingAI_Waypoint">();
	}
	static class ARacingAI_Waypoint* GetDefaultObj()
	{
		return GetDefaultObjImpl<ARacingAI_Waypoint>();
	}
};
static_assert(alignof(ARacingAI_Waypoint) == 0x000008, "Wrong alignment on ARacingAI_Waypoint");
static_assert(sizeof(ARacingAI_Waypoint) == 0x000360, "Wrong size on ARacingAI_Waypoint");
static_assert(offsetof(ARacingAI_Waypoint, NextWaypoint) == 0x000328, "Member 'ARacingAI_Waypoint::NextWaypoint' has a wrong offset!");
static_assert(offsetof(ARacingAI_Waypoint, DebugLine) == 0x000330, "Member 'ARacingAI_Waypoint::DebugLine' has a wrong offset!");
static_assert(offsetof(ARacingAI_Waypoint, DebugInEditor) == 0x000331, "Member 'ARacingAI_Waypoint::DebugInEditor' has a wrong offset!");
static_assert(offsetof(ARacingAI_Waypoint, DistancePerWaypoint) == 0x000334, "Member 'ARacingAI_Waypoint::DistancePerWaypoint' has a wrong offset!");
static_assert(offsetof(ARacingAI_Waypoint, RacingLines) == 0x000338, "Member 'ARacingAI_Waypoint::RacingLines' has a wrong offset!");
static_assert(offsetof(ARacingAI_Waypoint, TryToSlowDownToMinimumSpeed) == 0x000348, "Member 'ARacingAI_Waypoint::TryToSlowDownToMinimumSpeed' has a wrong offset!");
static_assert(offsetof(ARacingAI_Waypoint, MinimumSpeed) == 0x00034C, "Member 'ARacingAI_Waypoint::MinimumSpeed' has a wrong offset!");

// Class BlueMan_VehicleAI.VehicleAI_AdvancedPathfinding
// 0x01F8 (0x02E8 - 0x00F0)
class UVehicleAI_AdvancedPathfinding final : public UActorComponent
{
public:
	UMulticastDelegateProperty_                   OnGenerateStaticWaypointConnections;               // 0x00F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnPathfindingStarted;                              // 0x0100(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnPathFound;                                       // 0x0110(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   InReverse;                                         // 0x0120(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnDestinationReached;                              // 0x0130(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_140[0x8];                                      // 0x0140(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class AWheeledVehicle*                        WheeledVehicleReference;                           // 0x0148(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UArrowComponent*                        LeftSensor;                                        // 0x0150(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UArrowComponent*                        CentralSensor;                                     // 0x0158(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UArrowComponent*                        RightSensor;                                       // 0x0160(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0168(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         Waypoints;                                         // 0x0170(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class AActor*                                 PathfindingTarget;                                 // 0x0180(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Debug;                                             // 0x0188(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCollisionSensorsDebug;                            // 0x0189(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PathfinidngCalls;                                  // 0x018A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DebugLine;                                         // 0x018B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PathfindingTargetDebug;                            // 0x018C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          VisualizePathfindingNodes;                         // 0x018D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             CollisionChannel;                                  // 0x018E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             SensorCollisionChannel;                            // 0x018F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RealtimeUpdates;                                   // 0x0190(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PrecomputeStaticWaypointConnections;               // 0x0191(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CollisionChecksWithPrecomputedConnection;          // 0x0192(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InstantRealtimeSearch;                             // 0x0193(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteeringReactionSensitivity                  SteeringSensitivity;                               // 0x0194(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_195[0x3];                                      // 0x0195(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UpdateRate;                                        // 0x0198(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReverseCheckDelay;                                 // 0x019C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSpeedInKMH;                                     // 0x01A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReverseCollisionCheckTraceLength;                  // 0x01A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxNeighboursToCheck;                              // 0x01A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaypointUpdateRate;                                // 0x01AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceToTargetInMeters;                          // 0x01B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CollisionDetectionTraceLengthInMeters;             // 0x01B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StopTheVehicleIfCollisionIsDetected;               // 0x01B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldGoInReverse;                                 // 0x01B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BA[0x2];                                      // 0x01BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxVehiceSpeed;                                    // 0x01BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrakingForce;                                      // 0x01C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxOverallVehicleSpeed;                            // 0x01C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxOverallVehicleSpeed_Reverse;                    // 0x01C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CC[0x24];                                     // 0x01CC(0x0024)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Path;                                              // 0x01F0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         SteeringAngle;                                     // 0x0200(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VehicleCollisionSteering;                          // 0x0204(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         NodesWithSameValue;                                // 0x0208(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         Parent;                                            // 0x0218(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          IsVehicleAIModuleEnabled;                          // 0x0228(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_229[0x3];                                      // 0x0229(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ThrottleOutputData;                                // 0x022C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SteeringOutputData;                                // 0x0230(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_234[0x4];                                      // 0x0234(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        DataStorage;                                       // 0x0238(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 Value;                                             // 0x0248(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_258[0x20];                                     // 0x0258(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         OpenList;                                          // 0x0278(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ClosedList;                                        // 0x0288(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         Neighbours;                                        // 0x0298(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A8[0x20];                                     // 0x02A8(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RightSensorAlpha;                                  // 0x02C8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CentralSensorAlpha;                                // 0x02CC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeftSensorAlpha;                                   // 0x02D0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D4[0x14];                                     // 0x02D4(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisableVehicleAIModule();
	void EnableVehicleAIModule();
	void FindPath();
	void GetAllRuntimeData(float* SteeringOutput, float* ThrottleOutput, TArray<class AActor*>* PathData, float* SteeringAngleData, TArray<class AActor*>* ParentData, TArray<struct FVector>* DataStorageData, TArray<float>* ValueData, TArray<class AActor*>* OpenListData, TArray<class AActor*>* ClosedListData, TArray<class AActor*>* NeighboursData, float* RightSensorAlphaData, float* CentralSensorAlphaData, float* LeftSensorAlphaData, bool* IsVehicleAIModuleEnabledData);
	void RecalculateStaticWaypointConnections();
	void SetPathfindingDestination(class AActor* Destination);
	void SetRequiredProperties(class AWheeledVehicle* WheeledVehicleReferenceInput, class UArrowComponent* LeftSensorInput, class UArrowComponent* CentralSensorInput, class UArrowComponent* RightSensorInput, class AActor* ActorInput, const TArray<class AActor*>& WaypointsInput);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VehicleAI_AdvancedPathfinding">();
	}
	static class UVehicleAI_AdvancedPathfinding* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVehicleAI_AdvancedPathfinding>();
	}
};
static_assert(alignof(UVehicleAI_AdvancedPathfinding) == 0x000008, "Wrong alignment on UVehicleAI_AdvancedPathfinding");
static_assert(sizeof(UVehicleAI_AdvancedPathfinding) == 0x0002E8, "Wrong size on UVehicleAI_AdvancedPathfinding");
static_assert(offsetof(UVehicleAI_AdvancedPathfinding, OnGenerateStaticWaypointConnections) == 0x0000F0, "Member 'UVehicleAI_AdvancedPathfinding::OnGenerateStaticWaypointConnections' has a wrong offset!");
static_assert(offsetof(UVehicleAI_AdvancedPathfinding, OnPathfindingStarted) == 0x000100, "Member 'UVehicleAI_AdvancedPathfinding::OnPathfindingStarted' has a wrong offset!");
static_assert(offsetof(UVehicleAI_AdvancedPathfinding, OnPathFound) == 0x000110, "Member 'UVehicleAI_AdvancedPathfinding::OnPathFound' has a wrong offset!");
static_assert(offsetof(UVehicleAI_AdvancedPathfinding, InReverse) == 0x000120, "Member 'UVehicleAI_AdvancedPathfinding::InReverse' has a wrong offset!");
static_assert(offsetof(UVehicleAI_AdvancedPathfinding, OnDestinationReached) == 0x000130, "Member 'UVehicleAI_AdvancedPathfinding::OnDestinationReached' has a wrong offset!");
static_assert(offsetof(UVehicleAI_AdvancedPathfinding, WheeledVehicleReference) == 0x000148, "Member 'UVehicleAI_AdvancedPathfinding::WheeledVehicleReference' has a wrong offset!");
static_assert(offsetof(UVehicleAI_AdvancedPathfinding, LeftSensor) == 0x000150, "Member 'UVehicleAI_AdvancedPathfinding::LeftSensor' has a wrong offset!");
static_assert(offsetof(UVehicleAI_AdvancedPathfinding, CentralSensor) == 0x000158, "Member 'UVehicleAI_AdvancedPathfinding::CentralSensor' has a wrong offset!");
static_assert(offsetof(UVehicleAI_AdvancedPathfinding, RightSensor) == 0x000160, "Member 'UVehicleAI_AdvancedPathfinding::RightSensor' has a wrong offset!");
static_assert(offsetof(UVehicleAI_AdvancedPathfinding, Actor) == 0x000168, "Member 'UVehicleAI_AdvancedPathfinding::Actor' has a wrong offset!");
static_assert(offsetof(UVehicleAI_AdvancedPathfinding, Waypoints) == 0x000170, "Member 'UVehicleAI_AdvancedPathfinding::Waypoints' has a wrong offset!");
static_assert(offsetof(UVehicleAI_AdvancedPathfinding, PathfindingTarget) == 0x000180, "Member 'UVehicleAI_AdvancedPathfinding::PathfindingTarget' has a wrong offset!");
static_assert(offsetof(UVehicleAI_AdvancedPathfinding, Debug) == 0x000188, "Member 'UVehicleAI_AdvancedPathfinding::Debug' has a wrong offset!");
static_assert(offsetof(UVehicleAI_AdvancedPathfinding, bCollisionSensorsDebug) == 0x000189, "Member 'UVehicleAI_AdvancedPathfinding::bCollisionSensorsDebug' has a wrong offset!");
static_assert(offsetof(UVehicleAI_AdvancedPathfinding, PathfinidngCalls) == 0x00018A, "Member 'UVehicleAI_AdvancedPathfinding::PathfinidngCalls' has a wrong offset!");
static_assert(offsetof(UVehicleAI_AdvancedPathfinding, DebugLine) == 0x00018B, "Member 'UVehicleAI_AdvancedPathfinding::DebugLine' has a wrong offset!");
static_assert(offsetof(UVehicleAI_AdvancedPathfinding, PathfindingTargetDebug) == 0x00018C, "Member 'UVehicleAI_AdvancedPathfinding::PathfindingTargetDebug' has a wrong offset!");
static_assert(offsetof(UVehicleAI_AdvancedPathfinding, VisualizePathfindingNodes) == 0x00018D, "Member 'UVehicleAI_AdvancedPathfinding::VisualizePathfindingNodes' has a wrong offset!");
static_assert(offsetof(UVehicleAI_AdvancedPathfinding, CollisionChannel) == 0x00018E, "Member 'UVehicleAI_AdvancedPathfinding::CollisionChannel' has a wrong offset!");
static_assert(offsetof(UVehicleAI_AdvancedPathfinding, SensorCollisionChannel) == 0x00018F, "Member 'UVehicleAI_AdvancedPathfinding::SensorCollisionChannel' has a wrong offset!");
static_assert(offsetof(UVehicleAI_AdvancedPathfinding, RealtimeUpdates) == 0x000190, "Member 'UVehicleAI_AdvancedPathfinding::RealtimeUpdates' has a wrong offset!");
static_assert(offsetof(UVehicleAI_AdvancedPathfinding, PrecomputeStaticWaypointConnections) == 0x000191, "Member 'UVehicleAI_AdvancedPathfinding::PrecomputeStaticWaypointConnections' has a wrong offset!");
static_assert(offsetof(UVehicleAI_AdvancedPathfinding, CollisionChecksWithPrecomputedConnection) == 0x000192, "Member 'UVehicleAI_AdvancedPathfinding::CollisionChecksWithPrecomputedConnection' has a wrong offset!");
static_assert(offsetof(UVehicleAI_AdvancedPathfinding, InstantRealtimeSearch) == 0x000193, "Member 'UVehicleAI_AdvancedPathfinding::InstantRealtimeSearch' has a wrong offset!");
static_assert(offsetof(UVehicleAI_AdvancedPathfinding, SteeringSensitivity) == 0x000194, "Member 'UVehicleAI_AdvancedPathfinding::SteeringSensitivity' has a wrong offset!");
static_assert(offsetof(UVehicleAI_AdvancedPathfinding, UpdateRate) == 0x000198, "Member 'UVehicleAI_AdvancedPathfinding::UpdateRate' has a wrong offset!");
static_assert(offsetof(UVehicleAI_AdvancedPathfinding, ReverseCheckDelay) == 0x00019C, "Member 'UVehicleAI_AdvancedPathfinding::ReverseCheckDelay' has a wrong offset!");
static_assert(offsetof(UVehicleAI_AdvancedPathfinding, MinSpeedInKMH) == 0x0001A0, "Member 'UVehicleAI_AdvancedPathfinding::MinSpeedInKMH' has a wrong offset!");
static_assert(offsetof(UVehicleAI_AdvancedPathfinding, ReverseCollisionCheckTraceLength) == 0x0001A4, "Member 'UVehicleAI_AdvancedPathfinding::ReverseCollisionCheckTraceLength' has a wrong offset!");
static_assert(offsetof(UVehicleAI_AdvancedPathfinding, MaxNeighboursToCheck) == 0x0001A8, "Member 'UVehicleAI_AdvancedPathfinding::MaxNeighboursToCheck' has a wrong offset!");
static_assert(offsetof(UVehicleAI_AdvancedPathfinding, WaypointUpdateRate) == 0x0001AC, "Member 'UVehicleAI_AdvancedPathfinding::WaypointUpdateRate' has a wrong offset!");
static_assert(offsetof(UVehicleAI_AdvancedPathfinding, DistanceToTargetInMeters) == 0x0001B0, "Member 'UVehicleAI_AdvancedPathfinding::DistanceToTargetInMeters' has a wrong offset!");
static_assert(offsetof(UVehicleAI_AdvancedPathfinding, CollisionDetectionTraceLengthInMeters) == 0x0001B4, "Member 'UVehicleAI_AdvancedPathfinding::CollisionDetectionTraceLengthInMeters' has a wrong offset!");
static_assert(offsetof(UVehicleAI_AdvancedPathfinding, StopTheVehicleIfCollisionIsDetected) == 0x0001B8, "Member 'UVehicleAI_AdvancedPathfinding::StopTheVehicleIfCollisionIsDetected' has a wrong offset!");
static_assert(offsetof(UVehicleAI_AdvancedPathfinding, ShouldGoInReverse) == 0x0001B9, "Member 'UVehicleAI_AdvancedPathfinding::ShouldGoInReverse' has a wrong offset!");
static_assert(offsetof(UVehicleAI_AdvancedPathfinding, MaxVehiceSpeed) == 0x0001BC, "Member 'UVehicleAI_AdvancedPathfinding::MaxVehiceSpeed' has a wrong offset!");
static_assert(offsetof(UVehicleAI_AdvancedPathfinding, BrakingForce) == 0x0001C0, "Member 'UVehicleAI_AdvancedPathfinding::BrakingForce' has a wrong offset!");
static_assert(offsetof(UVehicleAI_AdvancedPathfinding, MaxOverallVehicleSpeed) == 0x0001C4, "Member 'UVehicleAI_AdvancedPathfinding::MaxOverallVehicleSpeed' has a wrong offset!");
static_assert(offsetof(UVehicleAI_AdvancedPathfinding, MaxOverallVehicleSpeed_Reverse) == 0x0001C8, "Member 'UVehicleAI_AdvancedPathfinding::MaxOverallVehicleSpeed_Reverse' has a wrong offset!");
static_assert(offsetof(UVehicleAI_AdvancedPathfinding, Path) == 0x0001F0, "Member 'UVehicleAI_AdvancedPathfinding::Path' has a wrong offset!");
static_assert(offsetof(UVehicleAI_AdvancedPathfinding, SteeringAngle) == 0x000200, "Member 'UVehicleAI_AdvancedPathfinding::SteeringAngle' has a wrong offset!");
static_assert(offsetof(UVehicleAI_AdvancedPathfinding, VehicleCollisionSteering) == 0x000204, "Member 'UVehicleAI_AdvancedPathfinding::VehicleCollisionSteering' has a wrong offset!");
static_assert(offsetof(UVehicleAI_AdvancedPathfinding, NodesWithSameValue) == 0x000208, "Member 'UVehicleAI_AdvancedPathfinding::NodesWithSameValue' has a wrong offset!");
static_assert(offsetof(UVehicleAI_AdvancedPathfinding, Parent) == 0x000218, "Member 'UVehicleAI_AdvancedPathfinding::Parent' has a wrong offset!");
static_assert(offsetof(UVehicleAI_AdvancedPathfinding, IsVehicleAIModuleEnabled) == 0x000228, "Member 'UVehicleAI_AdvancedPathfinding::IsVehicleAIModuleEnabled' has a wrong offset!");
static_assert(offsetof(UVehicleAI_AdvancedPathfinding, ThrottleOutputData) == 0x00022C, "Member 'UVehicleAI_AdvancedPathfinding::ThrottleOutputData' has a wrong offset!");
static_assert(offsetof(UVehicleAI_AdvancedPathfinding, SteeringOutputData) == 0x000230, "Member 'UVehicleAI_AdvancedPathfinding::SteeringOutputData' has a wrong offset!");
static_assert(offsetof(UVehicleAI_AdvancedPathfinding, DataStorage) == 0x000238, "Member 'UVehicleAI_AdvancedPathfinding::DataStorage' has a wrong offset!");
static_assert(offsetof(UVehicleAI_AdvancedPathfinding, Value) == 0x000248, "Member 'UVehicleAI_AdvancedPathfinding::Value' has a wrong offset!");
static_assert(offsetof(UVehicleAI_AdvancedPathfinding, OpenList) == 0x000278, "Member 'UVehicleAI_AdvancedPathfinding::OpenList' has a wrong offset!");
static_assert(offsetof(UVehicleAI_AdvancedPathfinding, ClosedList) == 0x000288, "Member 'UVehicleAI_AdvancedPathfinding::ClosedList' has a wrong offset!");
static_assert(offsetof(UVehicleAI_AdvancedPathfinding, Neighbours) == 0x000298, "Member 'UVehicleAI_AdvancedPathfinding::Neighbours' has a wrong offset!");
static_assert(offsetof(UVehicleAI_AdvancedPathfinding, RightSensorAlpha) == 0x0002C8, "Member 'UVehicleAI_AdvancedPathfinding::RightSensorAlpha' has a wrong offset!");
static_assert(offsetof(UVehicleAI_AdvancedPathfinding, CentralSensorAlpha) == 0x0002CC, "Member 'UVehicleAI_AdvancedPathfinding::CentralSensorAlpha' has a wrong offset!");
static_assert(offsetof(UVehicleAI_AdvancedPathfinding, LeftSensorAlpha) == 0x0002D0, "Member 'UVehicleAI_AdvancedPathfinding::LeftSensorAlpha' has a wrong offset!");

// Class BlueMan_VehicleAI.VehicleAIModule_DeathMatch
// 0x00C8 (0x01B8 - 0x00F0)
class UVehicleAIModule_DeathMatch final : public UActorComponent
{
public:
	UMulticastDelegateProperty_                   IsSelectingNextWaypoint;                           // 0x00F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   IsCurrentlyInReverse;                              // 0x0100(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_110[0x8];                                      // 0x0110(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0118(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AWheeledVehicle*                        VehicleMovementComponent;                          // 0x0120(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ArrayOfActorsUsedAsWaypoints;                      // 0x0128(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ArrayOfActorsUsedAsHealthPickups;                  // 0x0138(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UArrowComponent*                        ArrowComponent;                                    // 0x0148(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         IgnoredActors;                                     // 0x0150(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	ESteeringSensitivity                          SteeringSensitivity;                               // 0x0160(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_161[0x3];                                      // 0x0161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CollisionSensorTraceLengthInMeters;                // 0x0164(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CollisionSensorTraceRadiusInMeters;                // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Health;                                            // 0x016C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaypointSwitchDistanceInMeters;                    // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSpeedIn_KMH;                                    // 0x0174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinHealth;                                         // 0x0178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReverseDuration;                                   // 0x017C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LookForHealth;                                     // 0x0180(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsVehicleAIModuleEnabled;                          // 0x0181(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_182[0x2];                                      // 0x0182(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ThrottleOutput;                                    // 0x0184(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SteeringOutput;                                    // 0x0188(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WaypointLocation;                                  // 0x018C(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DebugMode;                                         // 0x0198(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InReverse;                                         // 0x0199(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStartSimulation;                                  // 0x019A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19B[0x1];                                      // 0x019B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SteeringAngle;                                     // 0x019C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A0[0x18];                                     // 0x01A0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ActivateAI();
	void DisableVehicleAIModule();
	void EnableVehicleAIModule();
	void GetAllRuntimeData(float* ThrottleOutputData, float* SteeringOutputData, struct FVector* WaypointLocationData, bool* InReverseData, float* SteeringAngleData, bool* IsVehicleAIModuleEnabledData);
	void ManuallySelectWaypoint();
	void SetRequiredProperties(class AActor* ActorInput, class AWheeledVehicle* VehicleMovementComponentInput, const TArray<class AActor*>& ArrayOfActorsUsedAsWaypointsInput, class UArrowComponent* ArrowComponentInput, bool UseHealthSystem, const TArray<class AActor*>& ArrayOfActorsUsedAsHealthPickupsInput);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VehicleAIModule_DeathMatch">();
	}
	static class UVehicleAIModule_DeathMatch* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVehicleAIModule_DeathMatch>();
	}
};
static_assert(alignof(UVehicleAIModule_DeathMatch) == 0x000008, "Wrong alignment on UVehicleAIModule_DeathMatch");
static_assert(sizeof(UVehicleAIModule_DeathMatch) == 0x0001B8, "Wrong size on UVehicleAIModule_DeathMatch");
static_assert(offsetof(UVehicleAIModule_DeathMatch, IsSelectingNextWaypoint) == 0x0000F0, "Member 'UVehicleAIModule_DeathMatch::IsSelectingNextWaypoint' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_DeathMatch, IsCurrentlyInReverse) == 0x000100, "Member 'UVehicleAIModule_DeathMatch::IsCurrentlyInReverse' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_DeathMatch, Actor) == 0x000118, "Member 'UVehicleAIModule_DeathMatch::Actor' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_DeathMatch, VehicleMovementComponent) == 0x000120, "Member 'UVehicleAIModule_DeathMatch::VehicleMovementComponent' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_DeathMatch, ArrayOfActorsUsedAsWaypoints) == 0x000128, "Member 'UVehicleAIModule_DeathMatch::ArrayOfActorsUsedAsWaypoints' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_DeathMatch, ArrayOfActorsUsedAsHealthPickups) == 0x000138, "Member 'UVehicleAIModule_DeathMatch::ArrayOfActorsUsedAsHealthPickups' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_DeathMatch, ArrowComponent) == 0x000148, "Member 'UVehicleAIModule_DeathMatch::ArrowComponent' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_DeathMatch, IgnoredActors) == 0x000150, "Member 'UVehicleAIModule_DeathMatch::IgnoredActors' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_DeathMatch, SteeringSensitivity) == 0x000160, "Member 'UVehicleAIModule_DeathMatch::SteeringSensitivity' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_DeathMatch, CollisionSensorTraceLengthInMeters) == 0x000164, "Member 'UVehicleAIModule_DeathMatch::CollisionSensorTraceLengthInMeters' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_DeathMatch, CollisionSensorTraceRadiusInMeters) == 0x000168, "Member 'UVehicleAIModule_DeathMatch::CollisionSensorTraceRadiusInMeters' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_DeathMatch, Health) == 0x00016C, "Member 'UVehicleAIModule_DeathMatch::Health' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_DeathMatch, WaypointSwitchDistanceInMeters) == 0x000170, "Member 'UVehicleAIModule_DeathMatch::WaypointSwitchDistanceInMeters' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_DeathMatch, MinSpeedIn_KMH) == 0x000174, "Member 'UVehicleAIModule_DeathMatch::MinSpeedIn_KMH' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_DeathMatch, MinHealth) == 0x000178, "Member 'UVehicleAIModule_DeathMatch::MinHealth' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_DeathMatch, ReverseDuration) == 0x00017C, "Member 'UVehicleAIModule_DeathMatch::ReverseDuration' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_DeathMatch, LookForHealth) == 0x000180, "Member 'UVehicleAIModule_DeathMatch::LookForHealth' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_DeathMatch, IsVehicleAIModuleEnabled) == 0x000181, "Member 'UVehicleAIModule_DeathMatch::IsVehicleAIModuleEnabled' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_DeathMatch, ThrottleOutput) == 0x000184, "Member 'UVehicleAIModule_DeathMatch::ThrottleOutput' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_DeathMatch, SteeringOutput) == 0x000188, "Member 'UVehicleAIModule_DeathMatch::SteeringOutput' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_DeathMatch, WaypointLocation) == 0x00018C, "Member 'UVehicleAIModule_DeathMatch::WaypointLocation' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_DeathMatch, DebugMode) == 0x000198, "Member 'UVehicleAIModule_DeathMatch::DebugMode' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_DeathMatch, InReverse) == 0x000199, "Member 'UVehicleAIModule_DeathMatch::InReverse' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_DeathMatch, bStartSimulation) == 0x00019A, "Member 'UVehicleAIModule_DeathMatch::bStartSimulation' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_DeathMatch, SteeringAngle) == 0x00019C, "Member 'UVehicleAIModule_DeathMatch::SteeringAngle' has a wrong offset!");

// Class BlueMan_VehicleAI.VehicleAIModule_Racing
// 0x0100 (0x01F0 - 0x00F0)
class UVehicleAIModule_Racing final : public UActorComponent
{
public:
	UMulticastDelegateProperty_                   OnSelectNextWaypoint;                              // 0x00F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   IsInReverse;                                       // 0x0100(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_110[0x8];                                      // 0x0110(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class ARacingAI_Waypoint*                     FirstWaypoint;                                     // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Debug;                                             // 0x0120(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UArrowComponent*                        RightSensorArrow;                                  // 0x0128(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UArrowComponent*                        CentralSensorArrow;                                // 0x0130(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UArrowComponent*                        LeftSensorArrow;                                   // 0x0138(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AWheeledVehicle*                        WheeledVehicleReference;                           // 0x0140(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0148(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         IgnoredActors;                                     // 0x0150(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         MinWaypointDistanceInMeters;                       // 0x0160(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MistakeLevel;                                      // 0x0164(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrakingLevel;                                      // 0x0168(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CollisionDetectionTraceLengthInMeters;             // 0x016C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinCornerSpeed;                                    // 0x0170(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxCornerSpeed;                                    // 0x0174(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SteeringBrakingLevel;                              // 0x0178(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxOverallVehicleSpeed;                            // 0x017C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteeringSensitivityLevel                     SteeringSensitivity;                               // 0x0180(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_181[0x3];                                      // 0x0181(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ThrottleOutput;                                    // 0x0184(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SteeringOutput;                                    // 0x0188(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxBrakingDistance;                                // 0x018C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSpeedInKMH;                                     // 0x0190(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReverseCollisionCheckTraceLength;                  // 0x0194(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReverseCheckDelay;                                 // 0x0198(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Respawn;                                           // 0x019C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsVehicleAIModuleEnabled;                          // 0x019D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GoInReverse;                                       // 0x019E(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19F[0x1];                                      // 0x019F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SteeringAngle;                                     // 0x01A0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AvoidanceSteeringLevel;                            // 0x01A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARacingAI_Waypoint*                     CurrentWaypoint;                                   // 0x01A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARacingAI_Waypoint*                     PreviousWaypoint;                                  // 0x01B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Waypoint;                                          // 0x01B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C0[0x4];                                      // 0x01C0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LeftSensorAlpha;                                   // 0x01C4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C8[0x8];                                      // 0x01C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RightSensorAlpha;                                  // 0x01D0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D4[0xC];                                      // 0x01D4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CentralSensorAlpha;                                // 0x01E0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E4[0xC];                                      // 0x01E4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisableVehicleAIModule();
	void EnableVehicleAIModule();
	void GetAllRuntimeData(float* ThrottleOutputData, float* SteeringOutputData, bool* IsVehicleAIModuleEnabledData, bool* GoInReverseData, float* SteeringAngleData, float* AvoidanceSteeringLevelData, class ARacingAI_Waypoint** CurrentWaypointData, class AActor** WaypointData, float* LeftSensorAlphaData, float* RightSensorAlphaData, float* CentralSensorAlphaData, bool* IsCurrentWaypointDataValid, bool* IsWaypointDataValid);
	void SetNextWaypoint(class ARacingAI_Waypoint* NextWaypointActor);
	void SetRequiredProperties(class UArrowComponent* RightSensorArrowInput, class UArrowComponent* CentralSensorArrowInput, class UArrowComponent* LeftSensorArrowInput, class AWheeledVehicle* WheeledVehicleReferenceInput, class AActor* ActorInput);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VehicleAIModule_Racing">();
	}
	static class UVehicleAIModule_Racing* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVehicleAIModule_Racing>();
	}
};
static_assert(alignof(UVehicleAIModule_Racing) == 0x000008, "Wrong alignment on UVehicleAIModule_Racing");
static_assert(sizeof(UVehicleAIModule_Racing) == 0x0001F0, "Wrong size on UVehicleAIModule_Racing");
static_assert(offsetof(UVehicleAIModule_Racing, OnSelectNextWaypoint) == 0x0000F0, "Member 'UVehicleAIModule_Racing::OnSelectNextWaypoint' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_Racing, IsInReverse) == 0x000100, "Member 'UVehicleAIModule_Racing::IsInReverse' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_Racing, FirstWaypoint) == 0x000118, "Member 'UVehicleAIModule_Racing::FirstWaypoint' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_Racing, Debug) == 0x000120, "Member 'UVehicleAIModule_Racing::Debug' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_Racing, RightSensorArrow) == 0x000128, "Member 'UVehicleAIModule_Racing::RightSensorArrow' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_Racing, CentralSensorArrow) == 0x000130, "Member 'UVehicleAIModule_Racing::CentralSensorArrow' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_Racing, LeftSensorArrow) == 0x000138, "Member 'UVehicleAIModule_Racing::LeftSensorArrow' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_Racing, WheeledVehicleReference) == 0x000140, "Member 'UVehicleAIModule_Racing::WheeledVehicleReference' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_Racing, Actor) == 0x000148, "Member 'UVehicleAIModule_Racing::Actor' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_Racing, IgnoredActors) == 0x000150, "Member 'UVehicleAIModule_Racing::IgnoredActors' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_Racing, MinWaypointDistanceInMeters) == 0x000160, "Member 'UVehicleAIModule_Racing::MinWaypointDistanceInMeters' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_Racing, MistakeLevel) == 0x000164, "Member 'UVehicleAIModule_Racing::MistakeLevel' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_Racing, BrakingLevel) == 0x000168, "Member 'UVehicleAIModule_Racing::BrakingLevel' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_Racing, CollisionDetectionTraceLengthInMeters) == 0x00016C, "Member 'UVehicleAIModule_Racing::CollisionDetectionTraceLengthInMeters' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_Racing, MinCornerSpeed) == 0x000170, "Member 'UVehicleAIModule_Racing::MinCornerSpeed' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_Racing, MaxCornerSpeed) == 0x000174, "Member 'UVehicleAIModule_Racing::MaxCornerSpeed' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_Racing, SteeringBrakingLevel) == 0x000178, "Member 'UVehicleAIModule_Racing::SteeringBrakingLevel' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_Racing, MaxOverallVehicleSpeed) == 0x00017C, "Member 'UVehicleAIModule_Racing::MaxOverallVehicleSpeed' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_Racing, SteeringSensitivity) == 0x000180, "Member 'UVehicleAIModule_Racing::SteeringSensitivity' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_Racing, ThrottleOutput) == 0x000184, "Member 'UVehicleAIModule_Racing::ThrottleOutput' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_Racing, SteeringOutput) == 0x000188, "Member 'UVehicleAIModule_Racing::SteeringOutput' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_Racing, MaxBrakingDistance) == 0x00018C, "Member 'UVehicleAIModule_Racing::MaxBrakingDistance' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_Racing, MinSpeedInKMH) == 0x000190, "Member 'UVehicleAIModule_Racing::MinSpeedInKMH' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_Racing, ReverseCollisionCheckTraceLength) == 0x000194, "Member 'UVehicleAIModule_Racing::ReverseCollisionCheckTraceLength' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_Racing, ReverseCheckDelay) == 0x000198, "Member 'UVehicleAIModule_Racing::ReverseCheckDelay' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_Racing, Respawn) == 0x00019C, "Member 'UVehicleAIModule_Racing::Respawn' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_Racing, IsVehicleAIModuleEnabled) == 0x00019D, "Member 'UVehicleAIModule_Racing::IsVehicleAIModuleEnabled' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_Racing, GoInReverse) == 0x00019E, "Member 'UVehicleAIModule_Racing::GoInReverse' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_Racing, SteeringAngle) == 0x0001A0, "Member 'UVehicleAIModule_Racing::SteeringAngle' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_Racing, AvoidanceSteeringLevel) == 0x0001A4, "Member 'UVehicleAIModule_Racing::AvoidanceSteeringLevel' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_Racing, CurrentWaypoint) == 0x0001A8, "Member 'UVehicleAIModule_Racing::CurrentWaypoint' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_Racing, PreviousWaypoint) == 0x0001B0, "Member 'UVehicleAIModule_Racing::PreviousWaypoint' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_Racing, Waypoint) == 0x0001B8, "Member 'UVehicleAIModule_Racing::Waypoint' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_Racing, LeftSensorAlpha) == 0x0001C4, "Member 'UVehicleAIModule_Racing::LeftSensorAlpha' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_Racing, RightSensorAlpha) == 0x0001D0, "Member 'UVehicleAIModule_Racing::RightSensorAlpha' has a wrong offset!");
static_assert(offsetof(UVehicleAIModule_Racing, CentralSensorAlpha) == 0x0001E0, "Member 'UVehicleAIModule_Racing::CentralSensorAlpha' has a wrong offset!");

}

