#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTS_Plunger

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTS_Plunger.BTS_Plunger_C
// 0x01D0 (0x0268 - 0x0098)
class UBTS_Plunger_C final : public UBTService_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0098(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ABP_Lv2_NPCBase_C*                      CorAI;                                             // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBlackboardKeySelector                 TargetLocation;                                    // 0x00A8(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 CurrentState;                                      // 0x00D0(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 PatrolWaitTime;                                    // 0x00F8(0x0028)(Edit, BlueprintVisible)
	class AActor*                                 TargetActor;                                       // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBlackboardKeySelector                 AlertTime;                                         // 0x0128(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 AttackCD;                                          // 0x0150(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 StartLocation;                                     // 0x0178(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 TargetAct;                                         // 0x01A0(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 AttackCount;                                       // 0x01C8(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 LookAtTarget;                                      // 0x01F0(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 IsDead;                                            // 0x0218(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 FloatKey;                                          // 0x0240(0x0028)(Edit, BlueprintVisible)

public:
	void ExecuteUbergraph_BTS_Plunger(int32 EntryPoint);
	void ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTS_Plunger_C">();
	}
	static class UBTS_Plunger_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTS_Plunger_C>();
	}
};
static_assert(alignof(UBTS_Plunger_C) == 0x000008, "Wrong alignment on UBTS_Plunger_C");
static_assert(sizeof(UBTS_Plunger_C) == 0x000268, "Wrong size on UBTS_Plunger_C");
static_assert(offsetof(UBTS_Plunger_C, UberGraphFrame) == 0x000098, "Member 'UBTS_Plunger_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBTS_Plunger_C, CorAI) == 0x0000A0, "Member 'UBTS_Plunger_C::CorAI' has a wrong offset!");
static_assert(offsetof(UBTS_Plunger_C, TargetLocation) == 0x0000A8, "Member 'UBTS_Plunger_C::TargetLocation' has a wrong offset!");
static_assert(offsetof(UBTS_Plunger_C, CurrentState) == 0x0000D0, "Member 'UBTS_Plunger_C::CurrentState' has a wrong offset!");
static_assert(offsetof(UBTS_Plunger_C, PatrolWaitTime) == 0x0000F8, "Member 'UBTS_Plunger_C::PatrolWaitTime' has a wrong offset!");
static_assert(offsetof(UBTS_Plunger_C, TargetActor) == 0x000120, "Member 'UBTS_Plunger_C::TargetActor' has a wrong offset!");
static_assert(offsetof(UBTS_Plunger_C, AlertTime) == 0x000128, "Member 'UBTS_Plunger_C::AlertTime' has a wrong offset!");
static_assert(offsetof(UBTS_Plunger_C, AttackCD) == 0x000150, "Member 'UBTS_Plunger_C::AttackCD' has a wrong offset!");
static_assert(offsetof(UBTS_Plunger_C, StartLocation) == 0x000178, "Member 'UBTS_Plunger_C::StartLocation' has a wrong offset!");
static_assert(offsetof(UBTS_Plunger_C, TargetAct) == 0x0001A0, "Member 'UBTS_Plunger_C::TargetAct' has a wrong offset!");
static_assert(offsetof(UBTS_Plunger_C, AttackCount) == 0x0001C8, "Member 'UBTS_Plunger_C::AttackCount' has a wrong offset!");
static_assert(offsetof(UBTS_Plunger_C, LookAtTarget) == 0x0001F0, "Member 'UBTS_Plunger_C::LookAtTarget' has a wrong offset!");
static_assert(offsetof(UBTS_Plunger_C, IsDead) == 0x000218, "Member 'UBTS_Plunger_C::IsDead' has a wrong offset!");
static_assert(offsetof(UBTS_Plunger_C, FloatKey) == 0x000240, "Member 'UBTS_Plunger_C::FloatKey' has a wrong offset!");

}

