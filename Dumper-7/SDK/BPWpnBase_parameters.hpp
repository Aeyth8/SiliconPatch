#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPWpnBase

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BPWpnBase.BPWpnBase_C.ExecuteUbergraph_BPWpnBase
// 0x0120 (0x0120 - 0x0000)
struct BPWpnBase_C_ExecuteUbergraph_BPWpnBase final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable1;                                // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             K2Node_CustomEvent_Sound;                          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_Location1;                      // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_IsDrop;                         // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_IsOnlyOne;                      // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_IsReplace;                      // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UAudioComponent*                        CallFunc_SpawnSoundAtLocation_ReturnValue;         // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlaying_ReturnValue;                    // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        CallFunc_SpawnSoundAtLocation_ReturnValue1;        // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        CallFunc_SpawnSoundAtLocation_ReturnValue2;        // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_CustomEvent_EventName;                      // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_EmitterTime;                    // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_ParticleTime;                   // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_Location;                       // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_Velocity;                       // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_Direction;                      // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_Normal;                         // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_BoneName;                       // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      K2Node_CustomEvent_PhysMat;                        // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x00A0(0x0030)(IsPlainOldData, NoDestructor)
	class UParticleSystemComponent*               CallFunc_PlayVFX_ReturnVFX;                        // 0x00D0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E9[0x3];                                       // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_Time;                           // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CallFunc_SpawnParticle_ReturnValue;                // 0x00F0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue1;                // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class FName EventName, float EmitterTime, int32 ParticleTime, const struct FVector& Location, const struct FVector& Velocity, const struct FVector& Direction, const struct FVector& Normal, class FName BoneName, class UPhysicalMaterial* PhysMat)> K2Node_CreateDelegate_OutputDelegate; // 0x0100(0x0010)(ZeroConstructor, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0114(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0115(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0116(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue1;                  // 0x0117(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         K2Node_Select_Default;                             // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPWpnBase_C_ExecuteUbergraph_BPWpnBase) == 0x000010, "Wrong alignment on BPWpnBase_C_ExecuteUbergraph_BPWpnBase");
static_assert(sizeof(BPWpnBase_C_ExecuteUbergraph_BPWpnBase) == 0x000120, "Wrong size on BPWpnBase_C_ExecuteUbergraph_BPWpnBase");
static_assert(offsetof(BPWpnBase_C_ExecuteUbergraph_BPWpnBase, EntryPoint) == 0x000000, "Member 'BPWpnBase_C_ExecuteUbergraph_BPWpnBase::EntryPoint' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ExecuteUbergraph_BPWpnBase, Temp_int_Variable) == 0x000004, "Member 'BPWpnBase_C_ExecuteUbergraph_BPWpnBase::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ExecuteUbergraph_BPWpnBase, Temp_int_Variable1) == 0x000008, "Member 'BPWpnBase_C_ExecuteUbergraph_BPWpnBase::Temp_int_Variable1' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ExecuteUbergraph_BPWpnBase, CallFunc_HasAuthority_ReturnValue) == 0x00000C, "Member 'BPWpnBase_C_ExecuteUbergraph_BPWpnBase::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ExecuteUbergraph_BPWpnBase, K2Node_CustomEvent_Sound) == 0x000010, "Member 'BPWpnBase_C_ExecuteUbergraph_BPWpnBase::K2Node_CustomEvent_Sound' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ExecuteUbergraph_BPWpnBase, K2Node_CustomEvent_Location1) == 0x000018, "Member 'BPWpnBase_C_ExecuteUbergraph_BPWpnBase::K2Node_CustomEvent_Location1' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ExecuteUbergraph_BPWpnBase, K2Node_CustomEvent_IsDrop) == 0x000024, "Member 'BPWpnBase_C_ExecuteUbergraph_BPWpnBase::K2Node_CustomEvent_IsDrop' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ExecuteUbergraph_BPWpnBase, K2Node_CustomEvent_IsOnlyOne) == 0x000025, "Member 'BPWpnBase_C_ExecuteUbergraph_BPWpnBase::K2Node_CustomEvent_IsOnlyOne' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ExecuteUbergraph_BPWpnBase, K2Node_CustomEvent_IsReplace) == 0x000026, "Member 'BPWpnBase_C_ExecuteUbergraph_BPWpnBase::K2Node_CustomEvent_IsReplace' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ExecuteUbergraph_BPWpnBase, Temp_bool_Variable) == 0x000027, "Member 'BPWpnBase_C_ExecuteUbergraph_BPWpnBase::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ExecuteUbergraph_BPWpnBase, CallFunc_SpawnSoundAtLocation_ReturnValue) == 0x000028, "Member 'BPWpnBase_C_ExecuteUbergraph_BPWpnBase::CallFunc_SpawnSoundAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ExecuteUbergraph_BPWpnBase, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'BPWpnBase_C_ExecuteUbergraph_BPWpnBase::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ExecuteUbergraph_BPWpnBase, CallFunc_IsPlaying_ReturnValue) == 0x000031, "Member 'BPWpnBase_C_ExecuteUbergraph_BPWpnBase::CallFunc_IsPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ExecuteUbergraph_BPWpnBase, CallFunc_SpawnSoundAtLocation_ReturnValue1) == 0x000038, "Member 'BPWpnBase_C_ExecuteUbergraph_BPWpnBase::CallFunc_SpawnSoundAtLocation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ExecuteUbergraph_BPWpnBase, CallFunc_SpawnSoundAtLocation_ReturnValue2) == 0x000040, "Member 'BPWpnBase_C_ExecuteUbergraph_BPWpnBase::CallFunc_SpawnSoundAtLocation_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ExecuteUbergraph_BPWpnBase, K2Node_Event_DeltaSeconds) == 0x000048, "Member 'BPWpnBase_C_ExecuteUbergraph_BPWpnBase::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ExecuteUbergraph_BPWpnBase, K2Node_CustomEvent_EventName) == 0x000050, "Member 'BPWpnBase_C_ExecuteUbergraph_BPWpnBase::K2Node_CustomEvent_EventName' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ExecuteUbergraph_BPWpnBase, K2Node_CustomEvent_EmitterTime) == 0x000058, "Member 'BPWpnBase_C_ExecuteUbergraph_BPWpnBase::K2Node_CustomEvent_EmitterTime' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ExecuteUbergraph_BPWpnBase, K2Node_CustomEvent_ParticleTime) == 0x00005C, "Member 'BPWpnBase_C_ExecuteUbergraph_BPWpnBase::K2Node_CustomEvent_ParticleTime' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ExecuteUbergraph_BPWpnBase, K2Node_CustomEvent_Location) == 0x000060, "Member 'BPWpnBase_C_ExecuteUbergraph_BPWpnBase::K2Node_CustomEvent_Location' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ExecuteUbergraph_BPWpnBase, K2Node_CustomEvent_Velocity) == 0x00006C, "Member 'BPWpnBase_C_ExecuteUbergraph_BPWpnBase::K2Node_CustomEvent_Velocity' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ExecuteUbergraph_BPWpnBase, K2Node_CustomEvent_Direction) == 0x000078, "Member 'BPWpnBase_C_ExecuteUbergraph_BPWpnBase::K2Node_CustomEvent_Direction' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ExecuteUbergraph_BPWpnBase, K2Node_CustomEvent_Normal) == 0x000084, "Member 'BPWpnBase_C_ExecuteUbergraph_BPWpnBase::K2Node_CustomEvent_Normal' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ExecuteUbergraph_BPWpnBase, K2Node_CustomEvent_BoneName) == 0x000090, "Member 'BPWpnBase_C_ExecuteUbergraph_BPWpnBase::K2Node_CustomEvent_BoneName' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ExecuteUbergraph_BPWpnBase, K2Node_CustomEvent_PhysMat) == 0x000098, "Member 'BPWpnBase_C_ExecuteUbergraph_BPWpnBase::K2Node_CustomEvent_PhysMat' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ExecuteUbergraph_BPWpnBase, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x0000A0, "Member 'BPWpnBase_C_ExecuteUbergraph_BPWpnBase::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ExecuteUbergraph_BPWpnBase, CallFunc_PlayVFX_ReturnVFX) == 0x0000D0, "Member 'BPWpnBase_C_ExecuteUbergraph_BPWpnBase::CallFunc_PlayVFX_ReturnVFX' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ExecuteUbergraph_BPWpnBase, CallFunc_IsValid_ReturnValue1) == 0x0000D8, "Member 'BPWpnBase_C_ExecuteUbergraph_BPWpnBase::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ExecuteUbergraph_BPWpnBase, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0000DC, "Member 'BPWpnBase_C_ExecuteUbergraph_BPWpnBase::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ExecuteUbergraph_BPWpnBase, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0000E8, "Member 'BPWpnBase_C_ExecuteUbergraph_BPWpnBase::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ExecuteUbergraph_BPWpnBase, K2Node_CustomEvent_Time) == 0x0000EC, "Member 'BPWpnBase_C_ExecuteUbergraph_BPWpnBase::K2Node_CustomEvent_Time' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ExecuteUbergraph_BPWpnBase, CallFunc_SpawnParticle_ReturnValue) == 0x0000F0, "Member 'BPWpnBase_C_ExecuteUbergraph_BPWpnBase::CallFunc_SpawnParticle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ExecuteUbergraph_BPWpnBase, CallFunc_HasAuthority_ReturnValue1) == 0x0000F8, "Member 'BPWpnBase_C_ExecuteUbergraph_BPWpnBase::CallFunc_HasAuthority_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ExecuteUbergraph_BPWpnBase, K2Node_CreateDelegate_OutputDelegate) == 0x000100, "Member 'BPWpnBase_C_ExecuteUbergraph_BPWpnBase::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ExecuteUbergraph_BPWpnBase, CallFunc_Add_FloatFloat_ReturnValue) == 0x000110, "Member 'BPWpnBase_C_ExecuteUbergraph_BPWpnBase::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ExecuteUbergraph_BPWpnBase, CallFunc_Greater_IntInt_ReturnValue) == 0x000114, "Member 'BPWpnBase_C_ExecuteUbergraph_BPWpnBase::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ExecuteUbergraph_BPWpnBase, CallFunc_Not_PreBool_ReturnValue) == 0x000115, "Member 'BPWpnBase_C_ExecuteUbergraph_BPWpnBase::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ExecuteUbergraph_BPWpnBase, CallFunc_BooleanAND_ReturnValue) == 0x000116, "Member 'BPWpnBase_C_ExecuteUbergraph_BPWpnBase::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ExecuteUbergraph_BPWpnBase, CallFunc_BooleanAND_ReturnValue1) == 0x000117, "Member 'BPWpnBase_C_ExecuteUbergraph_BPWpnBase::CallFunc_BooleanAND_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ExecuteUbergraph_BPWpnBase, K2Node_Select_Default) == 0x000118, "Member 'BPWpnBase_C_ExecuteUbergraph_BPWpnBase::K2Node_Select_Default' has a wrong offset!");

// Function BPWpnBase.BPWpnBase_C.DoInfinite
// 0x0004 (0x0004 - 0x0000)
struct BPWpnBase_C_DoInfinite final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPWpnBase_C_DoInfinite) == 0x000004, "Wrong alignment on BPWpnBase_C_DoInfinite");
static_assert(sizeof(BPWpnBase_C_DoInfinite) == 0x000004, "Wrong size on BPWpnBase_C_DoInfinite");
static_assert(offsetof(BPWpnBase_C_DoInfinite, Time) == 0x000000, "Member 'BPWpnBase_C_DoInfinite::Time' has a wrong offset!");

// Function BPWpnBase.BPWpnBase_C.PlayShellDropSound
// 0x0050 (0x0050 - 0x0000)
struct BPWpnBase_C_PlayShellDropSound final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EmitterTime;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ParticleTime;                                      // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Velocity;                                          // 0x001C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Direction;                                         // 0x0028(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Normal;                                            // 0x0034(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   BoneName;                                          // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      PhysMat;                                           // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPWpnBase_C_PlayShellDropSound) == 0x000008, "Wrong alignment on BPWpnBase_C_PlayShellDropSound");
static_assert(sizeof(BPWpnBase_C_PlayShellDropSound) == 0x000050, "Wrong size on BPWpnBase_C_PlayShellDropSound");
static_assert(offsetof(BPWpnBase_C_PlayShellDropSound, EventName) == 0x000000, "Member 'BPWpnBase_C_PlayShellDropSound::EventName' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_PlayShellDropSound, EmitterTime) == 0x000008, "Member 'BPWpnBase_C_PlayShellDropSound::EmitterTime' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_PlayShellDropSound, ParticleTime) == 0x00000C, "Member 'BPWpnBase_C_PlayShellDropSound::ParticleTime' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_PlayShellDropSound, Location) == 0x000010, "Member 'BPWpnBase_C_PlayShellDropSound::Location' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_PlayShellDropSound, Velocity) == 0x00001C, "Member 'BPWpnBase_C_PlayShellDropSound::Velocity' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_PlayShellDropSound, Direction) == 0x000028, "Member 'BPWpnBase_C_PlayShellDropSound::Direction' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_PlayShellDropSound, Normal) == 0x000034, "Member 'BPWpnBase_C_PlayShellDropSound::Normal' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_PlayShellDropSound, BoneName) == 0x000040, "Member 'BPWpnBase_C_PlayShellDropSound::BoneName' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_PlayShellDropSound, PhysMat) == 0x000048, "Member 'BPWpnBase_C_PlayShellDropSound::PhysMat' has a wrong offset!");

// Function BPWpnBase.BPWpnBase_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BPWpnBase_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPWpnBase_C_ReceiveTick) == 0x000004, "Wrong alignment on BPWpnBase_C_ReceiveTick");
static_assert(sizeof(BPWpnBase_C_ReceiveTick) == 0x000004, "Wrong size on BPWpnBase_C_ReceiveTick");
static_assert(offsetof(BPWpnBase_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BPWpnBase_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BPWpnBase.BPWpnBase_C.OnPlaySFX
// 0x0018 (0x0018 - 0x0000)
struct BPWpnBase_C_OnPlaySFX final
{
public:
	class USoundBase*                             Sound;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDrop;                                            // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsOnlyOne;                                         // 0x0015(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsReplace;                                         // 0x0016(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPWpnBase_C_OnPlaySFX) == 0x000008, "Wrong alignment on BPWpnBase_C_OnPlaySFX");
static_assert(sizeof(BPWpnBase_C_OnPlaySFX) == 0x000018, "Wrong size on BPWpnBase_C_OnPlaySFX");
static_assert(offsetof(BPWpnBase_C_OnPlaySFX, Sound) == 0x000000, "Member 'BPWpnBase_C_OnPlaySFX::Sound' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_OnPlaySFX, Location) == 0x000008, "Member 'BPWpnBase_C_OnPlaySFX::Location' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_OnPlaySFX, IsDrop) == 0x000014, "Member 'BPWpnBase_C_OnPlaySFX::IsDrop' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_OnPlaySFX, IsOnlyOne) == 0x000015, "Member 'BPWpnBase_C_OnPlaySFX::IsOnlyOne' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_OnPlaySFX, IsReplace) == 0x000016, "Member 'BPWpnBase_C_OnPlaySFX::IsReplace' has a wrong offset!");

// Function BPWpnBase.BPWpnBase_C.CanFire
// 0x0030 (0x0030 - 0x0000)
struct BPWpnBase_C_CanFire final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckCD_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMer2GameState_C*                       K2Node_DynamicCast_AsMer_2Game_State;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue1;           // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue1;                  // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue2;                  // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue1;                   // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPWpnBase_C_CanFire) == 0x000008, "Wrong alignment on BPWpnBase_C_CanFire");
static_assert(sizeof(BPWpnBase_C_CanFire) == 0x000030, "Wrong size on BPWpnBase_C_CanFire");
static_assert(offsetof(BPWpnBase_C_CanFire, Result) == 0x000000, "Member 'BPWpnBase_C_CanFire::Result' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_CanFire, CallFunc_GetGameState_ReturnValue) == 0x000008, "Member 'BPWpnBase_C_CanFire::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_CanFire, CallFunc_CheckCD_ReturnValue) == 0x000010, "Member 'BPWpnBase_C_CanFire::CallFunc_CheckCD_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_CanFire, K2Node_DynamicCast_AsMer_2Game_State) == 0x000018, "Member 'BPWpnBase_C_CanFire::K2Node_DynamicCast_AsMer_2Game_State' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_CanFire, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BPWpnBase_C_CanFire::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_CanFire, CallFunc_Greater_IntInt_ReturnValue) == 0x000021, "Member 'BPWpnBase_C_CanFire::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_CanFire, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000022, "Member 'BPWpnBase_C_CanFire::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_CanFire, CallFunc_BooleanOR_ReturnValue) == 0x000023, "Member 'BPWpnBase_C_CanFire::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_CanFire, CallFunc_NotEqual_ByteByte_ReturnValue1) == 0x000024, "Member 'BPWpnBase_C_CanFire::CallFunc_NotEqual_ByteByte_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_CanFire, CallFunc_BooleanAND_ReturnValue) == 0x000025, "Member 'BPWpnBase_C_CanFire::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_CanFire, CallFunc_BooleanAND_ReturnValue1) == 0x000026, "Member 'BPWpnBase_C_CanFire::CallFunc_BooleanAND_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_CanFire, CallFunc_BooleanAND_ReturnValue2) == 0x000027, "Member 'BPWpnBase_C_CanFire::CallFunc_BooleanAND_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_CanFire, CallFunc_BooleanOR_ReturnValue1) == 0x000028, "Member 'BPWpnBase_C_CanFire::CallFunc_BooleanOR_ReturnValue1' has a wrong offset!");

// Function BPWpnBase.BPWpnBase_C.Reset
// 0x000C (0x000C - 0x0000)
struct BPWpnBase_C_Reset final
{
public:
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPWpnBase_C_Reset) == 0x000004, "Wrong alignment on BPWpnBase_C_Reset");
static_assert(sizeof(BPWpnBase_C_Reset) == 0x00000C, "Wrong size on BPWpnBase_C_Reset");
static_assert(offsetof(BPWpnBase_C_Reset, CallFunc_HasAuthority_ReturnValue) == 0x000000, "Member 'BPWpnBase_C_Reset::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_Reset, CallFunc_Multiply_IntInt_ReturnValue) == 0x000004, "Member 'BPWpnBase_C_Reset::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_Reset, CallFunc_Subtract_IntInt_ReturnValue) == 0x000008, "Member 'BPWpnBase_C_Reset::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");

// Function BPWpnBase.BPWpnBase_C.ExecFire
// 0x001C (0x001C - 0x0000)
struct BPWpnBase_C_ExecFire final
{
public:
	int32                                         DeadlyBulletNum;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetPoint;                                       // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsUseOffset_0;                                     // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsSpecial_0;                                       // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsNpc_0;                                           // 0x0012(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          FromRightHand;                                     // 0x0013(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue1;                   // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue1;                 // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue2;                   // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPWpnBase_C_ExecFire) == 0x000004, "Wrong alignment on BPWpnBase_C_ExecFire");
static_assert(sizeof(BPWpnBase_C_ExecFire) == 0x00001C, "Wrong size on BPWpnBase_C_ExecFire");
static_assert(offsetof(BPWpnBase_C_ExecFire, DeadlyBulletNum) == 0x000000, "Member 'BPWpnBase_C_ExecFire::DeadlyBulletNum' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ExecFire, TargetPoint) == 0x000004, "Member 'BPWpnBase_C_ExecFire::TargetPoint' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ExecFire, IsUseOffset_0) == 0x000010, "Member 'BPWpnBase_C_ExecFire::IsUseOffset_0' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ExecFire, IsSpecial_0) == 0x000011, "Member 'BPWpnBase_C_ExecFire::IsSpecial_0' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ExecFire, IsNpc_0) == 0x000012, "Member 'BPWpnBase_C_ExecFire::IsNpc_0' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ExecFire, FromRightHand) == 0x000013, "Member 'BPWpnBase_C_ExecFire::FromRightHand' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ExecFire, CallFunc_Not_PreBool_ReturnValue) == 0x000014, "Member 'BPWpnBase_C_ExecFire::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ExecFire, CallFunc_BooleanOR_ReturnValue) == 0x000015, "Member 'BPWpnBase_C_ExecFire::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ExecFire, CallFunc_BooleanOR_ReturnValue1) == 0x000016, "Member 'BPWpnBase_C_ExecFire::CallFunc_BooleanOR_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ExecFire, CallFunc_Not_PreBool_ReturnValue1) == 0x000017, "Member 'BPWpnBase_C_ExecFire::CallFunc_Not_PreBool_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ExecFire, CallFunc_BooleanOR_ReturnValue2) == 0x000018, "Member 'BPWpnBase_C_ExecFire::CallFunc_BooleanOR_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ExecFire, CallFunc_BooleanAND_ReturnValue) == 0x000019, "Member 'BPWpnBase_C_ExecFire::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BPWpnBase.BPWpnBase_C.PlayVFX
// 0x0080 (0x0080 - 0x0000)
struct BPWpnBase_C_PlayVFX final
{
public:
	class UParticleSystem*                        VFX;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	class UParticleSystemComponent*               ReturnVFX;                                         // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               CallFunc_SpawnParticle_ReturnValue;                // 0x0070(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPWpnBase_C_PlayVFX) == 0x000010, "Wrong alignment on BPWpnBase_C_PlayVFX");
static_assert(sizeof(BPWpnBase_C_PlayVFX) == 0x000080, "Wrong size on BPWpnBase_C_PlayVFX");
static_assert(offsetof(BPWpnBase_C_PlayVFX, VFX) == 0x000000, "Member 'BPWpnBase_C_PlayVFX::VFX' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_PlayVFX, Transform) == 0x000010, "Member 'BPWpnBase_C_PlayVFX::Transform' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_PlayVFX, ReturnVFX) == 0x000040, "Member 'BPWpnBase_C_PlayVFX::ReturnVFX' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_PlayVFX, CallFunc_BreakTransform_Location) == 0x000048, "Member 'BPWpnBase_C_PlayVFX::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_PlayVFX, CallFunc_BreakTransform_Rotation) == 0x000054, "Member 'BPWpnBase_C_PlayVFX::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_PlayVFX, CallFunc_BreakTransform_Scale) == 0x000060, "Member 'BPWpnBase_C_PlayVFX::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_PlayVFX, CallFunc_SpawnParticle_ReturnValue) == 0x000070, "Member 'BPWpnBase_C_PlayVFX::CallFunc_SpawnParticle_ReturnValue' has a wrong offset!");

// Function BPWpnBase.BPWpnBase_C.PlaySFX
// 0x0018 (0x0018 - 0x0000)
struct BPWpnBase_C_PlaySFX final
{
public:
	class USoundBase*                             Sound;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDrop;                                            // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsOnlyOne;                                         // 0x0015(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsReplace;                                         // 0x0016(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPWpnBase_C_PlaySFX) == 0x000008, "Wrong alignment on BPWpnBase_C_PlaySFX");
static_assert(sizeof(BPWpnBase_C_PlaySFX) == 0x000018, "Wrong size on BPWpnBase_C_PlaySFX");
static_assert(offsetof(BPWpnBase_C_PlaySFX, Sound) == 0x000000, "Member 'BPWpnBase_C_PlaySFX::Sound' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_PlaySFX, Location) == 0x000008, "Member 'BPWpnBase_C_PlaySFX::Location' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_PlaySFX, IsDrop) == 0x000014, "Member 'BPWpnBase_C_PlaySFX::IsDrop' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_PlaySFX, IsOnlyOne) == 0x000015, "Member 'BPWpnBase_C_PlaySFX::IsOnlyOne' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_PlaySFX, IsReplace) == 0x000016, "Member 'BPWpnBase_C_PlaySFX::IsReplace' has a wrong offset!");

// Function BPWpnBase.BPWpnBase_C.ExecReload
// 0x0014 (0x0014 - 0x0000)
struct BPWpnBase_C_ExecReload final
{
public:
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue1;                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue1;                  // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue2;                  // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPWpnBase_C_ExecReload) == 0x000004, "Wrong alignment on BPWpnBase_C_ExecReload");
static_assert(sizeof(BPWpnBase_C_ExecReload) == 0x000014, "Wrong size on BPWpnBase_C_ExecReload");
static_assert(offsetof(BPWpnBase_C_ExecReload, CallFunc_Not_PreBool_ReturnValue) == 0x000000, "Member 'BPWpnBase_C_ExecReload::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ExecReload, CallFunc_Not_PreBool_ReturnValue1) == 0x000001, "Member 'BPWpnBase_C_ExecReload::CallFunc_Not_PreBool_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ExecReload, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000002, "Member 'BPWpnBase_C_ExecReload::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ExecReload, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000004, "Member 'BPWpnBase_C_ExecReload::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ExecReload, CallFunc_BooleanAND_ReturnValue) == 0x000010, "Member 'BPWpnBase_C_ExecReload::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ExecReload, CallFunc_BooleanAND_ReturnValue1) == 0x000011, "Member 'BPWpnBase_C_ExecReload::CallFunc_BooleanAND_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ExecReload, CallFunc_BooleanAND_ReturnValue2) == 0x000012, "Member 'BPWpnBase_C_ExecReload::CallFunc_BooleanAND_ReturnValue2' has a wrong offset!");

// Function BPWpnBase.BPWpnBase_C.ChangeClip
// 0x0020 (0x0020 - 0x0000)
struct BPWpnBase_C_ChangeClip final
{
public:
	bool                                          FillBullet;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue1;         // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPWpnBase_C_ChangeClip) == 0x000004, "Wrong alignment on BPWpnBase_C_ChangeClip");
static_assert(sizeof(BPWpnBase_C_ChangeClip) == 0x000020, "Wrong size on BPWpnBase_C_ChangeClip");
static_assert(offsetof(BPWpnBase_C_ChangeClip, FillBullet) == 0x000000, "Member 'BPWpnBase_C_ChangeClip::FillBullet' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ChangeClip, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000001, "Member 'BPWpnBase_C_ChangeClip::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ChangeClip, CallFunc_Not_PreBool_ReturnValue) == 0x000002, "Member 'BPWpnBase_C_ChangeClip::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ChangeClip, CallFunc_BooleanOR_ReturnValue) == 0x000003, "Member 'BPWpnBase_C_ChangeClip::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ChangeClip, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000004, "Member 'BPWpnBase_C_ChangeClip::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ChangeClip, CallFunc_HasAuthority_ReturnValue) == 0x000010, "Member 'BPWpnBase_C_ChangeClip::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ChangeClip, Temp_bool_Variable) == 0x000011, "Member 'BPWpnBase_C_ChangeClip::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ChangeClip, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'BPWpnBase_C_ChangeClip::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ChangeClip, K2Node_Select_Default) == 0x000018, "Member 'BPWpnBase_C_ChangeClip::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ChangeClip, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00001C, "Member 'BPWpnBase_C_ChangeClip::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_ChangeClip, CallFunc_EqualEqual_ByteByte_ReturnValue1) == 0x00001D, "Member 'BPWpnBase_C_ChangeClip::CallFunc_EqualEqual_ByteByte_ReturnValue1' has a wrong offset!");

// Function BPWpnBase.BPWpnBase_C.StopFire
// 0x0001 (0x0001 - 0x0000)
struct BPWpnBase_C_StopFire final
{
public:
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPWpnBase_C_StopFire) == 0x000001, "Wrong alignment on BPWpnBase_C_StopFire");
static_assert(sizeof(BPWpnBase_C_StopFire) == 0x000001, "Wrong size on BPWpnBase_C_StopFire");
static_assert(offsetof(BPWpnBase_C_StopFire, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000000, "Member 'BPWpnBase_C_StopFire::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BPWpnBase.BPWpnBase_C.UpdateFire
// 0x0130 (0x0130 - 0x0000)
struct BPWpnBase_C_UpdateFire final
{
public:
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue1;                  // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue1;                   // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetSniperAimDirection_Direction;          // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ClassClass_ReturnValue;        // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetInstigator_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue1;                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue1;               // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidClass_ReturnValue;                 // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue2;               // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue1;           // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_72[0x2];                                       // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue1;                 // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x007A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue2;                  // 0x007B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue2;                   // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue2;                // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue1;              // 0x008D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E[0x2];                                       // 0x008E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetAimDirection_Direction;                // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SelectVector_ReturnValue;                 // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetAimOffsetDirection_Direction;          // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue2;                 // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanFire_Result;                           // 0x00B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00B6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00B7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x00D0(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue1;            // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABPPrjBase_C*                           CallFunc_FinishSpawningActor_ReturnValue;          // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0118(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue1;        // 0x0124(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPWpnBase_C_UpdateFire) == 0x000010, "Wrong alignment on BPWpnBase_C_UpdateFire");
static_assert(sizeof(BPWpnBase_C_UpdateFire) == 0x000130, "Wrong size on BPWpnBase_C_UpdateFire");
static_assert(offsetof(BPWpnBase_C_UpdateFire, CallFunc_Not_PreBool_ReturnValue) == 0x000000, "Member 'BPWpnBase_C_UpdateFire::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_UpdateFire, CallFunc_BooleanAND_ReturnValue) == 0x000001, "Member 'BPWpnBase_C_UpdateFire::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_UpdateFire, CallFunc_HasAuthority_ReturnValue) == 0x000002, "Member 'BPWpnBase_C_UpdateFire::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_UpdateFire, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000003, "Member 'BPWpnBase_C_UpdateFire::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_UpdateFire, CallFunc_BooleanOR_ReturnValue) == 0x000004, "Member 'BPWpnBase_C_UpdateFire::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_UpdateFire, CallFunc_BooleanAND_ReturnValue1) == 0x000005, "Member 'BPWpnBase_C_UpdateFire::CallFunc_BooleanAND_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_UpdateFire, CallFunc_BooleanOR_ReturnValue1) == 0x000006, "Member 'BPWpnBase_C_UpdateFire::CallFunc_BooleanOR_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_UpdateFire, CallFunc_GetSniperAimDirection_Direction) == 0x000008, "Member 'BPWpnBase_C_UpdateFire::CallFunc_GetSniperAimDirection_Direction' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_UpdateFire, CallFunc_EqualEqual_ClassClass_ReturnValue) == 0x000014, "Member 'BPWpnBase_C_UpdateFire::CallFunc_EqualEqual_ClassClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_UpdateFire, CallFunc_GetInstigator_ReturnValue) == 0x000018, "Member 'BPWpnBase_C_UpdateFire::CallFunc_GetInstigator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_UpdateFire, CallFunc_HasAuthority_ReturnValue1) == 0x000020, "Member 'BPWpnBase_C_UpdateFire::CallFunc_HasAuthority_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_UpdateFire, CallFunc_GetDisplayName_ReturnValue) == 0x000028, "Member 'BPWpnBase_C_UpdateFire::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_UpdateFire, CallFunc_Concat_StrStr_ReturnValue) == 0x000038, "Member 'BPWpnBase_C_UpdateFire::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_UpdateFire, CallFunc_Concat_StrStr_ReturnValue1) == 0x000048, "Member 'BPWpnBase_C_UpdateFire::CallFunc_Concat_StrStr_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_UpdateFire, CallFunc_IsValidClass_ReturnValue) == 0x000058, "Member 'BPWpnBase_C_UpdateFire::CallFunc_IsValidClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_UpdateFire, CallFunc_Concat_StrStr_ReturnValue2) == 0x000060, "Member 'BPWpnBase_C_UpdateFire::CallFunc_Concat_StrStr_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_UpdateFire, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000070, "Member 'BPWpnBase_C_UpdateFire::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_UpdateFire, CallFunc_EqualEqual_IntInt_ReturnValue1) == 0x000071, "Member 'BPWpnBase_C_UpdateFire::CallFunc_EqualEqual_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_UpdateFire, CallFunc_Add_IntInt_ReturnValue) == 0x000074, "Member 'BPWpnBase_C_UpdateFire::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_UpdateFire, CallFunc_Not_PreBool_ReturnValue1) == 0x000078, "Member 'BPWpnBase_C_UpdateFire::CallFunc_Not_PreBool_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_UpdateFire, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000079, "Member 'BPWpnBase_C_UpdateFire::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_UpdateFire, CallFunc_Greater_IntInt_ReturnValue) == 0x00007A, "Member 'BPWpnBase_C_UpdateFire::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_UpdateFire, CallFunc_BooleanAND_ReturnValue2) == 0x00007B, "Member 'BPWpnBase_C_UpdateFire::CallFunc_BooleanAND_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_UpdateFire, CallFunc_BooleanOR_ReturnValue2) == 0x00007C, "Member 'BPWpnBase_C_UpdateFire::CallFunc_BooleanOR_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_UpdateFire, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000080, "Member 'BPWpnBase_C_UpdateFire::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_UpdateFire, CallFunc_HasAuthority_ReturnValue2) == 0x00008C, "Member 'BPWpnBase_C_UpdateFire::CallFunc_HasAuthority_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_UpdateFire, CallFunc_Greater_IntInt_ReturnValue1) == 0x00008D, "Member 'BPWpnBase_C_UpdateFire::CallFunc_Greater_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_UpdateFire, CallFunc_GetAimDirection_Direction) == 0x000090, "Member 'BPWpnBase_C_UpdateFire::CallFunc_GetAimDirection_Direction' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_UpdateFire, CallFunc_SelectVector_ReturnValue) == 0x00009C, "Member 'BPWpnBase_C_UpdateFire::CallFunc_SelectVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_UpdateFire, CallFunc_GetAimOffsetDirection_Direction) == 0x0000A8, "Member 'BPWpnBase_C_UpdateFire::CallFunc_GetAimOffsetDirection_Direction' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_UpdateFire, CallFunc_Not_PreBool_ReturnValue2) == 0x0000B4, "Member 'BPWpnBase_C_UpdateFire::CallFunc_Not_PreBool_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_UpdateFire, CallFunc_CanFire_Result) == 0x0000B5, "Member 'BPWpnBase_C_UpdateFire::CallFunc_CanFire_Result' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_UpdateFire, CallFunc_Less_IntInt_ReturnValue) == 0x0000B6, "Member 'BPWpnBase_C_UpdateFire::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_UpdateFire, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000B7, "Member 'BPWpnBase_C_UpdateFire::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_UpdateFire, CallFunc_Less_FloatFloat_ReturnValue) == 0x0000B8, "Member 'BPWpnBase_C_UpdateFire::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_UpdateFire, CallFunc_Subtract_IntInt_ReturnValue) == 0x0000BC, "Member 'BPWpnBase_C_UpdateFire::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_UpdateFire, CallFunc_GetOwner_ReturnValue) == 0x0000C0, "Member 'BPWpnBase_C_UpdateFire::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_UpdateFire, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x0000D0, "Member 'BPWpnBase_C_UpdateFire::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_UpdateFire, CallFunc_LessEqual_IntInt_ReturnValue1) == 0x000100, "Member 'BPWpnBase_C_UpdateFire::CallFunc_LessEqual_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_UpdateFire, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000108, "Member 'BPWpnBase_C_UpdateFire::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_UpdateFire, CallFunc_FinishSpawningActor_ReturnValue) == 0x000110, "Member 'BPWpnBase_C_UpdateFire::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_UpdateFire, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000118, "Member 'BPWpnBase_C_UpdateFire::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_UpdateFire, CallFunc_Multiply_VectorFloat_ReturnValue1) == 0x000124, "Member 'BPWpnBase_C_UpdateFire::CallFunc_Multiply_VectorFloat_ReturnValue1' has a wrong offset!");

// Function BPWpnBase.BPWpnBase_C.GetAimOffsetDirection
// 0x0058 (0x0058 - 0x0000)
struct BPWpnBase_C_GetAimOffsetDirection final
{
public:
	struct FVector                                Direction;                                         // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TempDir;                                           // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetAimDirection_Direction;                // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetAimDirection_Direction1;               // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegAcos_ReturnValue;                      // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetAimOffsetDirection_Direction;          // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_DegreesToRadians_ReturnValue;             // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RandomUnitVectorInConeInRadians_ReturnValue; // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPWpnBase_C_GetAimOffsetDirection) == 0x000004, "Wrong alignment on BPWpnBase_C_GetAimOffsetDirection");
static_assert(sizeof(BPWpnBase_C_GetAimOffsetDirection) == 0x000058, "Wrong size on BPWpnBase_C_GetAimOffsetDirection");
static_assert(offsetof(BPWpnBase_C_GetAimOffsetDirection, Direction) == 0x000000, "Member 'BPWpnBase_C_GetAimOffsetDirection::Direction' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetAimOffsetDirection, TempDir) == 0x00000C, "Member 'BPWpnBase_C_GetAimOffsetDirection::TempDir' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetAimOffsetDirection, CallFunc_GetAimDirection_Direction) == 0x000018, "Member 'BPWpnBase_C_GetAimOffsetDirection::CallFunc_GetAimDirection_Direction' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetAimOffsetDirection, CallFunc_GetAimDirection_Direction1) == 0x000024, "Member 'BPWpnBase_C_GetAimOffsetDirection::CallFunc_GetAimDirection_Direction1' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetAimOffsetDirection, CallFunc_Dot_VectorVector_ReturnValue) == 0x000030, "Member 'BPWpnBase_C_GetAimOffsetDirection::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetAimOffsetDirection, CallFunc_DegAcos_ReturnValue) == 0x000034, "Member 'BPWpnBase_C_GetAimOffsetDirection::CallFunc_DegAcos_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetAimOffsetDirection, CallFunc_GetAimOffsetDirection_Direction) == 0x000038, "Member 'BPWpnBase_C_GetAimOffsetDirection::CallFunc_GetAimOffsetDirection_Direction' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetAimOffsetDirection, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000044, "Member 'BPWpnBase_C_GetAimOffsetDirection::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetAimOffsetDirection, CallFunc_DegreesToRadians_ReturnValue) == 0x000048, "Member 'BPWpnBase_C_GetAimOffsetDirection::CallFunc_DegreesToRadians_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetAimOffsetDirection, CallFunc_RandomUnitVectorInConeInRadians_ReturnValue) == 0x00004C, "Member 'BPWpnBase_C_GetAimOffsetDirection::CallFunc_RandomUnitVectorInConeInRadians_ReturnValue' has a wrong offset!");

// Function BPWpnBase.BPWpnBase_C.GetAimDirection
// 0x0200 (0x0200 - 0x0000)
struct BPWpnBase_C_GetAimDirection final
{
public:
	struct FVector                                Direction;                                         // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0010(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0020(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue1;     // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue2;     // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue3;     // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue1;       // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue1;                      // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0098(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x00B0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_139[0x3];                                      // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue2;       // 0x013C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue2;                      // 0x0148(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0154(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0155(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_156[0x2];                                      // 0x0156(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0160(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x016C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0178(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0184(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x01A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x01C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABPWpnBase_C*                           K2Node_DynamicCast_AsBPWpn_Base;                   // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D9[0x3];                                      // 0x01D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Distance_Between_Locations_Distance;      // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E1[0x3];                                      // 0x01E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue3;       // 0x01E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue3;                      // 0x01F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPWpnBase_C_GetAimDirection) == 0x000008, "Wrong alignment on BPWpnBase_C_GetAimDirection");
static_assert(sizeof(BPWpnBase_C_GetAimDirection) == 0x000200, "Wrong size on BPWpnBase_C_GetAimDirection");
static_assert(offsetof(BPWpnBase_C_GetAimDirection, Direction) == 0x000000, "Member 'BPWpnBase_C_GetAimDirection::Direction' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetAimDirection, Temp_object_Variable) == 0x000010, "Member 'BPWpnBase_C_GetAimDirection::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetAimDirection, K2Node_MakeArray_Array) == 0x000020, "Member 'BPWpnBase_C_GetAimDirection::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetAimDirection, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000030, "Member 'BPWpnBase_C_GetAimDirection::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetAimDirection, CallFunc_K2_GetComponentLocation_ReturnValue1) == 0x00003C, "Member 'BPWpnBase_C_GetAimDirection::CallFunc_K2_GetComponentLocation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetAimDirection, CallFunc_VSize_ReturnValue) == 0x000048, "Member 'BPWpnBase_C_GetAimDirection::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetAimDirection, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00004C, "Member 'BPWpnBase_C_GetAimDirection::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetAimDirection, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x000058, "Member 'BPWpnBase_C_GetAimDirection::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetAimDirection, CallFunc_Normal_ReturnValue) == 0x00005C, "Member 'BPWpnBase_C_GetAimDirection::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetAimDirection, CallFunc_K2_GetComponentLocation_ReturnValue2) == 0x000068, "Member 'BPWpnBase_C_GetAimDirection::CallFunc_K2_GetComponentLocation_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetAimDirection, CallFunc_K2_GetComponentLocation_ReturnValue3) == 0x000074, "Member 'BPWpnBase_C_GetAimDirection::CallFunc_K2_GetComponentLocation_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetAimDirection, CallFunc_Subtract_VectorVector_ReturnValue1) == 0x000080, "Member 'BPWpnBase_C_GetAimDirection::CallFunc_Subtract_VectorVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetAimDirection, CallFunc_Normal_ReturnValue1) == 0x00008C, "Member 'BPWpnBase_C_GetAimDirection::CallFunc_Normal_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetAimDirection, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000098, "Member 'BPWpnBase_C_GetAimDirection::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetAimDirection, CallFunc_Add_VectorVector_ReturnValue) == 0x0000A4, "Member 'BPWpnBase_C_GetAimDirection::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetAimDirection, CallFunc_LineTraceSingleForObjects_OutHit) == 0x0000B0, "Member 'BPWpnBase_C_GetAimDirection::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetAimDirection, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x000138, "Member 'BPWpnBase_C_GetAimDirection::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetAimDirection, CallFunc_Subtract_VectorVector_ReturnValue2) == 0x00013C, "Member 'BPWpnBase_C_GetAimDirection::CallFunc_Subtract_VectorVector_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetAimDirection, CallFunc_Normal_ReturnValue2) == 0x000148, "Member 'BPWpnBase_C_GetAimDirection::CallFunc_Normal_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetAimDirection, CallFunc_BreakHitResult_bBlockingHit) == 0x000154, "Member 'BPWpnBase_C_GetAimDirection::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetAimDirection, CallFunc_BreakHitResult_bInitialOverlap) == 0x000155, "Member 'BPWpnBase_C_GetAimDirection::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetAimDirection, CallFunc_BreakHitResult_Time) == 0x000158, "Member 'BPWpnBase_C_GetAimDirection::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetAimDirection, CallFunc_BreakHitResult_Distance) == 0x00015C, "Member 'BPWpnBase_C_GetAimDirection::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetAimDirection, CallFunc_BreakHitResult_Location) == 0x000160, "Member 'BPWpnBase_C_GetAimDirection::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetAimDirection, CallFunc_BreakHitResult_ImpactPoint) == 0x00016C, "Member 'BPWpnBase_C_GetAimDirection::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetAimDirection, CallFunc_BreakHitResult_Normal) == 0x000178, "Member 'BPWpnBase_C_GetAimDirection::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetAimDirection, CallFunc_BreakHitResult_ImpactNormal) == 0x000184, "Member 'BPWpnBase_C_GetAimDirection::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetAimDirection, CallFunc_BreakHitResult_PhysMat) == 0x000190, "Member 'BPWpnBase_C_GetAimDirection::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetAimDirection, CallFunc_BreakHitResult_HitActor) == 0x000198, "Member 'BPWpnBase_C_GetAimDirection::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetAimDirection, CallFunc_BreakHitResult_HitComponent) == 0x0001A0, "Member 'BPWpnBase_C_GetAimDirection::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetAimDirection, CallFunc_BreakHitResult_HitBoneName) == 0x0001A8, "Member 'BPWpnBase_C_GetAimDirection::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetAimDirection, CallFunc_BreakHitResult_HitItem) == 0x0001B0, "Member 'BPWpnBase_C_GetAimDirection::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetAimDirection, CallFunc_BreakHitResult_FaceIndex) == 0x0001B4, "Member 'BPWpnBase_C_GetAimDirection::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetAimDirection, CallFunc_BreakHitResult_TraceStart) == 0x0001B8, "Member 'BPWpnBase_C_GetAimDirection::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetAimDirection, CallFunc_BreakHitResult_TraceEnd) == 0x0001C4, "Member 'BPWpnBase_C_GetAimDirection::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetAimDirection, K2Node_DynamicCast_AsBPWpn_Base) == 0x0001D0, "Member 'BPWpnBase_C_GetAimDirection::K2Node_DynamicCast_AsBPWpn_Base' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetAimDirection, K2Node_DynamicCast_bSuccess) == 0x0001D8, "Member 'BPWpnBase_C_GetAimDirection::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetAimDirection, CallFunc_Distance_Between_Locations_Distance) == 0x0001DC, "Member 'BPWpnBase_C_GetAimDirection::CallFunc_Distance_Between_Locations_Distance' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetAimDirection, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0001E0, "Member 'BPWpnBase_C_GetAimDirection::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetAimDirection, CallFunc_Subtract_VectorVector_ReturnValue3) == 0x0001E4, "Member 'BPWpnBase_C_GetAimDirection::CallFunc_Subtract_VectorVector_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetAimDirection, CallFunc_Normal_ReturnValue3) == 0x0001F0, "Member 'BPWpnBase_C_GetAimDirection::CallFunc_Normal_ReturnValue3' has a wrong offset!");

// Function BPWpnBase.BPWpnBase_C.UpdateAimLocation
// 0x000C (0x000C - 0x0000)
struct BPWpnBase_C_UpdateAimLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPWpnBase_C_UpdateAimLocation) == 0x000004, "Wrong alignment on BPWpnBase_C_UpdateAimLocation");
static_assert(sizeof(BPWpnBase_C_UpdateAimLocation) == 0x00000C, "Wrong size on BPWpnBase_C_UpdateAimLocation");
static_assert(offsetof(BPWpnBase_C_UpdateAimLocation, Location) == 0x000000, "Member 'BPWpnBase_C_UpdateAimLocation::Location' has a wrong offset!");

// Function BPWpnBase.BPWpnBase_C.CheckCD
// 0x0002 (0x0002 - 0x0000)
struct BPWpnBase_C_CheckCD final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPWpnBase_C_CheckCD) == 0x000001, "Wrong alignment on BPWpnBase_C_CheckCD");
static_assert(sizeof(BPWpnBase_C_CheckCD) == 0x000002, "Wrong size on BPWpnBase_C_CheckCD");
static_assert(offsetof(BPWpnBase_C_CheckCD, ReturnValue) == 0x000000, "Member 'BPWpnBase_C_CheckCD::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_CheckCD, CallFunc_Less_FloatFloat_ReturnValue) == 0x000001, "Member 'BPWpnBase_C_CheckCD::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");

// Function BPWpnBase.BPWpnBase_C.GetSniperAimDirection
// 0x0278 (0x0278 - 0x0000)
struct BPWpnBase_C_GetSniperAimDirection final
{
public:
	struct FVector                                Direction;                                         // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0010(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue1;     // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue2;     // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue3;     // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetAimDirection_Direction;                // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue1;       // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue1;                      // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0098(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue4;     // 0x00C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue2;       // 0x00CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x00D8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_161[0x3];                                      // 0x0161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Normal_ReturnValue2;                      // 0x0164(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0171(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_172[0x2];                                      // 0x0172(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x017C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0188(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0194(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x01A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1AC[0x4];                                      // 0x01AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x01C0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x01E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABPWpnBase_C*                           K2Node_DynamicCast_AsBPWpn_Base;                   // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F9[0x7];                                      // 0x01F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AWpn_Sniper_C*                          K2Node_DynamicCast_AsWpn_Sniper;                   // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0209(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_20A[0x2];                                      // 0x020A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Distance_Between_Locations_Distance;      // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_211[0x3];                                      // 0x0211(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0214(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue3;       // 0x0220(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue1;           // 0x022C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue4;       // 0x0238(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0244(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_245[0x3];                                      // 0x0245(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Normal_ReturnValue3;                      // 0x0248(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue5;       // 0x0254(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0260(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_261[0x3];                                      // 0x0261(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Normal_ReturnValue4;                      // 0x0264(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0270(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPWpnBase_C_GetSniperAimDirection) == 0x000008, "Wrong alignment on BPWpnBase_C_GetSniperAimDirection");
static_assert(sizeof(BPWpnBase_C_GetSniperAimDirection) == 0x000278, "Wrong size on BPWpnBase_C_GetSniperAimDirection");
static_assert(offsetof(BPWpnBase_C_GetSniperAimDirection, Direction) == 0x000000, "Member 'BPWpnBase_C_GetSniperAimDirection::Direction' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetSniperAimDirection, K2Node_MakeArray_Array) == 0x000010, "Member 'BPWpnBase_C_GetSniperAimDirection::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetSniperAimDirection, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000020, "Member 'BPWpnBase_C_GetSniperAimDirection::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetSniperAimDirection, CallFunc_K2_GetComponentLocation_ReturnValue1) == 0x00002C, "Member 'BPWpnBase_C_GetSniperAimDirection::CallFunc_K2_GetComponentLocation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetSniperAimDirection, CallFunc_VSize_ReturnValue) == 0x000038, "Member 'BPWpnBase_C_GetSniperAimDirection::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetSniperAimDirection, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00003C, "Member 'BPWpnBase_C_GetSniperAimDirection::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetSniperAimDirection, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x000048, "Member 'BPWpnBase_C_GetSniperAimDirection::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetSniperAimDirection, CallFunc_Normal_ReturnValue) == 0x00004C, "Member 'BPWpnBase_C_GetSniperAimDirection::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetSniperAimDirection, CallFunc_K2_GetComponentLocation_ReturnValue2) == 0x000058, "Member 'BPWpnBase_C_GetSniperAimDirection::CallFunc_K2_GetComponentLocation_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetSniperAimDirection, CallFunc_K2_GetComponentLocation_ReturnValue3) == 0x000064, "Member 'BPWpnBase_C_GetSniperAimDirection::CallFunc_K2_GetComponentLocation_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetSniperAimDirection, CallFunc_GetAimDirection_Direction) == 0x000070, "Member 'BPWpnBase_C_GetSniperAimDirection::CallFunc_GetAimDirection_Direction' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetSniperAimDirection, CallFunc_Subtract_VectorVector_ReturnValue1) == 0x00007C, "Member 'BPWpnBase_C_GetSniperAimDirection::CallFunc_Subtract_VectorVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetSniperAimDirection, CallFunc_Normal_ReturnValue1) == 0x000088, "Member 'BPWpnBase_C_GetSniperAimDirection::CallFunc_Normal_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetSniperAimDirection, Temp_object_Variable) == 0x000098, "Member 'BPWpnBase_C_GetSniperAimDirection::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetSniperAimDirection, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000A8, "Member 'BPWpnBase_C_GetSniperAimDirection::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetSniperAimDirection, CallFunc_Add_VectorVector_ReturnValue) == 0x0000B4, "Member 'BPWpnBase_C_GetSniperAimDirection::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetSniperAimDirection, CallFunc_K2_GetComponentLocation_ReturnValue4) == 0x0000C0, "Member 'BPWpnBase_C_GetSniperAimDirection::CallFunc_K2_GetComponentLocation_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetSniperAimDirection, CallFunc_Subtract_VectorVector_ReturnValue2) == 0x0000CC, "Member 'BPWpnBase_C_GetSniperAimDirection::CallFunc_Subtract_VectorVector_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetSniperAimDirection, CallFunc_LineTraceSingleForObjects_OutHit) == 0x0000D8, "Member 'BPWpnBase_C_GetSniperAimDirection::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetSniperAimDirection, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x000160, "Member 'BPWpnBase_C_GetSniperAimDirection::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetSniperAimDirection, CallFunc_Normal_ReturnValue2) == 0x000164, "Member 'BPWpnBase_C_GetSniperAimDirection::CallFunc_Normal_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetSniperAimDirection, CallFunc_BreakHitResult_bBlockingHit) == 0x000170, "Member 'BPWpnBase_C_GetSniperAimDirection::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetSniperAimDirection, CallFunc_BreakHitResult_bInitialOverlap) == 0x000171, "Member 'BPWpnBase_C_GetSniperAimDirection::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetSniperAimDirection, CallFunc_BreakHitResult_Time) == 0x000174, "Member 'BPWpnBase_C_GetSniperAimDirection::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetSniperAimDirection, CallFunc_BreakHitResult_Distance) == 0x000178, "Member 'BPWpnBase_C_GetSniperAimDirection::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetSniperAimDirection, CallFunc_BreakHitResult_Location) == 0x00017C, "Member 'BPWpnBase_C_GetSniperAimDirection::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetSniperAimDirection, CallFunc_BreakHitResult_ImpactPoint) == 0x000188, "Member 'BPWpnBase_C_GetSniperAimDirection::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetSniperAimDirection, CallFunc_BreakHitResult_Normal) == 0x000194, "Member 'BPWpnBase_C_GetSniperAimDirection::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetSniperAimDirection, CallFunc_BreakHitResult_ImpactNormal) == 0x0001A0, "Member 'BPWpnBase_C_GetSniperAimDirection::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetSniperAimDirection, CallFunc_BreakHitResult_PhysMat) == 0x0001B0, "Member 'BPWpnBase_C_GetSniperAimDirection::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetSniperAimDirection, CallFunc_BreakHitResult_HitActor) == 0x0001B8, "Member 'BPWpnBase_C_GetSniperAimDirection::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetSniperAimDirection, CallFunc_BreakHitResult_HitComponent) == 0x0001C0, "Member 'BPWpnBase_C_GetSniperAimDirection::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetSniperAimDirection, CallFunc_BreakHitResult_HitBoneName) == 0x0001C8, "Member 'BPWpnBase_C_GetSniperAimDirection::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetSniperAimDirection, CallFunc_BreakHitResult_HitItem) == 0x0001D0, "Member 'BPWpnBase_C_GetSniperAimDirection::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetSniperAimDirection, CallFunc_BreakHitResult_FaceIndex) == 0x0001D4, "Member 'BPWpnBase_C_GetSniperAimDirection::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetSniperAimDirection, CallFunc_BreakHitResult_TraceStart) == 0x0001D8, "Member 'BPWpnBase_C_GetSniperAimDirection::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetSniperAimDirection, CallFunc_BreakHitResult_TraceEnd) == 0x0001E4, "Member 'BPWpnBase_C_GetSniperAimDirection::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetSniperAimDirection, K2Node_DynamicCast_AsBPWpn_Base) == 0x0001F0, "Member 'BPWpnBase_C_GetSniperAimDirection::K2Node_DynamicCast_AsBPWpn_Base' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetSniperAimDirection, K2Node_DynamicCast_bSuccess) == 0x0001F8, "Member 'BPWpnBase_C_GetSniperAimDirection::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetSniperAimDirection, K2Node_DynamicCast_AsWpn_Sniper) == 0x000200, "Member 'BPWpnBase_C_GetSniperAimDirection::K2Node_DynamicCast_AsWpn_Sniper' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetSniperAimDirection, K2Node_DynamicCast_bSuccess1) == 0x000208, "Member 'BPWpnBase_C_GetSniperAimDirection::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetSniperAimDirection, CallFunc_BooleanOR_ReturnValue) == 0x000209, "Member 'BPWpnBase_C_GetSniperAimDirection::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetSniperAimDirection, CallFunc_Distance_Between_Locations_Distance) == 0x00020C, "Member 'BPWpnBase_C_GetSniperAimDirection::CallFunc_Distance_Between_Locations_Distance' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetSniperAimDirection, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000210, "Member 'BPWpnBase_C_GetSniperAimDirection::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetSniperAimDirection, CallFunc_GetSocketLocation_ReturnValue) == 0x000214, "Member 'BPWpnBase_C_GetSniperAimDirection::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetSniperAimDirection, CallFunc_Subtract_VectorVector_ReturnValue3) == 0x000220, "Member 'BPWpnBase_C_GetSniperAimDirection::CallFunc_Subtract_VectorVector_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetSniperAimDirection, CallFunc_GetSocketLocation_ReturnValue1) == 0x00022C, "Member 'BPWpnBase_C_GetSniperAimDirection::CallFunc_GetSocketLocation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetSniperAimDirection, CallFunc_Subtract_VectorVector_ReturnValue4) == 0x000238, "Member 'BPWpnBase_C_GetSniperAimDirection::CallFunc_Subtract_VectorVector_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetSniperAimDirection, CallFunc_IsValid_ReturnValue) == 0x000244, "Member 'BPWpnBase_C_GetSniperAimDirection::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetSniperAimDirection, CallFunc_Normal_ReturnValue3) == 0x000248, "Member 'BPWpnBase_C_GetSniperAimDirection::CallFunc_Normal_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetSniperAimDirection, CallFunc_Subtract_VectorVector_ReturnValue5) == 0x000254, "Member 'BPWpnBase_C_GetSniperAimDirection::CallFunc_Subtract_VectorVector_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetSniperAimDirection, CallFunc_Not_PreBool_ReturnValue) == 0x000260, "Member 'BPWpnBase_C_GetSniperAimDirection::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetSniperAimDirection, CallFunc_Normal_ReturnValue4) == 0x000264, "Member 'BPWpnBase_C_GetSniperAimDirection::CallFunc_Normal_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BPWpnBase_C_GetSniperAimDirection, CallFunc_BooleanAND_ReturnValue) == 0x000270, "Member 'BPWpnBase_C_GetSniperAimDirection::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

}

