#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SteamVRInputDevice

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "SteamVRInputDevice_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Class SteamVRInputDevice.SteamVRInputDeviceFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class USteamVRInputDeviceFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool DeleteUserInputIni(class FString* UserInputFile);
	static void FindSteamVR_Action(class FName ActionName, bool* bResult, struct FSteamVRAction* FoundAction, struct FSteamVRActionSet* FoundActionSet, class FName ActionSet);
	static bool FindSteamVR_ActionOrigin(class FName ActionName, class FName ActionSet);
	static TArray<struct FSteamVRInputBindingInfo> FindSteamVR_InputBindingInfo(class FName ActionName, class FName ActionSet);
	static void FindSteamVR_OriginTrackedDeviceInfo(class FName ActionName, bool* bResult, struct FSteamVRInputOriginInfo* InputOriginInfo, class FName ActionSet);
	static void GetControllerFidelity(EControllerFidelity* LeftControllerFidelity, EControllerFidelity* RightControllerFidelity);
	static void GetCurlsAndSplaysState(bool* LeftHandState, bool* RightHandState);
	static void GetFingerCurlsAndSplays(EHand hand, struct FSteamVRFingerCurls* FingerCurls, struct FSteamVRFingerSplays* FingerSplays, ESkeletalSummaryDataType SummaryDataType);
	static void GetLeftHandPoseData(struct FVector* Position, struct FRotator* Orientation, struct FVector* AngularVelocity, struct FVector* Velocity);
	static void GetPoseSource(bool* bUsingSkeletonPose);
	static void GetRightHandPoseData(struct FVector* Position, struct FRotator* Orientation, struct FVector* AngularVelocity, struct FVector* Velocity);
	static void GetSkeletalState(bool* LeftHandState, bool* RightHandState);
	static void GetSkeletalTransform(struct FSteamVRSkeletonTransform* LeftHand, struct FSteamVRSkeletonTransform* RightHand, bool bWithController);
	static void GetSteamVR_ActionArray(TArray<struct FSteamVRAction>* SteamVRActions);
	static void GetSteamVR_ActionSetArray(TArray<struct FSteamVRActionSet>* SteamVRActionSets);
	static float GetSteamVR_GlobalPredictedSecondsFromNow();
	static bool GetSteamVR_HandPoseRelativeToNow(struct FVector* Position, struct FRotator* Orientation, ESteamVRHand hand, float PredictedSecondsFromNow);
	static TArray<struct FSteamVRInputBindingInfo> GetSteamVR_InputBindingInfo(const struct FSteamVRAction& SteamVRActionHandle);
	static void GetSteamVR_OriginLocalizedName(const struct FSteamVRAction& SteamVRAction, const TArray<ESteamVRInputStringBits>& LocalizedParts, class FString* OriginLocalizedName);
	static bool GetSteamVR_OriginTrackedDeviceInfo(const struct FSteamVRAction& SteamVRAction, struct FSteamVRInputOriginInfo* InputOriginInfo);
	static float GetUserIPD();
	static void PlaySteamVR_HapticFeedback(ESteamVRHand hand, float StartSecondsFromNow, float DurationSeconds, float Frequency, float Amplitude);
	static bool ResetSeatedPosition();
	static void SetCurlsAndSplaysState(bool NewLeftHandState, bool NewRightHandState);
	static void SetPoseSource(bool bUseSkeletonPose);
	static float SetSteamVR_GlobalPredictedSecondsFromNow(float NewValue);
	static void ShowAllSteamVR_ActionOrigins();
	static void ShowBindingsUI(EHand hand, class FName ActionSet, bool bShowInVR);
	static void ShowSteamVR_ActionOrigin(const struct FSteamVRAction& SteamVRAction, const struct FSteamVRActionSet& SteamVRActionSet);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamVRInputDeviceFunctionLibrary">();
	}
	static class USteamVRInputDeviceFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamVRInputDeviceFunctionLibrary>();
	}
};
static_assert(alignof(USteamVRInputDeviceFunctionLibrary) == 0x000008, "Wrong alignment on USteamVRInputDeviceFunctionLibrary");
static_assert(sizeof(USteamVRInputDeviceFunctionLibrary) == 0x000028, "Wrong size on USteamVRInputDeviceFunctionLibrary");

// Class SteamVRInputDevice.SteamVRTrackingReferences
// 0x0058 (0x0148 - 0x00F0)
class USteamVRTrackingReferences final : public UActorComponent
{
public:
	UMulticastDelegateProperty_                   OnTrackedDeviceActivated;                          // 0x00F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnTrackedDeviceDeactivated;                        // 0x0100(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                         ActiveDevicePollFrequency;                         // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TrackingReferenceScale;                            // 0x0114(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UStaticMeshComponent*>           TrackingReferences;                                // 0x0120(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_130[0x18];                                     // 0x0130(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HideTrackingReferences();
	bool ShowTrackingReferences(class UStaticMesh* TrackingReferenceMesh);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamVRTrackingReferences">();
	}
	static class USteamVRTrackingReferences* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamVRTrackingReferences>();
	}
};
static_assert(alignof(USteamVRTrackingReferences) == 0x000008, "Wrong alignment on USteamVRTrackingReferences");
static_assert(sizeof(USteamVRTrackingReferences) == 0x000148, "Wrong size on USteamVRTrackingReferences");
static_assert(offsetof(USteamVRTrackingReferences, OnTrackedDeviceActivated) == 0x0000F0, "Member 'USteamVRTrackingReferences::OnTrackedDeviceActivated' has a wrong offset!");
static_assert(offsetof(USteamVRTrackingReferences, OnTrackedDeviceDeactivated) == 0x000100, "Member 'USteamVRTrackingReferences::OnTrackedDeviceDeactivated' has a wrong offset!");
static_assert(offsetof(USteamVRTrackingReferences, ActiveDevicePollFrequency) == 0x000110, "Member 'USteamVRTrackingReferences::ActiveDevicePollFrequency' has a wrong offset!");
static_assert(offsetof(USteamVRTrackingReferences, TrackingReferenceScale) == 0x000114, "Member 'USteamVRTrackingReferences::TrackingReferenceScale' has a wrong offset!");
static_assert(offsetof(USteamVRTrackingReferences, TrackingReferences) == 0x000120, "Member 'USteamVRTrackingReferences::TrackingReferences' has a wrong offset!");

}

