#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerSwitchPoint

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlayerSwitchPoint.BP_PlayerSwitchPoint_C
// 0x00C0 (0x03E8 - 0x0328)
class ABP_PlayerSwitchPoint_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0328(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UParticleSystemComponent*               TriggerActiveParticle;                             // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               TeleportTip;                                       // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               DeactiveParticle;                                  // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               ActiveParticle;                                    // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       Spline;                                            // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   TextRender;                                        // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          IsToken;                                           // 0x0370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_371[0x3];                                      // 0x0371(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 TextColor;                                         // 0x0374(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TextSize;                                          // 0x0378(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsActive;                                          // 0x037C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_37D[0x3];                                      // 0x037D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStaticMeshComponent*>           Arrows;                                            // 0x0380(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                         ArrowLen;                                          // 0x0390(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ArrowWidth;                                        // 0x0394(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsShowArrow;                                       // 0x0398(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsShowArrowCD_OK;                                  // 0x0399(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39A[0x6];                                      // 0x039A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               MI;                                                // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CoolDown;                                          // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CoolDownSetting;                                   // 0x03AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsChoiceCheck;                                     // 0x03B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B1[0x7];                                      // 0x03B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_CharacterBase_C*                    Player;                                            // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsWaveChoice;                                      // 0x03C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C1[0x7];                                      // 0x03C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AI_Wave_C*                          ParentWave;                                        // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInCD;                                            // 0x03D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D1[0x7];                                      // 0x03D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               Temp;                                              // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCloseCD;                                         // 0x03E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_PlayerSwitchPoint(int32 EntryPoint);
	void ShowTriggerActive(bool Show);
	void CustomEvent_0(class UParticleSystemComponent* PSystem);
	void SetWaveChoice(bool Value);
	void ShowChoice(bool IsChoseMe);
	void DoCoolDown(float CD);
	void SetToken(bool Value);
	void ShowArrow(bool IsShowArrow_0);
	void SetActiveMe(bool IsActive_0);
	void ReceiveTick(float DeltaSeconds);
	void GenerateArrows();
	void ReceiveBeginPlay();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlayerSwitchPoint_C">();
	}
	static class ABP_PlayerSwitchPoint_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PlayerSwitchPoint_C>();
	}
};
static_assert(alignof(ABP_PlayerSwitchPoint_C) == 0x000008, "Wrong alignment on ABP_PlayerSwitchPoint_C");
static_assert(sizeof(ABP_PlayerSwitchPoint_C) == 0x0003E8, "Wrong size on ABP_PlayerSwitchPoint_C");
static_assert(offsetof(ABP_PlayerSwitchPoint_C, UberGraphFrame) == 0x000328, "Member 'ABP_PlayerSwitchPoint_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_PlayerSwitchPoint_C, TriggerActiveParticle) == 0x000330, "Member 'ABP_PlayerSwitchPoint_C::TriggerActiveParticle' has a wrong offset!");
static_assert(offsetof(ABP_PlayerSwitchPoint_C, TeleportTip) == 0x000338, "Member 'ABP_PlayerSwitchPoint_C::TeleportTip' has a wrong offset!");
static_assert(offsetof(ABP_PlayerSwitchPoint_C, DeactiveParticle) == 0x000340, "Member 'ABP_PlayerSwitchPoint_C::DeactiveParticle' has a wrong offset!");
static_assert(offsetof(ABP_PlayerSwitchPoint_C, ActiveParticle) == 0x000348, "Member 'ABP_PlayerSwitchPoint_C::ActiveParticle' has a wrong offset!");
static_assert(offsetof(ABP_PlayerSwitchPoint_C, Spline) == 0x000350, "Member 'ABP_PlayerSwitchPoint_C::Spline' has a wrong offset!");
static_assert(offsetof(ABP_PlayerSwitchPoint_C, StaticMesh) == 0x000358, "Member 'ABP_PlayerSwitchPoint_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_PlayerSwitchPoint_C, TextRender) == 0x000360, "Member 'ABP_PlayerSwitchPoint_C::TextRender' has a wrong offset!");
static_assert(offsetof(ABP_PlayerSwitchPoint_C, Arrow) == 0x000368, "Member 'ABP_PlayerSwitchPoint_C::Arrow' has a wrong offset!");
static_assert(offsetof(ABP_PlayerSwitchPoint_C, IsToken) == 0x000370, "Member 'ABP_PlayerSwitchPoint_C::IsToken' has a wrong offset!");
static_assert(offsetof(ABP_PlayerSwitchPoint_C, TextColor) == 0x000374, "Member 'ABP_PlayerSwitchPoint_C::TextColor' has a wrong offset!");
static_assert(offsetof(ABP_PlayerSwitchPoint_C, TextSize) == 0x000378, "Member 'ABP_PlayerSwitchPoint_C::TextSize' has a wrong offset!");
static_assert(offsetof(ABP_PlayerSwitchPoint_C, IsActive) == 0x00037C, "Member 'ABP_PlayerSwitchPoint_C::IsActive' has a wrong offset!");
static_assert(offsetof(ABP_PlayerSwitchPoint_C, Arrows) == 0x000380, "Member 'ABP_PlayerSwitchPoint_C::Arrows' has a wrong offset!");
static_assert(offsetof(ABP_PlayerSwitchPoint_C, ArrowLen) == 0x000390, "Member 'ABP_PlayerSwitchPoint_C::ArrowLen' has a wrong offset!");
static_assert(offsetof(ABP_PlayerSwitchPoint_C, ArrowWidth) == 0x000394, "Member 'ABP_PlayerSwitchPoint_C::ArrowWidth' has a wrong offset!");
static_assert(offsetof(ABP_PlayerSwitchPoint_C, IsShowArrow) == 0x000398, "Member 'ABP_PlayerSwitchPoint_C::IsShowArrow' has a wrong offset!");
static_assert(offsetof(ABP_PlayerSwitchPoint_C, IsShowArrowCD_OK) == 0x000399, "Member 'ABP_PlayerSwitchPoint_C::IsShowArrowCD_OK' has a wrong offset!");
static_assert(offsetof(ABP_PlayerSwitchPoint_C, MI) == 0x0003A0, "Member 'ABP_PlayerSwitchPoint_C::MI' has a wrong offset!");
static_assert(offsetof(ABP_PlayerSwitchPoint_C, CoolDown) == 0x0003A8, "Member 'ABP_PlayerSwitchPoint_C::CoolDown' has a wrong offset!");
static_assert(offsetof(ABP_PlayerSwitchPoint_C, CoolDownSetting) == 0x0003AC, "Member 'ABP_PlayerSwitchPoint_C::CoolDownSetting' has a wrong offset!");
static_assert(offsetof(ABP_PlayerSwitchPoint_C, IsChoiceCheck) == 0x0003B0, "Member 'ABP_PlayerSwitchPoint_C::IsChoiceCheck' has a wrong offset!");
static_assert(offsetof(ABP_PlayerSwitchPoint_C, Player) == 0x0003B8, "Member 'ABP_PlayerSwitchPoint_C::Player' has a wrong offset!");
static_assert(offsetof(ABP_PlayerSwitchPoint_C, IsWaveChoice) == 0x0003C0, "Member 'ABP_PlayerSwitchPoint_C::IsWaveChoice' has a wrong offset!");
static_assert(offsetof(ABP_PlayerSwitchPoint_C, ParentWave) == 0x0003C8, "Member 'ABP_PlayerSwitchPoint_C::ParentWave' has a wrong offset!");
static_assert(offsetof(ABP_PlayerSwitchPoint_C, IsInCD) == 0x0003D0, "Member 'ABP_PlayerSwitchPoint_C::IsInCD' has a wrong offset!");
static_assert(offsetof(ABP_PlayerSwitchPoint_C, Temp) == 0x0003D8, "Member 'ABP_PlayerSwitchPoint_C::Temp' has a wrong offset!");
static_assert(offsetof(ABP_PlayerSwitchPoint_C, IsCloseCD) == 0x0003E0, "Member 'ABP_PlayerSwitchPoint_C::IsCloseCD' has a wrong offset!");

}

