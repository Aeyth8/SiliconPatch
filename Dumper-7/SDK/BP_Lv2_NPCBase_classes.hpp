#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Lv2_NPCBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "BE_Lv2_NPCAttackstate_structs.hpp"
#include "Enum_BehaviorType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "EnumDifficuty_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Lv2_NPCBase.BP_Lv2_NPCBase_C
// 0x0140 (0x0880 - 0x0740)
#pragma pack(push, 0x1)
class alignas(0x10) ABP_Lv2_NPCBase_C : public ACharacter
{
public:
	uint8                                         Pad_738[0x8];                                      // 0x0738(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0740(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   Cube;                                              // 0x0748(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPawnSensingComponent*                  PawnSensing;                                       // 0x0750(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	Enum_BehaviorType                             BehaviorType;                                      // 0x0758(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_759[0x7];                                      // 0x0759(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PatrolRoute_C*                      Spline;                                            // 0x0760(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PatrolIsLoop;                                      // 0x0768(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_769[0x3];                                      // 0x0769(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurSplineIndex;                                    // 0x076C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         modulus;                                           // 0x0770(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalSplineIndex;                                  // 0x0774(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDead;                                            // 0x0778(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_779[0x7];                                      // 0x0779(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlackboardComponent*                   Blackboard;                                        // 0x0780(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PatrolWaitTime;                                    // 0x0788(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanChangeBehavior;                                 // 0x078C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_78D[0x3];                                      // 0x078D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PatrolSpeed;                                       // 0x0790(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RunSpeed;                                          // 0x0794(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AlertTime;                                         // 0x0798(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Health;                                            // 0x079C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      instigatorinstigator;                              // 0x07A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Weapon;                                            // 0x07A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Attack_CD;                                         // 0x07B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeadLifeSpan;                                      // 0x07B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABPWeaponBase_C*                        curWeapon;                                         // 0x07B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 TargetActor;                                       // 0x07C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   OnFocusOver;                                       // 0x07C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnArrived;                                         // 0x07D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          CanArrived;                                        // 0x07E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7E9[0x7];                                      // 0x07E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Lv2_Spawner_C*                      ParentSpawner;                                     // 0x07F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   OnDead;                                            // 0x07F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         SightDistance;                                     // 0x0808(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SightAngle;                                        // 0x080C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurPatrolWaitTime;                                 // 0x0810(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBE_Lv2_NPCAttackstate                        AttackState;                                       // 0x0814(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_815[0x3];                                      // 0x0815(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BulletNum;                                         // 0x0818(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentBullet;                                     // 0x081C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReloaTime;                                         // 0x0820(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_824[0x4];                                      // 0x0824(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_Lv2_TargetPoint_C*>          MovePoint;                                         // 0x0828(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	class ABP_Lv2_TargetPoint_C*                  CurPoint;                                          // 0x0838(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurattackCount;                                    // 0x0840(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               PatrolWaitRotation;                                // 0x0844(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CanFire;                                           // 0x0850(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_851[0x3];                                      // 0x0851(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AttackCount;                                       // 0x0854(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMer2GameInstance_C*                    GameInstance;                                      // 0x0858(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanFindPoint;                                      // 0x0860(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_861[0x3];                                      // 0x0861(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxHealth;                                         // 0x0864(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MoveLocation;                                      // 0x0868(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldAlert;                                       // 0x0874(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_Lv2_NPCBase(int32 EntryPoint);
	void ReceiveAnyDamage(float Damage, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void Fire();
	void HeadKill(const struct FVector& loacation, const struct FVector& Normal);
	void BndEvt__Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void InitPatrol(class ABP_PatrolRoute_C* Path);
	void NextSplinelocation(struct FVector* Location, struct FRotator* Rotation);
	void ChangeBehavior(Enum_BehaviorType NewState, const struct FVector& TargetLocation);
	void FindEnemie(class AActor* TargetActor_0);
	void Findcorpse(const struct FVector& TargetLocation);
	void SetSpeed();
	void GameOver(int32 TipsIndex);
	void Dead(bool ByWeapon);
	void InitSight();
	void Attack(bool UseControllerRotation, float* Delay);
	void FindMovePoint(struct FVector* NewParam);
	void GiaArrived();
	void InitNPC();
	void GetDifficultConfig(struct FLv2_DifficultStruct* NewParam);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Lv2_NPCBase_C">();
	}
	static class ABP_Lv2_NPCBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Lv2_NPCBase_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABP_Lv2_NPCBase_C) == 0x000010, "Wrong alignment on ABP_Lv2_NPCBase_C");
static_assert(sizeof(ABP_Lv2_NPCBase_C) == 0x000880, "Wrong size on ABP_Lv2_NPCBase_C");
static_assert(offsetof(ABP_Lv2_NPCBase_C, UberGraphFrame) == 0x000740, "Member 'ABP_Lv2_NPCBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_NPCBase_C, Cube) == 0x000748, "Member 'ABP_Lv2_NPCBase_C::Cube' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_NPCBase_C, PawnSensing) == 0x000750, "Member 'ABP_Lv2_NPCBase_C::PawnSensing' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_NPCBase_C, BehaviorType) == 0x000758, "Member 'ABP_Lv2_NPCBase_C::BehaviorType' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_NPCBase_C, Spline) == 0x000760, "Member 'ABP_Lv2_NPCBase_C::Spline' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_NPCBase_C, PatrolIsLoop) == 0x000768, "Member 'ABP_Lv2_NPCBase_C::PatrolIsLoop' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_NPCBase_C, CurSplineIndex) == 0x00076C, "Member 'ABP_Lv2_NPCBase_C::CurSplineIndex' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_NPCBase_C, modulus) == 0x000770, "Member 'ABP_Lv2_NPCBase_C::modulus' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_NPCBase_C, TotalSplineIndex) == 0x000774, "Member 'ABP_Lv2_NPCBase_C::TotalSplineIndex' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_NPCBase_C, IsDead) == 0x000778, "Member 'ABP_Lv2_NPCBase_C::IsDead' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_NPCBase_C, Blackboard) == 0x000780, "Member 'ABP_Lv2_NPCBase_C::Blackboard' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_NPCBase_C, PatrolWaitTime) == 0x000788, "Member 'ABP_Lv2_NPCBase_C::PatrolWaitTime' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_NPCBase_C, CanChangeBehavior) == 0x00078C, "Member 'ABP_Lv2_NPCBase_C::CanChangeBehavior' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_NPCBase_C, PatrolSpeed) == 0x000790, "Member 'ABP_Lv2_NPCBase_C::PatrolSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_NPCBase_C, RunSpeed) == 0x000794, "Member 'ABP_Lv2_NPCBase_C::RunSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_NPCBase_C, AlertTime) == 0x000798, "Member 'ABP_Lv2_NPCBase_C::AlertTime' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_NPCBase_C, Health) == 0x00079C, "Member 'ABP_Lv2_NPCBase_C::Health' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_NPCBase_C, instigatorinstigator) == 0x0007A0, "Member 'ABP_Lv2_NPCBase_C::instigatorinstigator' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_NPCBase_C, Weapon) == 0x0007A8, "Member 'ABP_Lv2_NPCBase_C::Weapon' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_NPCBase_C, Attack_CD) == 0x0007B0, "Member 'ABP_Lv2_NPCBase_C::Attack_CD' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_NPCBase_C, DeadLifeSpan) == 0x0007B4, "Member 'ABP_Lv2_NPCBase_C::DeadLifeSpan' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_NPCBase_C, curWeapon) == 0x0007B8, "Member 'ABP_Lv2_NPCBase_C::curWeapon' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_NPCBase_C, TargetActor) == 0x0007C0, "Member 'ABP_Lv2_NPCBase_C::TargetActor' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_NPCBase_C, OnFocusOver) == 0x0007C8, "Member 'ABP_Lv2_NPCBase_C::OnFocusOver' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_NPCBase_C, OnArrived) == 0x0007D8, "Member 'ABP_Lv2_NPCBase_C::OnArrived' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_NPCBase_C, CanArrived) == 0x0007E8, "Member 'ABP_Lv2_NPCBase_C::CanArrived' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_NPCBase_C, ParentSpawner) == 0x0007F0, "Member 'ABP_Lv2_NPCBase_C::ParentSpawner' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_NPCBase_C, OnDead) == 0x0007F8, "Member 'ABP_Lv2_NPCBase_C::OnDead' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_NPCBase_C, SightDistance) == 0x000808, "Member 'ABP_Lv2_NPCBase_C::SightDistance' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_NPCBase_C, SightAngle) == 0x00080C, "Member 'ABP_Lv2_NPCBase_C::SightAngle' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_NPCBase_C, CurPatrolWaitTime) == 0x000810, "Member 'ABP_Lv2_NPCBase_C::CurPatrolWaitTime' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_NPCBase_C, AttackState) == 0x000814, "Member 'ABP_Lv2_NPCBase_C::AttackState' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_NPCBase_C, BulletNum) == 0x000818, "Member 'ABP_Lv2_NPCBase_C::BulletNum' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_NPCBase_C, CurrentBullet) == 0x00081C, "Member 'ABP_Lv2_NPCBase_C::CurrentBullet' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_NPCBase_C, ReloaTime) == 0x000820, "Member 'ABP_Lv2_NPCBase_C::ReloaTime' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_NPCBase_C, MovePoint) == 0x000828, "Member 'ABP_Lv2_NPCBase_C::MovePoint' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_NPCBase_C, CurPoint) == 0x000838, "Member 'ABP_Lv2_NPCBase_C::CurPoint' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_NPCBase_C, CurattackCount) == 0x000840, "Member 'ABP_Lv2_NPCBase_C::CurattackCount' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_NPCBase_C, PatrolWaitRotation) == 0x000844, "Member 'ABP_Lv2_NPCBase_C::PatrolWaitRotation' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_NPCBase_C, CanFire) == 0x000850, "Member 'ABP_Lv2_NPCBase_C::CanFire' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_NPCBase_C, AttackCount) == 0x000854, "Member 'ABP_Lv2_NPCBase_C::AttackCount' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_NPCBase_C, GameInstance) == 0x000858, "Member 'ABP_Lv2_NPCBase_C::GameInstance' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_NPCBase_C, CanFindPoint) == 0x000860, "Member 'ABP_Lv2_NPCBase_C::CanFindPoint' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_NPCBase_C, MaxHealth) == 0x000864, "Member 'ABP_Lv2_NPCBase_C::MaxHealth' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_NPCBase_C, MoveLocation) == 0x000868, "Member 'ABP_Lv2_NPCBase_C::MoveLocation' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_NPCBase_C, ShouldAlert) == 0x000874, "Member 'ABP_Lv2_NPCBase_C::ShouldAlert' has a wrong offset!");

}

