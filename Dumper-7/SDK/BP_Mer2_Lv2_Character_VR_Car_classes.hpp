#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Mer2_Lv2_Character_VR_Car

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_Lv2_characterBase_classes.hpp"
#include "SiliconRising_structs.hpp"
#include "Enum_PlayMode_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Mer2_Lv2_Character_VR_Car.BP_Mer2_Lv2_Character_VR_Car_C
// 0x0040 (0x0E80 - 0x0E40)
class ABP_Mer2_Lv2_Character_VR_Car_C final : public ABP_Lv2_characterBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Mer2_Lv2_Character_VR_Car_C;     // 0x0E40(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USkeletalMeshComponent*                 IKBody;                                            // 0x0E48(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSetSpectatorUI;                                  // 0x0E50(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsFlipFlopUI;                                      // 0x0E51(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E52[0x6];                                      // 0x0E52(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimBP_Andy_IK_C*                      AnimInstance;                                      // 0x0E58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEnableHMD;                                       // 0x0E60(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          IsOntoLeftHand;                                    // 0x0E61(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsOntoRightHand;                                   // 0x0E62(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsOntoHead;                                        // 0x0E63(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          OnSeat;                                            // 0x0E64(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CanMove;                                           // 0x0E65(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E66[0x2];                                      // 0x0E66(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UIKAnimInstance*                        AnimBP;                                            // 0x0E68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LastDirectionVector;                               // 0x0E70(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDebug;                                           // 0x0E7C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_Mer2_Lv2_Character_VR_Car(int32 EntryPoint);
	void UpdateToClient(const struct FTransform& head, const struct FTransform& LeftHand_0, const struct FTransform& RightHand_0);
	void UpdateToServer(const struct FTransform& head, const struct FTransform& LeftHand_0, const struct FTransform& RightHand_0);
	void UpdateReplication();
	void InpActEvt_L_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_O_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void InpActEvt_I_K2Node_InputKeyEvent_2(const struct FKey& Key);
	void InpActEvt_K_K2Node_InputKeyEvent_3(const struct FKey& Key);
	void InpActEvt_Nine_K2Node_InputKeyEvent_4(const struct FKey& Key);
	void InpActEvt_Eight_K2Node_InputKeyEvent_5(const struct FKey& Key);
	void SetSpectatorUI(bool IsButton, bool FlipFlop);
	void ResetCameraHeight();
	void RotatePointAroundPoint(class USceneComponent* Center, const struct FVector& RotateTargetLocation, float Angle, struct FVector* TargetLocation);
	void SetTriggerStatus(bool IsRightHand, bool Value);
	void SetHandType(bool IsRightHand, EItemTypes Value);
	void InpAxisEvt_LookUp_K2Node_InputAxisEvent_172(float AxisValue);
	void InpAxisEvt_Turn_K2Node_InputAxisEvent_157(float AxisValue);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Mer2_Lv2_Character_VR_Car_C">();
	}
	static class ABP_Mer2_Lv2_Character_VR_Car_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Mer2_Lv2_Character_VR_Car_C>();
	}
};
static_assert(alignof(ABP_Mer2_Lv2_Character_VR_Car_C) == 0x000010, "Wrong alignment on ABP_Mer2_Lv2_Character_VR_Car_C");
static_assert(sizeof(ABP_Mer2_Lv2_Character_VR_Car_C) == 0x000E80, "Wrong size on ABP_Mer2_Lv2_Character_VR_Car_C");
static_assert(offsetof(ABP_Mer2_Lv2_Character_VR_Car_C, UberGraphFrame_BP_Mer2_Lv2_Character_VR_Car_C) == 0x000E40, "Member 'ABP_Mer2_Lv2_Character_VR_Car_C::UberGraphFrame_BP_Mer2_Lv2_Character_VR_Car_C' has a wrong offset!");
static_assert(offsetof(ABP_Mer2_Lv2_Character_VR_Car_C, IKBody) == 0x000E48, "Member 'ABP_Mer2_Lv2_Character_VR_Car_C::IKBody' has a wrong offset!");
static_assert(offsetof(ABP_Mer2_Lv2_Character_VR_Car_C, IsSetSpectatorUI) == 0x000E50, "Member 'ABP_Mer2_Lv2_Character_VR_Car_C::IsSetSpectatorUI' has a wrong offset!");
static_assert(offsetof(ABP_Mer2_Lv2_Character_VR_Car_C, IsFlipFlopUI) == 0x000E51, "Member 'ABP_Mer2_Lv2_Character_VR_Car_C::IsFlipFlopUI' has a wrong offset!");
static_assert(offsetof(ABP_Mer2_Lv2_Character_VR_Car_C, AnimInstance) == 0x000E58, "Member 'ABP_Mer2_Lv2_Character_VR_Car_C::AnimInstance' has a wrong offset!");
static_assert(offsetof(ABP_Mer2_Lv2_Character_VR_Car_C, IsEnableHMD) == 0x000E60, "Member 'ABP_Mer2_Lv2_Character_VR_Car_C::IsEnableHMD' has a wrong offset!");
static_assert(offsetof(ABP_Mer2_Lv2_Character_VR_Car_C, IsOntoLeftHand) == 0x000E61, "Member 'ABP_Mer2_Lv2_Character_VR_Car_C::IsOntoLeftHand' has a wrong offset!");
static_assert(offsetof(ABP_Mer2_Lv2_Character_VR_Car_C, IsOntoRightHand) == 0x000E62, "Member 'ABP_Mer2_Lv2_Character_VR_Car_C::IsOntoRightHand' has a wrong offset!");
static_assert(offsetof(ABP_Mer2_Lv2_Character_VR_Car_C, IsOntoHead) == 0x000E63, "Member 'ABP_Mer2_Lv2_Character_VR_Car_C::IsOntoHead' has a wrong offset!");
static_assert(offsetof(ABP_Mer2_Lv2_Character_VR_Car_C, OnSeat) == 0x000E64, "Member 'ABP_Mer2_Lv2_Character_VR_Car_C::OnSeat' has a wrong offset!");
static_assert(offsetof(ABP_Mer2_Lv2_Character_VR_Car_C, CanMove) == 0x000E65, "Member 'ABP_Mer2_Lv2_Character_VR_Car_C::CanMove' has a wrong offset!");
static_assert(offsetof(ABP_Mer2_Lv2_Character_VR_Car_C, AnimBP) == 0x000E68, "Member 'ABP_Mer2_Lv2_Character_VR_Car_C::AnimBP' has a wrong offset!");
static_assert(offsetof(ABP_Mer2_Lv2_Character_VR_Car_C, LastDirectionVector) == 0x000E70, "Member 'ABP_Mer2_Lv2_Character_VR_Car_C::LastDirectionVector' has a wrong offset!");
static_assert(offsetof(ABP_Mer2_Lv2_Character_VR_Car_C, IsDebug) == 0x000E7C, "Member 'ABP_Mer2_Lv2_Character_VR_Car_C::IsDebug' has a wrong offset!");

}

