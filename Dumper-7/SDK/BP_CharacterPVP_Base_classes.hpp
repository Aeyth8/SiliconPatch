#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CharacterPVP_Base

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "Enum_ControllerType_structs.hpp"
#include "SiliconRising_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CharacterPVP_Base.BP_CharacterPVP_Base_C
// 0x01B0 (0x08F0 - 0x0740)
class ABP_CharacterPVP_Base_C : public ACharacter
{
public:
	uint8                                         Pad_738[0x8];                                      // 0x0738(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0740(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UTextRenderComponent*                   TextRender;                                        // 0x0748(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       DeathUI;                                           // 0x0750(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  DeathPostprocess;                                  // 0x0758(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DeathCamera;                                       // 0x0760(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        LeftTracePoint;                                    // 0x0768(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        RightTracePoint;                                   // 0x0770(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        HeadPoint;                                         // 0x0778(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 IKMesh;                                            // 0x0780(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   DamageSphere;                                      // 0x0788(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UKRVRMotionController_C*                LeftMotionController;                              // 0x0790(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UKRVRMotionController_C*                RightMotionController;                             // 0x0798(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       MainCamera;                                        // 0x07A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        VRRoot;                                            // 0x07A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         HitReaction_BlendWeight_E2C0391A4380EA52900637BD16D22989; // 0x07B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            HitReaction__Direction_E2C0391A4380EA52900637BD16D22989; // 0x07B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B5[0x3];                                      // 0x07B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     HitReaction;                                       // 0x07B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MouseInputSense;                                   // 0x07C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C4[0x4];                                      // 0x07C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABPWeaponBase_C*                        LeftWeapon;                                        // 0x07C8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	class ABPWeaponBase_C*                        RightWeapon;                                       // 0x07D0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	class ABPDefaultHand_C*                       LeftHand;                                          // 0x07D8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	class ABPRightHand_C*                         RightHand;                                         // 0x07E0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          OnSeat;                                            // 0x07E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CanMove;                                           // 0x07E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7EA[0x6];                                      // 0x07EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TeamTag;                                           // 0x07F0(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, ExposeOnSpawn, HasGetValueTypeHash)
	TArray<class ABP_CharacterPVP_Base_C*>        EnemyChars;                                        // 0x0800(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ABP_CharacterPVP_Base_C*>        CompanionChars;                                    // 0x0810(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          IsAIControlled;                                    // 0x0820(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_821[0x7];                                      // 0x0821(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PVP_StartPosition_C*                CurrentStartTarget;                                // 0x0828(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PVP_StartPosition_C*                LastStartTarget;                                   // 0x0830(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HP;                                                // 0x0838(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxHP;                                             // 0x083C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DamageSphereMI;                                    // 0x0840(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Undead;                                            // 0x0848(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsDead;                                            // 0x0849(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UseKeyboardControl;                                // 0x084A(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsHMDEnabled;                                      // 0x084B(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_84C[0x4];                                      // 0x084C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BoneName;                                          // 0x0850(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IsInHitReaction;                                   // 0x0860(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_861[0x3];                                      // 0x0861(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TargetState;                                       // 0x0864(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SoundVolume;                                       // 0x0868(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInAttackLoop;                                    // 0x086C(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_86D[0x3];                                      // 0x086D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitNormal;                                         // 0x0870(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HitDamage;                                         // 0x087C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCrouch;                                          // 0x0880(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsRightMControllerEnable;                          // 0x0881(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          IsLeftMControllerEnable;                           // 0x0882(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_883[0x1];                                      // 0x0883(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HeadDamageRatio;                                   // 0x0884(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BodyDamageRatio;                                   // 0x0888(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LimbsDamageRatio;                                  // 0x088C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABPWeaponBase_C*                        LeftPointWeapon;                                   // 0x0890(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABPWeaponBase_C*                        RightPointWeapon;                                  // 0x0898(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FlipFlop;                                          // 0x08A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8A1[0x3];                                      // 0x08A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HealRepMini;                                       // 0x08A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HealRepAmount;                                     // 0x08A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HealRepInterval;                                   // 0x08AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurHealRepInterval;                                // 0x08B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8B4[0x4];                                      // 0x08B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_CharacterPVP_Base_C*                Killer;                                            // 0x08B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStopFire;                                        // 0x08C0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsShowHand;                                        // 0x08C1(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsGameStart;                                       // 0x08C2(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_8C3[0x1];                                      // 0x08C3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CharType;                                          // 0x08C4(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UDeathUI_C*                             DeathUIObj;                                        // 0x08C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Shadow;                                            // 0x08D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFinishedGame;                                    // 0x08D8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8D9[0x7];                                      // 0x08D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 LeftHandClass;                                     // 0x08E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 RightHandClass;                                    // 0x08E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_CharacterPVP_Base(int32 EntryPoint);
	void ReceivePossessed(class AController* NewController);
	void RunOnServer();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void MulticastSlowdown(bool Slow_);
	void SlowDownGame();
	void OnCameraFadeOut(float _Dt);
	void OnCameraFadeIn(float _Dt);
	void OnResetDeathStatus();
	void OnResetAllStatusBroadcast();
	void OnResetAllStatus();
	void OnShowInvin(bool IsShow);
	void OnBackToMainMenu();
	void OnShowMeshBroadcast(bool Show);
	void OnShowMesh(bool Show);
	void OnTeleportMe(const struct FTransform& Target);
	void ShowDeadPostprocess(bool Show);
	void OnDeathCamera(bool IsReset);
	void StopAIShoot(bool IsStopFire_0);
	void SetRenderCustomDepth(bool Value);
	void UpdateHP(float DeltaTime);
	void DestroyPickWeapon(class AActor* Weapon);
	void ReceiveRadialDamage(float DamageReceived, const class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void SetHMDStatus(bool Value);
	void UpdateToClient(const struct FTransform& head, const struct FTransform& LeftHand_0, const struct FTransform& RightHand_0);
	void UpdateToServer(const struct FTransform& head, const struct FTransform& LeftHand_0, const struct FTransform& RightHand_0);
	void UpdateReplication();
	void DropCharWeapon(bool IsRight, bool IsDestroy);
	void OnMotionControllerCheck();
	void SetMotionControllerEnable(bool IsRight, bool Value);
	void UnPoccessChar();
	void OnHitReaction(const class FString& BoneName_0, const struct FVector& HitLocation, const struct FVector& HitNormal_0, float HitDamage_0);
	void OnCrouch(bool Value);
	void BndEvt__IKMesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void CheckHMDStatus();
	void OnLostConnection();
	void ResetControllerRotation(const struct FRotator& Rotation);
	void HealMe(float Health);
	void DamageMe(float Damage, class ABP_CharacterPVP_Base_C* Causer);
	void OnHPTick();
	void OnDead(class ABP_CharacterPVP_Base_C* Killer_0);
	void OnHapticEffect(class UHapticFeedbackEffect_Base* HapticEffect, EControllerHand hand, float Scale, bool Loop);
	void Reload(bool IsRightHand);
	void ReleaseTrigger(bool IsRightHand);
	void PullTrigger(bool IsRightHand);
	void SpawnWeapon(EItemTypes WeaponType, bool IsRight);
	void ResetRotation();
	void PauseAIControl();
	void SetAnimCrouch(bool Value);
	void AIControlTick(float DeltaSeconds);
	void EndAIControl();
	void StartAIControl();
	void CheatSore();
	void SetUndead(bool Value);
	void InpAxisEvt_MoveRight_K2Node_InputAxisEvent_192(float AxisValue);
	void InpAxisEvt_MoveForward_K2Node_InputAxisEvent_181(float AxisValue);
	void InpAxisEvt_LookUp_K2Node_InputAxisEvent_172(float AxisValue);
	void InpAxisEvt_Turn_K2Node_InputAxisEvent_157(float AxisValue);
	void InpActEvt_Reload_L_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_Fire_L_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpActEvt_Fire_L_K2Node_InputActionEvent_2(const struct FKey& Key);
	void InpActEvt_Fire_K2Node_InputActionEvent_3(const struct FKey& Key);
	void InpActEvt_Fire_K2Node_InputActionEvent_4(const struct FKey& Key);
	void InpActEvt_Reload_K2Node_InputActionEvent_5(const struct FKey& Key);
	void InpActEvt_LeftAlt_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_Nine_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void InpActEvt_M_K2Node_InputKeyEvent_2(const struct FKey& Key);
	void InpActEvt_Eight_K2Node_InputKeyEvent_3(const struct FKey& Key);
	void InpActEvt_Seven_K2Node_InputKeyEvent_4(const struct FKey& Key);
	void InpActEvt_Six_K2Node_InputKeyEvent_5(const struct FKey& Key);
	void InpActEvt_Five_K2Node_InputKeyEvent_6(const struct FKey& Key);
	void InpActEvt_Four_K2Node_InputKeyEvent_7(const struct FKey& Key);
	void InpActEvt_U_K2Node_InputKeyEvent_8(const struct FKey& Key);
	void InpActEvt_Three_K2Node_InputKeyEvent_9(const struct FKey& Key);
	void InpActEvt_Two_K2Node_InputKeyEvent_10(const struct FKey& Key);
	void InpActEvt_One_K2Node_InputKeyEvent_11(const struct FKey& Key);
	void InpActEvt_I_K2Node_InputKeyEvent_12(const struct FKey& Key);
	void InpActEvt_K_K2Node_InputKeyEvent_13(const struct FKey& Key);
	void InpActEvt_Decimal_K2Node_InputKeyEvent_14(const struct FKey& Key);
	void InpActEvt_LeftControl_K2Node_InputKeyEvent_15(const struct FKey& Key);
	void InpActEvt_LeftControl_K2Node_InputKeyEvent_16(const struct FKey& Key);
	void InpActEvt_Jump_K2Node_InputActionEvent_6(const struct FKey& Key);
	void InpActEvt_Jump_K2Node_InputActionEvent_7(const struct FKey& Key);
	void InpActEvt_L_K2Node_InputKeyEvent_17(const struct FKey& Key);
	void HitReaction__UpdateFunc();
	void HitReaction__FinishedFunc();
	void UserConstructionScript();
	void GetAimPos(struct FVector* Pos);
	void OnRep_RightHand();
	void OnRep_LeftHand();
	void OnRep_RightWeapon();
	void OnRep_LeftWeapon();
	void WeaponInputAction();
	void FindTargetToShoot(class USceneComponent** Target);
	void GetAIAimPos(struct FVector* Pos);
	void UpdateHandUI();
	void OnRep_IsLeftMControllerEnable();
	void OnRep_IsRightMControllerEnable();
	void HitFunction(class UObject* Object, const struct FHitResult& Hit, float RadialDamage);
	void GetDamageFromBone(class FName BoneName_0, float BaseDamage, float* Damage);
	void CheckPointWeapon();
	void IsPointWeapon(bool RightHand_0, bool* Value);
	void OnRep_IsGameStart();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CharacterPVP_Base_C">();
	}
	static class ABP_CharacterPVP_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_CharacterPVP_Base_C>();
	}
};
static_assert(alignof(ABP_CharacterPVP_Base_C) == 0x000010, "Wrong alignment on ABP_CharacterPVP_Base_C");
static_assert(sizeof(ABP_CharacterPVP_Base_C) == 0x0008F0, "Wrong size on ABP_CharacterPVP_Base_C");
static_assert(offsetof(ABP_CharacterPVP_Base_C, UberGraphFrame) == 0x000740, "Member 'ABP_CharacterPVP_Base_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, TextRender) == 0x000748, "Member 'ABP_CharacterPVP_Base_C::TextRender' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, DeathUI) == 0x000750, "Member 'ABP_CharacterPVP_Base_C::DeathUI' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, DeathPostprocess) == 0x000758, "Member 'ABP_CharacterPVP_Base_C::DeathPostprocess' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, DeathCamera) == 0x000760, "Member 'ABP_CharacterPVP_Base_C::DeathCamera' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, LeftTracePoint) == 0x000768, "Member 'ABP_CharacterPVP_Base_C::LeftTracePoint' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, RightTracePoint) == 0x000770, "Member 'ABP_CharacterPVP_Base_C::RightTracePoint' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, HeadPoint) == 0x000778, "Member 'ABP_CharacterPVP_Base_C::HeadPoint' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, IKMesh) == 0x000780, "Member 'ABP_CharacterPVP_Base_C::IKMesh' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, DamageSphere) == 0x000788, "Member 'ABP_CharacterPVP_Base_C::DamageSphere' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, LeftMotionController) == 0x000790, "Member 'ABP_CharacterPVP_Base_C::LeftMotionController' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, RightMotionController) == 0x000798, "Member 'ABP_CharacterPVP_Base_C::RightMotionController' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, MainCamera) == 0x0007A0, "Member 'ABP_CharacterPVP_Base_C::MainCamera' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, VRRoot) == 0x0007A8, "Member 'ABP_CharacterPVP_Base_C::VRRoot' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, HitReaction_BlendWeight_E2C0391A4380EA52900637BD16D22989) == 0x0007B0, "Member 'ABP_CharacterPVP_Base_C::HitReaction_BlendWeight_E2C0391A4380EA52900637BD16D22989' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, HitReaction__Direction_E2C0391A4380EA52900637BD16D22989) == 0x0007B4, "Member 'ABP_CharacterPVP_Base_C::HitReaction__Direction_E2C0391A4380EA52900637BD16D22989' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, HitReaction) == 0x0007B8, "Member 'ABP_CharacterPVP_Base_C::HitReaction' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, MouseInputSense) == 0x0007C0, "Member 'ABP_CharacterPVP_Base_C::MouseInputSense' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, LeftWeapon) == 0x0007C8, "Member 'ABP_CharacterPVP_Base_C::LeftWeapon' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, RightWeapon) == 0x0007D0, "Member 'ABP_CharacterPVP_Base_C::RightWeapon' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, LeftHand) == 0x0007D8, "Member 'ABP_CharacterPVP_Base_C::LeftHand' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, RightHand) == 0x0007E0, "Member 'ABP_CharacterPVP_Base_C::RightHand' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, OnSeat) == 0x0007E8, "Member 'ABP_CharacterPVP_Base_C::OnSeat' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, CanMove) == 0x0007E9, "Member 'ABP_CharacterPVP_Base_C::CanMove' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, TeamTag) == 0x0007F0, "Member 'ABP_CharacterPVP_Base_C::TeamTag' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, EnemyChars) == 0x000800, "Member 'ABP_CharacterPVP_Base_C::EnemyChars' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, CompanionChars) == 0x000810, "Member 'ABP_CharacterPVP_Base_C::CompanionChars' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, IsAIControlled) == 0x000820, "Member 'ABP_CharacterPVP_Base_C::IsAIControlled' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, CurrentStartTarget) == 0x000828, "Member 'ABP_CharacterPVP_Base_C::CurrentStartTarget' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, LastStartTarget) == 0x000830, "Member 'ABP_CharacterPVP_Base_C::LastStartTarget' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, HP) == 0x000838, "Member 'ABP_CharacterPVP_Base_C::HP' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, MaxHP) == 0x00083C, "Member 'ABP_CharacterPVP_Base_C::MaxHP' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, DamageSphereMI) == 0x000840, "Member 'ABP_CharacterPVP_Base_C::DamageSphereMI' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, Undead) == 0x000848, "Member 'ABP_CharacterPVP_Base_C::Undead' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, IsDead) == 0x000849, "Member 'ABP_CharacterPVP_Base_C::IsDead' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, UseKeyboardControl) == 0x00084A, "Member 'ABP_CharacterPVP_Base_C::UseKeyboardControl' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, IsHMDEnabled) == 0x00084B, "Member 'ABP_CharacterPVP_Base_C::IsHMDEnabled' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, BoneName) == 0x000850, "Member 'ABP_CharacterPVP_Base_C::BoneName' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, IsInHitReaction) == 0x000860, "Member 'ABP_CharacterPVP_Base_C::IsInHitReaction' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, TargetState) == 0x000864, "Member 'ABP_CharacterPVP_Base_C::TargetState' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, SoundVolume) == 0x000868, "Member 'ABP_CharacterPVP_Base_C::SoundVolume' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, IsInAttackLoop) == 0x00086C, "Member 'ABP_CharacterPVP_Base_C::IsInAttackLoop' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, HitNormal) == 0x000870, "Member 'ABP_CharacterPVP_Base_C::HitNormal' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, HitDamage) == 0x00087C, "Member 'ABP_CharacterPVP_Base_C::HitDamage' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, IsCrouch) == 0x000880, "Member 'ABP_CharacterPVP_Base_C::IsCrouch' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, IsRightMControllerEnable) == 0x000881, "Member 'ABP_CharacterPVP_Base_C::IsRightMControllerEnable' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, IsLeftMControllerEnable) == 0x000882, "Member 'ABP_CharacterPVP_Base_C::IsLeftMControllerEnable' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, HeadDamageRatio) == 0x000884, "Member 'ABP_CharacterPVP_Base_C::HeadDamageRatio' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, BodyDamageRatio) == 0x000888, "Member 'ABP_CharacterPVP_Base_C::BodyDamageRatio' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, LimbsDamageRatio) == 0x00088C, "Member 'ABP_CharacterPVP_Base_C::LimbsDamageRatio' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, LeftPointWeapon) == 0x000890, "Member 'ABP_CharacterPVP_Base_C::LeftPointWeapon' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, RightPointWeapon) == 0x000898, "Member 'ABP_CharacterPVP_Base_C::RightPointWeapon' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, FlipFlop) == 0x0008A0, "Member 'ABP_CharacterPVP_Base_C::FlipFlop' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, HealRepMini) == 0x0008A4, "Member 'ABP_CharacterPVP_Base_C::HealRepMini' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, HealRepAmount) == 0x0008A8, "Member 'ABP_CharacterPVP_Base_C::HealRepAmount' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, HealRepInterval) == 0x0008AC, "Member 'ABP_CharacterPVP_Base_C::HealRepInterval' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, CurHealRepInterval) == 0x0008B0, "Member 'ABP_CharacterPVP_Base_C::CurHealRepInterval' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, Killer) == 0x0008B8, "Member 'ABP_CharacterPVP_Base_C::Killer' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, IsStopFire) == 0x0008C0, "Member 'ABP_CharacterPVP_Base_C::IsStopFire' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, IsShowHand) == 0x0008C1, "Member 'ABP_CharacterPVP_Base_C::IsShowHand' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, IsGameStart) == 0x0008C2, "Member 'ABP_CharacterPVP_Base_C::IsGameStart' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, CharType) == 0x0008C4, "Member 'ABP_CharacterPVP_Base_C::CharType' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, DeathUIObj) == 0x0008C8, "Member 'ABP_CharacterPVP_Base_C::DeathUIObj' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, Shadow) == 0x0008D0, "Member 'ABP_CharacterPVP_Base_C::Shadow' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, IsFinishedGame) == 0x0008D8, "Member 'ABP_CharacterPVP_Base_C::IsFinishedGame' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, LeftHandClass) == 0x0008E0, "Member 'ABP_CharacterPVP_Base_C::LeftHandClass' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPVP_Base_C, RightHandClass) == 0x0008E8, "Member 'ABP_CharacterPVP_Base_C::RightHandClass' has a wrong offset!");

}

