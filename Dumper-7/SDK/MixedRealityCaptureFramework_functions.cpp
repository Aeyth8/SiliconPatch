#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MixedRealityCaptureFramework

#include "Basic.hpp"

#include "MixedRealityCaptureFramework_classes.hpp"
#include "MixedRealityCaptureFramework_parameters.hpp"


namespace SDK
{

// Function MixedRealityCaptureFramework.MrcFocalDriver.GetHorizontalFieldOfView
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float IMrcFocalDriver::GetHorizontalFieldOfView() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("MrcFocalDriver", "GetHorizontalFieldOfView");

	Params::MrcFocalDriver_GetHorizontalFieldOfView Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MixedRealityCaptureFramework.MrcGarbageMatteCaptureComponent.ApplyCalibrationData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class UMrcCalibrationData*        ConfigData                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMrcGarbageMatteCaptureComponent::ApplyCalibrationData(const class UMrcCalibrationData* ConfigData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MrcGarbageMatteCaptureComponent", "ApplyCalibrationData");

	Params::MrcGarbageMatteCaptureComponent_ApplyCalibrationData Parms{};

	Parms.ConfigData = ConfigData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MixedRealityCaptureFramework.MrcGarbageMatteCaptureComponent.GetGarbageMatteData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FMrcGarbageMatteSaveData>*GarbageMatteDataOut                                    (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UMrcGarbageMatteCaptureComponent::GetGarbageMatteData(TArray<struct FMrcGarbageMatteSaveData>* GarbageMatteDataOut)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MrcGarbageMatteCaptureComponent", "GetGarbageMatteData");

	Params::MrcGarbageMatteCaptureComponent_GetGarbageMatteData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (GarbageMatteDataOut != nullptr)
		*GarbageMatteDataOut = std::move(Parms.GarbageMatteDataOut);
}


// Function MixedRealityCaptureFramework.MrcGarbageMatteCaptureComponent.SetFocalDriver
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class IMrcFocalDriver> InFocalDriver                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)

void UMrcGarbageMatteCaptureComponent::SetFocalDriver(TScriptInterface<class IMrcFocalDriver> InFocalDriver)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MrcGarbageMatteCaptureComponent", "SetFocalDriver");

	Params::MrcGarbageMatteCaptureComponent_SetFocalDriver Parms{};

	Parms.InFocalDriver = InFocalDriver;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MixedRealityCaptureFramework.MrcGarbageMatteCaptureComponent.SetGarbageMatteActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AMrcGarbageMatteActor*            NewActor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMrcGarbageMatteCaptureComponent::SetGarbageMatteActor(class AMrcGarbageMatteActor* NewActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MrcGarbageMatteCaptureComponent", "SetGarbageMatteActor");

	Params::MrcGarbageMatteCaptureComponent_SetGarbageMatteActor Parms{};

	Parms.NewActor = NewActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MixedRealityCaptureFramework.MrcGarbageMatteCaptureComponent.SetTrackingOrigin
// (Final, Native, Public)
// Parameters:
// class USceneComponent*                  TrackingOrigin                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMrcGarbageMatteCaptureComponent::SetTrackingOrigin(class USceneComponent* TrackingOrigin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MrcGarbageMatteCaptureComponent", "SetTrackingOrigin");

	Params::MrcGarbageMatteCaptureComponent_SetTrackingOrigin Parms{};

	Parms.TrackingOrigin = TrackingOrigin;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MixedRealityCaptureFramework.MrcGarbageMatteCaptureComponent.SpawnNewGarbageMatteActor
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class USceneComponent*                  TrackingOrigin                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AMrcGarbageMatteActor*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AMrcGarbageMatteActor* UMrcGarbageMatteCaptureComponent::SpawnNewGarbageMatteActor(class USceneComponent* TrackingOrigin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MrcGarbageMatteCaptureComponent", "SpawnNewGarbageMatteActor");

	Params::MrcGarbageMatteCaptureComponent_SpawnNewGarbageMatteActor Parms{};

	Parms.TrackingOrigin = TrackingOrigin;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MixedRealityCaptureFramework.MixedRealityCaptureActor.GetCaptureTexture
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UTexture*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture* AMixedRealityCaptureActor::GetCaptureTexture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MixedRealityCaptureActor", "GetCaptureTexture");

	Params::MixedRealityCaptureActor_GetCaptureTexture Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MixedRealityCaptureFramework.MixedRealityCaptureActor.IsBroadcasting
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMixedRealityCaptureActor::IsBroadcasting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MixedRealityCaptureActor", "IsBroadcasting");

	Params::MixedRealityCaptureActor_IsBroadcasting Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MixedRealityCaptureFramework.MixedRealityCaptureActor.OnTargetDestroyed
// (Final, Native, Private)
// Parameters:
// class AActor*                           DestroyedActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMixedRealityCaptureActor::OnTargetDestroyed(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MixedRealityCaptureActor", "OnTargetDestroyed");

	Params::MixedRealityCaptureActor_OnTargetDestroyed Parms{};

	Parms.DestroyedActor = DestroyedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MixedRealityCaptureFramework.MixedRealityCaptureActor.SetAutoBroadcast
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bNewValue                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMixedRealityCaptureActor::SetAutoBroadcast(const bool bNewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MixedRealityCaptureActor", "SetAutoBroadcast");

	Params::MixedRealityCaptureActor_SetAutoBroadcast Parms{};

	Parms.bNewValue = bNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MixedRealityCaptureFramework.MixedRealityCaptureComponent.ApplyCalibrationData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMrcCalibrationData*              ConfigData                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMixedRealityCaptureComponent::ApplyCalibrationData(class UMrcCalibrationData* ConfigData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MixedRealityCaptureComponent", "ApplyCalibrationData");

	Params::MixedRealityCaptureComponent_ApplyCalibrationData Parms{};

	Parms.ConfigData = ConfigData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MixedRealityCaptureFramework.MixedRealityCaptureComponent.DetatchFromDevice
// (Final, Native, Public, BlueprintCallable)

void UMixedRealityCaptureComponent::DetatchFromDevice()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MixedRealityCaptureComponent", "DetatchFromDevice");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MixedRealityCaptureFramework.MixedRealityCaptureComponent.LoadConfiguration
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    SlotName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   UserIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMixedRealityCaptureComponent::LoadConfiguration(const class FString& SlotName, int32 UserIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MixedRealityCaptureComponent", "LoadConfiguration");

	Params::MixedRealityCaptureComponent_LoadConfiguration Parms{};

	Parms.SlotName = std::move(SlotName);
	Parms.UserIndex = UserIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MixedRealityCaptureFramework.MixedRealityCaptureComponent.LoadDefaultConfiguration
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMixedRealityCaptureComponent::LoadDefaultConfiguration()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MixedRealityCaptureComponent", "LoadDefaultConfiguration");

	Params::MixedRealityCaptureComponent_LoadDefaultConfiguration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MixedRealityCaptureFramework.MixedRealityCaptureComponent.OnVideoFeedOpened
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FMrcVideoCaptureFeedIndex& FeedRef                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMixedRealityCaptureComponent::OnVideoFeedOpened(const struct FMrcVideoCaptureFeedIndex& FeedRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MixedRealityCaptureComponent", "OnVideoFeedOpened");

	Params::MixedRealityCaptureComponent_OnVideoFeedOpened Parms{};

	Parms.FeedRef = std::move(FeedRef);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MixedRealityCaptureFramework.MixedRealityCaptureComponent.SaveAsDefaultConfiguration_K2
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMixedRealityCaptureComponent::SaveAsDefaultConfiguration_K2()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MixedRealityCaptureComponent", "SaveAsDefaultConfiguration_K2");

	Params::MixedRealityCaptureComponent_SaveAsDefaultConfiguration_K2 Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MixedRealityCaptureFramework.MixedRealityCaptureComponent.SaveConfiguration_K2
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    SlotName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   UserIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMixedRealityCaptureComponent::SaveConfiguration_K2(const class FString& SlotName, int32 UserIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MixedRealityCaptureComponent", "SaveConfiguration_K2");

	Params::MixedRealityCaptureComponent_SaveConfiguration_K2 Parms{};

	Parms.SlotName = std::move(SlotName);
	Parms.UserIndex = UserIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MixedRealityCaptureFramework.MixedRealityCaptureComponent.SetCaptureDevice
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FMrcVideoCaptureFeedIndex& FeedRef                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMixedRealityCaptureComponent::SetCaptureDevice(const struct FMrcVideoCaptureFeedIndex& FeedRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MixedRealityCaptureComponent", "SetCaptureDevice");

	Params::MixedRealityCaptureComponent_SetCaptureDevice Parms{};

	Parms.FeedRef = std::move(FeedRef);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MixedRealityCaptureFramework.MixedRealityCaptureComponent.SetDeviceAttachment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             SourceName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMixedRealityCaptureComponent::SetDeviceAttachment(class FName SourceName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MixedRealityCaptureComponent", "SetDeviceAttachment");

	Params::MixedRealityCaptureComponent_SetDeviceAttachment Parms{};

	Parms.SourceName = SourceName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MixedRealityCaptureFramework.MixedRealityCaptureComponent.SetEnableProjectionDepthTracking
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMixedRealityCaptureComponent::SetEnableProjectionDepthTracking(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MixedRealityCaptureComponent", "SetEnableProjectionDepthTracking");

	Params::MixedRealityCaptureComponent_SetEnableProjectionDepthTracking Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MixedRealityCaptureFramework.MixedRealityCaptureComponent.SetGarbageMatteActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AMrcGarbageMatteActor*            Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMixedRealityCaptureComponent::SetGarbageMatteActor(class AMrcGarbageMatteActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MixedRealityCaptureComponent", "SetGarbageMatteActor");

	Params::MixedRealityCaptureComponent_SetGarbageMatteActor Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MixedRealityCaptureFramework.MixedRealityCaptureComponent.SetLensDistortionParameters
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FOpenCVLensDistortionParameters&ModelRef                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UMixedRealityCaptureComponent::SetLensDistortionParameters(const struct FOpenCVLensDistortionParameters& ModelRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MixedRealityCaptureComponent", "SetLensDistortionParameters");

	Params::MixedRealityCaptureComponent_SetLensDistortionParameters Parms{};

	Parms.ModelRef = std::move(ModelRef);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MixedRealityCaptureFramework.MixedRealityCaptureComponent.SetProjectionDepthOffset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   DepthOffset                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMixedRealityCaptureComponent::SetProjectionDepthOffset(float DepthOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MixedRealityCaptureComponent", "SetProjectionDepthOffset");

	Params::MixedRealityCaptureComponent_SetProjectionDepthOffset Parms{};

	Parms.DepthOffset = DepthOffset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MixedRealityCaptureFramework.MixedRealityCaptureComponent.SetTrackingDelay
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   DelayMS                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMixedRealityCaptureComponent::SetTrackingDelay(int32 DelayMS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MixedRealityCaptureComponent", "SetTrackingDelay");

	Params::MixedRealityCaptureComponent_SetTrackingDelay Parms{};

	Parms.DelayMS = DelayMS;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MixedRealityCaptureFramework.MixedRealityCaptureComponent.SetVidProcessingParams
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FMrcVideoProcessingParams& NewVidProcessingParams                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UMixedRealityCaptureComponent::SetVidProcessingParams(const struct FMrcVideoProcessingParams& NewVidProcessingParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MixedRealityCaptureComponent", "SetVidProcessingParams");

	Params::MixedRealityCaptureComponent_SetVidProcessingParams Parms{};

	Parms.NewVidProcessingParams = std::move(NewVidProcessingParams);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MixedRealityCaptureFramework.MixedRealityCaptureComponent.SetVidProjectionMat
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInterface*               NewMaterial                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMixedRealityCaptureComponent::SetVidProjectionMat(class UMaterialInterface* NewMaterial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MixedRealityCaptureComponent", "SetVidProjectionMat");

	Params::MixedRealityCaptureComponent_SetVidProjectionMat Parms{};

	Parms.NewMaterial = NewMaterial;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MixedRealityCaptureFramework.MixedRealityCaptureComponent.ConstructCalibrationData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UMrcCalibrationData*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMrcCalibrationData* UMixedRealityCaptureComponent::ConstructCalibrationData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MixedRealityCaptureComponent", "ConstructCalibrationData");

	Params::MixedRealityCaptureComponent_ConstructCalibrationData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MixedRealityCaptureFramework.MixedRealityCaptureComponent.FillOutCalibrationData
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// class UMrcCalibrationData*              Dst                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMixedRealityCaptureComponent::FillOutCalibrationData(class UMrcCalibrationData* Dst) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MixedRealityCaptureComponent", "FillOutCalibrationData");

	Params::MixedRealityCaptureComponent_FillOutCalibrationData Parms{};

	Parms.Dst = Dst;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MixedRealityCaptureFramework.MixedRealityCaptureComponent.GetProjectionActor_K2
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UMixedRealityCaptureComponent::GetProjectionActor_K2() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MixedRealityCaptureComponent", "GetProjectionActor_K2");

	Params::MixedRealityCaptureComponent_GetProjectionActor_K2 Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MixedRealityCaptureFramework.MixedRealityCaptureComponent.GetTrackingDelay
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMixedRealityCaptureComponent::GetTrackingDelay() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MixedRealityCaptureComponent", "GetTrackingDelay");

	Params::MixedRealityCaptureComponent_GetTrackingDelay Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MixedRealityCaptureFramework.MixedRealityCaptureComponent.IsTracked
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMixedRealityCaptureComponent::IsTracked() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MixedRealityCaptureComponent", "IsTracked");

	Params::MixedRealityCaptureComponent_IsTracked Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MixedRealityCaptureFramework.MrcGarbageMatteActor.AddNewGabageMatte
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FMrcGarbageMatteSaveData&  GarbageMatteData                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPrimitiveComponent* AMrcGarbageMatteActor::AddNewGabageMatte(const struct FMrcGarbageMatteSaveData& GarbageMatteData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MrcGarbageMatteActor", "AddNewGabageMatte");

	Params::MrcGarbageMatteActor_AddNewGabageMatte Parms{};

	Parms.GarbageMatteData = std::move(GarbageMatteData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MixedRealityCaptureFramework.MrcGarbageMatteActor.ApplyCalibrationData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FMrcGarbageMatteSaveData>&GarbageMatteData                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void AMrcGarbageMatteActor::ApplyCalibrationData(const TArray<struct FMrcGarbageMatteSaveData>& GarbageMatteData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MrcGarbageMatteActor", "ApplyCalibrationData");

	Params::MrcGarbageMatteActor_ApplyCalibrationData Parms{};

	Parms.GarbageMatteData = std::move(GarbageMatteData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MixedRealityCaptureFramework.MrcGarbageMatteActor.CreateGarbageMatte
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FMrcGarbageMatteSaveData&  GarbageMatteData                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPrimitiveComponent* AMrcGarbageMatteActor::CreateGarbageMatte(const struct FMrcGarbageMatteSaveData& GarbageMatteData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MrcGarbageMatteActor", "CreateGarbageMatte");

	Params::MrcGarbageMatteActor_CreateGarbageMatte Parms{};

	Parms.GarbageMatteData = std::move(GarbageMatteData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MixedRealityCaptureFramework.MrcGarbageMatteActor.GetGarbageMatteData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FMrcGarbageMatteSaveData>*GarbageMatteDataOut                                    (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void AMrcGarbageMatteActor::GetGarbageMatteData(TArray<struct FMrcGarbageMatteSaveData>* GarbageMatteDataOut)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MrcGarbageMatteActor", "GetGarbageMatteData");

	Params::MrcGarbageMatteActor_GetGarbageMatteData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (GarbageMatteDataOut != nullptr)
		*GarbageMatteDataOut = std::move(Parms.GarbageMatteDataOut);
}


// Function MixedRealityCaptureFramework.MrcUtilLibrary.GetMixedRealityCaptureTexture
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UTexture*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture* UMrcUtilLibrary::GetMixedRealityCaptureTexture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MrcUtilLibrary", "GetMixedRealityCaptureTexture");

	Params::MrcUtilLibrary_GetMixedRealityCaptureTexture Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MixedRealityCaptureFramework.MrcUtilLibrary.IsMixedRealityCaptureBroadcasting
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMrcUtilLibrary::IsMixedRealityCaptureBroadcasting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MrcUtilLibrary", "IsMixedRealityCaptureBroadcasting");

	Params::MrcUtilLibrary_IsMixedRealityCaptureBroadcasting Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MixedRealityCaptureFramework.MrcUtilLibrary.SetMixedRealityCaptureBroadcasting
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMrcUtilLibrary::SetMixedRealityCaptureBroadcasting(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MrcUtilLibrary", "SetMixedRealityCaptureBroadcasting");

	Params::MrcUtilLibrary_SetMixedRealityCaptureBroadcasting Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MixedRealityCaptureFramework.AsyncTask_OpenMrcVidCaptureFeedBase.OnVideoFeedOpened
// (Native, Protected)
// Parameters:
// const class FString&                    DeviceURL                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAsyncTask_OpenMrcVidCaptureFeedBase::OnVideoFeedOpened(const class FString& DeviceURL)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AsyncTask_OpenMrcVidCaptureFeedBase", "OnVideoFeedOpened");

	Params::AsyncTask_OpenMrcVidCaptureFeedBase_OnVideoFeedOpened Parms{};

	Parms.DeviceURL = std::move(DeviceURL);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MixedRealityCaptureFramework.AsyncTask_OpenMrcVidCaptureFeedBase.OnVideoFeedOpenFailure
// (Native, Protected)
// Parameters:
// const class FString&                    DeviceURL                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAsyncTask_OpenMrcVidCaptureFeedBase::OnVideoFeedOpenFailure(const class FString& DeviceURL)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AsyncTask_OpenMrcVidCaptureFeedBase", "OnVideoFeedOpenFailure");

	Params::AsyncTask_OpenMrcVidCaptureFeedBase_OnVideoFeedOpenFailure Parms{};

	Parms.DeviceURL = std::move(DeviceURL);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

