#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NPC_Secret

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SiliconRising_classes.hpp"
#include "AIModule_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_NPC_Secret.BP_NPC_Secret_C
// 0x00C0 (0x0800 - 0x0740)
class ABP_NPC_Secret_C final : public AASensitiveCharacter
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0740(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          Box;                                               // 0x0748(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BoxBody;                                           // 0x0750(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BoxHead;                                           // 0x0758(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAIPerceptionStimuliSourceComponent*    AIPerceptionStimuliSource;                         // 0x0760(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ASplinePath_C*                          MovingPath;                                        // 0x0768(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           SectionAnim;                                       // 0x0770(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurPathIndex;                                      // 0x0778(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_77C[0x4];                                      // 0x077C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnArrived;                                         // 0x0780(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         Health;                                            // 0x0790(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxHealth;                                         // 0x0794(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          lsDead;                                            // 0x0798(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_799[0x7];                                      // 0x0799(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AIStorage_C*                        AiStorageRef;                                      // 0x07A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NotifyToWalk;                                      // 0x07A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A9[0x3];                                      // 0x07A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FocusTime;                                         // 0x07AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          lsCheckFocus_;                                     // 0x07B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B1[0x3];                                      // 0x07B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FocusDt;                                           // 0x07B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_CharacterBase_C*                    playerPawn;                                        // 0x07B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   OnFocusOver;                                       // 0x07C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FVector                                Tpos;                                              // 0x07D0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7DC[0x4];                                      // 0x07DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   WeaponSocket;                                      // 0x07E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABPWeaponBase_C*                        CurrentWeapon;                                     // 0x07E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 DefaultWeapon;                                     // 0x07F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_NPC_Secret(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void OnDeath();
	void ReceiveAnyDamage(float Damage, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void MoveTarget();
	void ReceiveBeginPlay();
	void OnSuccess_2C6F5C1049B0742354325896B63AC9C2(EPathFollowingResult MovementResult);
	void OnFail_2C6F5C1049B0742354325896B63AC9C2(EPathFollowingResult MovementResult);
	void UserConstructionScript();
	void SetMovingPathAndAnim(class ASplinePath_C* _path, class UAnimMontage* _EndAnim);
	void SetFocusCheckIn(float _time);
	void SetWeaponByClass(class UClass* Type);
	void FakeFire();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_NPC_Secret_C">();
	}
	static class ABP_NPC_Secret_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_NPC_Secret_C>();
	}
};
static_assert(alignof(ABP_NPC_Secret_C) == 0x000010, "Wrong alignment on ABP_NPC_Secret_C");
static_assert(sizeof(ABP_NPC_Secret_C) == 0x000800, "Wrong size on ABP_NPC_Secret_C");
static_assert(offsetof(ABP_NPC_Secret_C, UberGraphFrame) == 0x000740, "Member 'ABP_NPC_Secret_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Secret_C, Box) == 0x000748, "Member 'ABP_NPC_Secret_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Secret_C, BoxBody) == 0x000750, "Member 'ABP_NPC_Secret_C::BoxBody' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Secret_C, BoxHead) == 0x000758, "Member 'ABP_NPC_Secret_C::BoxHead' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Secret_C, AIPerceptionStimuliSource) == 0x000760, "Member 'ABP_NPC_Secret_C::AIPerceptionStimuliSource' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Secret_C, MovingPath) == 0x000768, "Member 'ABP_NPC_Secret_C::MovingPath' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Secret_C, SectionAnim) == 0x000770, "Member 'ABP_NPC_Secret_C::SectionAnim' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Secret_C, CurPathIndex) == 0x000778, "Member 'ABP_NPC_Secret_C::CurPathIndex' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Secret_C, OnArrived) == 0x000780, "Member 'ABP_NPC_Secret_C::OnArrived' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Secret_C, Health) == 0x000790, "Member 'ABP_NPC_Secret_C::Health' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Secret_C, MaxHealth) == 0x000794, "Member 'ABP_NPC_Secret_C::MaxHealth' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Secret_C, lsDead) == 0x000798, "Member 'ABP_NPC_Secret_C::lsDead' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Secret_C, AiStorageRef) == 0x0007A0, "Member 'ABP_NPC_Secret_C::AiStorageRef' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Secret_C, NotifyToWalk) == 0x0007A8, "Member 'ABP_NPC_Secret_C::NotifyToWalk' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Secret_C, FocusTime) == 0x0007AC, "Member 'ABP_NPC_Secret_C::FocusTime' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Secret_C, lsCheckFocus_) == 0x0007B0, "Member 'ABP_NPC_Secret_C::lsCheckFocus_' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Secret_C, FocusDt) == 0x0007B4, "Member 'ABP_NPC_Secret_C::FocusDt' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Secret_C, playerPawn) == 0x0007B8, "Member 'ABP_NPC_Secret_C::playerPawn' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Secret_C, OnFocusOver) == 0x0007C0, "Member 'ABP_NPC_Secret_C::OnFocusOver' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Secret_C, Tpos) == 0x0007D0, "Member 'ABP_NPC_Secret_C::Tpos' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Secret_C, WeaponSocket) == 0x0007E0, "Member 'ABP_NPC_Secret_C::WeaponSocket' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Secret_C, CurrentWeapon) == 0x0007E8, "Member 'ABP_NPC_Secret_C::CurrentWeapon' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Secret_C, DefaultWeapon) == 0x0007F0, "Member 'ABP_NPC_Secret_C::DefaultWeapon' has a wrong offset!");

}

