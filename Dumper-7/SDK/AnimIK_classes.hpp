#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AnimIK

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class AnimIK.IKAnimInstance
// 0x01C8 (0x0520 - 0x0358)
class UIKAnimInstance : public UAnimInstance
{
public:
	bool                                          bHeadIKEnabled;                                    // 0x0358(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHandIKEnabled;                                    // 0x0359(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMoveEnabled;                                      // 0x035A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35B[0x1];                                      // 0x035B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HeadPosition;                                      // 0x035C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               HeadRotation;                                      // 0x0368(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                LeftHandPosition;                                  // 0x0374(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               LeftHandRotation;                                  // 0x0380(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                RightHandPosition;                                 // 0x038C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RightHandRotation;                                 // 0x0398(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bMoving;                                           // 0x03A4(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRotating;                                         // 0x03A5(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Sleeping;                                          // 0x03A6(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnSeat;                                           // 0x03A7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveSpeed;                                         // 0x03A8(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveAngle;                                         // 0x03AC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotatorAngle;                                      // 0x03B0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IKSwitchValue;                                     // 0x03B4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MovingSwitchValue;                                 // 0x03B8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StandCameraHeight;                                 // 0x03BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SitCameraHeight;                                   // 0x03C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHeadToRootLength;                               // 0x03C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinHeadToRootRange;                                // 0x03C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRotatorAngle;                                   // 0x03CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinRotatorAngle;                                   // 0x03D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IKMoveAnimationSpeed;                              // 0x03D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IKSwitchSpeed;                                     // 0x03D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3DC[0xC];                                      // 0x03DC(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeleton*                              IKTargetSkeleton;                                  // 0x03E8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3F0[0x10];                                     // 0x03F0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             LocalHeadTransform;                                // 0x0400(0x0030)(BlueprintVisible, BlueprintReadOnly, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FTransform                             LocalLeftHandTransform;                            // 0x0430(0x0030)(BlueprintVisible, BlueprintReadOnly, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FTransform                             LocalRightHandTransform;                           // 0x0460(0x0030)(BlueprintVisible, BlueprintReadOnly, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FVector                                LeftFootOffSet;                                    // 0x0490(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                RightFootOffSet;                                   // 0x049C(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                LeftHandOffset;                                    // 0x04A8(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                RightHandOffset;                                   // 0x04B4(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                HeadOffset;                                        // 0x04C0(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               HeadCombineRotator;                                // 0x04CC(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FRotator                               LeftHandCombineRotator;                            // 0x04D8(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FRotator                               RightHandCombineRotator;                           // 0x04E4(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FTransform                             DetTransform;                                      // 0x04F0(0x0030)(IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)

public:
	void SetHeadIKEnable(bool Enable);
	void SetMoveDisable();

	float GetCameraHeight() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IKAnimInstance">();
	}
	static class UIKAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIKAnimInstance>();
	}
};
static_assert(alignof(UIKAnimInstance) == 0x000010, "Wrong alignment on UIKAnimInstance");
static_assert(sizeof(UIKAnimInstance) == 0x000520, "Wrong size on UIKAnimInstance");
static_assert(offsetof(UIKAnimInstance, bHeadIKEnabled) == 0x000358, "Member 'UIKAnimInstance::bHeadIKEnabled' has a wrong offset!");
static_assert(offsetof(UIKAnimInstance, bHandIKEnabled) == 0x000359, "Member 'UIKAnimInstance::bHandIKEnabled' has a wrong offset!");
static_assert(offsetof(UIKAnimInstance, bMoveEnabled) == 0x00035A, "Member 'UIKAnimInstance::bMoveEnabled' has a wrong offset!");
static_assert(offsetof(UIKAnimInstance, HeadPosition) == 0x00035C, "Member 'UIKAnimInstance::HeadPosition' has a wrong offset!");
static_assert(offsetof(UIKAnimInstance, HeadRotation) == 0x000368, "Member 'UIKAnimInstance::HeadRotation' has a wrong offset!");
static_assert(offsetof(UIKAnimInstance, LeftHandPosition) == 0x000374, "Member 'UIKAnimInstance::LeftHandPosition' has a wrong offset!");
static_assert(offsetof(UIKAnimInstance, LeftHandRotation) == 0x000380, "Member 'UIKAnimInstance::LeftHandRotation' has a wrong offset!");
static_assert(offsetof(UIKAnimInstance, RightHandPosition) == 0x00038C, "Member 'UIKAnimInstance::RightHandPosition' has a wrong offset!");
static_assert(offsetof(UIKAnimInstance, RightHandRotation) == 0x000398, "Member 'UIKAnimInstance::RightHandRotation' has a wrong offset!");
static_assert(offsetof(UIKAnimInstance, bMoving) == 0x0003A4, "Member 'UIKAnimInstance::bMoving' has a wrong offset!");
static_assert(offsetof(UIKAnimInstance, bRotating) == 0x0003A5, "Member 'UIKAnimInstance::bRotating' has a wrong offset!");
static_assert(offsetof(UIKAnimInstance, Sleeping) == 0x0003A6, "Member 'UIKAnimInstance::Sleeping' has a wrong offset!");
static_assert(offsetof(UIKAnimInstance, bOnSeat) == 0x0003A7, "Member 'UIKAnimInstance::bOnSeat' has a wrong offset!");
static_assert(offsetof(UIKAnimInstance, MoveSpeed) == 0x0003A8, "Member 'UIKAnimInstance::MoveSpeed' has a wrong offset!");
static_assert(offsetof(UIKAnimInstance, MoveAngle) == 0x0003AC, "Member 'UIKAnimInstance::MoveAngle' has a wrong offset!");
static_assert(offsetof(UIKAnimInstance, RotatorAngle) == 0x0003B0, "Member 'UIKAnimInstance::RotatorAngle' has a wrong offset!");
static_assert(offsetof(UIKAnimInstance, IKSwitchValue) == 0x0003B4, "Member 'UIKAnimInstance::IKSwitchValue' has a wrong offset!");
static_assert(offsetof(UIKAnimInstance, MovingSwitchValue) == 0x0003B8, "Member 'UIKAnimInstance::MovingSwitchValue' has a wrong offset!");
static_assert(offsetof(UIKAnimInstance, StandCameraHeight) == 0x0003BC, "Member 'UIKAnimInstance::StandCameraHeight' has a wrong offset!");
static_assert(offsetof(UIKAnimInstance, SitCameraHeight) == 0x0003C0, "Member 'UIKAnimInstance::SitCameraHeight' has a wrong offset!");
static_assert(offsetof(UIKAnimInstance, MaxHeadToRootLength) == 0x0003C4, "Member 'UIKAnimInstance::MaxHeadToRootLength' has a wrong offset!");
static_assert(offsetof(UIKAnimInstance, MinHeadToRootRange) == 0x0003C8, "Member 'UIKAnimInstance::MinHeadToRootRange' has a wrong offset!");
static_assert(offsetof(UIKAnimInstance, MaxRotatorAngle) == 0x0003CC, "Member 'UIKAnimInstance::MaxRotatorAngle' has a wrong offset!");
static_assert(offsetof(UIKAnimInstance, MinRotatorAngle) == 0x0003D0, "Member 'UIKAnimInstance::MinRotatorAngle' has a wrong offset!");
static_assert(offsetof(UIKAnimInstance, IKMoveAnimationSpeed) == 0x0003D4, "Member 'UIKAnimInstance::IKMoveAnimationSpeed' has a wrong offset!");
static_assert(offsetof(UIKAnimInstance, IKSwitchSpeed) == 0x0003D8, "Member 'UIKAnimInstance::IKSwitchSpeed' has a wrong offset!");
static_assert(offsetof(UIKAnimInstance, IKTargetSkeleton) == 0x0003E8, "Member 'UIKAnimInstance::IKTargetSkeleton' has a wrong offset!");
static_assert(offsetof(UIKAnimInstance, LocalHeadTransform) == 0x000400, "Member 'UIKAnimInstance::LocalHeadTransform' has a wrong offset!");
static_assert(offsetof(UIKAnimInstance, LocalLeftHandTransform) == 0x000430, "Member 'UIKAnimInstance::LocalLeftHandTransform' has a wrong offset!");
static_assert(offsetof(UIKAnimInstance, LocalRightHandTransform) == 0x000460, "Member 'UIKAnimInstance::LocalRightHandTransform' has a wrong offset!");
static_assert(offsetof(UIKAnimInstance, LeftFootOffSet) == 0x000490, "Member 'UIKAnimInstance::LeftFootOffSet' has a wrong offset!");
static_assert(offsetof(UIKAnimInstance, RightFootOffSet) == 0x00049C, "Member 'UIKAnimInstance::RightFootOffSet' has a wrong offset!");
static_assert(offsetof(UIKAnimInstance, LeftHandOffset) == 0x0004A8, "Member 'UIKAnimInstance::LeftHandOffset' has a wrong offset!");
static_assert(offsetof(UIKAnimInstance, RightHandOffset) == 0x0004B4, "Member 'UIKAnimInstance::RightHandOffset' has a wrong offset!");
static_assert(offsetof(UIKAnimInstance, HeadOffset) == 0x0004C0, "Member 'UIKAnimInstance::HeadOffset' has a wrong offset!");
static_assert(offsetof(UIKAnimInstance, HeadCombineRotator) == 0x0004CC, "Member 'UIKAnimInstance::HeadCombineRotator' has a wrong offset!");
static_assert(offsetof(UIKAnimInstance, LeftHandCombineRotator) == 0x0004D8, "Member 'UIKAnimInstance::LeftHandCombineRotator' has a wrong offset!");
static_assert(offsetof(UIKAnimInstance, RightHandCombineRotator) == 0x0004E4, "Member 'UIKAnimInstance::RightHandCombineRotator' has a wrong offset!");
static_assert(offsetof(UIKAnimInstance, DetTransform) == 0x0004F0, "Member 'UIKAnimInstance::DetTransform' has a wrong offset!");

// Class AnimIK.IKRig
// 0x0028 (0x0050 - 0x0028)
class UIKRig final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransformBase>                 TransformBases;                                    // 0x0030(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FNode>                          Nodes;                                             // 0x0040(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IKRig">();
	}
	static class UIKRig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIKRig>();
	}
};
static_assert(alignof(UIKRig) == 0x000008, "Wrong alignment on UIKRig");
static_assert(sizeof(UIKRig) == 0x000050, "Wrong size on UIKRig");
static_assert(offsetof(UIKRig, TransformBases) == 0x000030, "Member 'UIKRig::TransformBases' has a wrong offset!");
static_assert(offsetof(UIKRig, Nodes) == 0x000040, "Member 'UIKRig::Nodes' has a wrong offset!");

}

