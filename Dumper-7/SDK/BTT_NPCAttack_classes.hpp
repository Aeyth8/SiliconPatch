#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTT_NPCAttack

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTT_NPCAttack.BTT_NPCAttack_C
// 0x0060 (0x0100 - 0x00A0)
class UBTT_NPCAttack_C final : public UBTTask_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FBlackboardKeySelector                 HideLocation;                                      // 0x00A8(0x0028)(Edit, BlueprintVisible)
	bool                                          IsFirst;                                           // 0x00D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBlackboardKeySelector                 AttackCount;                                       // 0x00D8(0x0028)(Edit, BlueprintVisible)

public:
	void ExecuteUbergraph_BTT_NPCAttack(int32 EntryPoint);
	void ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTT_NPCAttack_C">();
	}
	static class UBTT_NPCAttack_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTT_NPCAttack_C>();
	}
};
static_assert(alignof(UBTT_NPCAttack_C) == 0x000008, "Wrong alignment on UBTT_NPCAttack_C");
static_assert(sizeof(UBTT_NPCAttack_C) == 0x000100, "Wrong size on UBTT_NPCAttack_C");
static_assert(offsetof(UBTT_NPCAttack_C, UberGraphFrame) == 0x0000A0, "Member 'UBTT_NPCAttack_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBTT_NPCAttack_C, HideLocation) == 0x0000A8, "Member 'UBTT_NPCAttack_C::HideLocation' has a wrong offset!");
static_assert(offsetof(UBTT_NPCAttack_C, IsFirst) == 0x0000D0, "Member 'UBTT_NPCAttack_C::IsFirst' has a wrong offset!");
static_assert(offsetof(UBTT_NPCAttack_C, AttackCount) == 0x0000D8, "Member 'UBTT_NPCAttack_C::AttackCount' has a wrong offset!");

}

