#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Lv3_NPCBase

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Lv2_DifficultStruct_structs.hpp"
#include "EnumDifficuty_structs.hpp"
#include "Enum_BehaviorType_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_Lv3_NPCBase.BP_Lv3_NPCBase_C.ExecuteUbergraph_BP_Lv3_NPCBase
// 0x0340 (0x0340 - 0x0000)
struct BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class AActor* DestroyedActor)> K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_HitComponent;           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_ComponentBoundEvent_NormalImpulse;          // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_Hit;                    // 0x0050(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DA[0x2];                                       // 0x00DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0108(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0128(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0140(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x014C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0158(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Contains_ReturnValue;                     // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_169[0x7];                                      // 0x0169(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABPPrjBase_C*                           K2Node_DynamicCast_AsBPPrj_Base;                   // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetInstigatorController_ReturnValue;      // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAttached_ReturnValue;         // 0x0188(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      K2Node_DynamicCast_AsPlayer_Controller;            // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_199[0x3];                                      // 0x0199(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_loacation;                      // 0x01A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_Normal;                         // 0x01AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x01B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue1;         // 0x01C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x01D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue1;                 // 0x01EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x01F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1FA[0x6];                                      // 0x01FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_CustomEvent_DestroyedActor;                 // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue2;         // 0x0208(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0214(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_221[0x3];                                      // 0x0221(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue3;         // 0x0224(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue1;          // 0x0230(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x023C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23D[0x3];                                      // 0x023D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue;       // 0x0240(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll1;                       // 0x024C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch1;                      // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw1;                        // 0x0254(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue1;         // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x025C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25D[0x3];                                      // 0x025D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0260(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0264(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0265(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_266[0x2];                                      // 0x0266(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue;       // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue1;         // 0x0270(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x027C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSimulatingPhysics_ReturnValue;          // 0x0288(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_289[0x3];                                      // 0x0289(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x028C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue1;                  // 0x0298(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x0299(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29A[0x2];                                      // 0x029A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x029C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<class ABP_DeadlyBulletSettings_C*>     CallFunc_GetAllActorsOfClass_OutActors;            // 0x02A8(0x0010)(ZeroConstructor, ReferenceParm)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x02B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C4[0x4];                                      // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_DeadlyBulletSettings_C*             CallFunc_Array_Get_Item;                           // 0x02C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll2;                       // 0x02D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch2;                      // 0x02D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw2;                        // 0x02D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue1;         // 0x02DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue2;         // 0x02E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x02E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x02E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E9[0x3];                                      // 0x02E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue2;         // 0x02EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x02F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMer2GameInstance_C*                    K2Node_DynamicCast_AsMer_2Game_Instance;           // 0x02F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x0300(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_301[0x7];                                      // 0x0301(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0308(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMer2GameState_C*                       K2Node_DynamicCast_AsMer_2Game_State;              // 0x0310(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess3;                      // 0x0318(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_319[0x7];                                      // 0x0319(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue1;                // 0x0320(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMer2GameState_C*                       K2Node_DynamicCast_AsMer_2Game_State1;             // 0x0328(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess4;                      // 0x0330(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_331[0x7];                                      // 0x0331(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAtLocation_ReturnValue;       // 0x0338(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase) == 0x000008, "Wrong alignment on BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase");
static_assert(sizeof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase) == 0x000340, "Wrong size on BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, EntryPoint) == 0x000000, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_MakeRotator_ReturnValue) == 0x000018, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, K2Node_Event_DeltaSeconds) == 0x000024, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, K2Node_ComponentBoundEvent_HitComponent) == 0x000028, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::K2Node_ComponentBoundEvent_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, K2Node_ComponentBoundEvent_OtherActor) == 0x000030, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, K2Node_ComponentBoundEvent_OtherComp) == 0x000038, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, K2Node_ComponentBoundEvent_NormalImpulse) == 0x000040, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::K2Node_ComponentBoundEvent_NormalImpulse' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, K2Node_ComponentBoundEvent_Hit) == 0x000050, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::K2Node_ComponentBoundEvent_Hit' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_BreakHitResult_bBlockingHit) == 0x0000D8, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000D9, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_BreakHitResult_Time) == 0x0000DC, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_BreakHitResult_Distance) == 0x0000E0, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_BreakHitResult_Location) == 0x0000E4, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_BreakHitResult_ImpactPoint) == 0x0000F0, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_BreakHitResult_Normal) == 0x0000FC, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_BreakHitResult_ImpactNormal) == 0x000108, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_BreakHitResult_PhysMat) == 0x000118, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_BreakHitResult_HitActor) == 0x000120, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_BreakHitResult_HitComponent) == 0x000128, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_BreakHitResult_HitBoneName) == 0x000130, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_BreakHitResult_HitItem) == 0x000138, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_BreakHitResult_FaceIndex) == 0x00013C, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_BreakHitResult_TraceStart) == 0x000140, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_BreakHitResult_TraceEnd) == 0x00014C, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_Conv_NameToString_ReturnValue) == 0x000158, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_Contains_ReturnValue) == 0x000168, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, K2Node_DynamicCast_AsBPPrj_Base) == 0x000170, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::K2Node_DynamicCast_AsBPPrj_Base' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, K2Node_DynamicCast_bSuccess) == 0x000178, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_GetInstigatorController_ReturnValue) == 0x000180, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_GetInstigatorController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_SpawnEmitterAttached_ReturnValue) == 0x000188, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_SpawnEmitterAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, K2Node_DynamicCast_AsPlayer_Controller) == 0x000190, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::K2Node_DynamicCast_AsPlayer_Controller' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, K2Node_DynamicCast_bSuccess1) == 0x000198, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00019C, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, K2Node_CustomEvent_loacation) == 0x0001A0, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::K2Node_CustomEvent_loacation' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, K2Node_CustomEvent_Normal) == 0x0001AC, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::K2Node_CustomEvent_Normal' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0001B8, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_K2_GetActorLocation_ReturnValue1) == 0x0001C4, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_K2_GetActorLocation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0001D0, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_FindLookAtRotation_ReturnValue) == 0x0001D4, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_BreakRotator_Roll) == 0x0001E0, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_BreakRotator_Pitch) == 0x0001E4, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_BreakRotator_Yaw) == 0x0001E8, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_MakeRotator_ReturnValue1) == 0x0001EC, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_MakeRotator_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x0001F8, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_K2_SetActorRotation_ReturnValue) == 0x0001F9, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, K2Node_CustomEvent_DestroyedActor) == 0x000200, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::K2Node_CustomEvent_DestroyedActor' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_K2_GetActorLocation_ReturnValue2) == 0x000208, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_K2_GetActorLocation_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000214, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_IsValid_ReturnValue) == 0x000220, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_K2_GetActorLocation_ReturnValue3) == 0x000224, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_K2_GetActorLocation_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_FindLookAtRotation_ReturnValue1) == 0x000230, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_FindLookAtRotation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x00023C, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_NormalizedDeltaRotator_ReturnValue) == 0x000240, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_NormalizedDeltaRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_BreakRotator_Roll1) == 0x00024C, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_BreakRotator_Roll1' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_BreakRotator_Pitch1) == 0x000250, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_BreakRotator_Pitch1' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_BreakRotator_Yaw1) == 0x000254, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_BreakRotator_Yaw1' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_Subtract_FloatFloat_ReturnValue1) == 0x000258, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_Subtract_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00025C, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_FClamp_ReturnValue) == 0x000260, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_Not_PreBool_ReturnValue) == 0x000264, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_BooleanAND_ReturnValue) == 0x000265, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_GetPlayerCameraManager_ReturnValue) == 0x000268, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_GetPlayerCameraManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_K2_GetActorRotation_ReturnValue1) == 0x000270, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_K2_GetActorRotation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_GetForwardVector_ReturnValue) == 0x00027C, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_IsSimulatingPhysics_ReturnValue) == 0x000288, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_IsSimulatingPhysics_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00028C, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_BooleanAND_ReturnValue1) == 0x000298, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_BooleanAND_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_IsValid_ReturnValue1) == 0x000299, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x00029C, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_GetAllActorsOfClass_OutActors) == 0x0002A8, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_ComposeRotators_ReturnValue) == 0x0002B8, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_Array_Get_Item) == 0x0002C8, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_BreakRotator_Roll2) == 0x0002D0, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_BreakRotator_Roll2' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_BreakRotator_Pitch2) == 0x0002D4, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_BreakRotator_Pitch2' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_BreakRotator_Yaw2) == 0x0002D8, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_BreakRotator_Yaw2' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_Multiply_FloatFloat_ReturnValue1) == 0x0002DC, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_Multiply_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_Multiply_FloatFloat_ReturnValue2) == 0x0002E0, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_Multiply_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_Array_Length_ReturnValue) == 0x0002E4, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0002E8, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_Subtract_FloatFloat_ReturnValue2) == 0x0002EC, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_Subtract_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_GetGameInstance_ReturnValue) == 0x0002F0, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, K2Node_DynamicCast_AsMer_2Game_Instance) == 0x0002F8, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::K2Node_DynamicCast_AsMer_2Game_Instance' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, K2Node_DynamicCast_bSuccess2) == 0x000300, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::K2Node_DynamicCast_bSuccess2' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_GetGameState_ReturnValue) == 0x000308, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, K2Node_DynamicCast_AsMer_2Game_State) == 0x000310, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::K2Node_DynamicCast_AsMer_2Game_State' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, K2Node_DynamicCast_bSuccess3) == 0x000318, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::K2Node_DynamicCast_bSuccess3' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_GetGameState_ReturnValue1) == 0x000320, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_GetGameState_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, K2Node_DynamicCast_AsMer_2Game_State1) == 0x000328, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::K2Node_DynamicCast_AsMer_2Game_State1' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, K2Node_DynamicCast_bSuccess4) == 0x000330, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::K2Node_DynamicCast_bSuccess4' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase, CallFunc_SpawnEmitterAtLocation_ReturnValue) == 0x000338, "Member 'BP_Lv3_NPCBase_C_ExecuteUbergraph_BP_Lv3_NPCBase::CallFunc_SpawnEmitterAtLocation_ReturnValue' has a wrong offset!");

// Function BP_Lv3_NPCBase.BP_Lv3_NPCBase_C.EVT_OnDestroyed
// 0x0008 (0x0008 - 0x0000)
struct BP_Lv3_NPCBase_C_EVT_OnDestroyed final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Lv3_NPCBase_C_EVT_OnDestroyed) == 0x000008, "Wrong alignment on BP_Lv3_NPCBase_C_EVT_OnDestroyed");
static_assert(sizeof(BP_Lv3_NPCBase_C_EVT_OnDestroyed) == 0x000008, "Wrong size on BP_Lv3_NPCBase_C_EVT_OnDestroyed");
static_assert(offsetof(BP_Lv3_NPCBase_C_EVT_OnDestroyed, DestroyedActor) == 0x000000, "Member 'BP_Lv3_NPCBase_C_EVT_OnDestroyed::DestroyedActor' has a wrong offset!");

// Function BP_Lv3_NPCBase.BP_Lv3_NPCBase_C.HeadKill
// 0x0018 (0x0018 - 0x0000)
struct BP_Lv3_NPCBase_C_HeadKill final
{
public:
	struct FVector                                loacation;                                         // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Normal;                                            // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Lv3_NPCBase_C_HeadKill) == 0x000004, "Wrong alignment on BP_Lv3_NPCBase_C_HeadKill");
static_assert(sizeof(BP_Lv3_NPCBase_C_HeadKill) == 0x000018, "Wrong size on BP_Lv3_NPCBase_C_HeadKill");
static_assert(offsetof(BP_Lv3_NPCBase_C_HeadKill, loacation) == 0x000000, "Member 'BP_Lv3_NPCBase_C_HeadKill::loacation' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_HeadKill, Normal) == 0x00000C, "Member 'BP_Lv3_NPCBase_C_HeadKill::Normal' has a wrong offset!");

// Function BP_Lv3_NPCBase.BP_Lv3_NPCBase_C.BndEvt__Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature
// 0x00B0 (0x00B0 - 0x0000)
struct BP_Lv3_NPCBase_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             Hit;                                               // 0x0028(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_Lv3_NPCBase_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_Lv3_NPCBase_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature");
static_assert(sizeof(BP_Lv3_NPCBase_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature) == 0x0000B0, "Wrong size on BP_Lv3_NPCBase_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature");
static_assert(offsetof(BP_Lv3_NPCBase_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature, HitComponent) == 0x000000, "Member 'BP_Lv3_NPCBase_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature::HitComponent' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_Lv3_NPCBase_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_Lv3_NPCBase_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature, NormalImpulse) == 0x000018, "Member 'BP_Lv3_NPCBase_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature::NormalImpulse' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature, Hit) == 0x000028, "Member 'BP_Lv3_NPCBase_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature::Hit' has a wrong offset!");

// Function BP_Lv3_NPCBase.BP_Lv3_NPCBase_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_Lv3_NPCBase_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Lv3_NPCBase_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_Lv3_NPCBase_C_ReceiveTick");
static_assert(sizeof(BP_Lv3_NPCBase_C_ReceiveTick) == 0x000004, "Wrong size on BP_Lv3_NPCBase_C_ReceiveTick");
static_assert(offsetof(BP_Lv3_NPCBase_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_Lv3_NPCBase_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_Lv3_NPCBase.BP_Lv3_NPCBase_C.ChangeBehavior
// 0x0010 (0x0010 - 0x0000)
struct BP_Lv3_NPCBase_C_ChangeBehavior final
{
public:
	Enum_BehaviorType                             NewState;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetLocation;                                    // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Lv3_NPCBase_C_ChangeBehavior) == 0x000004, "Wrong alignment on BP_Lv3_NPCBase_C_ChangeBehavior");
static_assert(sizeof(BP_Lv3_NPCBase_C_ChangeBehavior) == 0x000010, "Wrong size on BP_Lv3_NPCBase_C_ChangeBehavior");
static_assert(offsetof(BP_Lv3_NPCBase_C_ChangeBehavior, NewState) == 0x000000, "Member 'BP_Lv3_NPCBase_C_ChangeBehavior::NewState' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ChangeBehavior, TargetLocation) == 0x000004, "Member 'BP_Lv3_NPCBase_C_ChangeBehavior::TargetLocation' has a wrong offset!");

// Function BP_Lv3_NPCBase.BP_Lv3_NPCBase_C.GameOver
// 0x0028 (0x0028 - 0x0000)
struct BP_Lv3_NPCBase_C_GameOver final
{
public:
	int32                                         TipsIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Lv2_characterBase_C*                K2Node_DynamicCast_AsBP_Lv_2_Character_Base;       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Lv3_NPCBase_C_GameOver) == 0x000008, "Wrong alignment on BP_Lv3_NPCBase_C_GameOver");
static_assert(sizeof(BP_Lv3_NPCBase_C_GameOver) == 0x000028, "Wrong size on BP_Lv3_NPCBase_C_GameOver");
static_assert(offsetof(BP_Lv3_NPCBase_C_GameOver, TipsIndex) == 0x000000, "Member 'BP_Lv3_NPCBase_C_GameOver::TipsIndex' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_GameOver, CallFunc_GetPlayerCharacter_ReturnValue) == 0x000008, "Member 'BP_Lv3_NPCBase_C_GameOver::CallFunc_GetPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_GameOver, CallFunc_Not_PreBool_ReturnValue) == 0x000010, "Member 'BP_Lv3_NPCBase_C_GameOver::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_GameOver, K2Node_DynamicCast_AsBP_Lv_2_Character_Base) == 0x000018, "Member 'BP_Lv3_NPCBase_C_GameOver::K2Node_DynamicCast_AsBP_Lv_2_Character_Base' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_GameOver, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_Lv3_NPCBase_C_GameOver::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_Lv3_NPCBase.BP_Lv3_NPCBase_C.Dead
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) BP_Lv3_NPCBase_C_Dead final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue1;                // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RandomBool_ReturnValue;                   // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Lv3_NPCBase_C_Dead) == 0x000008, "Wrong alignment on BP_Lv3_NPCBase_C_Dead");
static_assert(sizeof(BP_Lv3_NPCBase_C_Dead) == 0x000030, "Wrong size on BP_Lv3_NPCBase_C_Dead");
static_assert(offsetof(BP_Lv3_NPCBase_C_Dead, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_Lv3_NPCBase_C_Dead::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_Dead, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_Lv3_NPCBase_C_Dead::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_Dead, Temp_int_Variable) == 0x000008, "Member 'BP_Lv3_NPCBase_C_Dead::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_Dead, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'BP_Lv3_NPCBase_C_Dead::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_Dead, CallFunc_Array_Get_Item) == 0x000010, "Member 'BP_Lv3_NPCBase_C_Dead::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_Dead, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'BP_Lv3_NPCBase_C_Dead::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_Dead, CallFunc_Array_Length_ReturnValue1) == 0x00001C, "Member 'BP_Lv3_NPCBase_C_Dead::CallFunc_Array_Length_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_Dead, CallFunc_Less_IntInt_ReturnValue) == 0x000020, "Member 'BP_Lv3_NPCBase_C_Dead::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_Dead, CallFunc_Greater_IntInt_ReturnValue) == 0x000021, "Member 'BP_Lv3_NPCBase_C_Dead::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_Dead, K2Node_SwitchEnum_CmpSuccess) == 0x000022, "Member 'BP_Lv3_NPCBase_C_Dead::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_Dead, CallFunc_IsValid_ReturnValue) == 0x000023, "Member 'BP_Lv3_NPCBase_C_Dead::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_Dead, CallFunc_Subtract_IntInt_ReturnValue) == 0x000024, "Member 'BP_Lv3_NPCBase_C_Dead::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_Dead, CallFunc_RandomBool_ReturnValue) == 0x000028, "Member 'BP_Lv3_NPCBase_C_Dead::CallFunc_RandomBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_Dead, CallFunc_SelectFloat_ReturnValue) == 0x00002C, "Member 'BP_Lv3_NPCBase_C_Dead::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");

// Function BP_Lv3_NPCBase.BP_Lv3_NPCBase_C.Attack
// 0x0038 (0x0038 - 0x0000)
struct BP_Lv3_NPCBase_C_Attack final
{
public:
	bool                                          UseControllerRotation;                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSpecial;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAllowDeadlyBullet_Result;               // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue1;                  // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue2;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue1;                 // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue3;                  // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Lv3_NPCBase_C_Attack) == 0x000004, "Wrong alignment on BP_Lv3_NPCBase_C_Attack");
static_assert(sizeof(BP_Lv3_NPCBase_C_Attack) == 0x000038, "Wrong size on BP_Lv3_NPCBase_C_Attack");
static_assert(offsetof(BP_Lv3_NPCBase_C_Attack, UseControllerRotation) == 0x000000, "Member 'BP_Lv3_NPCBase_C_Attack::UseControllerRotation' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_Attack, Delay) == 0x000004, "Member 'BP_Lv3_NPCBase_C_Attack::Delay' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_Attack, IsSpecial) == 0x000008, "Member 'BP_Lv3_NPCBase_C_Attack::IsSpecial' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_Attack, CallFunc_Subtract_IntInt_ReturnValue) == 0x00000C, "Member 'BP_Lv3_NPCBase_C_Attack::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_Attack, Temp_int_Variable) == 0x000010, "Member 'BP_Lv3_NPCBase_C_Attack::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_Attack, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000014, "Member 'BP_Lv3_NPCBase_C_Attack::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_Attack, CallFunc_IsAllowDeadlyBullet_Result) == 0x000015, "Member 'BP_Lv3_NPCBase_C_Attack::CallFunc_IsAllowDeadlyBullet_Result' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_Attack, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000016, "Member 'BP_Lv3_NPCBase_C_Attack::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_Attack, CallFunc_Not_PreBool_ReturnValue) == 0x000017, "Member 'BP_Lv3_NPCBase_C_Attack::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_Attack, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000018, "Member 'BP_Lv3_NPCBase_C_Attack::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_Attack, K2Node_SwitchEnum_CmpSuccess) == 0x000019, "Member 'BP_Lv3_NPCBase_C_Attack::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_Attack, CallFunc_BooleanAND_ReturnValue) == 0x00001A, "Member 'BP_Lv3_NPCBase_C_Attack::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_Attack, CallFunc_BooleanAND_ReturnValue1) == 0x00001B, "Member 'BP_Lv3_NPCBase_C_Attack::CallFunc_BooleanAND_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_Attack, CallFunc_BooleanAND_ReturnValue2) == 0x00001C, "Member 'BP_Lv3_NPCBase_C_Attack::CallFunc_BooleanAND_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_Attack, CallFunc_IsValid_ReturnValue) == 0x00001D, "Member 'BP_Lv3_NPCBase_C_Attack::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_Attack, CallFunc_Not_PreBool_ReturnValue1) == 0x00001E, "Member 'BP_Lv3_NPCBase_C_Attack::CallFunc_Not_PreBool_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_Attack, CallFunc_BooleanAND_ReturnValue3) == 0x00001F, "Member 'BP_Lv3_NPCBase_C_Attack::CallFunc_BooleanAND_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_Attack, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000020, "Member 'BP_Lv3_NPCBase_C_Attack::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_Attack, CallFunc_Add_VectorVector_ReturnValue) == 0x00002C, "Member 'BP_Lv3_NPCBase_C_Attack::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");

// Function BP_Lv3_NPCBase.BP_Lv3_NPCBase_C.InitNPC
// 0x0038 (0x0038 - 0x0000)
struct BP_Lv3_NPCBase_C_InitNPC final
{
public:
	float                                         HP;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Alert;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicsAsset*                          PhysicAsset;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Lv3_characterBase_C*                K2Node_DynamicCast_AsBP_Lv_3_Character_Base;       // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlackboardComponent*                   CallFunc_GetBlackboard_ReturnValue;                // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Lv3_NPCBase_C_InitNPC) == 0x000008, "Wrong alignment on BP_Lv3_NPCBase_C_InitNPC");
static_assert(sizeof(BP_Lv3_NPCBase_C_InitNPC) == 0x000038, "Wrong size on BP_Lv3_NPCBase_C_InitNPC");
static_assert(offsetof(BP_Lv3_NPCBase_C_InitNPC, HP) == 0x000000, "Member 'BP_Lv3_NPCBase_C_InitNPC::HP' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_InitNPC, Alert) == 0x000004, "Member 'BP_Lv3_NPCBase_C_InitNPC::Alert' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_InitNPC, PhysicAsset) == 0x000008, "Member 'BP_Lv3_NPCBase_C_InitNPC::PhysicAsset' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_InitNPC, CallFunc_Greater_IntInt_ReturnValue) == 0x000010, "Member 'BP_Lv3_NPCBase_C_InitNPC::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_InitNPC, CallFunc_GetPlayerCharacter_ReturnValue) == 0x000018, "Member 'BP_Lv3_NPCBase_C_InitNPC::CallFunc_GetPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_InitNPC, K2Node_DynamicCast_AsBP_Lv_3_Character_Base) == 0x000020, "Member 'BP_Lv3_NPCBase_C_InitNPC::K2Node_DynamicCast_AsBP_Lv_3_Character_Base' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_InitNPC, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_Lv3_NPCBase_C_InitNPC::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_InitNPC, CallFunc_GetBlackboard_ReturnValue) == 0x000030, "Member 'BP_Lv3_NPCBase_C_InitNPC::CallFunc_GetBlackboard_ReturnValue' has a wrong offset!");

// Function BP_Lv3_NPCBase.BP_Lv3_NPCBase_C.GetDifficultConfig
// 0x00C0 (0x00C0 - 0x0000)
struct BP_Lv3_NPCBase_C_GetDifficultConfig final
{
public:
	struct FLv2_DifficultStruct                   NewParam;                                          // 0x0000(0x0038)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EnumDifficuty                                 Temp_byte_Variable;                                // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable;                                // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable1;                               // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable2;                               // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable3;                               // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMer2GameInstance_C*                    K2Node_DynamicCast_AsMer_2Game_Instance;           // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Select_Default;                             // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLv2_DifficultStruct                   CallFunc_GetDataTableRowFromName_OutRow;           // 0x0080(0x0038)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Lv3_NPCBase_C_GetDifficultConfig) == 0x000008, "Wrong alignment on BP_Lv3_NPCBase_C_GetDifficultConfig");
static_assert(sizeof(BP_Lv3_NPCBase_C_GetDifficultConfig) == 0x0000C0, "Wrong size on BP_Lv3_NPCBase_C_GetDifficultConfig");
static_assert(offsetof(BP_Lv3_NPCBase_C_GetDifficultConfig, NewParam) == 0x000000, "Member 'BP_Lv3_NPCBase_C_GetDifficultConfig::NewParam' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_GetDifficultConfig, Temp_byte_Variable) == 0x000038, "Member 'BP_Lv3_NPCBase_C_GetDifficultConfig::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_GetDifficultConfig, Temp_name_Variable) == 0x000040, "Member 'BP_Lv3_NPCBase_C_GetDifficultConfig::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_GetDifficultConfig, Temp_name_Variable1) == 0x000048, "Member 'BP_Lv3_NPCBase_C_GetDifficultConfig::Temp_name_Variable1' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_GetDifficultConfig, Temp_name_Variable2) == 0x000050, "Member 'BP_Lv3_NPCBase_C_GetDifficultConfig::Temp_name_Variable2' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_GetDifficultConfig, Temp_name_Variable3) == 0x000058, "Member 'BP_Lv3_NPCBase_C_GetDifficultConfig::Temp_name_Variable3' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_GetDifficultConfig, CallFunc_GetGameInstance_ReturnValue) == 0x000060, "Member 'BP_Lv3_NPCBase_C_GetDifficultConfig::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_GetDifficultConfig, K2Node_DynamicCast_AsMer_2Game_Instance) == 0x000068, "Member 'BP_Lv3_NPCBase_C_GetDifficultConfig::K2Node_DynamicCast_AsMer_2Game_Instance' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_GetDifficultConfig, K2Node_DynamicCast_bSuccess) == 0x000070, "Member 'BP_Lv3_NPCBase_C_GetDifficultConfig::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_GetDifficultConfig, K2Node_Select_Default) == 0x000078, "Member 'BP_Lv3_NPCBase_C_GetDifficultConfig::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_GetDifficultConfig, CallFunc_GetDataTableRowFromName_OutRow) == 0x000080, "Member 'BP_Lv3_NPCBase_C_GetDifficultConfig::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_GetDifficultConfig, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x0000B8, "Member 'BP_Lv3_NPCBase_C_GetDifficultConfig::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");

// Function BP_Lv3_NPCBase.BP_Lv3_NPCBase_C.SpawnWeapon
// 0x0060 (0x0060 - 0x0000)
struct BP_Lv3_NPCBase_C_SpawnWeapon final
{
public:
	bool                                          CallFunc_IsValidClass_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValidClass_ReturnValue1;                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0xE];                                        // 0x0002(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0010(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue1; // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABPWeaponBase_C*                        CallFunc_FinishSpawningActor_ReturnValue;          // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABPWeaponBase_C*                        CallFunc_FinishSpawningActor_ReturnValue1;         // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Lv3_NPCBase_C_SpawnWeapon) == 0x000010, "Wrong alignment on BP_Lv3_NPCBase_C_SpawnWeapon");
static_assert(sizeof(BP_Lv3_NPCBase_C_SpawnWeapon) == 0x000060, "Wrong size on BP_Lv3_NPCBase_C_SpawnWeapon");
static_assert(offsetof(BP_Lv3_NPCBase_C_SpawnWeapon, CallFunc_IsValidClass_ReturnValue) == 0x000000, "Member 'BP_Lv3_NPCBase_C_SpawnWeapon::CallFunc_IsValidClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_SpawnWeapon, CallFunc_IsValidClass_ReturnValue1) == 0x000001, "Member 'BP_Lv3_NPCBase_C_SpawnWeapon::CallFunc_IsValidClass_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_SpawnWeapon, CallFunc_GetTransform_ReturnValue) == 0x000010, "Member 'BP_Lv3_NPCBase_C_SpawnWeapon::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_SpawnWeapon, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000040, "Member 'BP_Lv3_NPCBase_C_SpawnWeapon::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_SpawnWeapon, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue1) == 0x000048, "Member 'BP_Lv3_NPCBase_C_SpawnWeapon::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_SpawnWeapon, CallFunc_FinishSpawningActor_ReturnValue) == 0x000050, "Member 'BP_Lv3_NPCBase_C_SpawnWeapon::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_SpawnWeapon, CallFunc_FinishSpawningActor_ReturnValue1) == 0x000058, "Member 'BP_Lv3_NPCBase_C_SpawnWeapon::CallFunc_FinishSpawningActor_ReturnValue1' has a wrong offset!");

// Function BP_Lv3_NPCBase.BP_Lv3_NPCBase_C.ThrowThunder
// 0x0004 (0x0004 - 0x0000)
struct BP_Lv3_NPCBase_C_ThrowThunder final
{
public:
	float                                         Delay;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Lv3_NPCBase_C_ThrowThunder) == 0x000004, "Wrong alignment on BP_Lv3_NPCBase_C_ThrowThunder");
static_assert(sizeof(BP_Lv3_NPCBase_C_ThrowThunder) == 0x000004, "Wrong size on BP_Lv3_NPCBase_C_ThrowThunder");
static_assert(offsetof(BP_Lv3_NPCBase_C_ThrowThunder, Delay) == 0x000000, "Member 'BP_Lv3_NPCBase_C_ThrowThunder::Delay' has a wrong offset!");

// Function BP_Lv3_NPCBase.BP_Lv3_NPCBase_C.ToggleWeapon
// 0x0002 (0x0002 - 0x0000)
struct BP_Lv3_NPCBase_C_ToggleWeapon final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Lv3_NPCBase_C_ToggleWeapon) == 0x000001, "Wrong alignment on BP_Lv3_NPCBase_C_ToggleWeapon");
static_assert(sizeof(BP_Lv3_NPCBase_C_ToggleWeapon) == 0x000002, "Wrong size on BP_Lv3_NPCBase_C_ToggleWeapon");
static_assert(offsetof(BP_Lv3_NPCBase_C_ToggleWeapon, NewParam) == 0x000000, "Member 'BP_Lv3_NPCBase_C_ToggleWeapon::NewParam' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_ToggleWeapon, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'BP_Lv3_NPCBase_C_ToggleWeapon::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_Lv3_NPCBase.BP_Lv3_NPCBase_C.SpawnThunder
// 0x0090 (0x0090 - 0x0000)
struct BP_Lv3_NPCBase_C_SpawnThunder final
{
public:
	struct FRotator                               NewParam;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         Temp_int_Variable;                                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0050(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWpn_AI_Thunder_C*                      CallFunc_FinishSpawningActor_ReturnValue;          // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Lv3_NPCBase_C_SpawnThunder) == 0x000010, "Wrong alignment on BP_Lv3_NPCBase_C_SpawnThunder");
static_assert(sizeof(BP_Lv3_NPCBase_C_SpawnThunder) == 0x000090, "Wrong size on BP_Lv3_NPCBase_C_SpawnThunder");
static_assert(offsetof(BP_Lv3_NPCBase_C_SpawnThunder, NewParam) == 0x000000, "Member 'BP_Lv3_NPCBase_C_SpawnThunder::NewParam' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_SpawnThunder, Temp_int_Variable) == 0x00000C, "Member 'BP_Lv3_NPCBase_C_SpawnThunder::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_SpawnThunder, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000010, "Member 'BP_Lv3_NPCBase_C_SpawnThunder::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_SpawnThunder, CallFunc_K2_GetActorRotation_ReturnValue) == 0x00001C, "Member 'BP_Lv3_NPCBase_C_SpawnThunder::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_SpawnThunder, CallFunc_Subtract_IntInt_ReturnValue) == 0x000028, "Member 'BP_Lv3_NPCBase_C_SpawnThunder::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_SpawnThunder, CallFunc_BreakRotator_Roll) == 0x00002C, "Member 'BP_Lv3_NPCBase_C_SpawnThunder::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_SpawnThunder, CallFunc_BreakRotator_Pitch) == 0x000030, "Member 'BP_Lv3_NPCBase_C_SpawnThunder::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_SpawnThunder, CallFunc_BreakRotator_Yaw) == 0x000034, "Member 'BP_Lv3_NPCBase_C_SpawnThunder::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_SpawnThunder, CallFunc_MakeRotator_ReturnValue) == 0x000038, "Member 'BP_Lv3_NPCBase_C_SpawnThunder::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_SpawnThunder, CallFunc_GetSocketLocation_ReturnValue) == 0x000044, "Member 'BP_Lv3_NPCBase_C_SpawnThunder::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_SpawnThunder, CallFunc_MakeTransform_ReturnValue) == 0x000050, "Member 'BP_Lv3_NPCBase_C_SpawnThunder::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_SpawnThunder, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000080, "Member 'BP_Lv3_NPCBase_C_SpawnThunder::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_SpawnThunder, CallFunc_FinishSpawningActor_ReturnValue) == 0x000088, "Member 'BP_Lv3_NPCBase_C_SpawnThunder::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");

// Function BP_Lv3_NPCBase.BP_Lv3_NPCBase_C.Reload
// 0x0010 (0x0010 - 0x0000)
struct BP_Lv3_NPCBase_C_Reload final
{
public:
	float                                         Delay;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Lv3_NPCBase_C_Reload) == 0x000004, "Wrong alignment on BP_Lv3_NPCBase_C_Reload");
static_assert(sizeof(BP_Lv3_NPCBase_C_Reload) == 0x000010, "Wrong size on BP_Lv3_NPCBase_C_Reload");
static_assert(offsetof(BP_Lv3_NPCBase_C_Reload, Delay) == 0x000000, "Member 'BP_Lv3_NPCBase_C_Reload::Delay' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_Reload, Temp_int_Variable) == 0x000004, "Member 'BP_Lv3_NPCBase_C_Reload::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_Reload, CallFunc_Subtract_IntInt_ReturnValue) == 0x000008, "Member 'BP_Lv3_NPCBase_C_Reload::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_Reload, CallFunc_Greater_IntInt_ReturnValue) == 0x00000C, "Member 'BP_Lv3_NPCBase_C_Reload::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function BP_Lv3_NPCBase.BP_Lv3_NPCBase_C.DestroyWeapon
// 0x0002 (0x0002 - 0x0000)
struct BP_Lv3_NPCBase_C_DestroyWeapon final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Lv3_NPCBase_C_DestroyWeapon) == 0x000001, "Wrong alignment on BP_Lv3_NPCBase_C_DestroyWeapon");
static_assert(sizeof(BP_Lv3_NPCBase_C_DestroyWeapon) == 0x000002, "Wrong size on BP_Lv3_NPCBase_C_DestroyWeapon");
static_assert(offsetof(BP_Lv3_NPCBase_C_DestroyWeapon, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_Lv3_NPCBase_C_DestroyWeapon::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_DestroyWeapon, CallFunc_IsValid_ReturnValue1) == 0x000001, "Member 'BP_Lv3_NPCBase_C_DestroyWeapon::CallFunc_IsValid_ReturnValue1' has a wrong offset!");

// Function BP_Lv3_NPCBase.BP_Lv3_NPCBase_C.HitAnim
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) BP_Lv3_NPCBase_C_HitAnim final
{
public:
	class FName                                   BoneName_0;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Lv3_NPCBase_C_HitAnim) == 0x000008, "Wrong alignment on BP_Lv3_NPCBase_C_HitAnim");
static_assert(sizeof(BP_Lv3_NPCBase_C_HitAnim) == 0x000010, "Wrong size on BP_Lv3_NPCBase_C_HitAnim");
static_assert(offsetof(BP_Lv3_NPCBase_C_HitAnim, BoneName_0) == 0x000000, "Member 'BP_Lv3_NPCBase_C_HitAnim::BoneName_0' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_HitAnim, CallFunc_NotEqual_NameName_ReturnValue) == 0x000008, "Member 'BP_Lv3_NPCBase_C_HitAnim::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_HitAnim, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x000009, "Member 'BP_Lv3_NPCBase_C_HitAnim::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_HitAnim, CallFunc_BooleanAND_ReturnValue) == 0x00000A, "Member 'BP_Lv3_NPCBase_C_HitAnim::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_Lv3_NPCBase.BP_Lv3_NPCBase_C.BlowUp
// 0x0028 (0x0028 - 0x0000)
struct BP_Lv3_NPCBase_C_BlowUp final
{
public:
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_RandomInteger_ReturnValue;                // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Montage_Play_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Lv3_NPCBase_C_BlowUp) == 0x000008, "Wrong alignment on BP_Lv3_NPCBase_C_BlowUp");
static_assert(sizeof(BP_Lv3_NPCBase_C_BlowUp) == 0x000028, "Wrong size on BP_Lv3_NPCBase_C_BlowUp");
static_assert(offsetof(BP_Lv3_NPCBase_C_BlowUp, CallFunc_GetAnimInstance_ReturnValue) == 0x000000, "Member 'BP_Lv3_NPCBase_C_BlowUp::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_BlowUp, CallFunc_Array_Length_ReturnValue) == 0x000008, "Member 'BP_Lv3_NPCBase_C_BlowUp::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_BlowUp, K2Node_SwitchEnum_CmpSuccess) == 0x00000C, "Member 'BP_Lv3_NPCBase_C_BlowUp::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_BlowUp, CallFunc_Greater_IntInt_ReturnValue) == 0x00000D, "Member 'BP_Lv3_NPCBase_C_BlowUp::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_BlowUp, CallFunc_RandomInteger_ReturnValue) == 0x000010, "Member 'BP_Lv3_NPCBase_C_BlowUp::CallFunc_RandomInteger_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_BlowUp, CallFunc_Array_Get_Item) == 0x000018, "Member 'BP_Lv3_NPCBase_C_BlowUp::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Lv3_NPCBase_C_BlowUp, CallFunc_Montage_Play_ReturnValue) == 0x000020, "Member 'BP_Lv3_NPCBase_C_BlowUp::CallFunc_Montage_Play_ReturnValue' has a wrong offset!");

}

