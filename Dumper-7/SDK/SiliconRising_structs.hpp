#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SiliconRising

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum SiliconRising.ECampState
// NumValues: 0x0004
enum class ECampState : uint8
{
	Opposite                                 = 0,
	Nuetrality                               = 1,
	Friendly                                 = 2,
	ECampState_MAX                           = 3,
};

// Enum SiliconRising.EPawnCamp
// NumValues: 0x0006
enum class EPawnCamp : uint8
{
	NoCamp                                   = 0,
	Empire                                   = 1,
	Guardian                                 = 2,
	Civilians                                = 3,
	Mercenary                                = 4,
	Max                                      = 5,
};

// Enum SiliconRising.EVRDeviceProperty_String
// NumValues: 0x0023
enum class EVRDeviceProperty_String : uint8
{
	Prop_TrackingSystemName_String_1000      = 0,
	Prop_ModelNumber_String_1001             = 1,
	Prop_SerialNumber_String_1002            = 2,
	Prop_RenderModelName_String_1003         = 3,
	Prop_ManufacturerName_String_1005        = 4,
	Prop_TrackingFirmwareVersion_String_1006 = 5,
	Prop_HardwareRevision_String_1007        = 6,
	Prop_AllWirelessDongleDescriptions_String_1008 = 7,
	Prop_ConnectedWirelessDongle_String_1009 = 8,
	Prop_Firmware_ManualUpdateURL_String_1016 = 9,
	Prop_Firmware_ProgrammingTarget_String_1028 = 10,
	Prop_DriverVersion_String_1031           = 11,
	Prop_ResourceRoot_String_1035            = 12,
	Prop_RegisteredDeviceType_String_1036    = 13,
	Prop_InputProfileName_String_1037        = 14,
	HMDProp_DisplayMCImageLeft_String_2012   = 15,
	HMDProp_DisplayMCImageRight_String_2013  = 16,
	HMDProp_DisplayGCImage_String_2021       = 17,
	HMDProp_CameraFirmwareDescription_String_2028 = 18,
	HMDProp_DriverProvidedChaperonePath_String_2048 = 19,
	ControllerProp_AttachedDeviceId_String_3000 = 20,
	TrackRefProp_ModeLabel_String_4006       = 21,
	UIProp_NamedIconPathDeviceOff_String_5001 = 22,
	UIProp_NamedIconPathDeviceSearching_String_5002 = 23,
	UIProp_NamedIconPathDeviceSearchingAlert_String_5003 = 24,
	UIProp_NamedIconPathDeviceReady_String_5004 = 25,
	UIProp_NamedIconPathDeviceReadyAlert_String_5005 = 26,
	UIProp_NamedIconPathDeviceNotReady_String_5006 = 27,
	UIProp_NamedIconPathDeviceStandby_String_5007 = 28,
	UIProp_NamedIconPathDeviceAlertLow_String_5008 = 29,
	DriverProp_UserConfigPath_String_6000    = 30,
	DriverProp_InstallPath_String_6001       = 31,
	DriverProp_ControllerType_String_7000    = 32,
	DriveerProp_LegacyInputProfile_String_7001 = 33,
	EVRDeviceProperty_MAX                    = 34,
};

// Enum SiliconRising.EVRHeadMountedDevicType_Mer2
// NumValues: 0x000A
enum class EVRHeadMountedDevicType_Mer2 : uint8
{
	HMD_Unknown                              = 0,
	HMD_SteamVR                              = 1,
	HMD_Vive                                 = 2,
	HMD_ViveCosmos                           = 3,
	HMD_WindowsMR                            = 4,
	HMD_OculusRift                           = 5,
	HMD_OculusRiftS                          = 6,
	HMD_OSVR                                 = 7,
	HMD_INDEX                                = 8,
	HMD_MAX                                  = 9,
};

// Enum SiliconRising.EBPOVRResultSwitch
// NumValues: 0x0003
enum class EBPOVRResultSwitch : uint8
{
	OnSucceeded                              = 0,
	OnFailed                                 = 1,
	EBPOVRResultSwitch_MAX                   = 2,
};

// Enum SiliconRising.EItemTypes
// NumValues: 0x0014
enum class EItemTypes : uint8
{
	NONE                                     = 0,
	WPN_GunAy                                = 1,
	WPN_Pistol                               = 2,
	WPN_Revolver                             = 3,
	WPN_Sniper                               = 4,
	WPN_NPC_GunAy                            = 5,
	WPN_NPC_Pistol                           = 6,
	WPN_NPC_Revolver                         = 7,
	WPN_AKM                                  = 8,
	WPN_AWM                                  = 9,
	WPN_M32                                  = 10,
	WPN_SCAR                                 = 11,
	WPN_RPG                                  = 12,
	WPN_SMG                                  = 13,
	WPN_Knife                                = 14,
	ITEM_Heal_Pack                           = 15,
	WPN_Shield                               = 16,
	ITEM_PowerUp                             = 17,
	WPN_AAC                                  = 18,
	EItemTypes_MAX                           = 19,
};

// Enum SiliconRising.WState
// NumValues: 0x0006
enum class EWState : uint8
{
	Idle                                     = 0,
	Firing                                   = 1,
	Reloading                                = 2,
	BulletOut                                = 3,
	TriggerOnly                              = 4,
	WState_MAX                               = 5,
};

// Enum SiliconRising.EYYMsgERoomStartResult
// NumValues: 0x000B
enum class EYYMsgERoomStartResult : uint8
{
	ERSR_NONE                                = 0,
	ERSR_FIND_SUITABLE_PVP_SERVER            = 1,
	ERSR_NO_SERVER                           = 2,
	ERSR_WAIT_TO_LOAD_PVP_SERVER             = 3,
	ERSR_PVP_SERVER_LOAD_FAILED              = 4,
	ERSR_PVP_SERVER_LOADED                   = 5,
	ERSR_ROOM_PLAYER_NOT_BALANCED            = 6,
	ERSR_NOT_MASTER                          = 7,
	ERSR_ROOMNAME_EMPTY                      = 8,
	ERSR_NO_ROOMINFO                         = 9,
	ERSR_MAX                                 = 10,
};

// Enum SiliconRising.EYYMsgECancelMatchResult
// NumValues: 0x0005
enum class EYYMsgECancelMatchResult : uint8
{
	ECMR_Ok                                  = 0,
	ECMR_FreeMan                             = 1,
	ECMR_Idle                                = 2,
	ECMR_Playing                             = 3,
	ECMR_MAX                                 = 4,
};

// Enum SiliconRising.EYYMsgEGameElementType
// NumValues: 0x0006
enum class EYYMsgEGameElementType : uint8
{
	EELEMENTTYPE_FIRE                        = 0,
	EELEMENTTYPE_LIGHT                       = 1,
	EELEMENTTYPE_WIND                        = 2,
	EELEMENTTYPE_ICE                         = 3,
	EELEMENTTYPE_POISON                      = 4,
	EELEMENTTYPE_MAX                         = 5,
};

// Enum SiliconRising.EYYMsgEPropertyType
// NumValues: 0x0004
enum class EYYMsgEPropertyType : uint8
{
	EPT_STRENGTH                             = 0,
	EPT_AGILITY                              = 1,
	EPT_INTELLIGENCE                         = 2,
	EPT_MAX                                  = 3,
};

// Enum SiliconRising.EYYMsgENPCType
// NumValues: 0x0004
enum class EYYMsgENPCType : uint8
{
	ENPCTYPE_NORMAL                          = 0,
	ENPCTYPE_HERO                            = 1,
	ENPCTYPE_TURRET                          = 2,
	ENPCTYPE_MAX                             = 3,
};

// Enum SiliconRising.EYYMsgERankType
// NumValues: 0x0006
enum class EYYMsgERankType : uint8
{
	ERT_PLAYER_LEVEL                         = 0,
	ERT_FIGHT_VALUE                          = 1,
	ERT_PLAYER_MONEY                         = 2,
	ERT_GUILD_LEVEL                          = 3,
	ERT_GUILD_KINGSOURCE                     = 4,
	ERT_MAX                                  = 5,
};

// Enum SiliconRising.EYYMsgEShopType
// NumValues: 0x0009
enum class EYYMsgEShopType : uint8
{
	ESHT_BUILDING                            = 0,
	ESHT_GOLD                                = 1,
	ESHT_DIAMOND                             = 2,
	ESHT_SP                                  = 3,
	ESHT_EQUIP                               = 4,
	ESHT_GEM                                 = 5,
	ESHT_Hero                                = 6,
	ESHT_Other                               = 7,
	ESHT_MAX                                 = 8,
};

// Enum SiliconRising.EYYMsgEBattleType
// NumValues: 0x0003
enum class EYYMsgEBattleType : uint8
{
	BATTLE_SINGLE                            = 0,
	BATTLE_PVE_TEAM                          = 1,
	BATTLE_MAX                               = 2,
};

// Enum SiliconRising.EYYMsgETaskType
// NumValues: 0x000B
enum class EYYMsgETaskType : uint8
{
	TASK_LEVEL_UPDATE_SOME_LEVEL             = 0,
	TASK_PASS_ECTYPE                         = 1,
	TASK_PASS_ECTYPE_COUNT                   = 2,
	TASK_PASS_SOME_TYPE_ECTYPE_COUNT         = 3,
	TASK_UPDATE_SKILL_COUNT                  = 4,
	TASK_CONSUME_MONEY                       = 5,
	TASK_CONSUME_DIAMOND                     = 6,
	TASK_ARENA_COUNT                         = 7,
	TASK_KILL_MONSTER_COUNT                  = 8,
	TASK_KILL_SOME_MONSTER_COUNT             = 9,
	TASK_MAX                                 = 10,
};

// Enum SiliconRising.EYYMsgETaskState
// NumValues: 0x0005
enum class EYYMsgETaskState : uint8
{
	TASK_IN_PROCESS                          = 0,
	TASK_DONE                                = 1,
	TASK_DRAW_AWARD                          = 2,
	TASK_FINISH                              = 3,
	TASK_MAX                                 = 4,
};

// Enum SiliconRising.EYYMsgEGuildPowerType
// NumValues: 0x0004
enum class EYYMsgEGuildPowerType : uint8
{
	GUILD_POWER_TYPE_NORMAL                  = 0,
	GUILD_POWER_TYPE_VICE_PRESIDENT          = 1,
	GUILD_POWER_TYPE_PRESIDENT               = 2,
	GUILD_POWER_TYPE_MAX                     = 3,
};

// Enum SiliconRising.EYYMsgEDrawDropItemState
// NumValues: 0x0004
enum class EYYMsgEDrawDropItemState : uint8
{
	E_DRAW_STATE_NONE                        = 0,
	E_DRAW_STATE_GAIN                        = 1,
	E_DRAW_STATE_RECV                        = 2,
	E_DRAW_STATE_MAX                         = 3,
};

// Enum SiliconRising.EYYMsgEFireType
// NumValues: 0x0005
enum class EYYMsgEFireType : uint8
{
	EFT_FIXED                                = 0,
	EFT_SERIAL                               = 1,
	EFT_THROW                                = 2,
	EFT_REMOTE_CONTROL                       = 3,
	EFT_MAX                                  = 4,
};

// Enum SiliconRising.EYYMsgEItemSubType
// NumValues: 0x0005
enum class EYYMsgEItemSubType : uint8
{
	EIST_ITEM_REMOTE_UAV                     = 0,
	EIST_ITEM_HP                             = 1,
	EIST_ITEM_HOT_DETECTOR                   = 2,
	EIST_ITEM_REMOTE_BOMB                    = 3,
	EIST_ITEM_MAX                            = 4,
};

// Enum SiliconRising.EYYMsgEEquipSubType
// NumValues: 0x0005
enum class EYYMsgEEquipSubType : uint8
{
	EEST_PISTOL                              = 0,
	EEST_NORMAL                              = 1,
	EEST_ARROW                               = 2,
	EEST_SHIELD                              = 3,
	EEST_MAX                                 = 4,
};

// Enum SiliconRising.EYYMsgEItemType
// NumValues: 0x0004
enum class EYYMsgEItemType : uint8
{
	EIT_EQUIP                                = 0,
	EIT_BULLET                               = 1,
	EIT_ITEM                                 = 2,
	EIT_MAX                                  = 3,
};

// Enum SiliconRising.EYYMsgEGameItemExpiredType
// NumValues: 0x0005
enum class EYYMsgEGameItemExpiredType : uint8
{
	EGIET_NONE                               = 0,
	EGIET_USE_TIMES                          = 1,
	EGIET_REAL_TIME                          = 2,
	EGIET_END_INDEX                          = 3,
	EGIET_MAX                                = 4,
};

// Enum SiliconRising.EYYMsgEGameTokenSubType
// NumValues: 0x0005
enum class EYYMsgEGameTokenSubType : uint8
{
	EGTST_TOKEN_REBORN                       = 0,
	EGTST_TOKEN_POSITION                     = 1,
	EGTST_TOKEN_BOUNTY                       = 2,
	EGTST_TOKEN_ACTIVITY                     = 3,
	EGTST_TOKEN_MAX                          = 4,
};

// Enum SiliconRising.EYYMsgEGameCardSubType
// NumValues: 0x0004
enum class EYYMsgEGameCardSubType : uint8
{
	EGCST_STRENGTH                           = 0,
	EGCST_AGILITY                            = 1,
	EGCST_INTELLIGENCE                       = 2,
	EGCST_MAX                                = 3,
};

// Enum SiliconRising.EYYMsgEGameItemSubType
// NumValues: 0x0009
enum class EYYMsgEGameItemSubType : uint8
{
	EGIT_ITEM_WATER                          = 0,
	EGIT_ITEM_DIAMOND                        = 1,
	EGIT_ITEM_CURRENCY                       = 2,
	EGIT_ITEM_EXP                            = 3,
	EGIT_ITEM_HP                             = 4,
	EGIT_ITEM_MP                             = 5,
	EGIT_ITEM_SP                             = 6,
	EGIT_ITEM_PACK                           = 7,
	EGIT_ITEM_MAX                            = 8,
};

// Enum SiliconRising.EYYMsgEGameGemSubType
// NumValues: 0x0008
enum class EYYMsgEGameGemSubType : uint8
{
	EGGSTYPE_GEM_ATK                         = 0,
	EGGSTYPE_GEM_DEF                         = 1,
	EGGSTYPE_GEM_FIRE                        = 2,
	EGGSTYPE_GEM_LIGHT                       = 3,
	EGGSTYPE_GEM_WIND                        = 4,
	EGGSTYPE_GEM_ICE                         = 5,
	EGGSTYPE_GEM_POISON                      = 6,
	EGGSTYPE_GEM_MAX                         = 7,
};

// Enum SiliconRising.EYYMsgEGameEquipSubType
// NumValues: 0x0007
enum class EYYMsgEGameEquipSubType : uint8
{
	EQUIPTYPE_WEAPON                         = 0,
	EQUIPTYPE_HELMET                         = 1,
	EQUIPTYPE_ARMOR                          = 2,
	EQUIPTYPE_WRIST                          = 3,
	EQUIPTYPE_PANT                           = 4,
	EQUIPTYPE_BOOT                           = 5,
	EQUIPTYPE_MAX                            = 6,
};

// Enum SiliconRising.EYYMsgEConditionType
// NumValues: 0x0014
enum class EYYMsgEConditionType : uint8
{
	ECT_Invalid                              = 0,
	ECT_LessHP                               = 1,
	ECT_EqualHP                              = 2,
	ECT_GreaterHP                            = 3,
	ECT_LessMP                               = 4,
	ECT_EqualMP                              = 5,
	ECT_GreaterMP                            = 6,
	ECT_OverTime                             = 7,
	ECT_LessRange                            = 8,
	ECT_EqualRange                           = 9,
	ECT_GreaterRange                         = 10,
	ECT_Collide                              = 11,
	ECT_Dead                                 = 12,
	ECT_AfterAttack                          = 13,
	ECT_AfterSkill                           = 14,
	ECT_OnAttacked                           = 15,
	ECT_BuffEffected                         = 16,
	ECT_Killed                               = 17,
	ECT_Count                                = 18,
	ECT_MAX                                  = 19,
};

// Enum SiliconRising.EYYMsgEBuffEffectType
// NumValues: 0x001C
enum class EYYMsgEBuffEffectType : uint8
{
	EBET_MaxHP                               = 0,
	EBET_MaxMP                               = 1,
	EBET_RegenHP                             = 2,
	EBET_RegenMP                             = 3,
	EBET_Damage                              = 4,
	EBET_HeadshotDamage                      = 5,
	EBET_MoveSpeed                           = 6,
	EBET_AttackSpeed                         = 7,
	EBET_MaxHPRate                           = 8,
	EBET_MaxMPRate                           = 9,
	EBET_RegenHPRate                         = 10,
	EBET_RegenMPRate                         = 11,
	EBET_DamageRate                          = 12,
	EBET_HeadshotDamageRate                  = 13,
	EBET_MoveSpeedRate                       = 14,
	EBET_AttackSpeedRate                     = 15,
	EBET_CooldownReduce                      = 16,
	EBET_AttackIntervalReduce                = 17,
	EBET_Dot                                 = 18,
	EBET_Hot                                 = 19,
	EBET_DotRate                             = 20,
	EBET_HotRate                             = 21,
	EBET_Visible                             = 22,
	EBET_Invisible                           = 23,
	EBET_InfiniteAmmo                        = 24,
	EBET_LimitCD                             = 25,
	EBET_Invincible                          = 26,
	EBET_MAX                                 = 27,
};

// Enum SiliconRising.EYYMsgEBuffCategory
// NumValues: 0x0008
enum class EYYMsgEBuffCategory : uint8
{
	EBC_Buff                                 = 0,
	EBC_Control                              = 1,
	EBC_DeBuff                               = 2,
	EBC_SlowDown                             = 3,
	EBC_Hurt                                 = 4,
	EBC_Immune                               = 5,
	EBC_Limit                                = 6,
	EBC_MAX                                  = 7,
};

// Enum SiliconRising.EYYMsgESkillBeneficiaryType
// NumValues: 0x0005
enum class EYYMsgESkillBeneficiaryType : uint8
{
	ESBT_Self                                = 0,
	ESBT_Teammate                            = 1,
	ESBT_Enemy                               = 2,
	ESBT_All                                 = 3,
	ESBT_MAX                                 = 4,
};

// Enum SiliconRising.EYYMsgESkillType
// NumValues: 0x0004
enum class EYYMsgESkillType : uint8
{
	EST_Normal                               = 0,
	EST_Passive                              = 1,
	EST_Attack                               = 2,
	EST_MAX                                  = 3,
};

// Enum SiliconRising.EYYMsgECardType
// NumValues: 0x0004
enum class EYYMsgECardType : uint8
{
	ECT_Hero                                 = 0,
	ECT_Summon                               = 1,
	ECT_Enemy                                = 2,
	ECT_MAX                                  = 3,
};

// Enum SiliconRising.EYYMsgEGameMsgID
// NumValues: 0x005A
enum class EYYMsgEGameMsgID : uint8
{
	EGMI_UNKNOW                              = 0,
	EGMI_EVENT_RESULT                        = 1,
	EGMI_EVENT_TRANSPOND                     = 2,
	EGMI_CLOSE_SOCKET                        = 3,
	EGMI_SERVER_REGISTERED                   = 4,
	EGMI_SERVER_UNREGISTERED                 = 5,
	EGMI_SERVER_REFRESH                      = 6,
	EGMI_REQ_LOGIN                           = 7,
	EGMI_ACK_LOGIN                           = 8,
	EGMI_REQ_LOGOUT                          = 9,
	EGMI_REQ_PING                            = 10,
	EGMI_ACK_PING                            = 11,
	EGMI_REQ_ROLE_LIST                       = 12,
	EGMI_ACK_ROLE_LIST                       = 13,
	EGMI_REQ_CREATE_ROLE                     = 14,
	EGMI_REQ_DELETE_ROLE                     = 15,
	EGMI_REQ_ENTER_GAME                      = 16,
	EGMI_ACK_ENTER_GAME                      = 17,
	EGMI_REQ_LEAVE_GAME                      = 18,
	EGMI_ACK_LEAVE_GAME                      = 19,
	EGMI_REQ_SWAP_SCENE                      = 20,
	EGMI_ACK_SWAP_SCENE                      = 21,
	EGMI_ACK_OBJECT_ENTRY                    = 22,
	EGMI_ACK_OBJECT_LEAVE                    = 23,
	EGMI_ACK_OBJECT_PROPERTY_ENTRY           = 24,
	EGMI_ACK_OBJECT_RECORD_ENTRY             = 25,
	EGMI_ACK_PROPERTY_INT                    = 26,
	EGMI_ACK_PROPERTY_FLOAT                  = 27,
	EGMI_ACK_PROPERTY_STRING                 = 28,
	EGMI_ACK_PROPERTY_BYTE                   = 29,
	EGMI_ACK_PROPERTY_OBJECT                 = 30,
	EGMI_ACK_PROPERTY_VECTOR2                = 31,
	EGMI_ACK_PROPERTY_VECTOR3                = 32,
	EGMI_ACK_PROPERTY_VECTOR4                = 33,
	EGMI_ACK_ADD_ROW                         = 34,
	EGMI_ACK_REMOVE_ROW                      = 35,
	EGMI_ACK_SWAP_ROW                        = 36,
	EGMI_ACK_RECORD_INT                      = 37,
	EGMI_ACK_RECORD_FLOAT                    = 38,
	EGMI_ACK_RECORD_STRING                   = 39,
	EGMI_ACK_RECORD_BYTE                     = 40,
	EGMI_ACK_RECORD_OBJECT                   = 41,
	EGMI_ACK_RECORD_VECTOR2                  = 42,
	EGMI_ACK_RECORD_VECTOR3                  = 43,
	EGMI_ACK_RECORD_VECTOR4                  = 44,
	EGMI_ACK_RECORD_CLEAR                    = 45,
	EGMI_ACK_RECORD_SORT                     = 46,
	EGMI_ACK_CLONE_OBJECT_ENTRY              = 47,
	EGMI_ACK_CLONE_OBJECT_LEAVE              = 48,
	EGMI_ACK_CLONE_OBJECT_PROPERTY_ENTRY     = 49,
	EGMI_ACK_CLONE_OBJECT_RECORD_ENTRY       = 50,
	EGMI_ACK_CLONE_PROPERTY_INT              = 51,
	EGMI_ACK_CLONE_PROPERTY_FLOAT            = 52,
	EGMI_ACK_CLONE_PROPERTY_STRING           = 53,
	EGMI_ACK_CLONE_PROPERTY_OBJECT           = 54,
	EGMI_REQ_LOADER_SERVER_REGISTER          = 55,
	EGMI_ACK_LOADER_SERVER_REGISTER          = 56,
	EGMI_REQ_LOAD_PVP_SERVER                 = 57,
	EGMI_ACK_LOAD_PVP_SERVER                 = 58,
	EGMI_REQ_START_MATCH                     = 59,
	EGMI_ACK_START_MATCH                     = 60,
	EGMI_REQ_CANCEL_MATCH                    = 61,
	EGMI_ACK_CANCEL_MATCH                    = 62,
	EGMI_REQ_FINISH_MATCH                    = 63,
	EGMI_ACK_FINISH_MATCH                    = 64,
	EGMI_REQ_ROOM_LIST                       = 65,
	EGMI_ACK_ROOM_LIST                       = 66,
	EGMI_REQ_ENTER_ROOM                      = 67,
	EGMI_ACK_ENTER_ROOM                      = 68,
	EGMI_REQ_ROOM_INFO                       = 69,
	EGMI_ACK_ROOM_INFO                       = 70,
	EGMI_REQ_CREATE_ROOM                     = 71,
	EGMI_ACK_CREATE_ROOM                     = 72,
	EGMI_REQ_QUICK_ENTER                     = 73,
	EGMI_ACK_QUICK_ENTER                     = 74,
	EGMI_REQ_LEAVE_ROOM                      = 75,
	EGMI_ACK_LEAVE_ROOM                      = 76,
	EGMI_REQ_ROOM_START                      = 77,
	EGMI_ACK_ROOM_START                      = 78,
	EGMI_REQ_ROOM_HEADURL                    = 79,
	EGMI_ACK_ROOM_HEADURL                    = 80,
	EGMI_REQ_PVP_SERVER_REGISTER             = 81,
	EGMI_ACK_PVP_SERVER_REGISTER             = 82,
	EGMI_REQ_PVP_SERVER_START                = 83,
	EGMI_ACK_PVP_SERVER_START                = 84,
	EGMI_REQ_PVP_SERVER_FINISHED             = 85,
	EGMI_ACK_PVP_SERVER_FINISHED             = 86,
	EGMI_REQ_PVP_SERVER_SHUTDOWN             = 87,
	EGMI_ACK_PVP_SERVER_SHUTDOWN             = 88,
	EGMI_MAX                                 = 89,
};

// Enum SiliconRising.EYYMsgEGameEventCode
// NumValues: 0x003C
enum class EYYMsgEGameEventCode : uint8
{
	EGEC_SUCCESS                             = 0,
	EGEC_FAIL                                = 1,
	EGEC_UNKOWN_ERROR                        = 2,
	EGEC_ACCOUNT_EXIST                       = 3,
	EGEC_ACCOUNTPWD_INVALID                  = 4,
	EGEC_ACCOUNT_USING                       = 5,
	EGEC_ACCOUNT_LOCKED                      = 6,
	EGEC_ACCOUNT_SUCCESS                     = 7,
	EGEC_VERIFY_KEY_SUCCESS                  = 8,
	EGEC_VERIFY_KEY_FAIL                     = 9,
	EGEC_SELECTSERVER_SUCCESS                = 10,
	EGEC_SELECTSERVER_FAIL                   = 11,
	EGEC_MASTERSERVER_CONNECT_FAIL           = 12,
	EGEC_LOGIN_PROXY_INVALID                 = 13,
	EGEC_LOGIN_GAME_INVALID                  = 14,
	EGEC_CHARACTER_EXIST                     = 15,
	EGEC_SVRZONEID_INVALID                   = 16,
	EGEC_CHARACTER_NUMOUT                    = 17,
	EGEC_CHARACTER_INVALID                   = 18,
	EGEC_CHARACTER_NOTEXIST                  = 19,
	EGEC_CHARACTER_USING                     = 20,
	EGEC_CHARACTER_LOCKED                    = 21,
	EGEC_ZONE_OVERLOAD                       = 22,
	EGEC_NOT_ONLINE                          = 23,
	EGEC_MAIL_UPDATE_ERROR                   = 24,
	EGEC_MAIL_TONAME_INVALID                 = 25,
	EGEC_MAIL_DELETE_ERROR                   = 26,
	EGEC_MAIL_TOWNAME_EQUAL                  = 27,
	EGEC_LACK_MONEY                          = 28,
	EGEC_FULL_PACKAGE                        = 29,
	EGEC_INVALID_ITEM                        = 30,
	EGEC_INVALID_CONSIGNMENT                 = 31,
	EGEC_NOT_ENOUGH_VIP                      = 32,
	EGEC_NEED_LEVEL                          = 33,
	EGEC_MAX_FRIEND_LIST                     = 34,
	EGEC_MAX_ENEMY_LIST                      = 35,
	EGEC_MAX_GANGS_LSIT                      = 36,
	EGEC_LIMITS_TO_RIGHTS                    = 37,
	EGEC_INVALID_GANGS_NAME                  = 38,
	EGEC_REPEAT_ENTER_GANGS                  = 39,
	EGEC_INVALID_GANGSMEMBER                 = 40,
	EGEC_MASTER_LEAVE_GANGS                  = 41,
	EGEC_GANGS_TITLE_OUTOF                   = 42,
	EGEC_ENTER_GATEWAY_FAILD                 = 43,
	EGEC_NO_SERVER4ZONE                      = 44,
	EGEC_INVALID_SKILL                       = 45,
	EGEC_ENTER_GAME_SUCCESS                  = 46,
	EGEC_CREATE_GUILD_SUCCESS                = 47,
	EGEC_JOIN_GUILD_SUCCESS                  = 48,
	EGEC_LEAVE_GUILD_SUCCESS                 = 49,
	EGEC_FREEMAN                             = 50,
	EGEC_ALREAY_IN_TEAM                      = 51,
	EGEC_INVALID_TEAM_INVITE                 = 52,
	EGEC_TEAM_FULL                           = 53,
	EGEC_CREATE_TEAM_FAIL                    = 54,
	EGEC_INVALID_TEAM                        = 55,
	EGEC_FINISH_MATCH                        = 56,
	EGEC_MATCHING                            = 57,
	EGEC_PLAYING                             = 58,
	EGEC_MAX                                 = 59,
};

// ScriptStruct SiliconRising.YYMsgVector4
// 0x0010 (0x0010 - 0x0000)
struct FYYMsgVector4 final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         W;                                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgVector4) == 0x000004, "Wrong alignment on FYYMsgVector4");
static_assert(sizeof(FYYMsgVector4) == 0x000010, "Wrong size on FYYMsgVector4");
static_assert(offsetof(FYYMsgVector4, X) == 0x000000, "Member 'FYYMsgVector4::X' has a wrong offset!");
static_assert(offsetof(FYYMsgVector4, Y) == 0x000004, "Member 'FYYMsgVector4::Y' has a wrong offset!");
static_assert(offsetof(FYYMsgVector4, Z) == 0x000008, "Member 'FYYMsgVector4::Z' has a wrong offset!");
static_assert(offsetof(FYYMsgVector4, W) == 0x00000C, "Member 'FYYMsgVector4::W' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgData
// 0x0018 (0x0018 - 0x0000)
struct FYYMsgData final
{
public:
	EYYMsgEGameMsgID                              MsgID;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 MsgData;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgData) == 0x000008, "Wrong alignment on FYYMsgData");
static_assert(sizeof(FYYMsgData) == 0x000018, "Wrong size on FYYMsgData");
static_assert(offsetof(FYYMsgData, MsgID) == 0x000000, "Member 'FYYMsgData::MsgID' has a wrong offset!");
static_assert(offsetof(FYYMsgData, MsgData) == 0x000008, "Member 'FYYMsgData::MsgData' has a wrong offset!");

// ScriptStruct SiliconRising.SteamUserData
// 0x0090 (0x0090 - 0x0000)
struct FSteamUserData final
{
public:
	class FString                                 steamid;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         communityvisibilitystate;                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         profilestate;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 personaname;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         lastlogoff;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 profileurl;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 avatar;                                            // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 avatarmedium;                                      // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 avatarfull;                                        // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         personastate;                                      // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 primaryclanid;                                     // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         timecreated;                                       // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         personastateflags;                                 // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSteamUserData) == 0x000008, "Wrong alignment on FSteamUserData");
static_assert(sizeof(FSteamUserData) == 0x000090, "Wrong size on FSteamUserData");
static_assert(offsetof(FSteamUserData, steamid) == 0x000000, "Member 'FSteamUserData::steamid' has a wrong offset!");
static_assert(offsetof(FSteamUserData, communityvisibilitystate) == 0x000010, "Member 'FSteamUserData::communityvisibilitystate' has a wrong offset!");
static_assert(offsetof(FSteamUserData, profilestate) == 0x000014, "Member 'FSteamUserData::profilestate' has a wrong offset!");
static_assert(offsetof(FSteamUserData, personaname) == 0x000018, "Member 'FSteamUserData::personaname' has a wrong offset!");
static_assert(offsetof(FSteamUserData, lastlogoff) == 0x000028, "Member 'FSteamUserData::lastlogoff' has a wrong offset!");
static_assert(offsetof(FSteamUserData, profileurl) == 0x000030, "Member 'FSteamUserData::profileurl' has a wrong offset!");
static_assert(offsetof(FSteamUserData, avatar) == 0x000040, "Member 'FSteamUserData::avatar' has a wrong offset!");
static_assert(offsetof(FSteamUserData, avatarmedium) == 0x000050, "Member 'FSteamUserData::avatarmedium' has a wrong offset!");
static_assert(offsetof(FSteamUserData, avatarfull) == 0x000060, "Member 'FSteamUserData::avatarfull' has a wrong offset!");
static_assert(offsetof(FSteamUserData, personastate) == 0x000070, "Member 'FSteamUserData::personastate' has a wrong offset!");
static_assert(offsetof(FSteamUserData, primaryclanid) == 0x000078, "Member 'FSteamUserData::primaryclanid' has a wrong offset!");
static_assert(offsetof(FSteamUserData, timecreated) == 0x000088, "Member 'FSteamUserData::timecreated' has a wrong offset!");
static_assert(offsetof(FSteamUserData, personastateflags) == 0x00008C, "Member 'FSteamUserData::personastateflags' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgVector2
// 0x0008 (0x0008 - 0x0000)
struct FYYMsgVector2 final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgVector2) == 0x000004, "Wrong alignment on FYYMsgVector2");
static_assert(sizeof(FYYMsgVector2) == 0x000008, "Wrong size on FYYMsgVector2");
static_assert(offsetof(FYYMsgVector2, X) == 0x000000, "Member 'FYYMsgVector2::X' has a wrong offset!");
static_assert(offsetof(FYYMsgVector2, Y) == 0x000004, "Member 'FYYMsgVector2::Y' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgPropertyVector2
// 0x0018 (0x0018 - 0x0000)
struct FYYMsgPropertyVector2 final
{
public:
	class FString                                 property_name;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgVector2                          Data;                                              // 0x0010(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgPropertyVector2) == 0x000008, "Wrong alignment on FYYMsgPropertyVector2");
static_assert(sizeof(FYYMsgPropertyVector2) == 0x000018, "Wrong size on FYYMsgPropertyVector2");
static_assert(offsetof(FYYMsgPropertyVector2, property_name) == 0x000000, "Member 'FYYMsgPropertyVector2::property_name' has a wrong offset!");
static_assert(offsetof(FYYMsgPropertyVector2, Data) == 0x000010, "Member 'FYYMsgPropertyVector2::Data' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgInt64
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FYYMsgInt64 final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FYYMsgInt64) == 0x000008, "Wrong alignment on FYYMsgInt64");
static_assert(sizeof(FYYMsgInt64) == 0x000008, "Wrong size on FYYMsgInt64");

// ScriptStruct SiliconRising.YYMsgIdent
// 0x0010 (0x0010 - 0x0000)
struct FYYMsgIdent final
{
public:
	struct FYYMsgInt64                            svrid;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FYYMsgInt64                            Index;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgIdent) == 0x000008, "Wrong alignment on FYYMsgIdent");
static_assert(sizeof(FYYMsgIdent) == 0x000010, "Wrong size on FYYMsgIdent");
static_assert(offsetof(FYYMsgIdent, svrid) == 0x000000, "Member 'FYYMsgIdent::svrid' has a wrong offset!");
static_assert(offsetof(FYYMsgIdent, Index) == 0x000008, "Member 'FYYMsgIdent::Index' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgReqAckPVPServerStart
// 0x0010 (0x0010 - 0x0000)
struct FYYMsgReqAckPVPServerStart final
{
public:
	struct FYYMsgIdent                            RoomID;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgReqAckPVPServerStart) == 0x000008, "Wrong alignment on FYYMsgReqAckPVPServerStart");
static_assert(sizeof(FYYMsgReqAckPVPServerStart) == 0x000010, "Wrong size on FYYMsgReqAckPVPServerStart");
static_assert(offsetof(FYYMsgReqAckPVPServerStart, RoomID) == 0x000000, "Member 'FYYMsgReqAckPVPServerStart::RoomID' has a wrong offset!");

// ScriptStruct SiliconRising.SpecialBulletCfg
// 0x001C (0x001C - 0x0000)
struct FSpecialBulletCfg final
{
public:
	int32                                         Speed;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                collisonScale;                                     // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpecialBulletCfg) == 0x000004, "Wrong alignment on FSpecialBulletCfg");
static_assert(sizeof(FSpecialBulletCfg) == 0x00001C, "Wrong size on FSpecialBulletCfg");
static_assert(offsetof(FSpecialBulletCfg, Speed) == 0x000000, "Member 'FSpecialBulletCfg::Speed' has a wrong offset!");
static_assert(offsetof(FSpecialBulletCfg, Scale) == 0x000004, "Member 'FSpecialBulletCfg::Scale' has a wrong offset!");
static_assert(offsetof(FSpecialBulletCfg, collisonScale) == 0x000010, "Member 'FSpecialBulletCfg::collisonScale' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgRoomCampMember
// 0x0038 (0x0038 - 0x0000)
struct FYYMsgRoomCampMember final
{
public:
	struct FYYMsgIdent                            player_id;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         avatar;                                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgIdent                            battle_player_id;                                  // 0x0028(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgRoomCampMember) == 0x000008, "Wrong alignment on FYYMsgRoomCampMember");
static_assert(sizeof(FYYMsgRoomCampMember) == 0x000038, "Wrong size on FYYMsgRoomCampMember");
static_assert(offsetof(FYYMsgRoomCampMember, player_id) == 0x000000, "Member 'FYYMsgRoomCampMember::player_id' has a wrong offset!");
static_assert(offsetof(FYYMsgRoomCampMember, Name) == 0x000010, "Member 'FYYMsgRoomCampMember::Name' has a wrong offset!");
static_assert(offsetof(FYYMsgRoomCampMember, avatar) == 0x000020, "Member 'FYYMsgRoomCampMember::avatar' has a wrong offset!");
static_assert(offsetof(FYYMsgRoomCampMember, Level) == 0x000024, "Member 'FYYMsgRoomCampMember::Level' has a wrong offset!");
static_assert(offsetof(FYYMsgRoomCampMember, battle_player_id) == 0x000028, "Member 'FYYMsgRoomCampMember::battle_player_id' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgRoomCamp
// 0x0018 (0x0018 - 0x0000)
struct FYYMsgRoomCamp final
{
public:
	int32                                         camp_id;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FYYMsgRoomCampMember>           members;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgRoomCamp) == 0x000008, "Wrong alignment on FYYMsgRoomCamp");
static_assert(sizeof(FYYMsgRoomCamp) == 0x000018, "Wrong size on FYYMsgRoomCamp");
static_assert(offsetof(FYYMsgRoomCamp, camp_id) == 0x000000, "Member 'FYYMsgRoomCamp::camp_id' has a wrong offset!");
static_assert(offsetof(FYYMsgRoomCamp, members) == 0x000008, "Member 'FYYMsgRoomCamp::members' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgAckFinishMatch
// 0x0050 (0x0050 - 0x0000)
struct FYYMsgAckFinishMatch final
{
public:
	struct FYYMsgIdent                            team_id;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         is_ok;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FYYMsgIdent                            game_idx;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 hostname;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FYYMsgRoomCamp>                 camps;                                             // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgAckFinishMatch) == 0x000008, "Wrong alignment on FYYMsgAckFinishMatch");
static_assert(sizeof(FYYMsgAckFinishMatch) == 0x000050, "Wrong size on FYYMsgAckFinishMatch");
static_assert(offsetof(FYYMsgAckFinishMatch, team_id) == 0x000000, "Member 'FYYMsgAckFinishMatch::team_id' has a wrong offset!");
static_assert(offsetof(FYYMsgAckFinishMatch, is_ok) == 0x000010, "Member 'FYYMsgAckFinishMatch::is_ok' has a wrong offset!");
static_assert(offsetof(FYYMsgAckFinishMatch, game_idx) == 0x000018, "Member 'FYYMsgAckFinishMatch::game_idx' has a wrong offset!");
static_assert(offsetof(FYYMsgAckFinishMatch, hostname) == 0x000028, "Member 'FYYMsgAckFinishMatch::hostname' has a wrong offset!");
static_assert(offsetof(FYYMsgAckFinishMatch, Port) == 0x000038, "Member 'FYYMsgAckFinishMatch::Port' has a wrong offset!");
static_assert(offsetof(FYYMsgAckFinishMatch, camps) == 0x000040, "Member 'FYYMsgAckFinishMatch::camps' has a wrong offset!");

// ScriptStruct SiliconRising.LeaderBoardData
// 0x0058 (0x0058 - 0x0000)
struct FLeaderBoardData final
{
public:
	class FString                                 rank;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 nickName;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Score;                                             // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ID;                                                // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HeadUrl;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLocal;                                           // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLeaderBoardData) == 0x000008, "Wrong alignment on FLeaderBoardData");
static_assert(sizeof(FLeaderBoardData) == 0x000058, "Wrong size on FLeaderBoardData");
static_assert(offsetof(FLeaderBoardData, rank) == 0x000000, "Member 'FLeaderBoardData::rank' has a wrong offset!");
static_assert(offsetof(FLeaderBoardData, nickName) == 0x000010, "Member 'FLeaderBoardData::nickName' has a wrong offset!");
static_assert(offsetof(FLeaderBoardData, Score) == 0x000020, "Member 'FLeaderBoardData::Score' has a wrong offset!");
static_assert(offsetof(FLeaderBoardData, ID) == 0x000030, "Member 'FLeaderBoardData::ID' has a wrong offset!");
static_assert(offsetof(FLeaderBoardData, HeadUrl) == 0x000040, "Member 'FLeaderBoardData::HeadUrl' has a wrong offset!");
static_assert(offsetof(FLeaderBoardData, IsLocal) == 0x000050, "Member 'FLeaderBoardData::IsLocal' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgRecordVector2
// 0x0010 (0x0010 - 0x0000)
struct FYYMsgRecordVector2 final
{
public:
	int32                                         row;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         col;                                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgVector2                          Data;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgRecordVector2) == 0x000004, "Wrong alignment on FYYMsgRecordVector2");
static_assert(sizeof(FYYMsgRecordVector2) == 0x000010, "Wrong size on FYYMsgRecordVector2");
static_assert(offsetof(FYYMsgRecordVector2, row) == 0x000000, "Member 'FYYMsgRecordVector2::row' has a wrong offset!");
static_assert(offsetof(FYYMsgRecordVector2, col) == 0x000004, "Member 'FYYMsgRecordVector2::col' has a wrong offset!");
static_assert(offsetof(FYYMsgRecordVector2, Data) == 0x000008, "Member 'FYYMsgRecordVector2::Data' has a wrong offset!");

// ScriptStruct SiliconRising.OnlineAchievementSteam
// 0x0028 (0x0028 - 0x0000)
struct FOnlineAchievementSteam final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EN;                                                // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Progress;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReadFromSteam;                                    // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOnlineAchievementSteam) == 0x000008, "Wrong alignment on FOnlineAchievementSteam");
static_assert(sizeof(FOnlineAchievementSteam) == 0x000028, "Wrong size on FOnlineAchievementSteam");
static_assert(offsetof(FOnlineAchievementSteam, ID) == 0x000000, "Member 'FOnlineAchievementSteam::ID' has a wrong offset!");
static_assert(offsetof(FOnlineAchievementSteam, EN) == 0x000010, "Member 'FOnlineAchievementSteam::EN' has a wrong offset!");
static_assert(offsetof(FOnlineAchievementSteam, Progress) == 0x000020, "Member 'FOnlineAchievementSteam::Progress' has a wrong offset!");
static_assert(offsetof(FOnlineAchievementSteam, bReadFromSteam) == 0x000024, "Member 'FOnlineAchievementSteam::bReadFromSteam' has a wrong offset!");

// ScriptStruct SiliconRising.PlayerTopInfo
// 0x0050 (0x0050 - 0x0000)
struct FPlayerTopInfo final
{
public:
	class FString                                 gameTime;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 hitRate;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 killNum;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 topScore;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 topRank;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerTopInfo) == 0x000008, "Wrong alignment on FPlayerTopInfo");
static_assert(sizeof(FPlayerTopInfo) == 0x000050, "Wrong size on FPlayerTopInfo");
static_assert(offsetof(FPlayerTopInfo, gameTime) == 0x000000, "Member 'FPlayerTopInfo::gameTime' has a wrong offset!");
static_assert(offsetof(FPlayerTopInfo, hitRate) == 0x000010, "Member 'FPlayerTopInfo::hitRate' has a wrong offset!");
static_assert(offsetof(FPlayerTopInfo, killNum) == 0x000020, "Member 'FPlayerTopInfo::killNum' has a wrong offset!");
static_assert(offsetof(FPlayerTopInfo, topScore) == 0x000030, "Member 'FPlayerTopInfo::topScore' has a wrong offset!");
static_assert(offsetof(FPlayerTopInfo, topRank) == 0x000040, "Member 'FPlayerTopInfo::topRank' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgObjectRecordVector2
// 0x0030 (0x0030 - 0x0000)
struct FYYMsgObjectRecordVector2 final
{
public:
	struct FYYMsgIdent                            player_id;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 record_name;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FYYMsgRecordVector2>            property_list;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgObjectRecordVector2) == 0x000008, "Wrong alignment on FYYMsgObjectRecordVector2");
static_assert(sizeof(FYYMsgObjectRecordVector2) == 0x000030, "Wrong size on FYYMsgObjectRecordVector2");
static_assert(offsetof(FYYMsgObjectRecordVector2, player_id) == 0x000000, "Member 'FYYMsgObjectRecordVector2::player_id' has a wrong offset!");
static_assert(offsetof(FYYMsgObjectRecordVector2, record_name) == 0x000010, "Member 'FYYMsgObjectRecordVector2::record_name' has a wrong offset!");
static_assert(offsetof(FYYMsgObjectRecordVector2, property_list) == 0x000020, "Member 'FYYMsgObjectRecordVector2::property_list' has a wrong offset!");

// ScriptStruct SiliconRising.CampConfig
// 0x0002 (0x0002 - 0x0000)
struct FCampConfig final
{
public:
	EPawnCamp                                     camp;                                              // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECampState                                    State;                                             // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCampConfig) == 0x000001, "Wrong alignment on FCampConfig");
static_assert(sizeof(FCampConfig) == 0x000002, "Wrong size on FCampConfig");
static_assert(offsetof(FCampConfig, camp) == 0x000000, "Member 'FCampConfig::camp' has a wrong offset!");
static_assert(offsetof(FCampConfig, State) == 0x000001, "Member 'FCampConfig::State' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgAckCancelMatch
// 0x0018 (0x0018 - 0x0000)
struct FYYMsgAckCancelMatch final
{
public:
	struct FYYMsgIdent                            team_id;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	EYYMsgECancelMatchResult                      Result;                                            // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FYYMsgAckCancelMatch) == 0x000008, "Wrong alignment on FYYMsgAckCancelMatch");
static_assert(sizeof(FYYMsgAckCancelMatch) == 0x000018, "Wrong size on FYYMsgAckCancelMatch");
static_assert(offsetof(FYYMsgAckCancelMatch, team_id) == 0x000000, "Member 'FYYMsgAckCancelMatch::team_id' has a wrong offset!");
static_assert(offsetof(FYYMsgAckCancelMatch, Result) == 0x000010, "Member 'FYYMsgAckCancelMatch::Result' has a wrong offset!");

// ScriptStruct SiliconRising.BulletConfig
// 0x0158 (0x0158 - 0x0000)
struct FBulletConfig final
{
public:
	float                                         Power;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Range;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LifeTime;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExplosionDamage;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExplosionRadius;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UDamageType>                DamageType;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAttenuation*                      SoundAttenuation;                                  // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundConcurrency*                      SoundConcurrency;                                  // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USoundBase*>                     DefaultSound;                                      // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UParticleSystem*                        DefaultEffect;                                     // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     HitDefaultDecal;                                   // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USoundBase*>                     HitBodySound;                                      // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class USoundBase*>                     HitBodyFakeSound;                                  // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UParticleSystem*                        HitBodyEffect;                                     // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        HitBodyFakeEffect;                                 // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USoundBase*>                     HitConcreteSound;                                  // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UParticleSystem*                        HitConcreteEffect;                                 // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     HitConcreteDecal;                                  // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USoundBase*>                     HitMetalSound;                                     // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UParticleSystem*                        HitMetalEffect;                                    // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     HitMetaleDecal;                                    // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USoundBase*>                     HitWoodSound;                                      // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UParticleSystem*                        HitWoodEffect;                                     // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     HitWoodDecal;                                      // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USoundBase*>                     HitGlassSound;                                     // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UParticleSystem*                        HitGlassEffect;                                    // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     HitGlassDecal;                                     // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USoundBase*>                     HitPlasticSound;                                   // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UParticleSystem*                        HitPlasticEffect;                                  // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     HitPlasticDecal;                                   // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USoundBase*>                     HitCopterShieldSound;                              // 0x0120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UParticleSystem*                        HitCopterShieldEffect;                             // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     HitCopterShieldDecal;                              // 0x0138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USoundBase*>                     ExplosionSound;                                    // 0x0140(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UParticleSystem*                        ExplosionEffect;                                   // 0x0150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBulletConfig) == 0x000008, "Wrong alignment on FBulletConfig");
static_assert(sizeof(FBulletConfig) == 0x000158, "Wrong size on FBulletConfig");
static_assert(offsetof(FBulletConfig, Power) == 0x000000, "Member 'FBulletConfig::Power' has a wrong offset!");
static_assert(offsetof(FBulletConfig, Range) == 0x000004, "Member 'FBulletConfig::Range' has a wrong offset!");
static_assert(offsetof(FBulletConfig, LifeTime) == 0x000008, "Member 'FBulletConfig::LifeTime' has a wrong offset!");
static_assert(offsetof(FBulletConfig, ExplosionDamage) == 0x00000C, "Member 'FBulletConfig::ExplosionDamage' has a wrong offset!");
static_assert(offsetof(FBulletConfig, ExplosionRadius) == 0x000010, "Member 'FBulletConfig::ExplosionRadius' has a wrong offset!");
static_assert(offsetof(FBulletConfig, DamageType) == 0x000018, "Member 'FBulletConfig::DamageType' has a wrong offset!");
static_assert(offsetof(FBulletConfig, SoundAttenuation) == 0x000020, "Member 'FBulletConfig::SoundAttenuation' has a wrong offset!");
static_assert(offsetof(FBulletConfig, SoundConcurrency) == 0x000028, "Member 'FBulletConfig::SoundConcurrency' has a wrong offset!");
static_assert(offsetof(FBulletConfig, DefaultSound) == 0x000030, "Member 'FBulletConfig::DefaultSound' has a wrong offset!");
static_assert(offsetof(FBulletConfig, DefaultEffect) == 0x000040, "Member 'FBulletConfig::DefaultEffect' has a wrong offset!");
static_assert(offsetof(FBulletConfig, HitDefaultDecal) == 0x000048, "Member 'FBulletConfig::HitDefaultDecal' has a wrong offset!");
static_assert(offsetof(FBulletConfig, HitBodySound) == 0x000050, "Member 'FBulletConfig::HitBodySound' has a wrong offset!");
static_assert(offsetof(FBulletConfig, HitBodyFakeSound) == 0x000060, "Member 'FBulletConfig::HitBodyFakeSound' has a wrong offset!");
static_assert(offsetof(FBulletConfig, HitBodyEffect) == 0x000070, "Member 'FBulletConfig::HitBodyEffect' has a wrong offset!");
static_assert(offsetof(FBulletConfig, HitBodyFakeEffect) == 0x000078, "Member 'FBulletConfig::HitBodyFakeEffect' has a wrong offset!");
static_assert(offsetof(FBulletConfig, HitConcreteSound) == 0x000080, "Member 'FBulletConfig::HitConcreteSound' has a wrong offset!");
static_assert(offsetof(FBulletConfig, HitConcreteEffect) == 0x000090, "Member 'FBulletConfig::HitConcreteEffect' has a wrong offset!");
static_assert(offsetof(FBulletConfig, HitConcreteDecal) == 0x000098, "Member 'FBulletConfig::HitConcreteDecal' has a wrong offset!");
static_assert(offsetof(FBulletConfig, HitMetalSound) == 0x0000A0, "Member 'FBulletConfig::HitMetalSound' has a wrong offset!");
static_assert(offsetof(FBulletConfig, HitMetalEffect) == 0x0000B0, "Member 'FBulletConfig::HitMetalEffect' has a wrong offset!");
static_assert(offsetof(FBulletConfig, HitMetaleDecal) == 0x0000B8, "Member 'FBulletConfig::HitMetaleDecal' has a wrong offset!");
static_assert(offsetof(FBulletConfig, HitWoodSound) == 0x0000C0, "Member 'FBulletConfig::HitWoodSound' has a wrong offset!");
static_assert(offsetof(FBulletConfig, HitWoodEffect) == 0x0000D0, "Member 'FBulletConfig::HitWoodEffect' has a wrong offset!");
static_assert(offsetof(FBulletConfig, HitWoodDecal) == 0x0000D8, "Member 'FBulletConfig::HitWoodDecal' has a wrong offset!");
static_assert(offsetof(FBulletConfig, HitGlassSound) == 0x0000E0, "Member 'FBulletConfig::HitGlassSound' has a wrong offset!");
static_assert(offsetof(FBulletConfig, HitGlassEffect) == 0x0000F0, "Member 'FBulletConfig::HitGlassEffect' has a wrong offset!");
static_assert(offsetof(FBulletConfig, HitGlassDecal) == 0x0000F8, "Member 'FBulletConfig::HitGlassDecal' has a wrong offset!");
static_assert(offsetof(FBulletConfig, HitPlasticSound) == 0x000100, "Member 'FBulletConfig::HitPlasticSound' has a wrong offset!");
static_assert(offsetof(FBulletConfig, HitPlasticEffect) == 0x000110, "Member 'FBulletConfig::HitPlasticEffect' has a wrong offset!");
static_assert(offsetof(FBulletConfig, HitPlasticDecal) == 0x000118, "Member 'FBulletConfig::HitPlasticDecal' has a wrong offset!");
static_assert(offsetof(FBulletConfig, HitCopterShieldSound) == 0x000120, "Member 'FBulletConfig::HitCopterShieldSound' has a wrong offset!");
static_assert(offsetof(FBulletConfig, HitCopterShieldEffect) == 0x000130, "Member 'FBulletConfig::HitCopterShieldEffect' has a wrong offset!");
static_assert(offsetof(FBulletConfig, HitCopterShieldDecal) == 0x000138, "Member 'FBulletConfig::HitCopterShieldDecal' has a wrong offset!");
static_assert(offsetof(FBulletConfig, ExplosionSound) == 0x000140, "Member 'FBulletConfig::ExplosionSound' has a wrong offset!");
static_assert(offsetof(FBulletConfig, ExplosionEffect) == 0x000150, "Member 'FBulletConfig::ExplosionEffect' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgRecordInt
// 0x0010 (0x0010 - 0x0000)
struct FYYMsgRecordInt final
{
public:
	int32                                         row;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         col;                                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgInt64                            Data;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgRecordInt) == 0x000008, "Wrong alignment on FYYMsgRecordInt");
static_assert(sizeof(FYYMsgRecordInt) == 0x000010, "Wrong size on FYYMsgRecordInt");
static_assert(offsetof(FYYMsgRecordInt, row) == 0x000000, "Member 'FYYMsgRecordInt::row' has a wrong offset!");
static_assert(offsetof(FYYMsgRecordInt, col) == 0x000004, "Member 'FYYMsgRecordInt::col' has a wrong offset!");
static_assert(offsetof(FYYMsgRecordInt, Data) == 0x000008, "Member 'FYYMsgRecordInt::Data' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgPVPPlayerInfo
// 0x0030 (0x0030 - 0x0000)
struct FYYMsgPVPPlayerInfo final
{
public:
	struct FYYMsgIdent                            PlayerID;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         PlayerTeam;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerActor;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerShoot;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerHit;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerHitTarget;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerKill;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerDead;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FYYMsgPVPPlayerInfo) == 0x000008, "Wrong alignment on FYYMsgPVPPlayerInfo");
static_assert(sizeof(FYYMsgPVPPlayerInfo) == 0x000030, "Wrong size on FYYMsgPVPPlayerInfo");
static_assert(offsetof(FYYMsgPVPPlayerInfo, PlayerID) == 0x000000, "Member 'FYYMsgPVPPlayerInfo::PlayerID' has a wrong offset!");
static_assert(offsetof(FYYMsgPVPPlayerInfo, PlayerTeam) == 0x000010, "Member 'FYYMsgPVPPlayerInfo::PlayerTeam' has a wrong offset!");
static_assert(offsetof(FYYMsgPVPPlayerInfo, PlayerActor) == 0x000014, "Member 'FYYMsgPVPPlayerInfo::PlayerActor' has a wrong offset!");
static_assert(offsetof(FYYMsgPVPPlayerInfo, PlayerShoot) == 0x000018, "Member 'FYYMsgPVPPlayerInfo::PlayerShoot' has a wrong offset!");
static_assert(offsetof(FYYMsgPVPPlayerInfo, PlayerHit) == 0x00001C, "Member 'FYYMsgPVPPlayerInfo::PlayerHit' has a wrong offset!");
static_assert(offsetof(FYYMsgPVPPlayerInfo, PlayerHitTarget) == 0x000020, "Member 'FYYMsgPVPPlayerInfo::PlayerHitTarget' has a wrong offset!");
static_assert(offsetof(FYYMsgPVPPlayerInfo, PlayerKill) == 0x000024, "Member 'FYYMsgPVPPlayerInfo::PlayerKill' has a wrong offset!");
static_assert(offsetof(FYYMsgPVPPlayerInfo, PlayerDead) == 0x000028, "Member 'FYYMsgPVPPlayerInfo::PlayerDead' has a wrong offset!");

// ScriptStruct SiliconRising.WeaponParams
// 0x0080 (0x0080 - 0x0000)
struct FWeaponParams final
{
public:
	EItemTypes                                    WeaponType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BulletNum;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SameTimeBulletNum;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableFakeBullet;                                  // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFakeByDeadlySettings;                            // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FakeMiniRange;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FakeMaxRange;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAllSpecial;                                      // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAllNormal;                                       // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ClipNum;                                           // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FireInterval;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TriggerContinusly;                                 // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             FireSound;                                         // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             OutOfAmmoSound;                                    // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             ReloadSound;                                       // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             RemoveSound;                                       // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             PickUpSound;                                       // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             ShellDropSound;                                    // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             MagzineInSound;                                    // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        FireVfx;                                           // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        ShellDropVfx;                                      // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           HandFireMontage;                                   // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DropDownDisappearTime;                             // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWeaponParams) == 0x000008, "Wrong alignment on FWeaponParams");
static_assert(sizeof(FWeaponParams) == 0x000080, "Wrong size on FWeaponParams");
static_assert(offsetof(FWeaponParams, WeaponType) == 0x000000, "Member 'FWeaponParams::WeaponType' has a wrong offset!");
static_assert(offsetof(FWeaponParams, BulletNum) == 0x000004, "Member 'FWeaponParams::BulletNum' has a wrong offset!");
static_assert(offsetof(FWeaponParams, SameTimeBulletNum) == 0x000008, "Member 'FWeaponParams::SameTimeBulletNum' has a wrong offset!");
static_assert(offsetof(FWeaponParams, EnableFakeBullet) == 0x00000C, "Member 'FWeaponParams::EnableFakeBullet' has a wrong offset!");
static_assert(offsetof(FWeaponParams, IsFakeByDeadlySettings) == 0x00000D, "Member 'FWeaponParams::IsFakeByDeadlySettings' has a wrong offset!");
static_assert(offsetof(FWeaponParams, FakeMiniRange) == 0x000010, "Member 'FWeaponParams::FakeMiniRange' has a wrong offset!");
static_assert(offsetof(FWeaponParams, FakeMaxRange) == 0x000014, "Member 'FWeaponParams::FakeMaxRange' has a wrong offset!");
static_assert(offsetof(FWeaponParams, IsAllSpecial) == 0x000018, "Member 'FWeaponParams::IsAllSpecial' has a wrong offset!");
static_assert(offsetof(FWeaponParams, IsAllNormal) == 0x000019, "Member 'FWeaponParams::IsAllNormal' has a wrong offset!");
static_assert(offsetof(FWeaponParams, ClipNum) == 0x00001C, "Member 'FWeaponParams::ClipNum' has a wrong offset!");
static_assert(offsetof(FWeaponParams, FireInterval) == 0x000020, "Member 'FWeaponParams::FireInterval' has a wrong offset!");
static_assert(offsetof(FWeaponParams, TriggerContinusly) == 0x000024, "Member 'FWeaponParams::TriggerContinusly' has a wrong offset!");
static_assert(offsetof(FWeaponParams, FireSound) == 0x000028, "Member 'FWeaponParams::FireSound' has a wrong offset!");
static_assert(offsetof(FWeaponParams, OutOfAmmoSound) == 0x000030, "Member 'FWeaponParams::OutOfAmmoSound' has a wrong offset!");
static_assert(offsetof(FWeaponParams, ReloadSound) == 0x000038, "Member 'FWeaponParams::ReloadSound' has a wrong offset!");
static_assert(offsetof(FWeaponParams, RemoveSound) == 0x000040, "Member 'FWeaponParams::RemoveSound' has a wrong offset!");
static_assert(offsetof(FWeaponParams, PickUpSound) == 0x000048, "Member 'FWeaponParams::PickUpSound' has a wrong offset!");
static_assert(offsetof(FWeaponParams, ShellDropSound) == 0x000050, "Member 'FWeaponParams::ShellDropSound' has a wrong offset!");
static_assert(offsetof(FWeaponParams, MagzineInSound) == 0x000058, "Member 'FWeaponParams::MagzineInSound' has a wrong offset!");
static_assert(offsetof(FWeaponParams, FireVfx) == 0x000060, "Member 'FWeaponParams::FireVfx' has a wrong offset!");
static_assert(offsetof(FWeaponParams, ShellDropVfx) == 0x000068, "Member 'FWeaponParams::ShellDropVfx' has a wrong offset!");
static_assert(offsetof(FWeaponParams, HandFireMontage) == 0x000070, "Member 'FWeaponParams::HandFireMontage' has a wrong offset!");
static_assert(offsetof(FWeaponParams, DropDownDisappearTime) == 0x000078, "Member 'FWeaponParams::DropDownDisappearTime' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgReqAckRoomMember
// 0x0048 (0x0048 - 0x0000)
struct FYYMsgReqAckRoomMember final
{
public:
	struct FYYMsgIdent                            PlayerID;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 nickName;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HeadUrl;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Accurate;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WinRate;                                           // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Kills;                                             // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalScore;                                        // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RoomIndex;                                         // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FYYMsgReqAckRoomMember) == 0x000008, "Wrong alignment on FYYMsgReqAckRoomMember");
static_assert(sizeof(FYYMsgReqAckRoomMember) == 0x000048, "Wrong size on FYYMsgReqAckRoomMember");
static_assert(offsetof(FYYMsgReqAckRoomMember, PlayerID) == 0x000000, "Member 'FYYMsgReqAckRoomMember::PlayerID' has a wrong offset!");
static_assert(offsetof(FYYMsgReqAckRoomMember, nickName) == 0x000010, "Member 'FYYMsgReqAckRoomMember::nickName' has a wrong offset!");
static_assert(offsetof(FYYMsgReqAckRoomMember, HeadUrl) == 0x000020, "Member 'FYYMsgReqAckRoomMember::HeadUrl' has a wrong offset!");
static_assert(offsetof(FYYMsgReqAckRoomMember, Accurate) == 0x000030, "Member 'FYYMsgReqAckRoomMember::Accurate' has a wrong offset!");
static_assert(offsetof(FYYMsgReqAckRoomMember, WinRate) == 0x000034, "Member 'FYYMsgReqAckRoomMember::WinRate' has a wrong offset!");
static_assert(offsetof(FYYMsgReqAckRoomMember, Kills) == 0x000038, "Member 'FYYMsgReqAckRoomMember::Kills' has a wrong offset!");
static_assert(offsetof(FYYMsgReqAckRoomMember, TotalScore) == 0x00003C, "Member 'FYYMsgReqAckRoomMember::TotalScore' has a wrong offset!");
static_assert(offsetof(FYYMsgReqAckRoomMember, RoomIndex) == 0x000040, "Member 'FYYMsgReqAckRoomMember::RoomIndex' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgReqAckRoomInfo
// 0x0080 (0x0080 - 0x0000)
struct FYYMsgReqAckRoomInfo final
{
public:
	struct FYYMsgIdent                            RoomID;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FYYMsgIdent                            RoomMasterID;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 RoomName;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FYYMsgReqAckRoomMember>         ATeamPlayers;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FYYMsgReqAckRoomMember>         BTeamPlayers;                                      // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FYYMsgReqAckRoomMember>         CTeamPlayers;                                      // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FYYMsgReqAckRoomMember>         DTeamPlayers;                                      // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgReqAckRoomInfo) == 0x000008, "Wrong alignment on FYYMsgReqAckRoomInfo");
static_assert(sizeof(FYYMsgReqAckRoomInfo) == 0x000080, "Wrong size on FYYMsgReqAckRoomInfo");
static_assert(offsetof(FYYMsgReqAckRoomInfo, RoomID) == 0x000000, "Member 'FYYMsgReqAckRoomInfo::RoomID' has a wrong offset!");
static_assert(offsetof(FYYMsgReqAckRoomInfo, RoomMasterID) == 0x000010, "Member 'FYYMsgReqAckRoomInfo::RoomMasterID' has a wrong offset!");
static_assert(offsetof(FYYMsgReqAckRoomInfo, RoomName) == 0x000020, "Member 'FYYMsgReqAckRoomInfo::RoomName' has a wrong offset!");
static_assert(offsetof(FYYMsgReqAckRoomInfo, Password) == 0x000030, "Member 'FYYMsgReqAckRoomInfo::Password' has a wrong offset!");
static_assert(offsetof(FYYMsgReqAckRoomInfo, ATeamPlayers) == 0x000040, "Member 'FYYMsgReqAckRoomInfo::ATeamPlayers' has a wrong offset!");
static_assert(offsetof(FYYMsgReqAckRoomInfo, BTeamPlayers) == 0x000050, "Member 'FYYMsgReqAckRoomInfo::BTeamPlayers' has a wrong offset!");
static_assert(offsetof(FYYMsgReqAckRoomInfo, CTeamPlayers) == 0x000060, "Member 'FYYMsgReqAckRoomInfo::CTeamPlayers' has a wrong offset!");
static_assert(offsetof(FYYMsgReqAckRoomInfo, DTeamPlayers) == 0x000070, "Member 'FYYMsgReqAckRoomInfo::DTeamPlayers' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgReqAckRoomStart
// 0x00A8 (0x00A8 - 0x0000)
struct FYYMsgReqAckRoomStart final
{
public:
	struct FYYMsgIdent                            PlayerID;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FYYMsgReqAckRoomInfo                   RoomInfo;                                          // 0x0010(0x0080)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 ServerIP;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ServerPort;                                        // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EYYMsgERoomStartResult                        Result;                                            // 0x00A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FYYMsgReqAckRoomStart) == 0x000008, "Wrong alignment on FYYMsgReqAckRoomStart");
static_assert(sizeof(FYYMsgReqAckRoomStart) == 0x0000A8, "Wrong size on FYYMsgReqAckRoomStart");
static_assert(offsetof(FYYMsgReqAckRoomStart, PlayerID) == 0x000000, "Member 'FYYMsgReqAckRoomStart::PlayerID' has a wrong offset!");
static_assert(offsetof(FYYMsgReqAckRoomStart, RoomInfo) == 0x000010, "Member 'FYYMsgReqAckRoomStart::RoomInfo' has a wrong offset!");
static_assert(offsetof(FYYMsgReqAckRoomStart, ServerIP) == 0x000090, "Member 'FYYMsgReqAckRoomStart::ServerIP' has a wrong offset!");
static_assert(offsetof(FYYMsgReqAckRoomStart, ServerPort) == 0x0000A0, "Member 'FYYMsgReqAckRoomStart::ServerPort' has a wrong offset!");
static_assert(offsetof(FYYMsgReqAckRoomStart, Result) == 0x0000A4, "Member 'FYYMsgReqAckRoomStart::Result' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgReqAckPVPShutDown
// 0x0010 (0x0010 - 0x0000)
struct FYYMsgReqAckPVPShutDown final
{
public:
	struct FYYMsgIdent                            RoomID;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgReqAckPVPShutDown) == 0x000008, "Wrong alignment on FYYMsgReqAckPVPShutDown");
static_assert(sizeof(FYYMsgReqAckPVPShutDown) == 0x000010, "Wrong size on FYYMsgReqAckPVPShutDown");
static_assert(offsetof(FYYMsgReqAckPVPShutDown, RoomID) == 0x000000, "Member 'FYYMsgReqAckPVPShutDown::RoomID' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgRecordString
// 0x0018 (0x0018 - 0x0000)
struct FYYMsgRecordString final
{
public:
	int32                                         row;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         col;                                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Data;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgRecordString) == 0x000008, "Wrong alignment on FYYMsgRecordString");
static_assert(sizeof(FYYMsgRecordString) == 0x000018, "Wrong size on FYYMsgRecordString");
static_assert(offsetof(FYYMsgRecordString, row) == 0x000000, "Member 'FYYMsgRecordString::row' has a wrong offset!");
static_assert(offsetof(FYYMsgRecordString, col) == 0x000004, "Member 'FYYMsgRecordString::col' has a wrong offset!");
static_assert(offsetof(FYYMsgRecordString, Data) == 0x000008, "Member 'FYYMsgRecordString::Data' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgReqAckPVPServerFinished
// 0x0090 (0x0090 - 0x0000)
struct FYYMsgReqAckPVPServerFinished final
{
public:
	struct FYYMsgIdent                            RoomID;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FYYMsgReqAckRoomInfo                   RoomInfo;                                          // 0x0010(0x0080)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgReqAckPVPServerFinished) == 0x000008, "Wrong alignment on FYYMsgReqAckPVPServerFinished");
static_assert(sizeof(FYYMsgReqAckPVPServerFinished) == 0x000090, "Wrong size on FYYMsgReqAckPVPServerFinished");
static_assert(offsetof(FYYMsgReqAckPVPServerFinished, RoomID) == 0x000000, "Member 'FYYMsgReqAckPVPServerFinished::RoomID' has a wrong offset!");
static_assert(offsetof(FYYMsgReqAckPVPServerFinished, RoomInfo) == 0x000010, "Member 'FYYMsgReqAckPVPServerFinished::RoomInfo' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgPackSURLParam
// 0x0068 (0x0068 - 0x0000)
struct FYYMsgPackSURLParam final
{
public:
	class FString                                 strUrl;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 strGetParams;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 strBodyData;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 strCookies;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         fTimeOutSec;                                       // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 strRsp;                                            // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgInt64                            nRet;                                              // 0x0058(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FYYMsgInt64                            nReqID;                                            // 0x0060(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgPackSURLParam) == 0x000008, "Wrong alignment on FYYMsgPackSURLParam");
static_assert(sizeof(FYYMsgPackSURLParam) == 0x000068, "Wrong size on FYYMsgPackSURLParam");
static_assert(offsetof(FYYMsgPackSURLParam, strUrl) == 0x000000, "Member 'FYYMsgPackSURLParam::strUrl' has a wrong offset!");
static_assert(offsetof(FYYMsgPackSURLParam, strGetParams) == 0x000010, "Member 'FYYMsgPackSURLParam::strGetParams' has a wrong offset!");
static_assert(offsetof(FYYMsgPackSURLParam, strBodyData) == 0x000020, "Member 'FYYMsgPackSURLParam::strBodyData' has a wrong offset!");
static_assert(offsetof(FYYMsgPackSURLParam, strCookies) == 0x000030, "Member 'FYYMsgPackSURLParam::strCookies' has a wrong offset!");
static_assert(offsetof(FYYMsgPackSURLParam, fTimeOutSec) == 0x000040, "Member 'FYYMsgPackSURLParam::fTimeOutSec' has a wrong offset!");
static_assert(offsetof(FYYMsgPackSURLParam, strRsp) == 0x000048, "Member 'FYYMsgPackSURLParam::strRsp' has a wrong offset!");
static_assert(offsetof(FYYMsgPackSURLParam, nRet) == 0x000058, "Member 'FYYMsgPackSURLParam::nRet' has a wrong offset!");
static_assert(offsetof(FYYMsgPackSURLParam, nReqID) == 0x000060, "Member 'FYYMsgPackSURLParam::nReqID' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgObjectRecordCleared
// 0x0020 (0x0020 - 0x0000)
struct FYYMsgObjectRecordCleared final
{
public:
	struct FYYMsgIdent                            player_id;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 record_name;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgObjectRecordCleared) == 0x000008, "Wrong alignment on FYYMsgObjectRecordCleared");
static_assert(sizeof(FYYMsgObjectRecordCleared) == 0x000020, "Wrong size on FYYMsgObjectRecordCleared");
static_assert(offsetof(FYYMsgObjectRecordCleared, player_id) == 0x000000, "Member 'FYYMsgObjectRecordCleared::player_id' has a wrong offset!");
static_assert(offsetof(FYYMsgObjectRecordCleared, record_name) == 0x000010, "Member 'FYYMsgObjectRecordCleared::record_name' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgRecordByte
// 0x0018 (0x0018 - 0x0000)
struct FYYMsgRecordByte final
{
public:
	int32                                         row;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         col;                                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Data;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgRecordByte) == 0x000008, "Wrong alignment on FYYMsgRecordByte");
static_assert(sizeof(FYYMsgRecordByte) == 0x000018, "Wrong size on FYYMsgRecordByte");
static_assert(offsetof(FYYMsgRecordByte, row) == 0x000000, "Member 'FYYMsgRecordByte::row' has a wrong offset!");
static_assert(offsetof(FYYMsgRecordByte, col) == 0x000004, "Member 'FYYMsgRecordByte::col' has a wrong offset!");
static_assert(offsetof(FYYMsgRecordByte, Data) == 0x000008, "Member 'FYYMsgRecordByte::Data' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgRecordObject
// 0x0018 (0x0018 - 0x0000)
struct FYYMsgRecordObject final
{
public:
	int32                                         row;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         col;                                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgIdent                            Data;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgRecordObject) == 0x000008, "Wrong alignment on FYYMsgRecordObject");
static_assert(sizeof(FYYMsgRecordObject) == 0x000018, "Wrong size on FYYMsgRecordObject");
static_assert(offsetof(FYYMsgRecordObject, row) == 0x000000, "Member 'FYYMsgRecordObject::row' has a wrong offset!");
static_assert(offsetof(FYYMsgRecordObject, col) == 0x000004, "Member 'FYYMsgRecordObject::col' has a wrong offset!");
static_assert(offsetof(FYYMsgRecordObject, Data) == 0x000008, "Member 'FYYMsgRecordObject::Data' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgRecordFloat
// 0x000C (0x000C - 0x0000)
struct FYYMsgRecordFloat final
{
public:
	int32                                         row;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         col;                                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Data;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgRecordFloat) == 0x000004, "Wrong alignment on FYYMsgRecordFloat");
static_assert(sizeof(FYYMsgRecordFloat) == 0x00000C, "Wrong size on FYYMsgRecordFloat");
static_assert(offsetof(FYYMsgRecordFloat, row) == 0x000000, "Member 'FYYMsgRecordFloat::row' has a wrong offset!");
static_assert(offsetof(FYYMsgRecordFloat, col) == 0x000004, "Member 'FYYMsgRecordFloat::col' has a wrong offset!");
static_assert(offsetof(FYYMsgRecordFloat, Data) == 0x000008, "Member 'FYYMsgRecordFloat::Data' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgRecordVector4
// 0x0018 (0x0018 - 0x0000)
struct FYYMsgRecordVector4 final
{
public:
	int32                                         row;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         col;                                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgVector4                          Data;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgRecordVector4) == 0x000004, "Wrong alignment on FYYMsgRecordVector4");
static_assert(sizeof(FYYMsgRecordVector4) == 0x000018, "Wrong size on FYYMsgRecordVector4");
static_assert(offsetof(FYYMsgRecordVector4, row) == 0x000000, "Member 'FYYMsgRecordVector4::row' has a wrong offset!");
static_assert(offsetof(FYYMsgRecordVector4, col) == 0x000004, "Member 'FYYMsgRecordVector4::col' has a wrong offset!");
static_assert(offsetof(FYYMsgRecordVector4, Data) == 0x000008, "Member 'FYYMsgRecordVector4::Data' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgVector3
// 0x000C (0x000C - 0x0000)
struct FYYMsgVector3 final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgVector3) == 0x000004, "Wrong alignment on FYYMsgVector3");
static_assert(sizeof(FYYMsgVector3) == 0x00000C, "Wrong size on FYYMsgVector3");
static_assert(offsetof(FYYMsgVector3, X) == 0x000000, "Member 'FYYMsgVector3::X' has a wrong offset!");
static_assert(offsetof(FYYMsgVector3, Y) == 0x000004, "Member 'FYYMsgVector3::Y' has a wrong offset!");
static_assert(offsetof(FYYMsgVector3, Z) == 0x000008, "Member 'FYYMsgVector3::Z' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgRecordVector3
// 0x0014 (0x0014 - 0x0000)
struct FYYMsgRecordVector3 final
{
public:
	int32                                         row;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         col;                                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgVector3                          Data;                                              // 0x0008(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgRecordVector3) == 0x000004, "Wrong alignment on FYYMsgRecordVector3");
static_assert(sizeof(FYYMsgRecordVector3) == 0x000014, "Wrong size on FYYMsgRecordVector3");
static_assert(offsetof(FYYMsgRecordVector3, row) == 0x000000, "Member 'FYYMsgRecordVector3::row' has a wrong offset!");
static_assert(offsetof(FYYMsgRecordVector3, col) == 0x000004, "Member 'FYYMsgRecordVector3::col' has a wrong offset!");
static_assert(offsetof(FYYMsgRecordVector3, Data) == 0x000008, "Member 'FYYMsgRecordVector3::Data' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgPlayerRecordBase
// 0x0090 (0x0090 - 0x0000)
struct FYYMsgPlayerRecordBase final
{
public:
	class FString                                 record_name;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FYYMsgRecordInt>                record_int_list;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FYYMsgRecordFloat>              record_float_list;                                 // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FYYMsgRecordString>             record_string_list;                                // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FYYMsgRecordByte>               record_byte_list;                                  // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FYYMsgRecordObject>             record_object_list;                                // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FYYMsgRecordVector2>            record_vector2_list;                               // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FYYMsgRecordVector3>            record_vector3_list;                               // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FYYMsgRecordVector4>            record_vector4_list;                               // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgPlayerRecordBase) == 0x000008, "Wrong alignment on FYYMsgPlayerRecordBase");
static_assert(sizeof(FYYMsgPlayerRecordBase) == 0x000090, "Wrong size on FYYMsgPlayerRecordBase");
static_assert(offsetof(FYYMsgPlayerRecordBase, record_name) == 0x000000, "Member 'FYYMsgPlayerRecordBase::record_name' has a wrong offset!");
static_assert(offsetof(FYYMsgPlayerRecordBase, record_int_list) == 0x000010, "Member 'FYYMsgPlayerRecordBase::record_int_list' has a wrong offset!");
static_assert(offsetof(FYYMsgPlayerRecordBase, record_float_list) == 0x000020, "Member 'FYYMsgPlayerRecordBase::record_float_list' has a wrong offset!");
static_assert(offsetof(FYYMsgPlayerRecordBase, record_string_list) == 0x000030, "Member 'FYYMsgPlayerRecordBase::record_string_list' has a wrong offset!");
static_assert(offsetof(FYYMsgPlayerRecordBase, record_byte_list) == 0x000040, "Member 'FYYMsgPlayerRecordBase::record_byte_list' has a wrong offset!");
static_assert(offsetof(FYYMsgPlayerRecordBase, record_object_list) == 0x000050, "Member 'FYYMsgPlayerRecordBase::record_object_list' has a wrong offset!");
static_assert(offsetof(FYYMsgPlayerRecordBase, record_vector2_list) == 0x000060, "Member 'FYYMsgPlayerRecordBase::record_vector2_list' has a wrong offset!");
static_assert(offsetof(FYYMsgPlayerRecordBase, record_vector3_list) == 0x000070, "Member 'FYYMsgPlayerRecordBase::record_vector3_list' has a wrong offset!");
static_assert(offsetof(FYYMsgPlayerRecordBase, record_vector4_list) == 0x000080, "Member 'FYYMsgPlayerRecordBase::record_vector4_list' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgReqAckPVPServerInfo
// 0x0020 (0x0020 - 0x0000)
struct FYYMsgReqAckPVPServerInfo final
{
public:
	struct FYYMsgIdent                            RoomID;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FYYMsgPVPPlayerInfo>            PlayerInfoList;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgReqAckPVPServerInfo) == 0x000008, "Wrong alignment on FYYMsgReqAckPVPServerInfo");
static_assert(sizeof(FYYMsgReqAckPVPServerInfo) == 0x000020, "Wrong size on FYYMsgReqAckPVPServerInfo");
static_assert(offsetof(FYYMsgReqAckPVPServerInfo, RoomID) == 0x000000, "Member 'FYYMsgReqAckPVPServerInfo::RoomID' has a wrong offset!");
static_assert(offsetof(FYYMsgReqAckPVPServerInfo, PlayerInfoList) == 0x000010, "Member 'FYYMsgReqAckPVPServerInfo::PlayerInfoList' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgReqFinishMatch
// 0x0010 (0x0010 - 0x0000)
struct FYYMsgReqFinishMatch final
{
public:
	struct FYYMsgIdent                            team_id;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgReqFinishMatch) == 0x000008, "Wrong alignment on FYYMsgReqFinishMatch");
static_assert(sizeof(FYYMsgReqFinishMatch) == 0x000010, "Wrong size on FYYMsgReqFinishMatch");
static_assert(offsetof(FYYMsgReqFinishMatch, team_id) == 0x000000, "Member 'FYYMsgReqFinishMatch::team_id' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgPropertyByte
// 0x0020 (0x0020 - 0x0000)
struct FYYMsgPropertyByte final
{
public:
	class FString                                 property_name;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Data;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgPropertyByte) == 0x000008, "Wrong alignment on FYYMsgPropertyByte");
static_assert(sizeof(FYYMsgPropertyByte) == 0x000020, "Wrong size on FYYMsgPropertyByte");
static_assert(offsetof(FYYMsgPropertyByte, property_name) == 0x000000, "Member 'FYYMsgPropertyByte::property_name' has a wrong offset!");
static_assert(offsetof(FYYMsgPropertyByte, Data) == 0x000010, "Member 'FYYMsgPropertyByte::Data' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgReqAckPVPServerRegister
// 0x00A0 (0x00A0 - 0x0000)
struct FYYMsgReqAckPVPServerRegister final
{
public:
	struct FYYMsgIdent                            RoomID;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         PVPServerPort;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FYYMsgReqAckRoomInfo                   RoomInfo;                                          // 0x0018(0x0080)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         Result;                                            // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FYYMsgReqAckPVPServerRegister) == 0x000008, "Wrong alignment on FYYMsgReqAckPVPServerRegister");
static_assert(sizeof(FYYMsgReqAckPVPServerRegister) == 0x0000A0, "Wrong size on FYYMsgReqAckPVPServerRegister");
static_assert(offsetof(FYYMsgReqAckPVPServerRegister, RoomID) == 0x000000, "Member 'FYYMsgReqAckPVPServerRegister::RoomID' has a wrong offset!");
static_assert(offsetof(FYYMsgReqAckPVPServerRegister, PVPServerPort) == 0x000010, "Member 'FYYMsgReqAckPVPServerRegister::PVPServerPort' has a wrong offset!");
static_assert(offsetof(FYYMsgReqAckPVPServerRegister, RoomInfo) == 0x000018, "Member 'FYYMsgReqAckPVPServerRegister::RoomInfo' has a wrong offset!");
static_assert(offsetof(FYYMsgReqAckPVPServerRegister, Result) == 0x000098, "Member 'FYYMsgReqAckPVPServerRegister::Result' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgReqCancelMatch
// 0x0020 (0x0020 - 0x0000)
struct FYYMsgReqCancelMatch final
{
public:
	struct FYYMsgIdent                            self_id;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FYYMsgIdent                            team_id;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgReqCancelMatch) == 0x000008, "Wrong alignment on FYYMsgReqCancelMatch");
static_assert(sizeof(FYYMsgReqCancelMatch) == 0x000020, "Wrong size on FYYMsgReqCancelMatch");
static_assert(offsetof(FYYMsgReqCancelMatch, self_id) == 0x000000, "Member 'FYYMsgReqCancelMatch::self_id' has a wrong offset!");
static_assert(offsetof(FYYMsgReqCancelMatch, team_id) == 0x000010, "Member 'FYYMsgReqCancelMatch::team_id' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgReqAckLoadPVPServer
// 0x00B8 (0x00B8 - 0x0000)
struct FYYMsgReqAckLoadPVPServer final
{
public:
	class FString                                 Arg;                                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgReqAckRoomInfo                   RoomInfo;                                          // 0x0010(0x0080)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 ServerIP;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ServerPort;                                        // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Result;                                            // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ResultMsg;                                         // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgReqAckLoadPVPServer) == 0x000008, "Wrong alignment on FYYMsgReqAckLoadPVPServer");
static_assert(sizeof(FYYMsgReqAckLoadPVPServer) == 0x0000B8, "Wrong size on FYYMsgReqAckLoadPVPServer");
static_assert(offsetof(FYYMsgReqAckLoadPVPServer, Arg) == 0x000000, "Member 'FYYMsgReqAckLoadPVPServer::Arg' has a wrong offset!");
static_assert(offsetof(FYYMsgReqAckLoadPVPServer, RoomInfo) == 0x000010, "Member 'FYYMsgReqAckLoadPVPServer::RoomInfo' has a wrong offset!");
static_assert(offsetof(FYYMsgReqAckLoadPVPServer, ServerIP) == 0x000090, "Member 'FYYMsgReqAckLoadPVPServer::ServerIP' has a wrong offset!");
static_assert(offsetof(FYYMsgReqAckLoadPVPServer, ServerPort) == 0x0000A0, "Member 'FYYMsgReqAckLoadPVPServer::ServerPort' has a wrong offset!");
static_assert(offsetof(FYYMsgReqAckLoadPVPServer, Result) == 0x0000A4, "Member 'FYYMsgReqAckLoadPVPServer::Result' has a wrong offset!");
static_assert(offsetof(FYYMsgReqAckLoadPVPServer, ResultMsg) == 0x0000A8, "Member 'FYYMsgReqAckLoadPVPServer::ResultMsg' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgReqAckLoaderServerRegister
// 0x000C (0x000C - 0x0000)
struct FYYMsgReqAckLoaderServerRegister final
{
public:
	int32                                         appID;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ServerMaxGame;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentGameCount;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgReqAckLoaderServerRegister) == 0x000004, "Wrong alignment on FYYMsgReqAckLoaderServerRegister");
static_assert(sizeof(FYYMsgReqAckLoaderServerRegister) == 0x00000C, "Wrong size on FYYMsgReqAckLoaderServerRegister");
static_assert(offsetof(FYYMsgReqAckLoaderServerRegister, appID) == 0x000000, "Member 'FYYMsgReqAckLoaderServerRegister::appID' has a wrong offset!");
static_assert(offsetof(FYYMsgReqAckLoaderServerRegister, ServerMaxGame) == 0x000004, "Member 'FYYMsgReqAckLoaderServerRegister::ServerMaxGame' has a wrong offset!");
static_assert(offsetof(FYYMsgReqAckLoaderServerRegister, CurrentGameCount) == 0x000008, "Member 'FYYMsgReqAckLoaderServerRegister::CurrentGameCount' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgReqAckHeadUrl
// 0x0020 (0x0020 - 0x0000)
struct FYYMsgReqAckHeadUrl final
{
public:
	struct FYYMsgIdent                            PlayerID;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 HeadUrl;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgReqAckHeadUrl) == 0x000008, "Wrong alignment on FYYMsgReqAckHeadUrl");
static_assert(sizeof(FYYMsgReqAckHeadUrl) == 0x000020, "Wrong size on FYYMsgReqAckHeadUrl");
static_assert(offsetof(FYYMsgReqAckHeadUrl, PlayerID) == 0x000000, "Member 'FYYMsgReqAckHeadUrl::PlayerID' has a wrong offset!");
static_assert(offsetof(FYYMsgReqAckHeadUrl, HeadUrl) == 0x000010, "Member 'FYYMsgReqAckHeadUrl::HeadUrl' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgReqAckQuickEnter
// 0x0090 (0x0090 - 0x0000)
struct FYYMsgReqAckQuickEnter final
{
public:
	struct FYYMsgIdent                            PlayerID;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FYYMsgReqAckRoomInfo                   RoomInfo;                                          // 0x0010(0x0080)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgReqAckQuickEnter) == 0x000008, "Wrong alignment on FYYMsgReqAckQuickEnter");
static_assert(sizeof(FYYMsgReqAckQuickEnter) == 0x000090, "Wrong size on FYYMsgReqAckQuickEnter");
static_assert(offsetof(FYYMsgReqAckQuickEnter, PlayerID) == 0x000000, "Member 'FYYMsgReqAckQuickEnter::PlayerID' has a wrong offset!");
static_assert(offsetof(FYYMsgReqAckQuickEnter, RoomInfo) == 0x000010, "Member 'FYYMsgReqAckQuickEnter::RoomInfo' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgReqAckCreateRoom
// 0x00B0 (0x00B0 - 0x0000)
struct FYYMsgReqAckCreateRoom final
{
public:
	class FString                                 RoomName;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgIdent                            RoomID;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgReqAckRoomInfo                   RoomInfo;                                          // 0x0030(0x0080)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgReqAckCreateRoom) == 0x000008, "Wrong alignment on FYYMsgReqAckCreateRoom");
static_assert(sizeof(FYYMsgReqAckCreateRoom) == 0x0000B0, "Wrong size on FYYMsgReqAckCreateRoom");
static_assert(offsetof(FYYMsgReqAckCreateRoom, RoomName) == 0x000000, "Member 'FYYMsgReqAckCreateRoom::RoomName' has a wrong offset!");
static_assert(offsetof(FYYMsgReqAckCreateRoom, RoomID) == 0x000010, "Member 'FYYMsgReqAckCreateRoom::RoomID' has a wrong offset!");
static_assert(offsetof(FYYMsgReqAckCreateRoom, Password) == 0x000020, "Member 'FYYMsgReqAckCreateRoom::Password' has a wrong offset!");
static_assert(offsetof(FYYMsgReqAckCreateRoom, RoomInfo) == 0x000030, "Member 'FYYMsgReqAckCreateRoom::RoomInfo' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgReqAckRoomList
// 0x0020 (0x0020 - 0x0000)
struct FYYMsgReqAckRoomList final
{
public:
	int32                                         page;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         page_size;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         total_count;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FYYMsgReqAckRoomInfo>           RoomList;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgReqAckRoomList) == 0x000008, "Wrong alignment on FYYMsgReqAckRoomList");
static_assert(sizeof(FYYMsgReqAckRoomList) == 0x000020, "Wrong size on FYYMsgReqAckRoomList");
static_assert(offsetof(FYYMsgReqAckRoomList, page) == 0x000000, "Member 'FYYMsgReqAckRoomList::page' has a wrong offset!");
static_assert(offsetof(FYYMsgReqAckRoomList, page_size) == 0x000004, "Member 'FYYMsgReqAckRoomList::page_size' has a wrong offset!");
static_assert(offsetof(FYYMsgReqAckRoomList, total_count) == 0x000008, "Member 'FYYMsgReqAckRoomList::total_count' has a wrong offset!");
static_assert(offsetof(FYYMsgReqAckRoomList, RoomList) == 0x000010, "Member 'FYYMsgReqAckRoomList::RoomList' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgReqAckEnterRoom
// 0x0040 (0x0040 - 0x0000)
struct FYYMsgReqAckEnterRoom final
{
public:
	class FString                                 RoomName;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgIdent                            RoomID;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Position;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Team;                                              // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Result;                                            // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FYYMsgReqAckEnterRoom) == 0x000008, "Wrong alignment on FYYMsgReqAckEnterRoom");
static_assert(sizeof(FYYMsgReqAckEnterRoom) == 0x000040, "Wrong size on FYYMsgReqAckEnterRoom");
static_assert(offsetof(FYYMsgReqAckEnterRoom, RoomName) == 0x000000, "Member 'FYYMsgReqAckEnterRoom::RoomName' has a wrong offset!");
static_assert(offsetof(FYYMsgReqAckEnterRoom, RoomID) == 0x000010, "Member 'FYYMsgReqAckEnterRoom::RoomID' has a wrong offset!");
static_assert(offsetof(FYYMsgReqAckEnterRoom, Position) == 0x000020, "Member 'FYYMsgReqAckEnterRoom::Position' has a wrong offset!");
static_assert(offsetof(FYYMsgReqAckEnterRoom, Team) == 0x000024, "Member 'FYYMsgReqAckEnterRoom::Team' has a wrong offset!");
static_assert(offsetof(FYYMsgReqAckEnterRoom, Password) == 0x000028, "Member 'FYYMsgReqAckEnterRoom::Password' has a wrong offset!");
static_assert(offsetof(FYYMsgReqAckEnterRoom, Result) == 0x000038, "Member 'FYYMsgReqAckEnterRoom::Result' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgAckStartMatch
// 0x0018 (0x0018 - 0x0000)
struct FYYMsgAckStartMatch final
{
public:
	struct FYYMsgIdent                            team_id;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FYYMsgAckStartMatch) == 0x000008, "Wrong alignment on FYYMsgAckStartMatch");
static_assert(sizeof(FYYMsgAckStartMatch) == 0x000018, "Wrong size on FYYMsgAckStartMatch");
static_assert(offsetof(FYYMsgAckStartMatch, team_id) == 0x000000, "Member 'FYYMsgAckStartMatch::team_id' has a wrong offset!");
static_assert(offsetof(FYYMsgAckStartMatch, Result) == 0x000010, "Member 'FYYMsgAckStartMatch::Result' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgReqStartMatch
// 0x0028 (0x0028 - 0x0000)
struct FYYMsgReqStartMatch final
{
public:
	struct FYYMsgIdent                            self_id;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         game_id;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Mode;                                              // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgIdent                            team_id;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgReqStartMatch) == 0x000008, "Wrong alignment on FYYMsgReqStartMatch");
static_assert(sizeof(FYYMsgReqStartMatch) == 0x000028, "Wrong size on FYYMsgReqStartMatch");
static_assert(offsetof(FYYMsgReqStartMatch, self_id) == 0x000000, "Member 'FYYMsgReqStartMatch::self_id' has a wrong offset!");
static_assert(offsetof(FYYMsgReqStartMatch, game_id) == 0x000010, "Member 'FYYMsgReqStartMatch::game_id' has a wrong offset!");
static_assert(offsetof(FYYMsgReqStartMatch, Mode) == 0x000014, "Member 'FYYMsgReqStartMatch::Mode' has a wrong offset!");
static_assert(offsetof(FYYMsgReqStartMatch, team_id) == 0x000018, "Member 'FYYMsgReqStartMatch::team_id' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgPropertyInt
// 0x0018 (0x0018 - 0x0000)
struct FYYMsgPropertyInt final
{
public:
	class FString                                 property_name;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgInt64                            Data;                                              // 0x0010(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgPropertyInt) == 0x000008, "Wrong alignment on FYYMsgPropertyInt");
static_assert(sizeof(FYYMsgPropertyInt) == 0x000018, "Wrong size on FYYMsgPropertyInt");
static_assert(offsetof(FYYMsgPropertyInt, property_name) == 0x000000, "Member 'FYYMsgPropertyInt::property_name' has a wrong offset!");
static_assert(offsetof(FYYMsgPropertyInt, Data) == 0x000010, "Member 'FYYMsgPropertyInt::Data' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgReqAckLogin
// 0x0058 (0x0058 - 0x0000)
struct FYYMsgReqAckLogin final
{
public:
	struct FYYMsgIdent                            NetID;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FYYMsgIdent                            UserID;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ChannelUserID;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChannelID;                                         // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 nickName;                                          // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HeadUrl;                                           // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgReqAckLogin) == 0x000008, "Wrong alignment on FYYMsgReqAckLogin");
static_assert(sizeof(FYYMsgReqAckLogin) == 0x000058, "Wrong size on FYYMsgReqAckLogin");
static_assert(offsetof(FYYMsgReqAckLogin, NetID) == 0x000000, "Member 'FYYMsgReqAckLogin::NetID' has a wrong offset!");
static_assert(offsetof(FYYMsgReqAckLogin, UserID) == 0x000010, "Member 'FYYMsgReqAckLogin::UserID' has a wrong offset!");
static_assert(offsetof(FYYMsgReqAckLogin, ChannelUserID) == 0x000020, "Member 'FYYMsgReqAckLogin::ChannelUserID' has a wrong offset!");
static_assert(offsetof(FYYMsgReqAckLogin, ChannelID) == 0x000030, "Member 'FYYMsgReqAckLogin::ChannelID' has a wrong offset!");
static_assert(offsetof(FYYMsgReqAckLogin, nickName) == 0x000038, "Member 'FYYMsgReqAckLogin::nickName' has a wrong offset!");
static_assert(offsetof(FYYMsgReqAckLogin, HeadUrl) == 0x000048, "Member 'FYYMsgReqAckLogin::HeadUrl' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgReqAckPingPong
// 0x0010 (0x0010 - 0x0000)
struct FYYMsgReqAckPingPong final
{
public:
	struct FYYMsgIdent                            NetID;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgReqAckPingPong) == 0x000008, "Wrong alignment on FYYMsgReqAckPingPong");
static_assert(sizeof(FYYMsgReqAckPingPong) == 0x000010, "Wrong size on FYYMsgReqAckPingPong");
static_assert(offsetof(FYYMsgReqAckPingPong, NetID) == 0x000000, "Member 'FYYMsgReqAckPingPong::NetID' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgMsgBase
// 0x0048 (0x0048 - 0x0000)
struct FYYMsgMsgBase final
{
public:
	struct FYYMsgIdent                            player_id;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 msg_data;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FYYMsgIdent>                    player_Client_list;                                // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FYYMsgIdent                            hash_ident;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         elapse;                                            // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FYYMsgMsgBase) == 0x000008, "Wrong alignment on FYYMsgMsgBase");
static_assert(sizeof(FYYMsgMsgBase) == 0x000048, "Wrong size on FYYMsgMsgBase");
static_assert(offsetof(FYYMsgMsgBase, player_id) == 0x000000, "Member 'FYYMsgMsgBase::player_id' has a wrong offset!");
static_assert(offsetof(FYYMsgMsgBase, msg_data) == 0x000010, "Member 'FYYMsgMsgBase::msg_data' has a wrong offset!");
static_assert(offsetof(FYYMsgMsgBase, player_Client_list) == 0x000020, "Member 'FYYMsgMsgBase::player_Client_list' has a wrong offset!");
static_assert(offsetof(FYYMsgMsgBase, hash_ident) == 0x000030, "Member 'FYYMsgMsgBase::hash_ident' has a wrong offset!");
static_assert(offsetof(FYYMsgMsgBase, elapse) == 0x000040, "Member 'FYYMsgMsgBase::elapse' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgPlayerRecordList
// 0x0010 (0x0010 - 0x0000)
struct FYYMsgPlayerRecordList final
{
public:
	TArray<struct FYYMsgPlayerRecordBase>         record_list;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgPlayerRecordList) == 0x000008, "Wrong alignment on FYYMsgPlayerRecordList");
static_assert(sizeof(FYYMsgPlayerRecordList) == 0x000010, "Wrong size on FYYMsgPlayerRecordList");
static_assert(offsetof(FYYMsgPlayerRecordList, record_list) == 0x000000, "Member 'FYYMsgPlayerRecordList::record_list' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgPropertyObject
// 0x0020 (0x0020 - 0x0000)
struct FYYMsgPropertyObject final
{
public:
	class FString                                 property_name;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgIdent                            Data;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgPropertyObject) == 0x000008, "Wrong alignment on FYYMsgPropertyObject");
static_assert(sizeof(FYYMsgPropertyObject) == 0x000020, "Wrong size on FYYMsgPropertyObject");
static_assert(offsetof(FYYMsgPropertyObject, property_name) == 0x000000, "Member 'FYYMsgPropertyObject::property_name' has a wrong offset!");
static_assert(offsetof(FYYMsgPropertyObject, Data) == 0x000010, "Member 'FYYMsgPropertyObject::Data' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgPropertyString
// 0x0020 (0x0020 - 0x0000)
struct FYYMsgPropertyString final
{
public:
	class FString                                 property_name;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Data;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgPropertyString) == 0x000008, "Wrong alignment on FYYMsgPropertyString");
static_assert(sizeof(FYYMsgPropertyString) == 0x000020, "Wrong size on FYYMsgPropertyString");
static_assert(offsetof(FYYMsgPropertyString, property_name) == 0x000000, "Member 'FYYMsgPropertyString::property_name' has a wrong offset!");
static_assert(offsetof(FYYMsgPropertyString, Data) == 0x000010, "Member 'FYYMsgPropertyString::Data' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgPropertyFloat
// 0x0018 (0x0018 - 0x0000)
struct FYYMsgPropertyFloat final
{
public:
	class FString                                 property_name;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Data;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FYYMsgPropertyFloat) == 0x000008, "Wrong alignment on FYYMsgPropertyFloat");
static_assert(sizeof(FYYMsgPropertyFloat) == 0x000018, "Wrong size on FYYMsgPropertyFloat");
static_assert(offsetof(FYYMsgPropertyFloat, property_name) == 0x000000, "Member 'FYYMsgPropertyFloat::property_name' has a wrong offset!");
static_assert(offsetof(FYYMsgPropertyFloat, Data) == 0x000010, "Member 'FYYMsgPropertyFloat::Data' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgPropertyVector3
// 0x0020 (0x0020 - 0x0000)
struct FYYMsgPropertyVector3 final
{
public:
	class FString                                 property_name;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgVector3                          Data;                                              // 0x0010(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FYYMsgPropertyVector3) == 0x000008, "Wrong alignment on FYYMsgPropertyVector3");
static_assert(sizeof(FYYMsgPropertyVector3) == 0x000020, "Wrong size on FYYMsgPropertyVector3");
static_assert(offsetof(FYYMsgPropertyVector3, property_name) == 0x000000, "Member 'FYYMsgPropertyVector3::property_name' has a wrong offset!");
static_assert(offsetof(FYYMsgPropertyVector3, Data) == 0x000010, "Member 'FYYMsgPropertyVector3::Data' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgPropertyVector4
// 0x0020 (0x0020 - 0x0000)
struct FYYMsgPropertyVector4 final
{
public:
	class FString                                 property_name;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYYMsgVector4                          Data;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgPropertyVector4) == 0x000008, "Wrong alignment on FYYMsgPropertyVector4");
static_assert(sizeof(FYYMsgPropertyVector4) == 0x000020, "Wrong size on FYYMsgPropertyVector4");
static_assert(offsetof(FYYMsgPropertyVector4, property_name) == 0x000000, "Member 'FYYMsgPropertyVector4::property_name' has a wrong offset!");
static_assert(offsetof(FYYMsgPropertyVector4, Data) == 0x000010, "Member 'FYYMsgPropertyVector4::Data' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgPlayerPropertyBase
// 0x0080 (0x0080 - 0x0000)
struct FYYMsgPlayerPropertyBase final
{
public:
	TArray<struct FYYMsgPropertyInt>              property_int_list;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FYYMsgPropertyFloat>            property_float_list;                               // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FYYMsgPropertyString>           property_string_list;                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FYYMsgPropertyByte>             property_byte_list;                                // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FYYMsgPropertyObject>           property_object_list;                              // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FYYMsgPropertyVector2>          property_vector2_list;                             // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FYYMsgPropertyVector3>          property_vector3_list;                             // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FYYMsgPropertyVector4>          property_vector4_list;                             // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgPlayerPropertyBase) == 0x000008, "Wrong alignment on FYYMsgPlayerPropertyBase");
static_assert(sizeof(FYYMsgPlayerPropertyBase) == 0x000080, "Wrong size on FYYMsgPlayerPropertyBase");
static_assert(offsetof(FYYMsgPlayerPropertyBase, property_int_list) == 0x000000, "Member 'FYYMsgPlayerPropertyBase::property_int_list' has a wrong offset!");
static_assert(offsetof(FYYMsgPlayerPropertyBase, property_float_list) == 0x000010, "Member 'FYYMsgPlayerPropertyBase::property_float_list' has a wrong offset!");
static_assert(offsetof(FYYMsgPlayerPropertyBase, property_string_list) == 0x000020, "Member 'FYYMsgPlayerPropertyBase::property_string_list' has a wrong offset!");
static_assert(offsetof(FYYMsgPlayerPropertyBase, property_byte_list) == 0x000030, "Member 'FYYMsgPlayerPropertyBase::property_byte_list' has a wrong offset!");
static_assert(offsetof(FYYMsgPlayerPropertyBase, property_object_list) == 0x000040, "Member 'FYYMsgPlayerPropertyBase::property_object_list' has a wrong offset!");
static_assert(offsetof(FYYMsgPlayerPropertyBase, property_vector2_list) == 0x000050, "Member 'FYYMsgPlayerPropertyBase::property_vector2_list' has a wrong offset!");
static_assert(offsetof(FYYMsgPlayerPropertyBase, property_vector3_list) == 0x000060, "Member 'FYYMsgPlayerPropertyBase::property_vector3_list' has a wrong offset!");
static_assert(offsetof(FYYMsgPlayerPropertyBase, property_vector4_list) == 0x000070, "Member 'FYYMsgPlayerPropertyBase::property_vector4_list' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgObjectRecordRemove
// 0x0030 (0x0030 - 0x0000)
struct FYYMsgObjectRecordRemove final
{
public:
	struct FYYMsgIdent                            player_id;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 record_name;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 remove_row;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgObjectRecordRemove) == 0x000008, "Wrong alignment on FYYMsgObjectRecordRemove");
static_assert(sizeof(FYYMsgObjectRecordRemove) == 0x000030, "Wrong size on FYYMsgObjectRecordRemove");
static_assert(offsetof(FYYMsgObjectRecordRemove, player_id) == 0x000000, "Member 'FYYMsgObjectRecordRemove::player_id' has a wrong offset!");
static_assert(offsetof(FYYMsgObjectRecordRemove, record_name) == 0x000010, "Member 'FYYMsgObjectRecordRemove::record_name' has a wrong offset!");
static_assert(offsetof(FYYMsgObjectRecordRemove, remove_row) == 0x000020, "Member 'FYYMsgObjectRecordRemove::remove_row' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgRecordAddRowStruct
// 0x0088 (0x0088 - 0x0000)
struct FYYMsgRecordAddRowStruct final
{
public:
	int32                                         row;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FYYMsgRecordInt>                record_int_list;                                   // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FYYMsgRecordFloat>              record_float_list;                                 // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FYYMsgRecordString>             record_string_list;                                // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FYYMsgRecordByte>               record_byte_list;                                  // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FYYMsgRecordObject>             record_object_list;                                // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FYYMsgRecordVector2>            record_vector2_list;                               // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FYYMsgRecordVector3>            record_vector3_list;                               // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FYYMsgRecordVector4>            record_vector4_list;                               // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgRecordAddRowStruct) == 0x000008, "Wrong alignment on FYYMsgRecordAddRowStruct");
static_assert(sizeof(FYYMsgRecordAddRowStruct) == 0x000088, "Wrong size on FYYMsgRecordAddRowStruct");
static_assert(offsetof(FYYMsgRecordAddRowStruct, row) == 0x000000, "Member 'FYYMsgRecordAddRowStruct::row' has a wrong offset!");
static_assert(offsetof(FYYMsgRecordAddRowStruct, record_int_list) == 0x000008, "Member 'FYYMsgRecordAddRowStruct::record_int_list' has a wrong offset!");
static_assert(offsetof(FYYMsgRecordAddRowStruct, record_float_list) == 0x000018, "Member 'FYYMsgRecordAddRowStruct::record_float_list' has a wrong offset!");
static_assert(offsetof(FYYMsgRecordAddRowStruct, record_string_list) == 0x000028, "Member 'FYYMsgRecordAddRowStruct::record_string_list' has a wrong offset!");
static_assert(offsetof(FYYMsgRecordAddRowStruct, record_byte_list) == 0x000038, "Member 'FYYMsgRecordAddRowStruct::record_byte_list' has a wrong offset!");
static_assert(offsetof(FYYMsgRecordAddRowStruct, record_object_list) == 0x000048, "Member 'FYYMsgRecordAddRowStruct::record_object_list' has a wrong offset!");
static_assert(offsetof(FYYMsgRecordAddRowStruct, record_vector2_list) == 0x000058, "Member 'FYYMsgRecordAddRowStruct::record_vector2_list' has a wrong offset!");
static_assert(offsetof(FYYMsgRecordAddRowStruct, record_vector3_list) == 0x000068, "Member 'FYYMsgRecordAddRowStruct::record_vector3_list' has a wrong offset!");
static_assert(offsetof(FYYMsgRecordAddRowStruct, record_vector4_list) == 0x000078, "Member 'FYYMsgRecordAddRowStruct::record_vector4_list' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgObjectRecordAddRow
// 0x0030 (0x0030 - 0x0000)
struct FYYMsgObjectRecordAddRow final
{
public:
	struct FYYMsgIdent                            player_id;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 record_name;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FYYMsgRecordAddRowStruct>       row_data;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgObjectRecordAddRow) == 0x000008, "Wrong alignment on FYYMsgObjectRecordAddRow");
static_assert(sizeof(FYYMsgObjectRecordAddRow) == 0x000030, "Wrong size on FYYMsgObjectRecordAddRow");
static_assert(offsetof(FYYMsgObjectRecordAddRow, player_id) == 0x000000, "Member 'FYYMsgObjectRecordAddRow::player_id' has a wrong offset!");
static_assert(offsetof(FYYMsgObjectRecordAddRow, record_name) == 0x000010, "Member 'FYYMsgObjectRecordAddRow::record_name' has a wrong offset!");
static_assert(offsetof(FYYMsgObjectRecordAddRow, row_data) == 0x000020, "Member 'FYYMsgObjectRecordAddRow::row_data' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgObjectRecordSwap
// 0x0038 (0x0038 - 0x0000)
struct FYYMsgObjectRecordSwap final
{
public:
	struct FYYMsgIdent                            player_id;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 origin_record_name;                                // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 target_record_name;                                // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         row_origin;                                        // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         row_target;                                        // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgObjectRecordSwap) == 0x000008, "Wrong alignment on FYYMsgObjectRecordSwap");
static_assert(sizeof(FYYMsgObjectRecordSwap) == 0x000038, "Wrong size on FYYMsgObjectRecordSwap");
static_assert(offsetof(FYYMsgObjectRecordSwap, player_id) == 0x000000, "Member 'FYYMsgObjectRecordSwap::player_id' has a wrong offset!");
static_assert(offsetof(FYYMsgObjectRecordSwap, origin_record_name) == 0x000010, "Member 'FYYMsgObjectRecordSwap::origin_record_name' has a wrong offset!");
static_assert(offsetof(FYYMsgObjectRecordSwap, target_record_name) == 0x000020, "Member 'FYYMsgObjectRecordSwap::target_record_name' has a wrong offset!");
static_assert(offsetof(FYYMsgObjectRecordSwap, row_origin) == 0x000030, "Member 'FYYMsgObjectRecordSwap::row_origin' has a wrong offset!");
static_assert(offsetof(FYYMsgObjectRecordSwap, row_target) == 0x000034, "Member 'FYYMsgObjectRecordSwap::row_target' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgObjectRecordVector4
// 0x0030 (0x0030 - 0x0000)
struct FYYMsgObjectRecordVector4 final
{
public:
	struct FYYMsgIdent                            player_id;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 record_name;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FYYMsgRecordVector4>            property_list;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgObjectRecordVector4) == 0x000008, "Wrong alignment on FYYMsgObjectRecordVector4");
static_assert(sizeof(FYYMsgObjectRecordVector4) == 0x000030, "Wrong size on FYYMsgObjectRecordVector4");
static_assert(offsetof(FYYMsgObjectRecordVector4, player_id) == 0x000000, "Member 'FYYMsgObjectRecordVector4::player_id' has a wrong offset!");
static_assert(offsetof(FYYMsgObjectRecordVector4, record_name) == 0x000010, "Member 'FYYMsgObjectRecordVector4::record_name' has a wrong offset!");
static_assert(offsetof(FYYMsgObjectRecordVector4, property_list) == 0x000020, "Member 'FYYMsgObjectRecordVector4::property_list' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgObjectRecordVector3
// 0x0030 (0x0030 - 0x0000)
struct FYYMsgObjectRecordVector3 final
{
public:
	struct FYYMsgIdent                            player_id;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 record_name;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FYYMsgRecordVector3>            property_list;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgObjectRecordVector3) == 0x000008, "Wrong alignment on FYYMsgObjectRecordVector3");
static_assert(sizeof(FYYMsgObjectRecordVector3) == 0x000030, "Wrong size on FYYMsgObjectRecordVector3");
static_assert(offsetof(FYYMsgObjectRecordVector3, player_id) == 0x000000, "Member 'FYYMsgObjectRecordVector3::player_id' has a wrong offset!");
static_assert(offsetof(FYYMsgObjectRecordVector3, record_name) == 0x000010, "Member 'FYYMsgObjectRecordVector3::record_name' has a wrong offset!");
static_assert(offsetof(FYYMsgObjectRecordVector3, property_list) == 0x000020, "Member 'FYYMsgObjectRecordVector3::property_list' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgObjectRecordObject
// 0x0030 (0x0030 - 0x0000)
struct FYYMsgObjectRecordObject final
{
public:
	struct FYYMsgIdent                            player_id;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 record_name;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FYYMsgRecordObject>             property_list;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgObjectRecordObject) == 0x000008, "Wrong alignment on FYYMsgObjectRecordObject");
static_assert(sizeof(FYYMsgObjectRecordObject) == 0x000030, "Wrong size on FYYMsgObjectRecordObject");
static_assert(offsetof(FYYMsgObjectRecordObject, player_id) == 0x000000, "Member 'FYYMsgObjectRecordObject::player_id' has a wrong offset!");
static_assert(offsetof(FYYMsgObjectRecordObject, record_name) == 0x000010, "Member 'FYYMsgObjectRecordObject::record_name' has a wrong offset!");
static_assert(offsetof(FYYMsgObjectRecordObject, property_list) == 0x000020, "Member 'FYYMsgObjectRecordObject::property_list' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgObjectRecordByte
// 0x0030 (0x0030 - 0x0000)
struct FYYMsgObjectRecordByte final
{
public:
	struct FYYMsgIdent                            player_id;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 record_name;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FYYMsgRecordByte>               property_list;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgObjectRecordByte) == 0x000008, "Wrong alignment on FYYMsgObjectRecordByte");
static_assert(sizeof(FYYMsgObjectRecordByte) == 0x000030, "Wrong size on FYYMsgObjectRecordByte");
static_assert(offsetof(FYYMsgObjectRecordByte, player_id) == 0x000000, "Member 'FYYMsgObjectRecordByte::player_id' has a wrong offset!");
static_assert(offsetof(FYYMsgObjectRecordByte, record_name) == 0x000010, "Member 'FYYMsgObjectRecordByte::record_name' has a wrong offset!");
static_assert(offsetof(FYYMsgObjectRecordByte, property_list) == 0x000020, "Member 'FYYMsgObjectRecordByte::property_list' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgObjectRecordString
// 0x0030 (0x0030 - 0x0000)
struct FYYMsgObjectRecordString final
{
public:
	struct FYYMsgIdent                            player_id;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 record_name;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FYYMsgRecordString>             property_list;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgObjectRecordString) == 0x000008, "Wrong alignment on FYYMsgObjectRecordString");
static_assert(sizeof(FYYMsgObjectRecordString) == 0x000030, "Wrong size on FYYMsgObjectRecordString");
static_assert(offsetof(FYYMsgObjectRecordString, player_id) == 0x000000, "Member 'FYYMsgObjectRecordString::player_id' has a wrong offset!");
static_assert(offsetof(FYYMsgObjectRecordString, record_name) == 0x000010, "Member 'FYYMsgObjectRecordString::record_name' has a wrong offset!");
static_assert(offsetof(FYYMsgObjectRecordString, property_list) == 0x000020, "Member 'FYYMsgObjectRecordString::property_list' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgObjectRecordFloat
// 0x0030 (0x0030 - 0x0000)
struct FYYMsgObjectRecordFloat final
{
public:
	struct FYYMsgIdent                            player_id;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 record_name;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FYYMsgRecordFloat>              property_list;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgObjectRecordFloat) == 0x000008, "Wrong alignment on FYYMsgObjectRecordFloat");
static_assert(sizeof(FYYMsgObjectRecordFloat) == 0x000030, "Wrong size on FYYMsgObjectRecordFloat");
static_assert(offsetof(FYYMsgObjectRecordFloat, player_id) == 0x000000, "Member 'FYYMsgObjectRecordFloat::player_id' has a wrong offset!");
static_assert(offsetof(FYYMsgObjectRecordFloat, record_name) == 0x000010, "Member 'FYYMsgObjectRecordFloat::record_name' has a wrong offset!");
static_assert(offsetof(FYYMsgObjectRecordFloat, property_list) == 0x000020, "Member 'FYYMsgObjectRecordFloat::property_list' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgObjectRecordInt
// 0x0030 (0x0030 - 0x0000)
struct FYYMsgObjectRecordInt final
{
public:
	struct FYYMsgIdent                            player_id;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 record_name;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FYYMsgRecordInt>                property_list;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgObjectRecordInt) == 0x000008, "Wrong alignment on FYYMsgObjectRecordInt");
static_assert(sizeof(FYYMsgObjectRecordInt) == 0x000030, "Wrong size on FYYMsgObjectRecordInt");
static_assert(offsetof(FYYMsgObjectRecordInt, player_id) == 0x000000, "Member 'FYYMsgObjectRecordInt::player_id' has a wrong offset!");
static_assert(offsetof(FYYMsgObjectRecordInt, record_name) == 0x000010, "Member 'FYYMsgObjectRecordInt::record_name' has a wrong offset!");
static_assert(offsetof(FYYMsgObjectRecordInt, property_list) == 0x000020, "Member 'FYYMsgObjectRecordInt::property_list' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgObjectPropertyVector4
// 0x0020 (0x0020 - 0x0000)
struct FYYMsgObjectPropertyVector4 final
{
public:
	struct FYYMsgIdent                            player_id;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FYYMsgPropertyVector4>          property_list;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgObjectPropertyVector4) == 0x000008, "Wrong alignment on FYYMsgObjectPropertyVector4");
static_assert(sizeof(FYYMsgObjectPropertyVector4) == 0x000020, "Wrong size on FYYMsgObjectPropertyVector4");
static_assert(offsetof(FYYMsgObjectPropertyVector4, player_id) == 0x000000, "Member 'FYYMsgObjectPropertyVector4::player_id' has a wrong offset!");
static_assert(offsetof(FYYMsgObjectPropertyVector4, property_list) == 0x000010, "Member 'FYYMsgObjectPropertyVector4::property_list' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgObjectPropertyVector3
// 0x0020 (0x0020 - 0x0000)
struct FYYMsgObjectPropertyVector3 final
{
public:
	struct FYYMsgIdent                            player_id;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FYYMsgPropertyVector3>          property_list;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgObjectPropertyVector3) == 0x000008, "Wrong alignment on FYYMsgObjectPropertyVector3");
static_assert(sizeof(FYYMsgObjectPropertyVector3) == 0x000020, "Wrong size on FYYMsgObjectPropertyVector3");
static_assert(offsetof(FYYMsgObjectPropertyVector3, player_id) == 0x000000, "Member 'FYYMsgObjectPropertyVector3::player_id' has a wrong offset!");
static_assert(offsetof(FYYMsgObjectPropertyVector3, property_list) == 0x000010, "Member 'FYYMsgObjectPropertyVector3::property_list' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgObjectPropertyVector2
// 0x0020 (0x0020 - 0x0000)
struct FYYMsgObjectPropertyVector2 final
{
public:
	struct FYYMsgIdent                            player_id;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FYYMsgPropertyVector2>          property_list;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgObjectPropertyVector2) == 0x000008, "Wrong alignment on FYYMsgObjectPropertyVector2");
static_assert(sizeof(FYYMsgObjectPropertyVector2) == 0x000020, "Wrong size on FYYMsgObjectPropertyVector2");
static_assert(offsetof(FYYMsgObjectPropertyVector2, player_id) == 0x000000, "Member 'FYYMsgObjectPropertyVector2::player_id' has a wrong offset!");
static_assert(offsetof(FYYMsgObjectPropertyVector2, property_list) == 0x000010, "Member 'FYYMsgObjectPropertyVector2::property_list' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgObjectPropertyObject
// 0x0020 (0x0020 - 0x0000)
struct FYYMsgObjectPropertyObject final
{
public:
	struct FYYMsgIdent                            player_id;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FYYMsgPropertyObject>           property_list;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgObjectPropertyObject) == 0x000008, "Wrong alignment on FYYMsgObjectPropertyObject");
static_assert(sizeof(FYYMsgObjectPropertyObject) == 0x000020, "Wrong size on FYYMsgObjectPropertyObject");
static_assert(offsetof(FYYMsgObjectPropertyObject, player_id) == 0x000000, "Member 'FYYMsgObjectPropertyObject::player_id' has a wrong offset!");
static_assert(offsetof(FYYMsgObjectPropertyObject, property_list) == 0x000010, "Member 'FYYMsgObjectPropertyObject::property_list' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgObjectPropertyByte
// 0x0020 (0x0020 - 0x0000)
struct FYYMsgObjectPropertyByte final
{
public:
	struct FYYMsgIdent                            player_id;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FYYMsgPropertyByte>             property_list;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgObjectPropertyByte) == 0x000008, "Wrong alignment on FYYMsgObjectPropertyByte");
static_assert(sizeof(FYYMsgObjectPropertyByte) == 0x000020, "Wrong size on FYYMsgObjectPropertyByte");
static_assert(offsetof(FYYMsgObjectPropertyByte, player_id) == 0x000000, "Member 'FYYMsgObjectPropertyByte::player_id' has a wrong offset!");
static_assert(offsetof(FYYMsgObjectPropertyByte, property_list) == 0x000010, "Member 'FYYMsgObjectPropertyByte::property_list' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgObjectPropertyString
// 0x0020 (0x0020 - 0x0000)
struct FYYMsgObjectPropertyString final
{
public:
	struct FYYMsgIdent                            player_id;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FYYMsgPropertyString>           property_list;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgObjectPropertyString) == 0x000008, "Wrong alignment on FYYMsgObjectPropertyString");
static_assert(sizeof(FYYMsgObjectPropertyString) == 0x000020, "Wrong size on FYYMsgObjectPropertyString");
static_assert(offsetof(FYYMsgObjectPropertyString, player_id) == 0x000000, "Member 'FYYMsgObjectPropertyString::player_id' has a wrong offset!");
static_assert(offsetof(FYYMsgObjectPropertyString, property_list) == 0x000010, "Member 'FYYMsgObjectPropertyString::property_list' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgObjectPropertyFloat
// 0x0020 (0x0020 - 0x0000)
struct FYYMsgObjectPropertyFloat final
{
public:
	struct FYYMsgIdent                            player_id;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FYYMsgPropertyFloat>            property_list;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgObjectPropertyFloat) == 0x000008, "Wrong alignment on FYYMsgObjectPropertyFloat");
static_assert(sizeof(FYYMsgObjectPropertyFloat) == 0x000020, "Wrong size on FYYMsgObjectPropertyFloat");
static_assert(offsetof(FYYMsgObjectPropertyFloat, player_id) == 0x000000, "Member 'FYYMsgObjectPropertyFloat::player_id' has a wrong offset!");
static_assert(offsetof(FYYMsgObjectPropertyFloat, property_list) == 0x000010, "Member 'FYYMsgObjectPropertyFloat::property_list' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgObjectPropertyInt
// 0x0020 (0x0020 - 0x0000)
struct FYYMsgObjectPropertyInt final
{
public:
	struct FYYMsgIdent                            player_id;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FYYMsgPropertyInt>              property_list;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgObjectPropertyInt) == 0x000008, "Wrong alignment on FYYMsgObjectPropertyInt");
static_assert(sizeof(FYYMsgObjectPropertyInt) == 0x000020, "Wrong size on FYYMsgObjectPropertyInt");
static_assert(offsetof(FYYMsgObjectPropertyInt, player_id) == 0x000000, "Member 'FYYMsgObjectPropertyInt::player_id' has a wrong offset!");
static_assert(offsetof(FYYMsgObjectPropertyInt, property_list) == 0x000010, "Member 'FYYMsgObjectPropertyInt::property_list' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgObjectRecordBase
// 0x0020 (0x0020 - 0x0000)
struct FYYMsgObjectRecordBase final
{
public:
	class FString                                 record_name;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FYYMsgRecordAddRowStruct>       row_struct;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgObjectRecordBase) == 0x000008, "Wrong alignment on FYYMsgObjectRecordBase");
static_assert(sizeof(FYYMsgObjectRecordBase) == 0x000020, "Wrong size on FYYMsgObjectRecordBase");
static_assert(offsetof(FYYMsgObjectRecordBase, record_name) == 0x000000, "Member 'FYYMsgObjectRecordBase::record_name' has a wrong offset!");
static_assert(offsetof(FYYMsgObjectRecordBase, row_struct) == 0x000010, "Member 'FYYMsgObjectRecordBase::row_struct' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgObjectRecordList
// 0x0020 (0x0020 - 0x0000)
struct FYYMsgObjectRecordList final
{
public:
	struct FYYMsgIdent                            player_id;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FYYMsgObjectRecordBase>         record_list;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgObjectRecordList) == 0x000008, "Wrong alignment on FYYMsgObjectRecordList");
static_assert(sizeof(FYYMsgObjectRecordList) == 0x000020, "Wrong size on FYYMsgObjectRecordList");
static_assert(offsetof(FYYMsgObjectRecordList, player_id) == 0x000000, "Member 'FYYMsgObjectRecordList::player_id' has a wrong offset!");
static_assert(offsetof(FYYMsgObjectRecordList, record_list) == 0x000010, "Member 'FYYMsgObjectRecordList::record_list' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgMultiObjectRecordList
// 0x0010 (0x0010 - 0x0000)
struct FYYMsgMultiObjectRecordList final
{
public:
	TArray<struct FYYMsgObjectRecordList>         multi_player_record;                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgMultiObjectRecordList) == 0x000008, "Wrong alignment on FYYMsgMultiObjectRecordList");
static_assert(sizeof(FYYMsgMultiObjectRecordList) == 0x000010, "Wrong size on FYYMsgMultiObjectRecordList");
static_assert(offsetof(FYYMsgMultiObjectRecordList, multi_player_record) == 0x000000, "Member 'FYYMsgMultiObjectRecordList::multi_player_record' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgObjectPropertyList
// 0x0090 (0x0090 - 0x0000)
struct FYYMsgObjectPropertyList final
{
public:
	struct FYYMsgIdent                            player_id;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FYYMsgPropertyInt>              property_int_list;                                 // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FYYMsgPropertyFloat>            property_float_list;                               // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FYYMsgPropertyString>           property_string_list;                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FYYMsgPropertyByte>             property_byte_list;                                // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FYYMsgPropertyObject>           property_object_list;                              // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FYYMsgPropertyVector2>          property_vector2_list;                             // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FYYMsgPropertyVector3>          property_vector3_list;                             // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FYYMsgPropertyVector4>          property_vector4_list;                             // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgObjectPropertyList) == 0x000008, "Wrong alignment on FYYMsgObjectPropertyList");
static_assert(sizeof(FYYMsgObjectPropertyList) == 0x000090, "Wrong size on FYYMsgObjectPropertyList");
static_assert(offsetof(FYYMsgObjectPropertyList, player_id) == 0x000000, "Member 'FYYMsgObjectPropertyList::player_id' has a wrong offset!");
static_assert(offsetof(FYYMsgObjectPropertyList, property_int_list) == 0x000010, "Member 'FYYMsgObjectPropertyList::property_int_list' has a wrong offset!");
static_assert(offsetof(FYYMsgObjectPropertyList, property_float_list) == 0x000020, "Member 'FYYMsgObjectPropertyList::property_float_list' has a wrong offset!");
static_assert(offsetof(FYYMsgObjectPropertyList, property_string_list) == 0x000030, "Member 'FYYMsgObjectPropertyList::property_string_list' has a wrong offset!");
static_assert(offsetof(FYYMsgObjectPropertyList, property_byte_list) == 0x000040, "Member 'FYYMsgObjectPropertyList::property_byte_list' has a wrong offset!");
static_assert(offsetof(FYYMsgObjectPropertyList, property_object_list) == 0x000050, "Member 'FYYMsgObjectPropertyList::property_object_list' has a wrong offset!");
static_assert(offsetof(FYYMsgObjectPropertyList, property_vector2_list) == 0x000060, "Member 'FYYMsgObjectPropertyList::property_vector2_list' has a wrong offset!");
static_assert(offsetof(FYYMsgObjectPropertyList, property_vector3_list) == 0x000070, "Member 'FYYMsgObjectPropertyList::property_vector3_list' has a wrong offset!");
static_assert(offsetof(FYYMsgObjectPropertyList, property_vector4_list) == 0x000080, "Member 'FYYMsgObjectPropertyList::property_vector4_list' has a wrong offset!");

// ScriptStruct SiliconRising.YYMsgMultiObjectPropertyList
// 0x0010 (0x0010 - 0x0000)
struct FYYMsgMultiObjectPropertyList final
{
public:
	TArray<struct FYYMsgObjectPropertyList>       multi_player_property;                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FYYMsgMultiObjectPropertyList) == 0x000008, "Wrong alignment on FYYMsgMultiObjectPropertyList");
static_assert(sizeof(FYYMsgMultiObjectPropertyList) == 0x000010, "Wrong size on FYYMsgMultiObjectPropertyList");
static_assert(offsetof(FYYMsgMultiObjectPropertyList, multi_player_property) == 0x000000, "Member 'FYYMsgMultiObjectPropertyList::multi_player_property' has a wrong offset!");

}

