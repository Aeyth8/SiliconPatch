#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPDefaultHand

#include "Basic.hpp"

#include "BPDefaultHand_classes.hpp"
#include "BPDefaultHand_parameters.hpp"


namespace SDK
{

// Function BPDefaultHand.BPDefaultHand_C.ExecuteUbergraph_BPDefaultHand
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPDefaultHand_C::ExecuteUbergraph_BPDefaultHand(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPDefaultHand_C", "ExecuteUbergraph_BPDefaultHand");

	Params::BPDefaultHand_C_ExecuteUbergraph_BPDefaultHand Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPDefaultHand.BPDefaultHand_C.PushHand
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AWpn_Clip_C*                      ParentClip                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPDefaultHand_C::PushHand(class AWpn_Clip_C* ParentClip)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPDefaultHand_C", "PushHand");

	Params::BPDefaultHand_C_PushHand Parms{};

	Parms.ParentClip = ParentClip;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPDefaultHand.BPDefaultHand_C.AttachBothHand
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Attach                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class ABPDefaultHand_C*                 OtherHand_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EItemTypes                              WeaponType_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPDefaultHand_C::AttachBothHand(bool Attach, class ABPDefaultHand_C* OtherHand_0, EItemTypes WeaponType_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPDefaultHand_C", "AttachBothHand");

	Params::BPDefaultHand_C_AttachBothHand Parms{};

	Parms.Attach = Attach;
	Parms.OtherHand_0 = OtherHand_0;
	Parms.WeaponType_0 = WeaponType_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPDefaultHand.BPDefaultHand_C.EnterBothHand
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enter                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABPDefaultHand_C::EnterBothHand(bool Enter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPDefaultHand_C", "EnterBothHand");

	Params::BPDefaultHand_C_EnterBothHand Parms{};

	Parms.Enter = Enter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPDefaultHand.BPDefaultHand_C.SetCarryClip
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsCarry                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// EItemTypes                              ClipType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPDefaultHand_C::SetCarryClip(bool IsCarry, EItemTypes ClipType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPDefaultHand_C", "SetCarryClip");

	Params::BPDefaultHand_C_SetCarryClip Parms{};

	Parms.IsCarry = IsCarry;
	Parms.ClipType = ClipType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPDefaultHand.BPDefaultHand_C.SetPullBolt
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPull                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// EItemTypes                              WeaponType_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPDefaultHand_C::SetPullBolt(bool IsPull, EItemTypes WeaponType_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPDefaultHand_C", "SetPullBolt");

	Params::BPDefaultHand_C_SetPullBolt Parms{};

	Parms.IsPull = IsPull;
	Parms.WeaponType_0 = WeaponType_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPDefaultHand.BPDefaultHand_C.ReverseHand
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsNormal                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABPDefaultHand_C::ReverseHand(bool IsNormal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPDefaultHand_C", "ReverseHand");

	Params::BPDefaultHand_C_ReverseHand Parms{};

	Parms.IsNormal = IsNormal;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPDefaultHand.BPDefaultHand_C.CallControllerInit
// (BlueprintCallable, BlueprintEvent)

void ABPDefaultHand_C::CallControllerInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPDefaultHand_C", "CallControllerInit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPDefaultHand.BPDefaultHand_C.SetControllerType
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// Enum_ControllerType                     SDKType_0                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPDefaultHand_C::SetControllerType(Enum_ControllerType SDKType_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPDefaultHand_C", "SetControllerType");

	Params::BPDefaultHand_C_SetControllerType Parms{};

	Parms.SDKType_0 = SDKType_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPDefaultHand.BPDefaultHand_C.ControllerInitMulticast
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   LocationOffset                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FRotator&                  RotatorOffset                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// Enum_ControllerType                     SDKType_0                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPDefaultHand_C::ControllerInitMulticast(const struct FVector& LocationOffset, const struct FRotator& RotatorOffset, Enum_ControllerType SDKType_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPDefaultHand_C", "ControllerInitMulticast");

	Params::BPDefaultHand_C_ControllerInitMulticast Parms{};

	Parms.LocationOffset = std::move(LocationOffset);
	Parms.RotatorOffset = std::move(RotatorOffset);
	Parms.SDKType_0 = SDKType_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPDefaultHand.BPDefaultHand_C.CheckController
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsLocal                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABPDefaultHand_C::CheckController(bool IsLocal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPDefaultHand_C", "CheckController");

	Params::BPDefaultHand_C_CheckController Parms{};

	Parms.IsLocal = IsLocal;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPDefaultHand.BPDefaultHand_C.ControllerInit
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   LocationOffset                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FRotator&                  RotatorOffset                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// Enum_ControllerType                     SDKType_0                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPDefaultHand_C::ControllerInit(const struct FVector& LocationOffset, const struct FRotator& RotatorOffset, Enum_ControllerType SDKType_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPDefaultHand_C", "ControllerInit");

	Params::BPDefaultHand_C_ControllerInit Parms{};

	Parms.LocationOffset = std::move(LocationOffset);
	Parms.RotatorOffset = std::move(RotatorOffset);
	Parms.SDKType_0 = SDKType_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPDefaultHand.BPDefaultHand_C.AdjustHandLocation
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   FrontEnd                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   UpDown                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPDefaultHand_C::AdjustHandLocation(float FrontEnd, float UpDown)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPDefaultHand_C", "AdjustHandLocation");

	Params::BPDefaultHand_C_AdjustHandLocation Parms{};

	Parms.FrontEnd = FrontEnd;
	Parms.UpDown = UpDown;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPDefaultHand.BPDefaultHand_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABPDefaultHand_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPDefaultHand_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPDefaultHand.BPDefaultHand_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPDefaultHand_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPDefaultHand_C", "ReceiveTick");

	Params::BPDefaultHand_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPDefaultHand.BPDefaultHand_C.PullTrigger
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABPDefaultHand_C::PullTrigger()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPDefaultHand_C", "PullTrigger");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPDefaultHand.BPDefaultHand_C.AdjustHandRotation
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Offset                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPDefaultHand_C::AdjustHandRotation(float Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPDefaultHand_C", "AdjustHandRotation");

	Params::BPDefaultHand_C_AdjustHandRotation Parms{};

	Parms.Offset = Offset;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPDefaultHand.BPDefaultHand_C.ShowOnlyTeleport
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Show                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABPDefaultHand_C::ShowOnlyTeleport(bool Show)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPDefaultHand_C", "ShowOnlyTeleport");

	Params::BPDefaultHand_C_ShowOnlyTeleport Parms{};

	Parms.Show = Show;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPDefaultHand.BPDefaultHand_C.ShowAllTips
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Show                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABPDefaultHand_C::ShowAllTips(bool Show)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPDefaultHand_C", "ShowAllTips");

	Params::BPDefaultHand_C_ShowAllTips Parms{};

	Parms.Show = Show;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPDefaultHand.BPDefaultHand_C.ResetRelativeTransform
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABPDefaultHand_C::ResetRelativeTransform()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPDefaultHand_C", "ResetRelativeTransform");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPDefaultHand.BPDefaultHand_C.UpdateHandType
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// EItemTypes                              WeaponType_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPDefaultHand_C::UpdateHandType(EItemTypes WeaponType_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPDefaultHand_C", "UpdateHandType");

	Params::BPDefaultHand_C_UpdateHandType Parms{};

	Parms.WeaponType_0 = WeaponType_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPDefaultHand.BPDefaultHand_C.ReleaseTrigger
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABPDefaultHand_C::ReleaseTrigger()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPDefaultHand_C", "ReleaseTrigger");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPDefaultHand.BPDefaultHand_C.Timeline_0__UpdateFunc
// (BlueprintEvent)

void ABPDefaultHand_C::Timeline_0__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPDefaultHand_C", "Timeline_0__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPDefaultHand.BPDefaultHand_C.Timeline_0__FinishedFunc
// (BlueprintEvent)

void ABPDefaultHand_C::Timeline_0__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPDefaultHand_C", "Timeline_0__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPDefaultHand.BPDefaultHand_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABPDefaultHand_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPDefaultHand_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPDefaultHand.BPDefaultHand_C.RegisterWithOwerPawn
// (Public, BlueprintCallable, BlueprintEvent)

void ABPDefaultHand_C::RegisterWithOwerPawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPDefaultHand_C", "RegisterWithOwerPawn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPDefaultHand.BPDefaultHand_C.UpdateUI
// (Public, BlueprintCallable, BlueprintEvent)

void ABPDefaultHand_C::UpdateUI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPDefaultHand_C", "UpdateUI");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPDefaultHand.BPDefaultHand_C.OnRep_SDKType
// (BlueprintCallable, BlueprintEvent)

void ABPDefaultHand_C::OnRep_SDKType()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPDefaultHand_C", "OnRep_SDKType");

	UObject::ProcessEvent(Func, nullptr);
}

}

