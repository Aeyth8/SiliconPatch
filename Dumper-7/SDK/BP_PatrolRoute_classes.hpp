#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PatrolRoute

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PatrolRoute.BP_PatrolRoute_C
// 0x0028 (0x0350 - 0x0328)
class ABP_PatrolRoute_C final : public AActor
{
public:
	class UTextRenderComponent*                   TextRender;                                        // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Billboard;                                         // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       Spline;                                            // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         PathCorners;                                       // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FColor                                 TextColor;                                         // 0x0344(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TextSize;                                          // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	void GetSplinePointNum(int32* Num);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PatrolRoute_C">();
	}
	static class ABP_PatrolRoute_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PatrolRoute_C>();
	}
};
static_assert(alignof(ABP_PatrolRoute_C) == 0x000008, "Wrong alignment on ABP_PatrolRoute_C");
static_assert(sizeof(ABP_PatrolRoute_C) == 0x000350, "Wrong size on ABP_PatrolRoute_C");
static_assert(offsetof(ABP_PatrolRoute_C, TextRender) == 0x000328, "Member 'ABP_PatrolRoute_C::TextRender' has a wrong offset!");
static_assert(offsetof(ABP_PatrolRoute_C, Billboard) == 0x000330, "Member 'ABP_PatrolRoute_C::Billboard' has a wrong offset!");
static_assert(offsetof(ABP_PatrolRoute_C, Spline) == 0x000338, "Member 'ABP_PatrolRoute_C::Spline' has a wrong offset!");
static_assert(offsetof(ABP_PatrolRoute_C, PathCorners) == 0x000340, "Member 'ABP_PatrolRoute_C::PathCorners' has a wrong offset!");
static_assert(offsetof(ABP_PatrolRoute_C, TextColor) == 0x000344, "Member 'ABP_PatrolRoute_C::TextColor' has a wrong offset!");
static_assert(offsetof(ABP_PatrolRoute_C, TextSize) == 0x000348, "Member 'ABP_PatrolRoute_C::TextSize' has a wrong offset!");

}

