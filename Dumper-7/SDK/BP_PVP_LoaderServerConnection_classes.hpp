#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PVP_LoaderServerConnection

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "SiliconRising_structs.hpp"
#include "SiliconRising_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PVP_LoaderServerConnection.BP_PVP_LoaderServerConnection_C
// 0x00C0 (0x0518 - 0x0458)
class ABP_PVP_LoaderServerConnection_C final : public ATcpPvpServerToBackendServer
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0458(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0460(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FYYMsgIdent                            RoomID;                                            // 0x0468(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FYYMsgReqAckRoomInfo                   RoomInfo;                                          // 0x0478(0x0080)(Edit, BlueprintVisible, DisableEditOnInstance)
	UMulticastDelegateProperty_                   OnRoomInfo;                                        // 0x04F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnRegisterFailed;                                  // 0x0508(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void ExecuteUbergraph_BP_PVP_LoaderServerConnection(int32 EntryPoint);
	void ReceiveBeginPlay();
	void Evt_OnConnected();
	void Evt_ReceiveMessage(const struct FYYMsgData& Message);
	void UserConstructionScript();
	void StringToFBIdent(const class FString& In, struct FYYMsgIdent* Out, bool* Success);
	void FBIdentToString(const struct FYYMsgIdent& In, class FString* Out);
	void IsPlayerInRoom(const class FString& PlayerID, const struct FYYMsgReqAckRoomInfo& RoomInfo_0, bool* IsInRoom, int32* Team, struct FYYMsgReqAckRoomMember* PlayerInfo);
	void CountPlayers(const struct FYYMsgReqAckRoomInfo& RoomInfo_0, int32* Count);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PVP_LoaderServerConnection_C">();
	}
	static class ABP_PVP_LoaderServerConnection_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PVP_LoaderServerConnection_C>();
	}
};
static_assert(alignof(ABP_PVP_LoaderServerConnection_C) == 0x000008, "Wrong alignment on ABP_PVP_LoaderServerConnection_C");
static_assert(sizeof(ABP_PVP_LoaderServerConnection_C) == 0x000518, "Wrong size on ABP_PVP_LoaderServerConnection_C");
static_assert(offsetof(ABP_PVP_LoaderServerConnection_C, UberGraphFrame) == 0x000458, "Member 'ABP_PVP_LoaderServerConnection_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_PVP_LoaderServerConnection_C, DefaultSceneRoot) == 0x000460, "Member 'ABP_PVP_LoaderServerConnection_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_PVP_LoaderServerConnection_C, RoomID) == 0x000468, "Member 'ABP_PVP_LoaderServerConnection_C::RoomID' has a wrong offset!");
static_assert(offsetof(ABP_PVP_LoaderServerConnection_C, RoomInfo) == 0x000478, "Member 'ABP_PVP_LoaderServerConnection_C::RoomInfo' has a wrong offset!");
static_assert(offsetof(ABP_PVP_LoaderServerConnection_C, OnRoomInfo) == 0x0004F8, "Member 'ABP_PVP_LoaderServerConnection_C::OnRoomInfo' has a wrong offset!");
static_assert(offsetof(ABP_PVP_LoaderServerConnection_C, OnRegisterFailed) == 0x000508, "Member 'ABP_PVP_LoaderServerConnection_C::OnRegisterFailed' has a wrong offset!");

}

