#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPDefaultHand

#include "Basic.hpp"

#include "SiliconRising_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "InputCore_structs.hpp"
#include "Enum_ControllerType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPDefaultHand.BPDefaultHand_C
// 0x02A8 (0x05D0 - 0x0328)
#pragma pack(push, 0x1)
class alignas(0x10) ABPDefaultHand_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0328(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USphereComponent*                       Sphere;                                            // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 mainmesh;                                          // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        HandMeshRoot;                                      // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   HP_01;                                             // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        HandRoot;                                          // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        tips;                                              // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   ControllerModel;                                   // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        ControllerRoot;                                    // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   UI_3;                                              // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Fire2;                                             // 0x0380(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   TeleportLine2;                                     // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   TeleportLine;                                      // 0x0390(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       TeleportWidget;                                    // 0x0398(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       ReloadWidget;                                      // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       FireWidget;                                        // 0x03A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Reload;                                            // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Fire;                                              // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        RightTracker;                                      // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        LeftTracker;                                       // 0x03C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene1;                                            // 0x03D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene2;                                            // 0x03D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Prop_Red_Cd;                                       // 0x03E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Prop_Green_Cd;                                     // 0x03E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Prop_Below;                                        // 0x03F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Prop_Up;                                           // 0x03F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Prop_Lightning;                                    // 0x0400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Prop_Heart;                                        // 0x0408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BoxCollision;                                      // 0x0410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsHandleComponent*                PhysicsHandle;                                     // 0x0418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_HandLocationOffset_3000EA12460DA5F572D98BB6A67C766E; // 0x0428(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_3000EA12460DA5F572D98BB6A67C766E; // 0x042C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42D[0x3];                                      // 0x042D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x0430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EControllerHand                               hand;                                              // 0x0438(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_439[0x7];                                      // 0x0439(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               EnergyMI;                                          // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               HPMI;                                              // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NewVar_3;                                          // 0x0450(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HPRatio;                                           // 0x0454(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnergyRatio;                                       // 0x0458(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsShowUI;                                          // 0x045C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45D[0x3];                                      // 0x045D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        TrackingPoint;                                     // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMotionControllerComponent*             MController;                                       // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             RecoilTransform;                                   // 0x0470(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EItemTypes                                    WeaponType;                                        // 0x04A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A1[0xF];                                      // 0x04A1(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InitRecoilTransform;                               // 0x04B0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         AdjustHandRot_Vive;                                // 0x04E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AdjustHandRot_OC;                                  // 0x04E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AdjustHandRot_Index;                               // 0x04E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AdjustHandRot_ViveCosmos;                          // 0x04EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AdjustHandRot_WMR;                                 // 0x04F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AdjustHandRot;                                     // 0x04F4(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_ControllerType                           SDKType;                                           // 0x04F8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4F9[0x3];                                      // 0x04F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OCRelativePosition;                                // 0x04FC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ViveRelativePosition;                              // 0x0508(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WMRRelativePosition;                               // 0x0514(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AdjustHandRelativePosition;                        // 0x0520(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInit;                                            // 0x052C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_52D[0x3];                                      // 0x052D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InitRelativeScale;                                 // 0x0530(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_53C[0x4];                                      // 0x053C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             HandMeshInitRelativeTransform;                     // 0x0540(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EItemTypes                                    LastWeaponType;                                    // 0x0570(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAttachToOtherHand;                               // 0x0571(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_572[0x6];                                      // 0x0572(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABPDefaultHand_C*                       OtherHand;                                         // 0x0578(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             TempTrans;                                         // 0x0580(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class FName                                   Reload_SocketName_L;                               // 0x05B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Reload_SocketName_R;                               // 0x05B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsReloading;                                       // 0x05C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EControllerHand                               InitHand;                                          // 0x05C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C2[0x2];                                      // 0x05C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReloadHeightOffset;                                // 0x05C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         reloadRotationOffset;                              // 0x05C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BPDefaultHand(int32 EntryPoint);
	void PushHand(class AWpn_Clip_C* ParentClip);
	void AttachBothHand(bool Attach, class ABPDefaultHand_C* OtherHand_0, EItemTypes WeaponType_0);
	void EnterBothHand(bool Enter);
	void SetCarryClip(bool IsCarry, EItemTypes ClipType);
	void SetPullBolt(bool IsPull, EItemTypes WeaponType_0);
	void ReverseHand(bool IsNormal);
	void CallControllerInit();
	void SetControllerType(Enum_ControllerType SDKType_0);
	void ControllerInitMulticast(const struct FVector& LocationOffset, const struct FRotator& RotatorOffset, Enum_ControllerType SDKType_0);
	void CheckController(bool IsLocal);
	void ControllerInit(const struct FVector& LocationOffset, const struct FRotator& RotatorOffset, Enum_ControllerType SDKType_0);
	void AdjustHandLocation(float FrontEnd, float UpDown);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void PullTrigger();
	void AdjustHandRotation(float Offset);
	void ShowOnlyTeleport(bool Show);
	void ShowAllTips(bool Show);
	void ResetRelativeTransform();
	void UpdateHandType(EItemTypes WeaponType_0);
	void ReleaseTrigger();
	void Timeline_0__UpdateFunc();
	void Timeline_0__FinishedFunc();
	void UserConstructionScript();
	void RegisterWithOwerPawn();
	void UpdateUI();
	void OnRep_SDKType();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPDefaultHand_C">();
	}
	static class ABPDefaultHand_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABPDefaultHand_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABPDefaultHand_C) == 0x000010, "Wrong alignment on ABPDefaultHand_C");
static_assert(sizeof(ABPDefaultHand_C) == 0x0005D0, "Wrong size on ABPDefaultHand_C");
static_assert(offsetof(ABPDefaultHand_C, UberGraphFrame) == 0x000328, "Member 'ABPDefaultHand_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, Sphere) == 0x000330, "Member 'ABPDefaultHand_C::Sphere' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, mainmesh) == 0x000338, "Member 'ABPDefaultHand_C::mainmesh' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, HandMeshRoot) == 0x000340, "Member 'ABPDefaultHand_C::HandMeshRoot' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, HP_01) == 0x000348, "Member 'ABPDefaultHand_C::HP_01' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, Scene) == 0x000350, "Member 'ABPDefaultHand_C::Scene' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, HandRoot) == 0x000358, "Member 'ABPDefaultHand_C::HandRoot' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, tips) == 0x000360, "Member 'ABPDefaultHand_C::tips' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, ControllerModel) == 0x000368, "Member 'ABPDefaultHand_C::ControllerModel' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, ControllerRoot) == 0x000370, "Member 'ABPDefaultHand_C::ControllerRoot' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, UI_3) == 0x000378, "Member 'ABPDefaultHand_C::UI_3' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, Fire2) == 0x000380, "Member 'ABPDefaultHand_C::Fire2' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, TeleportLine2) == 0x000388, "Member 'ABPDefaultHand_C::TeleportLine2' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, TeleportLine) == 0x000390, "Member 'ABPDefaultHand_C::TeleportLine' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, TeleportWidget) == 0x000398, "Member 'ABPDefaultHand_C::TeleportWidget' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, ReloadWidget) == 0x0003A0, "Member 'ABPDefaultHand_C::ReloadWidget' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, FireWidget) == 0x0003A8, "Member 'ABPDefaultHand_C::FireWidget' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, Reload) == 0x0003B0, "Member 'ABPDefaultHand_C::Reload' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, Fire) == 0x0003B8, "Member 'ABPDefaultHand_C::Fire' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, RightTracker) == 0x0003C0, "Member 'ABPDefaultHand_C::RightTracker' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, LeftTracker) == 0x0003C8, "Member 'ABPDefaultHand_C::LeftTracker' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, Scene1) == 0x0003D0, "Member 'ABPDefaultHand_C::Scene1' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, Scene2) == 0x0003D8, "Member 'ABPDefaultHand_C::Scene2' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, Prop_Red_Cd) == 0x0003E0, "Member 'ABPDefaultHand_C::Prop_Red_Cd' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, Prop_Green_Cd) == 0x0003E8, "Member 'ABPDefaultHand_C::Prop_Green_Cd' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, Prop_Below) == 0x0003F0, "Member 'ABPDefaultHand_C::Prop_Below' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, Prop_Up) == 0x0003F8, "Member 'ABPDefaultHand_C::Prop_Up' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, Prop_Lightning) == 0x000400, "Member 'ABPDefaultHand_C::Prop_Lightning' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, Prop_Heart) == 0x000408, "Member 'ABPDefaultHand_C::Prop_Heart' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, BoxCollision) == 0x000410, "Member 'ABPDefaultHand_C::BoxCollision' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, PhysicsHandle) == 0x000418, "Member 'ABPDefaultHand_C::PhysicsHandle' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, DefaultSceneRoot) == 0x000420, "Member 'ABPDefaultHand_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, Timeline_0_HandLocationOffset_3000EA12460DA5F572D98BB6A67C766E) == 0x000428, "Member 'ABPDefaultHand_C::Timeline_0_HandLocationOffset_3000EA12460DA5F572D98BB6A67C766E' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, Timeline_0__Direction_3000EA12460DA5F572D98BB6A67C766E) == 0x00042C, "Member 'ABPDefaultHand_C::Timeline_0__Direction_3000EA12460DA5F572D98BB6A67C766E' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, Timeline_0) == 0x000430, "Member 'ABPDefaultHand_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, hand) == 0x000438, "Member 'ABPDefaultHand_C::hand' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, EnergyMI) == 0x000440, "Member 'ABPDefaultHand_C::EnergyMI' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, HPMI) == 0x000448, "Member 'ABPDefaultHand_C::HPMI' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, NewVar_3) == 0x000450, "Member 'ABPDefaultHand_C::NewVar_3' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, HPRatio) == 0x000454, "Member 'ABPDefaultHand_C::HPRatio' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, EnergyRatio) == 0x000458, "Member 'ABPDefaultHand_C::EnergyRatio' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, IsShowUI) == 0x00045C, "Member 'ABPDefaultHand_C::IsShowUI' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, TrackingPoint) == 0x000460, "Member 'ABPDefaultHand_C::TrackingPoint' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, MController) == 0x000468, "Member 'ABPDefaultHand_C::MController' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, RecoilTransform) == 0x000470, "Member 'ABPDefaultHand_C::RecoilTransform' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, WeaponType) == 0x0004A0, "Member 'ABPDefaultHand_C::WeaponType' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, InitRecoilTransform) == 0x0004B0, "Member 'ABPDefaultHand_C::InitRecoilTransform' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, AdjustHandRot_Vive) == 0x0004E0, "Member 'ABPDefaultHand_C::AdjustHandRot_Vive' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, AdjustHandRot_OC) == 0x0004E4, "Member 'ABPDefaultHand_C::AdjustHandRot_OC' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, AdjustHandRot_Index) == 0x0004E8, "Member 'ABPDefaultHand_C::AdjustHandRot_Index' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, AdjustHandRot_ViveCosmos) == 0x0004EC, "Member 'ABPDefaultHand_C::AdjustHandRot_ViveCosmos' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, AdjustHandRot_WMR) == 0x0004F0, "Member 'ABPDefaultHand_C::AdjustHandRot_WMR' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, AdjustHandRot) == 0x0004F4, "Member 'ABPDefaultHand_C::AdjustHandRot' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, SDKType) == 0x0004F8, "Member 'ABPDefaultHand_C::SDKType' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, OCRelativePosition) == 0x0004FC, "Member 'ABPDefaultHand_C::OCRelativePosition' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, ViveRelativePosition) == 0x000508, "Member 'ABPDefaultHand_C::ViveRelativePosition' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, WMRRelativePosition) == 0x000514, "Member 'ABPDefaultHand_C::WMRRelativePosition' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, AdjustHandRelativePosition) == 0x000520, "Member 'ABPDefaultHand_C::AdjustHandRelativePosition' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, IsInit) == 0x00052C, "Member 'ABPDefaultHand_C::IsInit' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, InitRelativeScale) == 0x000530, "Member 'ABPDefaultHand_C::InitRelativeScale' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, HandMeshInitRelativeTransform) == 0x000540, "Member 'ABPDefaultHand_C::HandMeshInitRelativeTransform' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, LastWeaponType) == 0x000570, "Member 'ABPDefaultHand_C::LastWeaponType' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, IsAttachToOtherHand) == 0x000571, "Member 'ABPDefaultHand_C::IsAttachToOtherHand' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, OtherHand) == 0x000578, "Member 'ABPDefaultHand_C::OtherHand' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, TempTrans) == 0x000580, "Member 'ABPDefaultHand_C::TempTrans' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, Reload_SocketName_L) == 0x0005B0, "Member 'ABPDefaultHand_C::Reload_SocketName_L' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, Reload_SocketName_R) == 0x0005B8, "Member 'ABPDefaultHand_C::Reload_SocketName_R' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, IsReloading) == 0x0005C0, "Member 'ABPDefaultHand_C::IsReloading' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, InitHand) == 0x0005C1, "Member 'ABPDefaultHand_C::InitHand' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, ReloadHeightOffset) == 0x0005C4, "Member 'ABPDefaultHand_C::ReloadHeightOffset' has a wrong offset!");
static_assert(offsetof(ABPDefaultHand_C, reloadRotationOffset) == 0x0005C8, "Member 'ABPDefaultHand_C::reloadRotationOffset' has a wrong offset!");

}

