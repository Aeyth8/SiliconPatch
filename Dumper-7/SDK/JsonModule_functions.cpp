#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: JsonModule

#include "Basic.hpp"

#include "JsonModule_classes.hpp"
#include "JsonModule_parameters.hpp"


namespace SDK
{

// Function JsonModule.JsonHelper.AddJsonArrayValue
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FJsonStruct&                     Json                                                   (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FJsonStruct&               Value                                                  (Parm, NativeAccessSpecifierPublic)
// bool*                                   isSuccess                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJsonHelper::AddJsonArrayValue(struct FJsonStruct& Json, const struct FJsonStruct& Value, bool* isSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JsonHelper", "AddJsonArrayValue");

	Params::JsonHelper_AddJsonArrayValue Parms{};

	Parms.Json = std::move(Json);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Json = std::move(Parms.Json);

	if (isSuccess != nullptr)
		*isSuccess = Parms.isSuccess;
}


// Function JsonModule.JsonHelper.AddJsonObjectValue
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FJsonStruct&               Json                                                   (Parm, NativeAccessSpecifierPublic)
// const struct FJsonStruct&               Value                                                  (Parm, NativeAccessSpecifierPublic)
// bool*                                   isSuccess                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    isRepleace                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJsonHelper::AddJsonObjectValue(const struct FJsonStruct& Json, const struct FJsonStruct& Value, bool* isSuccess, bool isRepleace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JsonHelper", "AddJsonObjectValue");

	Params::JsonHelper_AddJsonObjectValue Parms{};

	Parms.Json = std::move(Json);
	Parms.Value = std::move(Value);
	Parms.isRepleace = isRepleace;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (isSuccess != nullptr)
		*isSuccess = Parms.isSuccess;
}


// Function JsonModule.JsonHelper.ChangeJsonArrayValue
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FJsonStruct&                     Json                                                   (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FJsonStruct&               from                                                   (Parm, NativeAccessSpecifierPublic)
// const struct FJsonStruct&               to                                                     (Parm, NativeAccessSpecifierPublic)
// bool*                                   isSuccess                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJsonHelper::ChangeJsonArrayValue(struct FJsonStruct& Json, const struct FJsonStruct& from, const struct FJsonStruct& to, bool* isSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JsonHelper", "ChangeJsonArrayValue");

	Params::JsonHelper_ChangeJsonArrayValue Parms{};

	Parms.Json = std::move(Json);
	Parms.from = std::move(from);
	Parms.to = std::move(to);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Json = std::move(Parms.Json);

	if (isSuccess != nullptr)
		*isSuccess = Parms.isSuccess;
}


// Function JsonModule.JsonHelper.ChangeJsonObjectValue
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FJsonStruct&               Json                                                   (Parm, NativeAccessSpecifierPublic)
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FJsonStruct&               Value                                                  (Parm, NativeAccessSpecifierPublic)
// bool*                                   isSuccess                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJsonHelper::ChangeJsonObjectValue(const struct FJsonStruct& Json, const class FString& Key, const struct FJsonStruct& Value, bool* isSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JsonHelper", "ChangeJsonObjectValue");

	Params::JsonHelper_ChangeJsonObjectValue Parms{};

	Parms.Json = std::move(Json);
	Parms.Key = std::move(Key);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (isSuccess != nullptr)
		*isSuccess = Parms.isSuccess;
}


// Function JsonModule.JsonHelper.CreateJsonArray
// (Final, Native, Static, Private, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FJsonStruct                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FJsonStruct UJsonHelper::CreateJsonArray()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JsonHelper", "CreateJsonArray");

	Params::JsonHelper_CreateJsonArray Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JsonModule.JsonHelper.CreateJsonArrayByValue
// (Final, Native, Static, Private, BlueprintCallable, BlueprintPure)
// Parameters:
// const TArray<struct FJsonStruct>&       Arrays                                                 (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// struct FJsonStruct                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FJsonStruct UJsonHelper::CreateJsonArrayByValue(const TArray<struct FJsonStruct>& Arrays)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JsonHelper", "CreateJsonArrayByValue");

	Params::JsonHelper_CreateJsonArrayByValue Parms{};

	Parms.Arrays = std::move(Arrays);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JsonModule.JsonHelper.CreateJsonBoolValue
// (Final, Native, Static, Private, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FJsonStruct                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FJsonStruct UJsonHelper::CreateJsonBoolValue(const class FString& Key, bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JsonHelper", "CreateJsonBoolValue");

	Params::JsonHelper_CreateJsonBoolValue Parms{};

	Parms.Key = std::move(Key);
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JsonModule.JsonHelper.CreateJsonNumberValue
// (Final, Native, Static, Private, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FJsonStruct                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FJsonStruct UJsonHelper::CreateJsonNumberValue(const class FString& Key, float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JsonHelper", "CreateJsonNumberValue");

	Params::JsonHelper_CreateJsonNumberValue Parms{};

	Parms.Key = std::move(Key);
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JsonModule.JsonHelper.CreateJsonObject
// (Final, Native, Static, Private, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FJsonStruct                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FJsonStruct UJsonHelper::CreateJsonObject()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JsonHelper", "CreateJsonObject");

	Params::JsonHelper_CreateJsonObject Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JsonModule.JsonHelper.CreateJsonObjectByValue
// (Final, Native, Static, Private, BlueprintCallable, BlueprintPure)
// Parameters:
// const TArray<struct FJsonStruct>&       Arrays                                                 (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// struct FJsonStruct                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FJsonStruct UJsonHelper::CreateJsonObjectByValue(const TArray<struct FJsonStruct>& Arrays)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JsonHelper", "CreateJsonObjectByValue");

	Params::JsonHelper_CreateJsonObjectByValue Parms{};

	Parms.Arrays = std::move(Arrays);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JsonModule.JsonHelper.CreateJsonStringValue
// (Final, Native, Static, Private, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FJsonStruct                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FJsonStruct UJsonHelper::CreateJsonStringValue(const class FString& Key, const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JsonHelper", "CreateJsonStringValue");

	Params::JsonHelper_CreateJsonStringValue Parms{};

	Parms.Key = std::move(Key);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JsonModule.JsonHelper.FindJsonFromObject
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FJsonStruct&               Json                                                   (Parm, NativeAccessSpecifierPublic)
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EJsonType                               Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   isFound                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FJsonStruct                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FJsonStruct UJsonHelper::FindJsonFromObject(const struct FJsonStruct& Json, const class FString& Key, EJsonType Type, bool* isFound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JsonHelper", "FindJsonFromObject");

	Params::JsonHelper_FindJsonFromObject Parms{};

	Parms.Json = std::move(Json);
	Parms.Key = std::move(Key);
	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (isFound != nullptr)
		*isFound = Parms.isFound;

	return Parms.ReturnValue;
}


// Function JsonModule.JsonHelper.GetAllValueFromJson
// (Final, Native, Static, Private, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FJsonStruct&               Json                                                   (Parm, NativeAccessSpecifierPublic)
// TArray<struct FJsonStruct>              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FJsonStruct> UJsonHelper::GetAllValueFromJson(const struct FJsonStruct& Json)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JsonHelper", "GetAllValueFromJson");

	Params::JsonHelper_GetAllValueFromJson Parms{};

	Parms.Json = std::move(Json);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JsonModule.JsonHelper.JsonObjectToKeyValuePairs
// (Final, Native, Static, Private, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FJsonStruct&               Json                                                   (Parm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UJsonHelper::JsonObjectToKeyValuePairs(const struct FJsonStruct& Json)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JsonHelper", "JsonObjectToKeyValuePairs");

	Params::JsonHelper_JsonObjectToKeyValuePairs Parms{};

	Parms.Json = std::move(Json);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JsonModule.JsonHelper.JsonType
// (Final, Native, Static, Private, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FJsonStruct&               Json                                                   (Parm, NativeAccessSpecifierPublic)
// EJsonType                               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EJsonType UJsonHelper::JsonType(const struct FJsonStruct& Json)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JsonHelper", "JsonType");

	Params::JsonHelper_JsonType Parms{};

	Parms.Json = std::move(Json);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JsonModule.JsonHelper.ParseJson
// (Final, Native, Static, Private, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    str                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FJsonStruct                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FJsonStruct UJsonHelper::ParseJson(const class FString& str)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JsonHelper", "ParseJson");

	Params::JsonHelper_ParseJson Parms{};

	Parms.str = std::move(str);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JsonModule.JsonHelper.RemoveJsonArrayValueByValue
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FJsonStruct&               Json                                                   (Parm, NativeAccessSpecifierPublic)
// const struct FJsonStruct&               Value                                                  (Parm, NativeAccessSpecifierPublic)
// bool*                                   isSuccess                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJsonHelper::RemoveJsonArrayValueByValue(const struct FJsonStruct& Json, const struct FJsonStruct& Value, bool* isSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JsonHelper", "RemoveJsonArrayValueByValue");

	Params::JsonHelper_RemoveJsonArrayValueByValue Parms{};

	Parms.Json = std::move(Json);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (isSuccess != nullptr)
		*isSuccess = Parms.isSuccess;
}


// Function JsonModule.JsonHelper.RemoveJsonObjectValueByKey
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FJsonStruct&               Json                                                   (Parm, NativeAccessSpecifierPublic)
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   isSuccess                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJsonHelper::RemoveJsonObjectValueByKey(const struct FJsonStruct& Json, const class FString& Key, bool* isSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JsonHelper", "RemoveJsonObjectValueByKey");

	Params::JsonHelper_RemoveJsonObjectValueByKey Parms{};

	Parms.Json = std::move(Json);
	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (isSuccess != nullptr)
		*isSuccess = Parms.isSuccess;
}


// Function JsonModule.JsonHelper.SetJsonKey
// (Final, Native, Static, Private, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FJsonStruct&               Json                                                   (Parm, NativeAccessSpecifierPublic)
// const class FString&                    Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FJsonStruct                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FJsonStruct UJsonHelper::SetJsonKey(const struct FJsonStruct& Json, const class FString& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JsonHelper", "SetJsonKey");

	Params::JsonHelper_SetJsonKey Parms{};

	Parms.Json = std::move(Json);
	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JsonModule.JsonHelper.ToString
// (Final, Native, Static, Private, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FJsonStruct&               Json                                                   (Parm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UJsonHelper::ToString(const struct FJsonStruct& Json)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JsonHelper", "ToString");

	Params::JsonHelper_ToString Parms{};

	Parms.Json = std::move(Json);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JsonModule.JsonHelper.TryGetBaseValue
// (Final, Native, Static, Private, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FJsonStruct&               Json                                                   (Parm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UJsonHelper::TryGetBaseValue(const struct FJsonStruct& Json)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JsonHelper", "TryGetBaseValue");

	Params::JsonHelper_TryGetBaseValue Parms{};

	Parms.Json = std::move(Json);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

