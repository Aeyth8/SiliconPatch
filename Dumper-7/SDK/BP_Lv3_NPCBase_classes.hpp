#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Lv3_NPCBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "BE_Lv3_AttackState_structs.hpp"
#include "BE_Lv3_BehaviorState_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BE_Lv3_NPCType_structs.hpp"
#include "EnumDifficuty_structs.hpp"
#include "Enum_BehaviorType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Lv3_NPCBase.BP_Lv3_NPCBase_C
// 0x0170 (0x08B0 - 0x0740)
#pragma pack(push, 0x1)
class alignas(0x10) ABP_Lv3_NPCBase_C : public ACharacter
{
public:
	uint8                                         Pad_738[0x8];                                      // 0x0738(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0740(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          IsDead;                                            // 0x0748(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_749[0x7];                                      // 0x0749(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlackboardComponent*                   Blackboard;                                        // 0x0750(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Health;                                            // 0x0758(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_75C[0x4];                                      // 0x075C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      instigatorinstigator;                              // 0x0760(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 WeaponL;                                           // 0x0768(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 WeaponR;                                           // 0x0770(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Attack_CD;                                         // 0x0778(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeadLifeSpan;                                      // 0x077C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABPWeaponBase_C*                        CurWeaponL;                                        // 0x0780(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABPWeaponBase_C*                        CurWeaponR;                                        // 0x0788(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Lv3_characterBase_C*                TargetActor;                                       // 0x0790(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   OnFocusOver;                                       // 0x0798(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnArrived;                                         // 0x07A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnDead;                                            // 0x07B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	EBE_Lv3_AttackState                           AttackState;                                       // 0x07C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C9[0x3];                                      // 0x07C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BulletNum;                                         // 0x07CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentBullet;                                     // 0x07D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReloaTime;                                         // 0x07D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurattackCount;                                    // 0x07D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanFire;                                           // 0x07DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7DD[0x3];                                      // 0x07DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AttackCount;                                       // 0x07E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7E4[0x4];                                      // 0x07E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMer2GameInstance_C*                    GameInstance;                                      // 0x07E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxHealth;                                         // 0x07F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxFakeBullet;                                     // 0x07F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MinFakeBullet;                                     // 0x07F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         fakeBullet;                                        // 0x07FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurFakeBullet;                                     // 0x0800(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AimZ;                                              // 0x0804(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AimY;                                              // 0x0808(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AttackDistance;                                    // 0x080C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Lv3_BaseCar_C*                      ControlledCar;                                     // 0x0810(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           DieBonename;                                       // 0x0818(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	EBE_Lv3_BehaviorState                         BehaviorState;                                     // 0x0828(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBE_Lv3_NPCType                               NPCType;                                           // 0x0829(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Fire;                                              // 0x082A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_82B[0x1];                                      // 0x082B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FireOffset;                                        // 0x082C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurThunder;                                        // 0x0830(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalThunder;                                      // 0x0834(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Lv3_BaseCar_C*                      ByCar;                                             // 0x0838(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   BoneName;                                          // 0x0840(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Bhit;                                              // 0x0848(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_849[0x3];                                      // 0x0849(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendWidget;                                       // 0x084C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BodyX;                                             // 0x0850(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BodyY;                                             // 0x0854(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UAnimMontage*>                   DieMontage;                                        // 0x0858(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	UMulticastDelegateProperty_                   OnBulletHit;                                       // 0x0868(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsHurt;                                            // 0x0878(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_879[0x7];                                      // 0x0879(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_DeadlyBulletSettings_C*             DeadlyBulletSettings;                              // 0x0880(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SpawnOffset;                                       // 0x0888(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_894[0x4];                                      // 0x0894(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        HeadKillEffect;                                    // 0x0898(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             HeadKillSFX;                                       // 0x08A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Lv3_NPCBase(int32 EntryPoint);
	void HitBodyDead();
	void HitHeadDead();
	void HitBody();
	void HitHead();
	void EVT_OnDestroyed(class AActor* DestroyedActor);
	void HeadKill(const struct FVector& loacation, const struct FVector& Normal);
	void BndEvt__Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void ChangeBehavior(Enum_BehaviorType NewState, const struct FVector& TargetLocation);
	void GameOver(int32 TipsIndex);
	void Dead();
	void Attack(bool UseControllerRotation, float* Delay);
	void InitNPC();
	void GetDifficultConfig(struct FLv2_DifficultStruct* NewParam);
	void SpawnWeapon();
	void ThrowThunder(float* Delay);
	void ToggleWeapon(bool NewParam);
	void SpawnThunder(const struct FRotator& NewParam);
	void Reload(float* Delay);
	void JumpToCar();
	void DestroyWeapon();
	void HitAnim(class FName BoneName_0);
	void BlowUp();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Lv3_NPCBase_C">();
	}
	static class ABP_Lv3_NPCBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Lv3_NPCBase_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABP_Lv3_NPCBase_C) == 0x000010, "Wrong alignment on ABP_Lv3_NPCBase_C");
static_assert(sizeof(ABP_Lv3_NPCBase_C) == 0x0008B0, "Wrong size on ABP_Lv3_NPCBase_C");
static_assert(offsetof(ABP_Lv3_NPCBase_C, UberGraphFrame) == 0x000740, "Member 'ABP_Lv3_NPCBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_NPCBase_C, IsDead) == 0x000748, "Member 'ABP_Lv3_NPCBase_C::IsDead' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_NPCBase_C, Blackboard) == 0x000750, "Member 'ABP_Lv3_NPCBase_C::Blackboard' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_NPCBase_C, Health) == 0x000758, "Member 'ABP_Lv3_NPCBase_C::Health' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_NPCBase_C, instigatorinstigator) == 0x000760, "Member 'ABP_Lv3_NPCBase_C::instigatorinstigator' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_NPCBase_C, WeaponL) == 0x000768, "Member 'ABP_Lv3_NPCBase_C::WeaponL' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_NPCBase_C, WeaponR) == 0x000770, "Member 'ABP_Lv3_NPCBase_C::WeaponR' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_NPCBase_C, Attack_CD) == 0x000778, "Member 'ABP_Lv3_NPCBase_C::Attack_CD' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_NPCBase_C, DeadLifeSpan) == 0x00077C, "Member 'ABP_Lv3_NPCBase_C::DeadLifeSpan' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_NPCBase_C, CurWeaponL) == 0x000780, "Member 'ABP_Lv3_NPCBase_C::CurWeaponL' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_NPCBase_C, CurWeaponR) == 0x000788, "Member 'ABP_Lv3_NPCBase_C::CurWeaponR' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_NPCBase_C, TargetActor) == 0x000790, "Member 'ABP_Lv3_NPCBase_C::TargetActor' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_NPCBase_C, OnFocusOver) == 0x000798, "Member 'ABP_Lv3_NPCBase_C::OnFocusOver' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_NPCBase_C, OnArrived) == 0x0007A8, "Member 'ABP_Lv3_NPCBase_C::OnArrived' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_NPCBase_C, OnDead) == 0x0007B8, "Member 'ABP_Lv3_NPCBase_C::OnDead' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_NPCBase_C, AttackState) == 0x0007C8, "Member 'ABP_Lv3_NPCBase_C::AttackState' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_NPCBase_C, BulletNum) == 0x0007CC, "Member 'ABP_Lv3_NPCBase_C::BulletNum' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_NPCBase_C, CurrentBullet) == 0x0007D0, "Member 'ABP_Lv3_NPCBase_C::CurrentBullet' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_NPCBase_C, ReloaTime) == 0x0007D4, "Member 'ABP_Lv3_NPCBase_C::ReloaTime' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_NPCBase_C, CurattackCount) == 0x0007D8, "Member 'ABP_Lv3_NPCBase_C::CurattackCount' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_NPCBase_C, CanFire) == 0x0007DC, "Member 'ABP_Lv3_NPCBase_C::CanFire' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_NPCBase_C, AttackCount) == 0x0007E0, "Member 'ABP_Lv3_NPCBase_C::AttackCount' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_NPCBase_C, GameInstance) == 0x0007E8, "Member 'ABP_Lv3_NPCBase_C::GameInstance' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_NPCBase_C, MaxHealth) == 0x0007F0, "Member 'ABP_Lv3_NPCBase_C::MaxHealth' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_NPCBase_C, MaxFakeBullet) == 0x0007F4, "Member 'ABP_Lv3_NPCBase_C::MaxFakeBullet' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_NPCBase_C, MinFakeBullet) == 0x0007F8, "Member 'ABP_Lv3_NPCBase_C::MinFakeBullet' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_NPCBase_C, fakeBullet) == 0x0007FC, "Member 'ABP_Lv3_NPCBase_C::fakeBullet' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_NPCBase_C, CurFakeBullet) == 0x000800, "Member 'ABP_Lv3_NPCBase_C::CurFakeBullet' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_NPCBase_C, AimZ) == 0x000804, "Member 'ABP_Lv3_NPCBase_C::AimZ' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_NPCBase_C, AimY) == 0x000808, "Member 'ABP_Lv3_NPCBase_C::AimY' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_NPCBase_C, AttackDistance) == 0x00080C, "Member 'ABP_Lv3_NPCBase_C::AttackDistance' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_NPCBase_C, ControlledCar) == 0x000810, "Member 'ABP_Lv3_NPCBase_C::ControlledCar' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_NPCBase_C, DieBonename) == 0x000818, "Member 'ABP_Lv3_NPCBase_C::DieBonename' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_NPCBase_C, BehaviorState) == 0x000828, "Member 'ABP_Lv3_NPCBase_C::BehaviorState' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_NPCBase_C, NPCType) == 0x000829, "Member 'ABP_Lv3_NPCBase_C::NPCType' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_NPCBase_C, Fire) == 0x00082A, "Member 'ABP_Lv3_NPCBase_C::Fire' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_NPCBase_C, FireOffset) == 0x00082C, "Member 'ABP_Lv3_NPCBase_C::FireOffset' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_NPCBase_C, CurThunder) == 0x000830, "Member 'ABP_Lv3_NPCBase_C::CurThunder' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_NPCBase_C, TotalThunder) == 0x000834, "Member 'ABP_Lv3_NPCBase_C::TotalThunder' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_NPCBase_C, ByCar) == 0x000838, "Member 'ABP_Lv3_NPCBase_C::ByCar' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_NPCBase_C, BoneName) == 0x000840, "Member 'ABP_Lv3_NPCBase_C::BoneName' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_NPCBase_C, Bhit) == 0x000848, "Member 'ABP_Lv3_NPCBase_C::Bhit' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_NPCBase_C, BlendWidget) == 0x00084C, "Member 'ABP_Lv3_NPCBase_C::BlendWidget' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_NPCBase_C, BodyX) == 0x000850, "Member 'ABP_Lv3_NPCBase_C::BodyX' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_NPCBase_C, BodyY) == 0x000854, "Member 'ABP_Lv3_NPCBase_C::BodyY' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_NPCBase_C, DieMontage) == 0x000858, "Member 'ABP_Lv3_NPCBase_C::DieMontage' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_NPCBase_C, OnBulletHit) == 0x000868, "Member 'ABP_Lv3_NPCBase_C::OnBulletHit' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_NPCBase_C, IsHurt) == 0x000878, "Member 'ABP_Lv3_NPCBase_C::IsHurt' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_NPCBase_C, DeadlyBulletSettings) == 0x000880, "Member 'ABP_Lv3_NPCBase_C::DeadlyBulletSettings' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_NPCBase_C, SpawnOffset) == 0x000888, "Member 'ABP_Lv3_NPCBase_C::SpawnOffset' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_NPCBase_C, HeadKillEffect) == 0x000898, "Member 'ABP_Lv3_NPCBase_C::HeadKillEffect' has a wrong offset!");
static_assert(offsetof(ABP_Lv3_NPCBase_C, HeadKillSFX) == 0x0008A0, "Member 'ABP_Lv3_NPCBase_C::HeadKillSFX' has a wrong offset!");

}

