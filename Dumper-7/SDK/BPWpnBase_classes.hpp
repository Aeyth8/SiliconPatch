#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPWpnBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "SiliconRising_structs.hpp"
#include "Struct_SpawnProjectile_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPWpnBase.BPWpnBase_C
// 0x0148 (0x0470 - 0x0328)
class ABPWpnBase_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0328(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        FireSparkPoint;                                    // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        ProjectilePoint;                                   // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        ShellDropPoint;                                    // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        AimPoint_End;                                      // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        AimPoint_Start;                                    // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 WeaponMesh;                                        // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 BulletClass;                                       // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FWeaponParams                          Configs;                                           // 0x0370(0x0080)(Edit, BlueprintVisible, NoDestructor)
	bool                                          EnableVR;                                          // 0x03F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F1[0x3];                                      // 0x03F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentClipBulletNum;                              // 0x03F4(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LeftClipBulletNum;                                 // 0x03F8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LeftClipNum;                                       // 0x03FC(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDropDown;                                        // 0x0400(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_401[0x3];                                      // 0x0401(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BulletCD;                                          // 0x0404(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaTime;                                         // 0x0408(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EWState                                       WeaponState;                                       // 0x040C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_40D[0x3];                                      // 0x040D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FStruct_SpawnProjectile>        SpawnProjectile;                                   // 0x0410(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	int32                                         SingeShootCount;                                   // 0x0420(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetLocation;                                    // 0x0424(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSpecial;                                         // 0x0430(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsUseOffset;                                       // 0x0431(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsNpc;                                             // 0x0432(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_433[0x5];                                      // 0x0433(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      SndAttenuation;                                    // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundConcurrency*                      SndConcurrency;                                    // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        SoundFire;                                         // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        SoundDrop;                                         // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DeadlyCount;                                       // 0x0458(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRightHandWeapon;                                 // 0x045C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsNeedDropShell;                                   // 0x045D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PlayEmpty;                                         // 0x045E(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          EnableSpecial;                                     // 0x045F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CanInfinite;                                       // 0x0460(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsInfinite;                                        // 0x0461(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsPollBoltFinished;                                // 0x0462(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsOneTimeWeapon;                                   // 0x0463(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsNeedPullBolt_Private;                            // 0x0464(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsNeedManalReload_Private;                         // 0x0465(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsCanReload;                                       // 0x0466(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsBothHandWeapon;                                  // 0x0467(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsCouldSecondHandHold;                             // 0x0468(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HasBulletInWeapon;                                 // 0x0469(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsPullingBolt_Private;                             // 0x046A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsDropClip_Private;                                // 0x046B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsFirstInsertClip;                                 // 0x046C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsDoEmptyCheck;                                    // 0x046D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsReloadOnlyOneBullet;                             // 0x046E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BPWpnBase(int32 EntryPoint);
	void Evt_ReloadLeftOneBullet();
	void Evt_ThrowOneBullet();
	void Evt_PlayOutOfAmmoSound();
	void Evt_PullTrigger();
	void Evt_EndInfinite();
	void Evt_StartInfinite();
	void DoInfinite(float Time);
	void DoDropWeapon();
	void Evt_DropWeapon();
	void PlayShellDropSound(class FName EventName, float EmitterTime, int32 ParticleTime, const struct FVector& Location, const struct FVector& Velocity, const struct FVector& Direction, const struct FVector& Normal, class FName BoneName, class UPhysicalMaterial* PhysMat);
	void Evt_DropShell();
	void Evt_SpawnClip();
	void Evt_RecoilTimeLine();
	void Evt_ShotHaptic();
	void Evt_StopFire();
	void Evt_ClipEmpty();
	void Evt_Reload();
	void Evt_Fire();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void OnPlaySFX(class USoundBase* Sound, const struct FVector& Location, bool IsDrop, bool IsOnlyOne, bool IsReplace);
	void UserConstructionScript();
	void CanFire(bool* Result);
	void Reset();
	void ExecFire(int32 DeadlyBulletNum, const struct FVector& TargetPoint, bool IsUseOffset_0, bool IsSpecial_0, bool IsNpc_0, bool FromRightHand);
	void PlayVFX(class UParticleSystem* VFX, const struct FTransform& Transform, class UParticleSystemComponent** ReturnVFX);
	void PlaySFX(class USoundBase* Sound, const struct FVector& Location, bool IsDrop, bool IsOnlyOne, bool IsReplace);
	void ExecReload();
	void StopReload();
	void ChangeClip(bool FillBullet);
	void StopFire();
	void UpdateFire();
	void GetAimOffsetDirection(struct FVector* Direction);
	void GetAimDirection(struct FVector* Direction);
	void DropWeapon();
	void UpdateAimLocation(const struct FVector& Location);
	bool CheckCD();
	void GetSniperAimDirection(struct FVector* Direction);
	void PullBoltFinished();
	void PullBoltMaxLength();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPWpnBase_C">();
	}
	static class ABPWpnBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABPWpnBase_C>();
	}
};
static_assert(alignof(ABPWpnBase_C) == 0x000008, "Wrong alignment on ABPWpnBase_C");
static_assert(sizeof(ABPWpnBase_C) == 0x000470, "Wrong size on ABPWpnBase_C");
static_assert(offsetof(ABPWpnBase_C, UberGraphFrame) == 0x000328, "Member 'ABPWpnBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABPWpnBase_C, FireSparkPoint) == 0x000330, "Member 'ABPWpnBase_C::FireSparkPoint' has a wrong offset!");
static_assert(offsetof(ABPWpnBase_C, ProjectilePoint) == 0x000338, "Member 'ABPWpnBase_C::ProjectilePoint' has a wrong offset!");
static_assert(offsetof(ABPWpnBase_C, ShellDropPoint) == 0x000340, "Member 'ABPWpnBase_C::ShellDropPoint' has a wrong offset!");
static_assert(offsetof(ABPWpnBase_C, AimPoint_End) == 0x000348, "Member 'ABPWpnBase_C::AimPoint_End' has a wrong offset!");
static_assert(offsetof(ABPWpnBase_C, AimPoint_Start) == 0x000350, "Member 'ABPWpnBase_C::AimPoint_Start' has a wrong offset!");
static_assert(offsetof(ABPWpnBase_C, WeaponMesh) == 0x000358, "Member 'ABPWpnBase_C::WeaponMesh' has a wrong offset!");
static_assert(offsetof(ABPWpnBase_C, DefaultSceneRoot) == 0x000360, "Member 'ABPWpnBase_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABPWpnBase_C, BulletClass) == 0x000368, "Member 'ABPWpnBase_C::BulletClass' has a wrong offset!");
static_assert(offsetof(ABPWpnBase_C, Configs) == 0x000370, "Member 'ABPWpnBase_C::Configs' has a wrong offset!");
static_assert(offsetof(ABPWpnBase_C, EnableVR) == 0x0003F0, "Member 'ABPWpnBase_C::EnableVR' has a wrong offset!");
static_assert(offsetof(ABPWpnBase_C, CurrentClipBulletNum) == 0x0003F4, "Member 'ABPWpnBase_C::CurrentClipBulletNum' has a wrong offset!");
static_assert(offsetof(ABPWpnBase_C, LeftClipBulletNum) == 0x0003F8, "Member 'ABPWpnBase_C::LeftClipBulletNum' has a wrong offset!");
static_assert(offsetof(ABPWpnBase_C, LeftClipNum) == 0x0003FC, "Member 'ABPWpnBase_C::LeftClipNum' has a wrong offset!");
static_assert(offsetof(ABPWpnBase_C, IsDropDown) == 0x000400, "Member 'ABPWpnBase_C::IsDropDown' has a wrong offset!");
static_assert(offsetof(ABPWpnBase_C, BulletCD) == 0x000404, "Member 'ABPWpnBase_C::BulletCD' has a wrong offset!");
static_assert(offsetof(ABPWpnBase_C, DeltaTime) == 0x000408, "Member 'ABPWpnBase_C::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABPWpnBase_C, WeaponState) == 0x00040C, "Member 'ABPWpnBase_C::WeaponState' has a wrong offset!");
static_assert(offsetof(ABPWpnBase_C, SpawnProjectile) == 0x000410, "Member 'ABPWpnBase_C::SpawnProjectile' has a wrong offset!");
static_assert(offsetof(ABPWpnBase_C, SingeShootCount) == 0x000420, "Member 'ABPWpnBase_C::SingeShootCount' has a wrong offset!");
static_assert(offsetof(ABPWpnBase_C, TargetLocation) == 0x000424, "Member 'ABPWpnBase_C::TargetLocation' has a wrong offset!");
static_assert(offsetof(ABPWpnBase_C, IsSpecial) == 0x000430, "Member 'ABPWpnBase_C::IsSpecial' has a wrong offset!");
static_assert(offsetof(ABPWpnBase_C, IsUseOffset) == 0x000431, "Member 'ABPWpnBase_C::IsUseOffset' has a wrong offset!");
static_assert(offsetof(ABPWpnBase_C, IsNpc) == 0x000432, "Member 'ABPWpnBase_C::IsNpc' has a wrong offset!");
static_assert(offsetof(ABPWpnBase_C, SndAttenuation) == 0x000438, "Member 'ABPWpnBase_C::SndAttenuation' has a wrong offset!");
static_assert(offsetof(ABPWpnBase_C, SndConcurrency) == 0x000440, "Member 'ABPWpnBase_C::SndConcurrency' has a wrong offset!");
static_assert(offsetof(ABPWpnBase_C, SoundFire) == 0x000448, "Member 'ABPWpnBase_C::SoundFire' has a wrong offset!");
static_assert(offsetof(ABPWpnBase_C, SoundDrop) == 0x000450, "Member 'ABPWpnBase_C::SoundDrop' has a wrong offset!");
static_assert(offsetof(ABPWpnBase_C, DeadlyCount) == 0x000458, "Member 'ABPWpnBase_C::DeadlyCount' has a wrong offset!");
static_assert(offsetof(ABPWpnBase_C, IsRightHandWeapon) == 0x00045C, "Member 'ABPWpnBase_C::IsRightHandWeapon' has a wrong offset!");
static_assert(offsetof(ABPWpnBase_C, IsNeedDropShell) == 0x00045D, "Member 'ABPWpnBase_C::IsNeedDropShell' has a wrong offset!");
static_assert(offsetof(ABPWpnBase_C, PlayEmpty) == 0x00045E, "Member 'ABPWpnBase_C::PlayEmpty' has a wrong offset!");
static_assert(offsetof(ABPWpnBase_C, EnableSpecial) == 0x00045F, "Member 'ABPWpnBase_C::EnableSpecial' has a wrong offset!");
static_assert(offsetof(ABPWpnBase_C, CanInfinite) == 0x000460, "Member 'ABPWpnBase_C::CanInfinite' has a wrong offset!");
static_assert(offsetof(ABPWpnBase_C, IsInfinite) == 0x000461, "Member 'ABPWpnBase_C::IsInfinite' has a wrong offset!");
static_assert(offsetof(ABPWpnBase_C, IsPollBoltFinished) == 0x000462, "Member 'ABPWpnBase_C::IsPollBoltFinished' has a wrong offset!");
static_assert(offsetof(ABPWpnBase_C, IsOneTimeWeapon) == 0x000463, "Member 'ABPWpnBase_C::IsOneTimeWeapon' has a wrong offset!");
static_assert(offsetof(ABPWpnBase_C, IsNeedPullBolt_Private) == 0x000464, "Member 'ABPWpnBase_C::IsNeedPullBolt_Private' has a wrong offset!");
static_assert(offsetof(ABPWpnBase_C, IsNeedManalReload_Private) == 0x000465, "Member 'ABPWpnBase_C::IsNeedManalReload_Private' has a wrong offset!");
static_assert(offsetof(ABPWpnBase_C, IsCanReload) == 0x000466, "Member 'ABPWpnBase_C::IsCanReload' has a wrong offset!");
static_assert(offsetof(ABPWpnBase_C, IsBothHandWeapon) == 0x000467, "Member 'ABPWpnBase_C::IsBothHandWeapon' has a wrong offset!");
static_assert(offsetof(ABPWpnBase_C, IsCouldSecondHandHold) == 0x000468, "Member 'ABPWpnBase_C::IsCouldSecondHandHold' has a wrong offset!");
static_assert(offsetof(ABPWpnBase_C, HasBulletInWeapon) == 0x000469, "Member 'ABPWpnBase_C::HasBulletInWeapon' has a wrong offset!");
static_assert(offsetof(ABPWpnBase_C, IsPullingBolt_Private) == 0x00046A, "Member 'ABPWpnBase_C::IsPullingBolt_Private' has a wrong offset!");
static_assert(offsetof(ABPWpnBase_C, IsDropClip_Private) == 0x00046B, "Member 'ABPWpnBase_C::IsDropClip_Private' has a wrong offset!");
static_assert(offsetof(ABPWpnBase_C, IsFirstInsertClip) == 0x00046C, "Member 'ABPWpnBase_C::IsFirstInsertClip' has a wrong offset!");
static_assert(offsetof(ABPWpnBase_C, IsDoEmptyCheck) == 0x00046D, "Member 'ABPWpnBase_C::IsDoEmptyCheck' has a wrong offset!");
static_assert(offsetof(ABPWpnBase_C, IsReloadOnlyOneBullet) == 0x00046E, "Member 'ABPWpnBase_C::IsReloadOnlyOneBullet' has a wrong offset!");

}

