#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Lv2_Wpn_Sniper

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "EnumDifficuty_structs.hpp"
#include "BPWeaponBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Lv2_Wpn_Sniper.BP_Lv2_Wpn_Sniper_C
// 0x00F0 (0x0970 - 0x0880)
#pragma pack(push, 0x1)
class alignas(0x10) ABP_Lv2_Wpn_Sniper_C : public ABPWeaponBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Lv2_Wpn_Sniper_C;                // 0x0880(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USkeletalMeshComponent*                 scope;                                             // 0x0888(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        CamRoot;                                           // 0x0890(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Rightpoint;                                        // 0x0898(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Leftpoint;                                         // 0x08A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      Capsule;                                           // 0x08A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Plane_0;                                           // 0x08B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Center;                                            // 0x08B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         minFOV;                                            // 0x08C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          lsPCSniper_;                                       // 0x08C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8C5[0x3];                                      // 0x08C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         maxFOV;                                            // 0x08C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StandardFOVLEN;                                    // 0x08CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         minShakeLen;                                       // 0x08D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                lastPos;                                           // 0x08D4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABPDefaultHand_C*                       parentModel;                                       // 0x08E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Lv2_Gia_C*                          targetNpc;                                         // 0x08E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneCaptureComponent2D*               targetSceneCapture;                                // 0x08F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UKRVRMotionController_C*                Control;                                           // 0x08F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               lastRot;                                           // 0x0900(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                lastFramePos;                                      // 0x090C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FocusLen;                                          // 0x0918(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TraceLen;                                          // 0x091C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                hitTargetPos;                                      // 0x0920(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                orgCenterPOS;                                      // 0x092C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Lv2_NPCBase_C*                      hitTarget;                                         // 0x0938(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          lshitHead_;                                        // 0x0940(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          lsHitBody_;                                        // 0x0941(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_942[0x2];                                      // 0x0942(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         lerpSpeed;                                         // 0x0944(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MatInstanc;                                        // 0x0948(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaterialIndex;                                     // 0x0950(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BulletNum;                                         // 0x0954(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ALv2_SniperRifle_C*                     SniperRift;                                        // 0x0958(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScopeScale;                                        // 0x0960(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScopeScale_Max;                                    // 0x0964(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Lv2_Wpn_Sniper(int32 EntryPoint);
	void BndEvt__Capsule_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__Capsule_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void DisplayTexture(bool Visible);
	void UpdateMark(class UMaterialInstanceDynamic* DynamicMat);
	bool AttachScope();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Lv2_Wpn_Sniper_C">();
	}
	static class ABP_Lv2_Wpn_Sniper_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Lv2_Wpn_Sniper_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABP_Lv2_Wpn_Sniper_C) == 0x000010, "Wrong alignment on ABP_Lv2_Wpn_Sniper_C");
static_assert(sizeof(ABP_Lv2_Wpn_Sniper_C) == 0x000970, "Wrong size on ABP_Lv2_Wpn_Sniper_C");
static_assert(offsetof(ABP_Lv2_Wpn_Sniper_C, UberGraphFrame_BP_Lv2_Wpn_Sniper_C) == 0x000880, "Member 'ABP_Lv2_Wpn_Sniper_C::UberGraphFrame_BP_Lv2_Wpn_Sniper_C' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_Wpn_Sniper_C, scope) == 0x000888, "Member 'ABP_Lv2_Wpn_Sniper_C::scope' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_Wpn_Sniper_C, CamRoot) == 0x000890, "Member 'ABP_Lv2_Wpn_Sniper_C::CamRoot' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_Wpn_Sniper_C, Rightpoint) == 0x000898, "Member 'ABP_Lv2_Wpn_Sniper_C::Rightpoint' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_Wpn_Sniper_C, Leftpoint) == 0x0008A0, "Member 'ABP_Lv2_Wpn_Sniper_C::Leftpoint' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_Wpn_Sniper_C, Capsule) == 0x0008A8, "Member 'ABP_Lv2_Wpn_Sniper_C::Capsule' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_Wpn_Sniper_C, Plane_0) == 0x0008B0, "Member 'ABP_Lv2_Wpn_Sniper_C::Plane_0' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_Wpn_Sniper_C, Center) == 0x0008B8, "Member 'ABP_Lv2_Wpn_Sniper_C::Center' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_Wpn_Sniper_C, minFOV) == 0x0008C0, "Member 'ABP_Lv2_Wpn_Sniper_C::minFOV' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_Wpn_Sniper_C, lsPCSniper_) == 0x0008C4, "Member 'ABP_Lv2_Wpn_Sniper_C::lsPCSniper_' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_Wpn_Sniper_C, maxFOV) == 0x0008C8, "Member 'ABP_Lv2_Wpn_Sniper_C::maxFOV' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_Wpn_Sniper_C, StandardFOVLEN) == 0x0008CC, "Member 'ABP_Lv2_Wpn_Sniper_C::StandardFOVLEN' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_Wpn_Sniper_C, minShakeLen) == 0x0008D0, "Member 'ABP_Lv2_Wpn_Sniper_C::minShakeLen' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_Wpn_Sniper_C, lastPos) == 0x0008D4, "Member 'ABP_Lv2_Wpn_Sniper_C::lastPos' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_Wpn_Sniper_C, parentModel) == 0x0008E0, "Member 'ABP_Lv2_Wpn_Sniper_C::parentModel' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_Wpn_Sniper_C, targetNpc) == 0x0008E8, "Member 'ABP_Lv2_Wpn_Sniper_C::targetNpc' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_Wpn_Sniper_C, targetSceneCapture) == 0x0008F0, "Member 'ABP_Lv2_Wpn_Sniper_C::targetSceneCapture' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_Wpn_Sniper_C, Control) == 0x0008F8, "Member 'ABP_Lv2_Wpn_Sniper_C::Control' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_Wpn_Sniper_C, lastRot) == 0x000900, "Member 'ABP_Lv2_Wpn_Sniper_C::lastRot' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_Wpn_Sniper_C, lastFramePos) == 0x00090C, "Member 'ABP_Lv2_Wpn_Sniper_C::lastFramePos' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_Wpn_Sniper_C, FocusLen) == 0x000918, "Member 'ABP_Lv2_Wpn_Sniper_C::FocusLen' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_Wpn_Sniper_C, TraceLen) == 0x00091C, "Member 'ABP_Lv2_Wpn_Sniper_C::TraceLen' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_Wpn_Sniper_C, hitTargetPos) == 0x000920, "Member 'ABP_Lv2_Wpn_Sniper_C::hitTargetPos' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_Wpn_Sniper_C, orgCenterPOS) == 0x00092C, "Member 'ABP_Lv2_Wpn_Sniper_C::orgCenterPOS' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_Wpn_Sniper_C, hitTarget) == 0x000938, "Member 'ABP_Lv2_Wpn_Sniper_C::hitTarget' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_Wpn_Sniper_C, lshitHead_) == 0x000940, "Member 'ABP_Lv2_Wpn_Sniper_C::lshitHead_' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_Wpn_Sniper_C, lsHitBody_) == 0x000941, "Member 'ABP_Lv2_Wpn_Sniper_C::lsHitBody_' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_Wpn_Sniper_C, lerpSpeed) == 0x000944, "Member 'ABP_Lv2_Wpn_Sniper_C::lerpSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_Wpn_Sniper_C, MatInstanc) == 0x000948, "Member 'ABP_Lv2_Wpn_Sniper_C::MatInstanc' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_Wpn_Sniper_C, MaterialIndex) == 0x000950, "Member 'ABP_Lv2_Wpn_Sniper_C::MaterialIndex' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_Wpn_Sniper_C, BulletNum) == 0x000954, "Member 'ABP_Lv2_Wpn_Sniper_C::BulletNum' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_Wpn_Sniper_C, SniperRift) == 0x000958, "Member 'ABP_Lv2_Wpn_Sniper_C::SniperRift' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_Wpn_Sniper_C, ScopeScale) == 0x000960, "Member 'ABP_Lv2_Wpn_Sniper_C::ScopeScale' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_Wpn_Sniper_C, ScopeScale_Max) == 0x000964, "Member 'ABP_Lv2_Wpn_Sniper_C::ScopeScale_Max' has a wrong offset!");

}

