#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CharacterPhone

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SiliconRising_structs.hpp"
#include "AugmentedReality_structs.hpp"
#include "BP_CharacterBase_classes.hpp"
#include "InputCore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CharacterPhone.BP_CharacterPhone_C
// 0x00F0 (0x0DC0 - 0x0CD0)
class ABP_CharacterPhone_C final : public ABP_CharacterBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_CharacterPhone_C;                // 0x0CD0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        gunAttachRevol;                                    // 0x0CD8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        gunAttachGunBy;                                    // 0x0CE0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        gunAttachRevolL;                                   // 0x0CE8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        gunAttachGunByL;                                   // 0x0CF0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        gunAttach;                                         // 0x0CF8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        gunAttachL;                                        // 0x0D00(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene2_0;                                          // 0x0D08(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_2_NewTrack_2_76C1DDD446086EE3358A0497EBB4EE02; // 0x0D10(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_2__Direction_76C1DDD446086EE3358A0497EBB4EE02; // 0x0D14(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D15[0x3];                                      // 0x0D15(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_2;                                        // 0x0D18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          lsPhone;                                           // 0x0D20(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D21[0x3];                                      // 0x0D21(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ViewPortWidth;                                     // 0x0D24(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ViewPortHeight;                                    // 0x0D28(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D2C[0x4];                                      // 0x0D2C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_RightHandPick_0;                          // 0x0D30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaTime_0;                                       // 0x0D38(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         numPlanesDetected;                                 // 0x0D3C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EARTrackingQuality                            TrackingQuality;                                   // 0x0D40(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          blsNeedDetectPlane;                                // 0x0D41(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D42[0x2];                                      // 0x0D42(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         detectPlaneY;                                      // 0x0D44(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UARTips_C*                              ARTips;                                            // 0x0D48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bWaitForAnyKey;                                    // 0x0D50(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D51[0x7];                                      // 0x0D51(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_IndicationTip_C*                    arrowTip;                                          // 0x0D58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          lsAnroid;                                          // 0x0D60(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D61[0x7];                                      // 0x0D61(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        Tiles;                                             // 0x0D68(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FVector                                lastCamraPos;                                      // 0x0D78(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          lsTouchMoving;                                     // 0x0D84(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D85[0x3];                                      // 0x0D85(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              FirstTouchPos;                                     // 0x0D88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TouchMovingLen;                                    // 0x0D90(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D94[0x4];                                      // 0x0D94(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMobileHUD_C*                           HUD;                                               // 0x0D98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          lsLeftSwitchEnable_;                               // 0x0DA0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          lsRightSwitchEnable_;                              // 0x0DA1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DA2[0x6];                                      // 0x0DA2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerSwitchPoint_C*                ALeftSP;                                           // 0x0DA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerSwitchPoint_C*                ARightSP;                                          // 0x0DB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          lsEnterByMM;                                       // 0x0DB8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_CharacterPhone(int32 EntryPoint);
	void Evt_GetItem_phone(bool IsRightHand, EItemTypes ItemType, const struct FTransform& StartTransform, class AActor* CurrentItemActor, class AActor* ItemActor);
	void Event_SwitchPoint(bool lsLeft);
	void BndEvt__BoxHead_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__BoxHead_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void InpTchEvt_Pressed(ETouchIndex FingerIndex, const struct FVector& Location);
	void InpTchEvt_Released(ETouchIndex FingerIndex, const struct FVector& Location);
	void InpTchEvt_Moved(ETouchIndex FingerIndex, const struct FVector& Location);
	void Timeline_2__UpdateFunc();
	void Timeline_2__FinishedFunc();
	void GetAnimPos(struct FVector* AimPos);
	void GetWeapon(class AActor* inputIN);
	void DetermineTrackingQuality(EARTrackingQuality* Tracking);
	void DisplayDebugTrackingInfo();
	void UpdateCameraOffsetZ(float offsetZ);
	void FindPlanesForARCORE();
	void DoHitTestForARCORE(class APlayerController* Player, const struct FVector2D& Input);
	void AjustCameraMoving();
	void WeaponFire(class ABPWpnBase_C* curWeapon, bool lsRight);
	void GetTouchInfo(ETouchIndex FingerIndex, bool* lsLeft);
	void SetHoldItemR(class AActor* _input);
	void SetHoldItemL(class AActor* _input);
	void SpawnWeaponPhone(bool lsRight, EItemTypes wType);
	void CreateHUD();
	void LevelBegin();
	void CheckSwitchPointEnabled_();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void InitCurWeapon();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CharacterPhone_C">();
	}
	static class ABP_CharacterPhone_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_CharacterPhone_C>();
	}
};
static_assert(alignof(ABP_CharacterPhone_C) == 0x000010, "Wrong alignment on ABP_CharacterPhone_C");
static_assert(sizeof(ABP_CharacterPhone_C) == 0x000DC0, "Wrong size on ABP_CharacterPhone_C");
static_assert(offsetof(ABP_CharacterPhone_C, UberGraphFrame_BP_CharacterPhone_C) == 0x000CD0, "Member 'ABP_CharacterPhone_C::UberGraphFrame_BP_CharacterPhone_C' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPhone_C, gunAttachRevol) == 0x000CD8, "Member 'ABP_CharacterPhone_C::gunAttachRevol' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPhone_C, gunAttachGunBy) == 0x000CE0, "Member 'ABP_CharacterPhone_C::gunAttachGunBy' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPhone_C, gunAttachRevolL) == 0x000CE8, "Member 'ABP_CharacterPhone_C::gunAttachRevolL' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPhone_C, gunAttachGunByL) == 0x000CF0, "Member 'ABP_CharacterPhone_C::gunAttachGunByL' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPhone_C, gunAttach) == 0x000CF8, "Member 'ABP_CharacterPhone_C::gunAttach' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPhone_C, gunAttachL) == 0x000D00, "Member 'ABP_CharacterPhone_C::gunAttachL' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPhone_C, Scene2_0) == 0x000D08, "Member 'ABP_CharacterPhone_C::Scene2_0' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPhone_C, Timeline_2_NewTrack_2_76C1DDD446086EE3358A0497EBB4EE02) == 0x000D10, "Member 'ABP_CharacterPhone_C::Timeline_2_NewTrack_2_76C1DDD446086EE3358A0497EBB4EE02' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPhone_C, Timeline_2__Direction_76C1DDD446086EE3358A0497EBB4EE02) == 0x000D14, "Member 'ABP_CharacterPhone_C::Timeline_2__Direction_76C1DDD446086EE3358A0497EBB4EE02' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPhone_C, Timeline_2) == 0x000D18, "Member 'ABP_CharacterPhone_C::Timeline_2' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPhone_C, lsPhone) == 0x000D20, "Member 'ABP_CharacterPhone_C::lsPhone' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPhone_C, ViewPortWidth) == 0x000D24, "Member 'ABP_CharacterPhone_C::ViewPortWidth' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPhone_C, ViewPortHeight) == 0x000D28, "Member 'ABP_CharacterPhone_C::ViewPortHeight' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPhone_C, Timeline_RightHandPick_0) == 0x000D30, "Member 'ABP_CharacterPhone_C::Timeline_RightHandPick_0' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPhone_C, DeltaTime_0) == 0x000D38, "Member 'ABP_CharacterPhone_C::DeltaTime_0' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPhone_C, numPlanesDetected) == 0x000D3C, "Member 'ABP_CharacterPhone_C::numPlanesDetected' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPhone_C, TrackingQuality) == 0x000D40, "Member 'ABP_CharacterPhone_C::TrackingQuality' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPhone_C, blsNeedDetectPlane) == 0x000D41, "Member 'ABP_CharacterPhone_C::blsNeedDetectPlane' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPhone_C, detectPlaneY) == 0x000D44, "Member 'ABP_CharacterPhone_C::detectPlaneY' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPhone_C, ARTips) == 0x000D48, "Member 'ABP_CharacterPhone_C::ARTips' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPhone_C, bWaitForAnyKey) == 0x000D50, "Member 'ABP_CharacterPhone_C::bWaitForAnyKey' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPhone_C, arrowTip) == 0x000D58, "Member 'ABP_CharacterPhone_C::arrowTip' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPhone_C, lsAnroid) == 0x000D60, "Member 'ABP_CharacterPhone_C::lsAnroid' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPhone_C, Tiles) == 0x000D68, "Member 'ABP_CharacterPhone_C::Tiles' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPhone_C, lastCamraPos) == 0x000D78, "Member 'ABP_CharacterPhone_C::lastCamraPos' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPhone_C, lsTouchMoving) == 0x000D84, "Member 'ABP_CharacterPhone_C::lsTouchMoving' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPhone_C, FirstTouchPos) == 0x000D88, "Member 'ABP_CharacterPhone_C::FirstTouchPos' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPhone_C, TouchMovingLen) == 0x000D90, "Member 'ABP_CharacterPhone_C::TouchMovingLen' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPhone_C, HUD) == 0x000D98, "Member 'ABP_CharacterPhone_C::HUD' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPhone_C, lsLeftSwitchEnable_) == 0x000DA0, "Member 'ABP_CharacterPhone_C::lsLeftSwitchEnable_' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPhone_C, lsRightSwitchEnable_) == 0x000DA1, "Member 'ABP_CharacterPhone_C::lsRightSwitchEnable_' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPhone_C, ALeftSP) == 0x000DA8, "Member 'ABP_CharacterPhone_C::ALeftSP' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPhone_C, ARightSP) == 0x000DB0, "Member 'ABP_CharacterPhone_C::ARightSP' has a wrong offset!");
static_assert(offsetof(ABP_CharacterPhone_C, lsEnterByMM) == 0x000DB8, "Member 'ABP_CharacterPhone_C::lsEnterByMM' has a wrong offset!");

}

