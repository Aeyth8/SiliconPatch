#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Wpn_Pistol

#include "Basic.hpp"


namespace SDK::Params
{

// Function Wpn_Pistol.Wpn_Pistol_C.ExecuteUbergraph_Wpn_Pistol
// 0x0020 (0x0020 - 0x0000)
struct Wpn_Pistol_C_ExecuteUbergraph_Wpn_Pistol final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_Value;                          // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsFromRightHand;                      // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Hand;                                 // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     CallFunc_GetMaterial_ReturnValue;                  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wpn_Pistol_C_ExecuteUbergraph_Wpn_Pistol) == 0x000008, "Wrong alignment on Wpn_Pistol_C_ExecuteUbergraph_Wpn_Pistol");
static_assert(sizeof(Wpn_Pistol_C_ExecuteUbergraph_Wpn_Pistol) == 0x000020, "Wrong size on Wpn_Pistol_C_ExecuteUbergraph_Wpn_Pistol");
static_assert(offsetof(Wpn_Pistol_C_ExecuteUbergraph_Wpn_Pistol, EntryPoint) == 0x000000, "Member 'Wpn_Pistol_C_ExecuteUbergraph_Wpn_Pistol::EntryPoint' has a wrong offset!");
static_assert(offsetof(Wpn_Pistol_C_ExecuteUbergraph_Wpn_Pistol, CallFunc_HasAuthority_ReturnValue) == 0x000004, "Member 'Wpn_Pistol_C_ExecuteUbergraph_Wpn_Pistol::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Pistol_C_ExecuteUbergraph_Wpn_Pistol, K2Node_CustomEvent_Value) == 0x000005, "Member 'Wpn_Pistol_C_ExecuteUbergraph_Wpn_Pistol::K2Node_CustomEvent_Value' has a wrong offset!");
static_assert(offsetof(Wpn_Pistol_C_ExecuteUbergraph_Wpn_Pistol, K2Node_Event_IsFromRightHand) == 0x000006, "Member 'Wpn_Pistol_C_ExecuteUbergraph_Wpn_Pistol::K2Node_Event_IsFromRightHand' has a wrong offset!");
static_assert(offsetof(Wpn_Pistol_C_ExecuteUbergraph_Wpn_Pistol, K2Node_Event_Hand) == 0x000008, "Member 'Wpn_Pistol_C_ExecuteUbergraph_Wpn_Pistol::K2Node_Event_Hand' has a wrong offset!");
static_assert(offsetof(Wpn_Pistol_C_ExecuteUbergraph_Wpn_Pistol, CallFunc_GetMaterial_ReturnValue) == 0x000010, "Member 'Wpn_Pistol_C_ExecuteUbergraph_Wpn_Pistol::CallFunc_GetMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Pistol_C_ExecuteUbergraph_Wpn_Pistol, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000018, "Member 'Wpn_Pistol_C_ExecuteUbergraph_Wpn_Pistol::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");

// Function Wpn_Pistol.Wpn_Pistol_C.FirstTutorial
// 0x0001 (0x0001 - 0x0000)
struct Wpn_Pistol_C_FirstTutorial final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wpn_Pistol_C_FirstTutorial) == 0x000001, "Wrong alignment on Wpn_Pistol_C_FirstTutorial");
static_assert(sizeof(Wpn_Pistol_C_FirstTutorial) == 0x000001, "Wrong size on Wpn_Pistol_C_FirstTutorial");
static_assert(offsetof(Wpn_Pistol_C_FirstTutorial, Value) == 0x000000, "Member 'Wpn_Pistol_C_FirstTutorial::Value' has a wrong offset!");

// Function Wpn_Pistol.Wpn_Pistol_C.OnLineTriggerPull
// 0x0010 (0x0010 - 0x0000)
struct Wpn_Pistol_C_OnLineTriggerPull final
{
public:
	bool                                          IsFromRightHand;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 hand;                                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wpn_Pistol_C_OnLineTriggerPull) == 0x000008, "Wrong alignment on Wpn_Pistol_C_OnLineTriggerPull");
static_assert(sizeof(Wpn_Pistol_C_OnLineTriggerPull) == 0x000010, "Wrong size on Wpn_Pistol_C_OnLineTriggerPull");
static_assert(offsetof(Wpn_Pistol_C_OnLineTriggerPull, IsFromRightHand) == 0x000000, "Member 'Wpn_Pistol_C_OnLineTriggerPull::IsFromRightHand' has a wrong offset!");
static_assert(offsetof(Wpn_Pistol_C_OnLineTriggerPull, hand) == 0x000008, "Member 'Wpn_Pistol_C_OnLineTriggerPull::hand' has a wrong offset!");

}

