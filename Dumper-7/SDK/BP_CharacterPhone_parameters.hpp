#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CharacterPhone

#include "Basic.hpp"

#include "AugmentedReality_structs.hpp"
#include "SiliconRising_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK::Params
{

// Function BP_CharacterPhone.BP_CharacterPhone_C.ExecuteUbergraph_BP_CharacterPhone
// 0x0400 (0x0400 - 0x0000)
struct BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMer2GameInstance_C*                    K2Node_DynamicCast_AsMer_2Game_Instance;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_lsAnroid_blsAndroid;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetInputVectorAxisValue_ReturnValue;      // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SampleFilter_rate;                        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_SampleFilter_contentx;                    // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_SampleFilter_contenty;                    // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_SampleFilter_contentz;                    // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UARTips_C*                              CallFunc_Create_ReturnValue;                       // 0x0070(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFirstPersonHUDWidget_C*                CallFunc_Create_ReturnValue1;                      // 0x0080(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue1;         // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetViewportSize_ReturnValue;              // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent1;   // 0x00A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor1;            // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp1;             // 0x00B8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex1;        // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x00C8(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0150(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0160(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16C[0x4];                                      // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue1;             // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue1;     // 0x0178(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_184[0x4];                                      // 0x0184(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMer2GameInstance_C*                    K2Node_DynamicCast_AsMer_2Game_Instance1;          // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue1;                 // 0x0191(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0192(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0193(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0194(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckSwitchCD_IsOK;                       // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue2;                 // 0x01A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A2[0x2];                                      // 0x01A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_VLerp_ReturnValue;                        // 0x01A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x01B0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_239[0x3];                                      // 0x0239(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable;                              // 0x023C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETouchIndex                                   Temp_byte_Variable;                                // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue1;         // 0x0249(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetTouchInfo_lsleft;                      // 0x024A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_24B[0x1];                                      // 0x024B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetInputTouchState_LocationX;             // 0x024C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetInputTouchState_LocationY;             // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetInputTouchState_bIsCurrentlyPressed;   // 0x0254(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETouchIndex                                   K2Node_InputTouchEvent_FingerIndex;                // 0x0255(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_256[0x2];                                      // 0x0256(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_InputTouchEvent_Location;                   // 0x0258(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0264(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_265[0x3];                                      // 0x0265(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue1;         // 0x0270(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_lsLeft;                         // 0x027C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_27D[0x3];                                      // 0x027D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0280(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue2;         // 0x028C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RLerp_ReturnValue;                        // 0x0298(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x02A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x02A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A6[0x2];                                      // 0x02A6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue3;         // 0x02A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue1;         // 0x02B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x02C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x02CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x02D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x02D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x02D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x02E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_X;                            // 0x02F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x02F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x02F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x02FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0300(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETouchIndex                                   K2Node_InputTouchEvent_FingerIndex1;               // 0x030C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_30D[0x3];                                      // 0x030D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_InputTouchEvent_Location1;                  // 0x0310(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31C[0x4];                                      // 0x031C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue2;         // 0x0320(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetInputTouchState_LocationX1;            // 0x0328(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetInputTouchState_LocationY1;            // 0x032C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetInputTouchState_bIsCurrentlyPressed1;  // 0x0330(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_331[0x3];                                      // 0x0331(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0334(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue;    // 0x033C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize2D_ReturnValue;                      // 0x0344(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X1;                         // 0x0348(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y1;                         // 0x034C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue1;           // 0x0350(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue1;        // 0x0354(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_IsRightHand;                    // 0x0355(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemTypes                                    K2Node_CustomEvent_ItemType;                       // 0x0356(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_357[0x9];                                      // 0x0357(0x0009)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             K2Node_CustomEvent_StartTransform;                 // 0x0360(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 K2Node_CustomEvent_CurrentItemActor;               // 0x0390(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_ItemActor;                      // 0x0398(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_ItemBase_C*                         K2Node_DynamicCast_AsBP_Item_Base;                 // 0x03A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x03A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue3;                 // 0x03A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue1;                  // 0x03AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue2;                  // 0x03AB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETouchIndex                                   K2Node_InputTouchEvent_FingerIndex2;               // 0x03AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3AD[0x3];                                      // 0x03AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_InputTouchEvent_Location2;                  // 0x03B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckSwitchCD_IsOK1;                      // 0x03BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3BD[0x3];                                      // 0x03BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue1;              // 0x03C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue2;           // 0x03C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x03C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x03CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x03D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll1;                       // 0x03DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch1;                      // 0x03E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw1;                        // 0x03E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue1;                 // 0x03E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x03F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone) == 0x000010, "Wrong alignment on BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone");
static_assert(sizeof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone) == 0x000400, "Wrong size on BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, EntryPoint) == 0x000000, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000004, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_GetGameInstance_ReturnValue) == 0x000010, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, K2Node_DynamicCast_AsMer_2Game_Instance) == 0x000018, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::K2Node_DynamicCast_AsMer_2Game_Instance' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_lsAnroid_blsAndroid) == 0x000021, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_lsAnroid_blsAndroid' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000022, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000023, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_GetInputVectorAxisValue_ReturnValue) == 0x000024, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_GetInputVectorAxisValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_SampleFilter_rate) == 0x000030, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_SampleFilter_rate' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_SampleFilter_contentx) == 0x000038, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_SampleFilter_contentx' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_SampleFilter_contenty) == 0x000048, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_SampleFilter_contenty' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_SampleFilter_contentz) == 0x000058, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_SampleFilter_contentz' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_IsVisible_ReturnValue) == 0x000068, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_Not_PreBool_ReturnValue) == 0x000069, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_Create_ReturnValue) == 0x000070, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_GetPlayerController_ReturnValue) == 0x000078, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_Create_ReturnValue1) == 0x000080, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_Create_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_GetPlayerController_ReturnValue1) == 0x000088, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_GetPlayerController_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000090, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, K2Node_Event_DeltaSeconds) == 0x000094, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_GetViewportSize_ReturnValue) == 0x000098, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_GetViewportSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_BreakVector2D_X) == 0x0000A0, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_BreakVector2D_Y) == 0x0000A4, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, K2Node_ComponentBoundEvent_OverlappedComponent1) == 0x0000A8, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::K2Node_ComponentBoundEvent_OverlappedComponent1' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, K2Node_ComponentBoundEvent_OtherActor1) == 0x0000B0, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::K2Node_ComponentBoundEvent_OtherActor1' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, K2Node_ComponentBoundEvent_OtherComp1) == 0x0000B8, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::K2Node_ComponentBoundEvent_OtherComp1' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, K2Node_ComponentBoundEvent_OtherBodyIndex1) == 0x0000C0, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::K2Node_ComponentBoundEvent_OtherBodyIndex1' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, K2Node_ComponentBoundEvent_bFromSweep) == 0x0000C4, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, K2Node_ComponentBoundEvent_SweepResult) == 0x0000C8, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000150, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, K2Node_ComponentBoundEvent_OtherActor) == 0x000158, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, K2Node_ComponentBoundEvent_OtherComp) == 0x000160, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x000168, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_GetGameInstance_ReturnValue1) == 0x000170, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_GetGameInstance_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_K2_GetComponentLocation_ReturnValue1) == 0x000178, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_K2_GetComponentLocation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, K2Node_DynamicCast_AsMer_2Game_Instance1) == 0x000188, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::K2Node_DynamicCast_AsMer_2Game_Instance1' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, K2Node_DynamicCast_bSuccess1) == 0x000190, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_Not_PreBool_ReturnValue1) == 0x000191, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_Not_PreBool_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_BooleanAND_ReturnValue) == 0x000192, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000193, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000194, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_CheckSwitchCD_IsOK) == 0x0001A0, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_CheckSwitchCD_IsOK' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_Not_PreBool_ReturnValue2) == 0x0001A1, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_Not_PreBool_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_VLerp_ReturnValue) == 0x0001A4, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_VLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x0001B0, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_K2_SetActorLocation_ReturnValue) == 0x000238, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, Temp_struct_Variable) == 0x00023C, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, Temp_byte_Variable) == 0x000248, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_EqualEqual_ByteByte_ReturnValue1) == 0x000249, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_EqualEqual_ByteByte_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_GetTouchInfo_lsleft) == 0x00024A, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_GetTouchInfo_lsleft' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_GetInputTouchState_LocationX) == 0x00024C, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_GetInputTouchState_LocationX' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_GetInputTouchState_LocationY) == 0x000250, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_GetInputTouchState_LocationY' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_GetInputTouchState_bIsCurrentlyPressed) == 0x000254, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_GetInputTouchState_bIsCurrentlyPressed' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, K2Node_InputTouchEvent_FingerIndex) == 0x000255, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::K2Node_InputTouchEvent_FingerIndex' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, K2Node_InputTouchEvent_Location) == 0x000258, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::K2Node_InputTouchEvent_Location' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000264, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_GetController_ReturnValue) == 0x000268, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_K2_GetActorLocation_ReturnValue1) == 0x000270, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_K2_GetActorLocation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, K2Node_CustomEvent_lsLeft) == 0x00027C, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::K2Node_CustomEvent_lsLeft' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000280, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_K2_GetActorLocation_ReturnValue2) == 0x00028C, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_K2_GetActorLocation_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_RLerp_ReturnValue) == 0x000298, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_RLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_IsValid_ReturnValue) == 0x0002A4, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_IsValid_ReturnValue1) == 0x0002A5, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_K2_GetActorLocation_ReturnValue3) == 0x0002A8, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_K2_GetActorLocation_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_K2_GetActorRotation_ReturnValue1) == 0x0002B4, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_K2_GetActorRotation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0002C0, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_BreakRotator_Roll) == 0x0002CC, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_BreakRotator_Pitch) == 0x0002D0, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_BreakRotator_Yaw) == 0x0002D4, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_Add_VectorVector_ReturnValue) == 0x0002D8, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_MakeRotator_ReturnValue) == 0x0002E4, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_BreakVector_X) == 0x0002F0, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_BreakVector_Y) == 0x0002F4, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_BreakVector_Z) == 0x0002F8, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_Add_FloatFloat_ReturnValue) == 0x0002FC, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_MakeVector_ReturnValue) == 0x000300, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, K2Node_InputTouchEvent_FingerIndex1) == 0x00030C, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::K2Node_InputTouchEvent_FingerIndex1' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, K2Node_InputTouchEvent_Location1) == 0x000310, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::K2Node_InputTouchEvent_Location1' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_GetPlayerController_ReturnValue2) == 0x000320, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_GetPlayerController_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_GetInputTouchState_LocationX1) == 0x000328, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_GetInputTouchState_LocationX1' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_GetInputTouchState_LocationY1) == 0x00032C, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_GetInputTouchState_LocationY1' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_GetInputTouchState_bIsCurrentlyPressed1) == 0x000330, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_GetInputTouchState_bIsCurrentlyPressed1' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_MakeVector2D_ReturnValue) == 0x000334, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_Subtract_Vector2DVector2D_ReturnValue) == 0x00033C, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_Subtract_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_VSize2D_ReturnValue) == 0x000344, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_VSize2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_BreakVector2D_X1) == 0x000348, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_BreakVector2D_X1' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_BreakVector2D_Y1) == 0x00034C, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_BreakVector2D_Y1' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_Divide_FloatFloat_ReturnValue1) == 0x000350, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_Divide_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_LessEqual_FloatFloat_ReturnValue1) == 0x000354, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_LessEqual_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, K2Node_CustomEvent_IsRightHand) == 0x000355, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::K2Node_CustomEvent_IsRightHand' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, K2Node_CustomEvent_ItemType) == 0x000356, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::K2Node_CustomEvent_ItemType' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, K2Node_CustomEvent_StartTransform) == 0x000360, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::K2Node_CustomEvent_StartTransform' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, K2Node_CustomEvent_CurrentItemActor) == 0x000390, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::K2Node_CustomEvent_CurrentItemActor' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, K2Node_CustomEvent_ItemActor) == 0x000398, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::K2Node_CustomEvent_ItemActor' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, K2Node_DynamicCast_AsBP_Item_Base) == 0x0003A0, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::K2Node_DynamicCast_AsBP_Item_Base' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, K2Node_DynamicCast_bSuccess2) == 0x0003A8, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::K2Node_DynamicCast_bSuccess2' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_Not_PreBool_ReturnValue3) == 0x0003A9, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_Not_PreBool_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_BooleanAND_ReturnValue1) == 0x0003AA, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_BooleanAND_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_BooleanAND_ReturnValue2) == 0x0003AB, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_BooleanAND_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, K2Node_InputTouchEvent_FingerIndex2) == 0x0003AC, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::K2Node_InputTouchEvent_FingerIndex2' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, K2Node_InputTouchEvent_Location2) == 0x0003B0, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::K2Node_InputTouchEvent_Location2' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_CheckSwitchCD_IsOK1) == 0x0003BC, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_CheckSwitchCD_IsOK1' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_Add_FloatFloat_ReturnValue1) == 0x0003C0, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_Add_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_Divide_FloatFloat_ReturnValue2) == 0x0003C4, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_Divide_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0003C8, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_Abs_ReturnValue) == 0x0003CC, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x0003D0, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_BreakRotator_Roll1) == 0x0003DC, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_BreakRotator_Roll1' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_BreakRotator_Pitch1) == 0x0003E0, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_BreakRotator_Pitch1' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_BreakRotator_Yaw1) == 0x0003E4, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_BreakRotator_Yaw1' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_MakeRotator_ReturnValue1) == 0x0003E8, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_MakeRotator_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone, CallFunc_K2_SetActorRotation_ReturnValue) == 0x0003F4, "Member 'BP_CharacterPhone_C_ExecuteUbergraph_BP_CharacterPhone::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");

// Function BP_CharacterPhone.BP_CharacterPhone_C.Evt_GetItem_phone
// 0x0050 (0x0050 - 0x0000)
struct BP_CharacterPhone_C_Evt_GetItem_phone final
{
public:
	bool                                          IsRightHand;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemTypes                                    ItemType;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0xE];                                        // 0x0002(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             StartTransform;                                    // 0x0010(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	class AActor*                                 CurrentItemActor;                                  // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ItemActor;                                         // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterPhone_C_Evt_GetItem_phone) == 0x000010, "Wrong alignment on BP_CharacterPhone_C_Evt_GetItem_phone");
static_assert(sizeof(BP_CharacterPhone_C_Evt_GetItem_phone) == 0x000050, "Wrong size on BP_CharacterPhone_C_Evt_GetItem_phone");
static_assert(offsetof(BP_CharacterPhone_C_Evt_GetItem_phone, IsRightHand) == 0x000000, "Member 'BP_CharacterPhone_C_Evt_GetItem_phone::IsRightHand' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_Evt_GetItem_phone, ItemType) == 0x000001, "Member 'BP_CharacterPhone_C_Evt_GetItem_phone::ItemType' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_Evt_GetItem_phone, StartTransform) == 0x000010, "Member 'BP_CharacterPhone_C_Evt_GetItem_phone::StartTransform' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_Evt_GetItem_phone, CurrentItemActor) == 0x000040, "Member 'BP_CharacterPhone_C_Evt_GetItem_phone::CurrentItemActor' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_Evt_GetItem_phone, ItemActor) == 0x000048, "Member 'BP_CharacterPhone_C_Evt_GetItem_phone::ItemActor' has a wrong offset!");

// Function BP_CharacterPhone.BP_CharacterPhone_C.Event_SwitchPoint
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterPhone_C_Event_SwitchPoint final
{
public:
	bool                                          lsLeft;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CharacterPhone_C_Event_SwitchPoint) == 0x000001, "Wrong alignment on BP_CharacterPhone_C_Event_SwitchPoint");
static_assert(sizeof(BP_CharacterPhone_C_Event_SwitchPoint) == 0x000001, "Wrong size on BP_CharacterPhone_C_Event_SwitchPoint");
static_assert(offsetof(BP_CharacterPhone_C_Event_SwitchPoint, lsLeft) == 0x000000, "Member 'BP_CharacterPhone_C_Event_SwitchPoint::lsLeft' has a wrong offset!");

// Function BP_CharacterPhone.BP_CharacterPhone_C.BndEvt__BoxHead_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct BP_CharacterPhone_C_BndEvt__BoxHead_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterPhone_C_BndEvt__BoxHead_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_CharacterPhone_C_BndEvt__BoxHead_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_CharacterPhone_C_BndEvt__BoxHead_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature) == 0x000020, "Wrong size on BP_CharacterPhone_C_BndEvt__BoxHead_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_CharacterPhone_C_BndEvt__BoxHead_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_CharacterPhone_C_BndEvt__BoxHead_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_BndEvt__BoxHead_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_CharacterPhone_C_BndEvt__BoxHead_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_BndEvt__BoxHead_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_CharacterPhone_C_BndEvt__BoxHead_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_BndEvt__BoxHead_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_CharacterPhone_C_BndEvt__BoxHead_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");

// Function BP_CharacterPhone.BP_CharacterPhone_C.BndEvt__BoxHead_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct BP_CharacterPhone_C_BndEvt__BoxHead_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_CharacterPhone_C_BndEvt__BoxHead_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_CharacterPhone_C_BndEvt__BoxHead_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_CharacterPhone_C_BndEvt__BoxHead_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A8, "Wrong size on BP_CharacterPhone_C_BndEvt__BoxHead_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_CharacterPhone_C_BndEvt__BoxHead_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_CharacterPhone_C_BndEvt__BoxHead_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_BndEvt__BoxHead_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_CharacterPhone_C_BndEvt__BoxHead_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_BndEvt__BoxHead_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_CharacterPhone_C_BndEvt__BoxHead_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_BndEvt__BoxHead_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_CharacterPhone_C_BndEvt__BoxHead_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_BndEvt__BoxHead_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'BP_CharacterPhone_C_BndEvt__BoxHead_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_BndEvt__BoxHead_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'BP_CharacterPhone_C_BndEvt__BoxHead_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function BP_CharacterPhone.BP_CharacterPhone_C.InpTchEvt_Pressed
// 0x0010 (0x0010 - 0x0000)
struct BP_CharacterPhone_C_InpTchEvt_Pressed final
{
public:
	ETouchIndex                                   FingerIndex;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterPhone_C_InpTchEvt_Pressed) == 0x000004, "Wrong alignment on BP_CharacterPhone_C_InpTchEvt_Pressed");
static_assert(sizeof(BP_CharacterPhone_C_InpTchEvt_Pressed) == 0x000010, "Wrong size on BP_CharacterPhone_C_InpTchEvt_Pressed");
static_assert(offsetof(BP_CharacterPhone_C_InpTchEvt_Pressed, FingerIndex) == 0x000000, "Member 'BP_CharacterPhone_C_InpTchEvt_Pressed::FingerIndex' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_InpTchEvt_Pressed, Location) == 0x000004, "Member 'BP_CharacterPhone_C_InpTchEvt_Pressed::Location' has a wrong offset!");

// Function BP_CharacterPhone.BP_CharacterPhone_C.InpTchEvt_Released
// 0x0010 (0x0010 - 0x0000)
struct BP_CharacterPhone_C_InpTchEvt_Released final
{
public:
	ETouchIndex                                   FingerIndex;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterPhone_C_InpTchEvt_Released) == 0x000004, "Wrong alignment on BP_CharacterPhone_C_InpTchEvt_Released");
static_assert(sizeof(BP_CharacterPhone_C_InpTchEvt_Released) == 0x000010, "Wrong size on BP_CharacterPhone_C_InpTchEvt_Released");
static_assert(offsetof(BP_CharacterPhone_C_InpTchEvt_Released, FingerIndex) == 0x000000, "Member 'BP_CharacterPhone_C_InpTchEvt_Released::FingerIndex' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_InpTchEvt_Released, Location) == 0x000004, "Member 'BP_CharacterPhone_C_InpTchEvt_Released::Location' has a wrong offset!");

// Function BP_CharacterPhone.BP_CharacterPhone_C.InpTchEvt_Moved
// 0x0010 (0x0010 - 0x0000)
struct BP_CharacterPhone_C_InpTchEvt_Moved final
{
public:
	ETouchIndex                                   FingerIndex;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterPhone_C_InpTchEvt_Moved) == 0x000004, "Wrong alignment on BP_CharacterPhone_C_InpTchEvt_Moved");
static_assert(sizeof(BP_CharacterPhone_C_InpTchEvt_Moved) == 0x000010, "Wrong size on BP_CharacterPhone_C_InpTchEvt_Moved");
static_assert(offsetof(BP_CharacterPhone_C_InpTchEvt_Moved, FingerIndex) == 0x000000, "Member 'BP_CharacterPhone_C_InpTchEvt_Moved::FingerIndex' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_InpTchEvt_Moved, Location) == 0x000004, "Member 'BP_CharacterPhone_C_InpTchEvt_Moved::Location' has a wrong offset!");

// Function BP_CharacterPhone.BP_CharacterPhone_C.GetAnimPos
// 0x0168 (0x0168 - 0x0000)
struct BP_CharacterPhone_C_GetAnimPos final
{
public:
	struct FVector                                AimPos;                                            // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0010(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x0050(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DB[0x1];                                       // 0x00DB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0108(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0128(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0140(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x014C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SelectVector_ReturnValue;                 // 0x0158(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterPhone_C_GetAnimPos) == 0x000008, "Wrong alignment on BP_CharacterPhone_C_GetAnimPos");
static_assert(sizeof(BP_CharacterPhone_C_GetAnimPos) == 0x000168, "Wrong size on BP_CharacterPhone_C_GetAnimPos");
static_assert(offsetof(BP_CharacterPhone_C_GetAnimPos, AimPos) == 0x000000, "Member 'BP_CharacterPhone_C_GetAnimPos::AimPos' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_GetAnimPos, Temp_object_Variable) == 0x000010, "Member 'BP_CharacterPhone_C_GetAnimPos::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_GetAnimPos, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000020, "Member 'BP_CharacterPhone_C_GetAnimPos::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_GetAnimPos, CallFunc_GetForwardVector_ReturnValue) == 0x00002C, "Member 'BP_CharacterPhone_C_GetAnimPos::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_GetAnimPos, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000038, "Member 'BP_CharacterPhone_C_GetAnimPos::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_GetAnimPos, CallFunc_Add_VectorVector_ReturnValue) == 0x000044, "Member 'BP_CharacterPhone_C_GetAnimPos::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_GetAnimPos, CallFunc_LineTraceSingle_OutHit) == 0x000050, "Member 'BP_CharacterPhone_C_GetAnimPos::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_GetAnimPos, CallFunc_LineTraceSingle_ReturnValue) == 0x0000D8, "Member 'BP_CharacterPhone_C_GetAnimPos::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_GetAnimPos, CallFunc_BreakHitResult_bBlockingHit) == 0x0000D9, "Member 'BP_CharacterPhone_C_GetAnimPos::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_GetAnimPos, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000DA, "Member 'BP_CharacterPhone_C_GetAnimPos::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_GetAnimPos, CallFunc_BreakHitResult_Time) == 0x0000DC, "Member 'BP_CharacterPhone_C_GetAnimPos::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_GetAnimPos, CallFunc_BreakHitResult_Distance) == 0x0000E0, "Member 'BP_CharacterPhone_C_GetAnimPos::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_GetAnimPos, CallFunc_BreakHitResult_Location) == 0x0000E4, "Member 'BP_CharacterPhone_C_GetAnimPos::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_GetAnimPos, CallFunc_BreakHitResult_ImpactPoint) == 0x0000F0, "Member 'BP_CharacterPhone_C_GetAnimPos::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_GetAnimPos, CallFunc_BreakHitResult_Normal) == 0x0000FC, "Member 'BP_CharacterPhone_C_GetAnimPos::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_GetAnimPos, CallFunc_BreakHitResult_ImpactNormal) == 0x000108, "Member 'BP_CharacterPhone_C_GetAnimPos::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_GetAnimPos, CallFunc_BreakHitResult_PhysMat) == 0x000118, "Member 'BP_CharacterPhone_C_GetAnimPos::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_GetAnimPos, CallFunc_BreakHitResult_HitActor) == 0x000120, "Member 'BP_CharacterPhone_C_GetAnimPos::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_GetAnimPos, CallFunc_BreakHitResult_HitComponent) == 0x000128, "Member 'BP_CharacterPhone_C_GetAnimPos::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_GetAnimPos, CallFunc_BreakHitResult_HitBoneName) == 0x000130, "Member 'BP_CharacterPhone_C_GetAnimPos::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_GetAnimPos, CallFunc_BreakHitResult_HitItem) == 0x000138, "Member 'BP_CharacterPhone_C_GetAnimPos::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_GetAnimPos, CallFunc_BreakHitResult_FaceIndex) == 0x00013C, "Member 'BP_CharacterPhone_C_GetAnimPos::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_GetAnimPos, CallFunc_BreakHitResult_TraceStart) == 0x000140, "Member 'BP_CharacterPhone_C_GetAnimPos::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_GetAnimPos, CallFunc_BreakHitResult_TraceEnd) == 0x00014C, "Member 'BP_CharacterPhone_C_GetAnimPos::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_GetAnimPos, CallFunc_SelectVector_ReturnValue) == 0x000158, "Member 'BP_CharacterPhone_C_GetAnimPos::CallFunc_SelectVector_ReturnValue' has a wrong offset!");

// Function BP_CharacterPhone.BP_CharacterPhone_C.GetWeapon
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterPhone_C_GetWeapon final
{
public:
	class AActor*                                 inputIN;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWeaponBase*                            K2Node_DynamicCast_AsWeapon_Base;                  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CharacterPhone_C_GetWeapon) == 0x000008, "Wrong alignment on BP_CharacterPhone_C_GetWeapon");
static_assert(sizeof(BP_CharacterPhone_C_GetWeapon) == 0x000018, "Wrong size on BP_CharacterPhone_C_GetWeapon");
static_assert(offsetof(BP_CharacterPhone_C_GetWeapon, inputIN) == 0x000000, "Member 'BP_CharacterPhone_C_GetWeapon::inputIN' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_GetWeapon, K2Node_DynamicCast_AsWeapon_Base) == 0x000008, "Member 'BP_CharacterPhone_C_GetWeapon::K2Node_DynamicCast_AsWeapon_Base' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_GetWeapon, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_CharacterPhone_C_GetWeapon::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_GetWeapon, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'BP_CharacterPhone_C_GetWeapon::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterPhone.BP_CharacterPhone_C.DetermineTrackingQuality
// 0x000A (0x000A - 0x0000)
struct BP_CharacterPhone_C_DetermineTrackingQuality final
{
public:
	EARTrackingQuality                            Tracking;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EARTrackingQuality                            Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EARTrackingQuality                            Temp_byte_Variable1;                               // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EARTrackingQuality                            Temp_byte_Variable2;                               // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EARTrackingQuality                            Temp_byte_Variable3;                               // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EARTrackingQuality                            K2Node_Select_Default;                             // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EARTrackingQuality                            CallFunc_GetTrackingQuality_ReturnValue;           // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EARTrackingQuality                            K2Node_Select1_Default;                            // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterPhone_C_DetermineTrackingQuality) == 0x000001, "Wrong alignment on BP_CharacterPhone_C_DetermineTrackingQuality");
static_assert(sizeof(BP_CharacterPhone_C_DetermineTrackingQuality) == 0x00000A, "Wrong size on BP_CharacterPhone_C_DetermineTrackingQuality");
static_assert(offsetof(BP_CharacterPhone_C_DetermineTrackingQuality, Tracking) == 0x000000, "Member 'BP_CharacterPhone_C_DetermineTrackingQuality::Tracking' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_DetermineTrackingQuality, Temp_byte_Variable) == 0x000001, "Member 'BP_CharacterPhone_C_DetermineTrackingQuality::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_DetermineTrackingQuality, Temp_byte_Variable1) == 0x000002, "Member 'BP_CharacterPhone_C_DetermineTrackingQuality::Temp_byte_Variable1' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_DetermineTrackingQuality, Temp_byte_Variable2) == 0x000003, "Member 'BP_CharacterPhone_C_DetermineTrackingQuality::Temp_byte_Variable2' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_DetermineTrackingQuality, Temp_byte_Variable3) == 0x000004, "Member 'BP_CharacterPhone_C_DetermineTrackingQuality::Temp_byte_Variable3' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_DetermineTrackingQuality, Temp_bool_Variable) == 0x000005, "Member 'BP_CharacterPhone_C_DetermineTrackingQuality::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_DetermineTrackingQuality, K2Node_Select_Default) == 0x000006, "Member 'BP_CharacterPhone_C_DetermineTrackingQuality::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_DetermineTrackingQuality, CallFunc_GetTrackingQuality_ReturnValue) == 0x000007, "Member 'BP_CharacterPhone_C_DetermineTrackingQuality::CallFunc_GetTrackingQuality_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_DetermineTrackingQuality, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000008, "Member 'BP_CharacterPhone_C_DetermineTrackingQuality::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_DetermineTrackingQuality, K2Node_Select1_Default) == 0x000009, "Member 'BP_CharacterPhone_C_DetermineTrackingQuality::K2Node_Select1_Default' has a wrong offset!");

// Function BP_CharacterPhone.BP_CharacterPhone_C.DisplayDebugTrackingInfo
// 0x0001 (0x0001 - 0x0000)
struct BP_CharacterPhone_C_DisplayDebugTrackingInfo final
{
public:
	EARTrackingQuality                            CallFunc_DetermineTrackingQuality_Tracking;        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterPhone_C_DisplayDebugTrackingInfo) == 0x000001, "Wrong alignment on BP_CharacterPhone_C_DisplayDebugTrackingInfo");
static_assert(sizeof(BP_CharacterPhone_C_DisplayDebugTrackingInfo) == 0x000001, "Wrong size on BP_CharacterPhone_C_DisplayDebugTrackingInfo");
static_assert(offsetof(BP_CharacterPhone_C_DisplayDebugTrackingInfo, CallFunc_DetermineTrackingQuality_Tracking) == 0x000000, "Member 'BP_CharacterPhone_C_DisplayDebugTrackingInfo::CallFunc_DetermineTrackingQuality_Tracking' has a wrong offset!");

// Function BP_CharacterPhone.BP_CharacterPhone_C.UpdateCameraOffsetZ
// 0x00C8 (0x00C8 - 0x0000)
struct BP_CharacterPhone_C_UpdateCameraOffsetZ final
{
public:
	float                                         offsetZ;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue1;              // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x0038(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CharacterPhone_C_UpdateCameraOffsetZ) == 0x000008, "Wrong alignment on BP_CharacterPhone_C_UpdateCameraOffsetZ");
static_assert(sizeof(BP_CharacterPhone_C_UpdateCameraOffsetZ) == 0x0000C8, "Wrong size on BP_CharacterPhone_C_UpdateCameraOffsetZ");
static_assert(offsetof(BP_CharacterPhone_C_UpdateCameraOffsetZ, offsetZ) == 0x000000, "Member 'BP_CharacterPhone_C_UpdateCameraOffsetZ::offsetZ' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_UpdateCameraOffsetZ, CallFunc_Abs_ReturnValue) == 0x000004, "Member 'BP_CharacterPhone_C_UpdateCameraOffsetZ::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_UpdateCameraOffsetZ, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000008, "Member 'BP_CharacterPhone_C_UpdateCameraOffsetZ::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_UpdateCameraOffsetZ, CallFunc_BreakVector_X) == 0x000014, "Member 'BP_CharacterPhone_C_UpdateCameraOffsetZ::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_UpdateCameraOffsetZ, CallFunc_BreakVector_Y) == 0x000018, "Member 'BP_CharacterPhone_C_UpdateCameraOffsetZ::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_UpdateCameraOffsetZ, CallFunc_BreakVector_Z) == 0x00001C, "Member 'BP_CharacterPhone_C_UpdateCameraOffsetZ::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_UpdateCameraOffsetZ, CallFunc_Add_FloatFloat_ReturnValue) == 0x000020, "Member 'BP_CharacterPhone_C_UpdateCameraOffsetZ::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_UpdateCameraOffsetZ, CallFunc_Add_FloatFloat_ReturnValue1) == 0x000024, "Member 'BP_CharacterPhone_C_UpdateCameraOffsetZ::CallFunc_Add_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_UpdateCameraOffsetZ, CallFunc_MakeVector_ReturnValue) == 0x000028, "Member 'BP_CharacterPhone_C_UpdateCameraOffsetZ::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_UpdateCameraOffsetZ, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x000038, "Member 'BP_CharacterPhone_C_UpdateCameraOffsetZ::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_UpdateCameraOffsetZ, CallFunc_K2_SetActorLocation_ReturnValue) == 0x0000C0, "Member 'BP_CharacterPhone_C_UpdateCameraOffsetZ::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");

// Function BP_CharacterPhone.BP_CharacterPhone_C.FindPlanesForARCORE
// 0x0018 (0x0018 - 0x0000)
struct BP_CharacterPhone_C_FindPlanesForARCORE final
{
public:
	TArray<class UARPlaneGeometry*>               CallFunc_GetAllPlanes_OutPlaneList;                // 0x0000(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterPhone_C_FindPlanesForARCORE) == 0x000008, "Wrong alignment on BP_CharacterPhone_C_FindPlanesForARCORE");
static_assert(sizeof(BP_CharacterPhone_C_FindPlanesForARCORE) == 0x000018, "Wrong size on BP_CharacterPhone_C_FindPlanesForARCORE");
static_assert(offsetof(BP_CharacterPhone_C_FindPlanesForARCORE, CallFunc_GetAllPlanes_OutPlaneList) == 0x000000, "Member 'BP_CharacterPhone_C_FindPlanesForARCORE::CallFunc_GetAllPlanes_OutPlaneList' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_FindPlanesForARCORE, CallFunc_Array_Length_ReturnValue) == 0x000010, "Member 'BP_CharacterPhone_C_FindPlanesForARCORE::CallFunc_Array_Length_ReturnValue' has a wrong offset!");

// Function BP_CharacterPhone.BP_CharacterPhone_C.DoHitTestForARCORE
// 0x0010 (0x0010 - 0x0000)
struct BP_CharacterPhone_C_DoHitTestForARCORE final
{
public:
	class APlayerController*                      Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Input;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterPhone_C_DoHitTestForARCORE) == 0x000008, "Wrong alignment on BP_CharacterPhone_C_DoHitTestForARCORE");
static_assert(sizeof(BP_CharacterPhone_C_DoHitTestForARCORE) == 0x000010, "Wrong size on BP_CharacterPhone_C_DoHitTestForARCORE");
static_assert(offsetof(BP_CharacterPhone_C_DoHitTestForARCORE, Player) == 0x000000, "Member 'BP_CharacterPhone_C_DoHitTestForARCORE::Player' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_DoHitTestForARCORE, Input) == 0x000008, "Member 'BP_CharacterPhone_C_DoHitTestForARCORE::Input' has a wrong offset!");

// Function BP_CharacterPhone.BP_CharacterPhone_C.AjustCameraMoving
// 0x00F8 (0x00F8 - 0x0000)
struct BP_CharacterPhone_C_AjustCameraMoving final
{
public:
	bool                                          CallFunc_NotEqual_VectorVector_ReturnValue;        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue1;     // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue2;     // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x0070(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_CharacterPhone_C_AjustCameraMoving) == 0x000008, "Wrong alignment on BP_CharacterPhone_C_AjustCameraMoving");
static_assert(sizeof(BP_CharacterPhone_C_AjustCameraMoving) == 0x0000F8, "Wrong size on BP_CharacterPhone_C_AjustCameraMoving");
static_assert(offsetof(BP_CharacterPhone_C_AjustCameraMoving, CallFunc_NotEqual_VectorVector_ReturnValue) == 0x000000, "Member 'BP_CharacterPhone_C_AjustCameraMoving::CallFunc_NotEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_AjustCameraMoving, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000004, "Member 'BP_CharacterPhone_C_AjustCameraMoving::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_AjustCameraMoving, CallFunc_K2_GetComponentLocation_ReturnValue1) == 0x000010, "Member 'BP_CharacterPhone_C_AjustCameraMoving::CallFunc_K2_GetComponentLocation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_AjustCameraMoving, CallFunc_K2_GetComponentLocation_ReturnValue2) == 0x00001C, "Member 'BP_CharacterPhone_C_AjustCameraMoving::CallFunc_K2_GetComponentLocation_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_AjustCameraMoving, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000028, "Member 'BP_CharacterPhone_C_AjustCameraMoving::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_AjustCameraMoving, CallFunc_BreakVector_X) == 0x000034, "Member 'BP_CharacterPhone_C_AjustCameraMoving::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_AjustCameraMoving, CallFunc_BreakVector_Y) == 0x000038, "Member 'BP_CharacterPhone_C_AjustCameraMoving::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_AjustCameraMoving, CallFunc_BreakVector_Z) == 0x00003C, "Member 'BP_CharacterPhone_C_AjustCameraMoving::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_AjustCameraMoving, CallFunc_MakeVector_ReturnValue) == 0x000040, "Member 'BP_CharacterPhone_C_AjustCameraMoving::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_AjustCameraMoving, CallFunc_VSize_ReturnValue) == 0x00004C, "Member 'BP_CharacterPhone_C_AjustCameraMoving::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_AjustCameraMoving, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000050, "Member 'BP_CharacterPhone_C_AjustCameraMoving::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_AjustCameraMoving, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00005C, "Member 'BP_CharacterPhone_C_AjustCameraMoving::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_AjustCameraMoving, CallFunc_Add_VectorVector_ReturnValue) == 0x000060, "Member 'BP_CharacterPhone_C_AjustCameraMoving::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_AjustCameraMoving, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x000070, "Member 'BP_CharacterPhone_C_AjustCameraMoving::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");

// Function BP_CharacterPhone.BP_CharacterPhone_C.WeaponFire
// 0x0020 (0x0020 - 0x0000)
struct BP_CharacterPhone_C_WeaponFire final
{
public:
	class ABPWpnBase_C*                           curWeapon;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          lsRight;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetAnimPos_AimPos;                        // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanFire_Result;                           // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CharacterPhone_C_WeaponFire) == 0x000008, "Wrong alignment on BP_CharacterPhone_C_WeaponFire");
static_assert(sizeof(BP_CharacterPhone_C_WeaponFire) == 0x000020, "Wrong size on BP_CharacterPhone_C_WeaponFire");
static_assert(offsetof(BP_CharacterPhone_C_WeaponFire, curWeapon) == 0x000000, "Member 'BP_CharacterPhone_C_WeaponFire::curWeapon' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_WeaponFire, lsRight) == 0x000008, "Member 'BP_CharacterPhone_C_WeaponFire::lsRight' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_WeaponFire, CallFunc_GetAnimPos_AimPos) == 0x00000C, "Member 'BP_CharacterPhone_C_WeaponFire::CallFunc_GetAnimPos_AimPos' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_WeaponFire, CallFunc_CanFire_Result) == 0x000018, "Member 'BP_CharacterPhone_C_WeaponFire::CallFunc_CanFire_Result' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_WeaponFire, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'BP_CharacterPhone_C_WeaponFire::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterPhone.BP_CharacterPhone_C.GetTouchInfo
// 0x0020 (0x0020 - 0x0000)
struct BP_CharacterPhone_C_GetTouchInfo final
{
public:
	ETouchIndex                                   FingerIndex;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          lsLeft;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetInputTouchState_LocationX;             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetInputTouchState_LocationY;             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetInputTouchState_bIsCurrentlyPressed;   // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CharacterPhone_C_GetTouchInfo) == 0x000008, "Wrong alignment on BP_CharacterPhone_C_GetTouchInfo");
static_assert(sizeof(BP_CharacterPhone_C_GetTouchInfo) == 0x000020, "Wrong size on BP_CharacterPhone_C_GetTouchInfo");
static_assert(offsetof(BP_CharacterPhone_C_GetTouchInfo, FingerIndex) == 0x000000, "Member 'BP_CharacterPhone_C_GetTouchInfo::FingerIndex' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_GetTouchInfo, lsLeft) == 0x000001, "Member 'BP_CharacterPhone_C_GetTouchInfo::lsLeft' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_GetTouchInfo, CallFunc_GetPlayerController_ReturnValue) == 0x000008, "Member 'BP_CharacterPhone_C_GetTouchInfo::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_GetTouchInfo, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000010, "Member 'BP_CharacterPhone_C_GetTouchInfo::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_GetTouchInfo, CallFunc_GetInputTouchState_LocationX) == 0x000014, "Member 'BP_CharacterPhone_C_GetTouchInfo::CallFunc_GetInputTouchState_LocationX' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_GetTouchInfo, CallFunc_GetInputTouchState_LocationY) == 0x000018, "Member 'BP_CharacterPhone_C_GetTouchInfo::CallFunc_GetInputTouchState_LocationY' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_GetTouchInfo, CallFunc_GetInputTouchState_bIsCurrentlyPressed) == 0x00001C, "Member 'BP_CharacterPhone_C_GetTouchInfo::CallFunc_GetInputTouchState_bIsCurrentlyPressed' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_GetTouchInfo, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x00001D, "Member 'BP_CharacterPhone_C_GetTouchInfo::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_CharacterPhone.BP_CharacterPhone_C.SetHoldItemR
// 0x00F0 (0x00F0 - 0x0000)
struct BP_CharacterPhone_C_SetHoldItemR final
{
public:
	class AActor*                                 _input;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        LocalAttacth;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABPWeaponBase_C*                        K2Node_DynamicCast_AsBPWeapon_Base;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABPWeaponBase_C*                        K2Node_DynamicCast_AsBPWeapon_Base1;               // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0030(0x0030)(IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetActorTransform_SweepHitResult;      // 0x0060(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorTransform_ReturnValue;         // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CharacterPhone_C_SetHoldItemR) == 0x000010, "Wrong alignment on BP_CharacterPhone_C_SetHoldItemR");
static_assert(sizeof(BP_CharacterPhone_C_SetHoldItemR) == 0x0000F0, "Wrong size on BP_CharacterPhone_C_SetHoldItemR");
static_assert(offsetof(BP_CharacterPhone_C_SetHoldItemR, _input) == 0x000000, "Member 'BP_CharacterPhone_C_SetHoldItemR::_input' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_SetHoldItemR, LocalAttacth) == 0x000008, "Member 'BP_CharacterPhone_C_SetHoldItemR::LocalAttacth' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_SetHoldItemR, K2Node_DynamicCast_AsBPWeapon_Base) == 0x000010, "Member 'BP_CharacterPhone_C_SetHoldItemR::K2Node_DynamicCast_AsBPWeapon_Base' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_SetHoldItemR, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_CharacterPhone_C_SetHoldItemR::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_SetHoldItemR, K2Node_DynamicCast_AsBPWeapon_Base1) == 0x000020, "Member 'BP_CharacterPhone_C_SetHoldItemR::K2Node_DynamicCast_AsBPWeapon_Base1' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_SetHoldItemR, K2Node_DynamicCast_bSuccess1) == 0x000028, "Member 'BP_CharacterPhone_C_SetHoldItemR::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_SetHoldItemR, K2Node_SwitchEnum_CmpSuccess) == 0x000029, "Member 'BP_CharacterPhone_C_SetHoldItemR::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_SetHoldItemR, CallFunc_IsValid_ReturnValue) == 0x00002A, "Member 'BP_CharacterPhone_C_SetHoldItemR::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_SetHoldItemR, CallFunc_MakeTransform_ReturnValue) == 0x000030, "Member 'BP_CharacterPhone_C_SetHoldItemR::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_SetHoldItemR, CallFunc_K2_SetActorTransform_SweepHitResult) == 0x000060, "Member 'BP_CharacterPhone_C_SetHoldItemR::CallFunc_K2_SetActorTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_SetHoldItemR, CallFunc_K2_SetActorTransform_ReturnValue) == 0x0000E8, "Member 'BP_CharacterPhone_C_SetHoldItemR::CallFunc_K2_SetActorTransform_ReturnValue' has a wrong offset!");

// Function BP_CharacterPhone.BP_CharacterPhone_C.SetHoldItemL
// 0x00F0 (0x00F0 - 0x0000)
struct BP_CharacterPhone_C_SetHoldItemL final
{
public:
	class AActor*                                 _input;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        LocalAttacth;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABPWeaponBase_C*                        K2Node_DynamicCast_AsBPWeapon_Base;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABPWeaponBase_C*                        K2Node_DynamicCast_AsBPWeapon_Base1;               // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0030(0x0030)(IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetActorTransform_SweepHitResult;      // 0x0060(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorTransform_ReturnValue;         // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CharacterPhone_C_SetHoldItemL) == 0x000010, "Wrong alignment on BP_CharacterPhone_C_SetHoldItemL");
static_assert(sizeof(BP_CharacterPhone_C_SetHoldItemL) == 0x0000F0, "Wrong size on BP_CharacterPhone_C_SetHoldItemL");
static_assert(offsetof(BP_CharacterPhone_C_SetHoldItemL, _input) == 0x000000, "Member 'BP_CharacterPhone_C_SetHoldItemL::_input' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_SetHoldItemL, LocalAttacth) == 0x000008, "Member 'BP_CharacterPhone_C_SetHoldItemL::LocalAttacth' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_SetHoldItemL, K2Node_DynamicCast_AsBPWeapon_Base) == 0x000010, "Member 'BP_CharacterPhone_C_SetHoldItemL::K2Node_DynamicCast_AsBPWeapon_Base' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_SetHoldItemL, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_CharacterPhone_C_SetHoldItemL::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_SetHoldItemL, K2Node_DynamicCast_AsBPWeapon_Base1) == 0x000020, "Member 'BP_CharacterPhone_C_SetHoldItemL::K2Node_DynamicCast_AsBPWeapon_Base1' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_SetHoldItemL, K2Node_DynamicCast_bSuccess1) == 0x000028, "Member 'BP_CharacterPhone_C_SetHoldItemL::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_SetHoldItemL, K2Node_SwitchEnum_CmpSuccess) == 0x000029, "Member 'BP_CharacterPhone_C_SetHoldItemL::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_SetHoldItemL, CallFunc_IsValid_ReturnValue) == 0x00002A, "Member 'BP_CharacterPhone_C_SetHoldItemL::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_SetHoldItemL, CallFunc_MakeTransform_ReturnValue) == 0x000030, "Member 'BP_CharacterPhone_C_SetHoldItemL::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_SetHoldItemL, CallFunc_K2_SetActorTransform_SweepHitResult) == 0x000060, "Member 'BP_CharacterPhone_C_SetHoldItemL::CallFunc_K2_SetActorTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_SetHoldItemL, CallFunc_K2_SetActorTransform_ReturnValue) == 0x0000E8, "Member 'BP_CharacterPhone_C_SetHoldItemL::CallFunc_K2_SetActorTransform_ReturnValue' has a wrong offset!");

// Function BP_CharacterPhone.BP_CharacterPhone_C.SpawnWeaponPhone
// 0x00C0 (0x00C0 - 0x0000)
struct BP_CharacterPhone_C_SpawnWeaponPhone final
{
public:
	bool                                          lsRight;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemTypes                                    wType;                                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 WeaponClass;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0xF];                                       // 0x0011(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0020(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue1;               // 0x0050(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue1; // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_FinishSpawningActor_ReturnValue;          // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_FinishSpawningActor_ReturnValue1;         // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABPWeaponBase_C*                        K2Node_DynamicCast_AsBPWeapon_Base;                // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AA[0x6];                                       // 0x00AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABPWeaponBase_C*                        K2Node_DynamicCast_AsBPWeapon_Base1;               // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue2;                     // 0x00BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue3;                     // 0x00BB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CharacterPhone_C_SpawnWeaponPhone) == 0x000010, "Wrong alignment on BP_CharacterPhone_C_SpawnWeaponPhone");
static_assert(sizeof(BP_CharacterPhone_C_SpawnWeaponPhone) == 0x0000C0, "Wrong size on BP_CharacterPhone_C_SpawnWeaponPhone");
static_assert(offsetof(BP_CharacterPhone_C_SpawnWeaponPhone, lsRight) == 0x000000, "Member 'BP_CharacterPhone_C_SpawnWeaponPhone::lsRight' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_SpawnWeaponPhone, wType) == 0x000001, "Member 'BP_CharacterPhone_C_SpawnWeaponPhone::wType' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_SpawnWeaponPhone, WeaponClass) == 0x000008, "Member 'BP_CharacterPhone_C_SpawnWeaponPhone::WeaponClass' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_SpawnWeaponPhone, K2Node_SwitchEnum_CmpSuccess) == 0x000010, "Member 'BP_CharacterPhone_C_SpawnWeaponPhone::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_SpawnWeaponPhone, CallFunc_MakeTransform_ReturnValue) == 0x000020, "Member 'BP_CharacterPhone_C_SpawnWeaponPhone::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_SpawnWeaponPhone, CallFunc_MakeTransform_ReturnValue1) == 0x000050, "Member 'BP_CharacterPhone_C_SpawnWeaponPhone::CallFunc_MakeTransform_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_SpawnWeaponPhone, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000080, "Member 'BP_CharacterPhone_C_SpawnWeaponPhone::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_SpawnWeaponPhone, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue1) == 0x000088, "Member 'BP_CharacterPhone_C_SpawnWeaponPhone::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_SpawnWeaponPhone, CallFunc_FinishSpawningActor_ReturnValue) == 0x000090, "Member 'BP_CharacterPhone_C_SpawnWeaponPhone::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_SpawnWeaponPhone, CallFunc_FinishSpawningActor_ReturnValue1) == 0x000098, "Member 'BP_CharacterPhone_C_SpawnWeaponPhone::CallFunc_FinishSpawningActor_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_SpawnWeaponPhone, K2Node_DynamicCast_AsBPWeapon_Base) == 0x0000A0, "Member 'BP_CharacterPhone_C_SpawnWeaponPhone::K2Node_DynamicCast_AsBPWeapon_Base' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_SpawnWeaponPhone, K2Node_DynamicCast_bSuccess) == 0x0000A8, "Member 'BP_CharacterPhone_C_SpawnWeaponPhone::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_SpawnWeaponPhone, CallFunc_IsValid_ReturnValue) == 0x0000A9, "Member 'BP_CharacterPhone_C_SpawnWeaponPhone::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_SpawnWeaponPhone, K2Node_DynamicCast_AsBPWeapon_Base1) == 0x0000B0, "Member 'BP_CharacterPhone_C_SpawnWeaponPhone::K2Node_DynamicCast_AsBPWeapon_Base1' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_SpawnWeaponPhone, K2Node_DynamicCast_bSuccess1) == 0x0000B8, "Member 'BP_CharacterPhone_C_SpawnWeaponPhone::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_SpawnWeaponPhone, CallFunc_IsValid_ReturnValue1) == 0x0000B9, "Member 'BP_CharacterPhone_C_SpawnWeaponPhone::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_SpawnWeaponPhone, CallFunc_IsValid_ReturnValue2) == 0x0000BA, "Member 'BP_CharacterPhone_C_SpawnWeaponPhone::CallFunc_IsValid_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_SpawnWeaponPhone, CallFunc_IsValid_ReturnValue3) == 0x0000BB, "Member 'BP_CharacterPhone_C_SpawnWeaponPhone::CallFunc_IsValid_ReturnValue3' has a wrong offset!");

// Function BP_CharacterPhone.BP_CharacterPhone_C.CreateHUD
// 0x0010 (0x0010 - 0x0000)
struct BP_CharacterPhone_C_CreateHUD final
{
public:
	class UMobileHUD_C*                           CallFunc_Create_ReturnValue;                       // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CharacterPhone_C_CreateHUD) == 0x000008, "Wrong alignment on BP_CharacterPhone_C_CreateHUD");
static_assert(sizeof(BP_CharacterPhone_C_CreateHUD) == 0x000010, "Wrong size on BP_CharacterPhone_C_CreateHUD");
static_assert(offsetof(BP_CharacterPhone_C_CreateHUD, CallFunc_Create_ReturnValue) == 0x000000, "Member 'BP_CharacterPhone_C_CreateHUD::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_CreateHUD, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_CharacterPhone_C_CreateHUD::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_CharacterPhone.BP_CharacterPhone_C.CheckSwitchPointEnabled?
// 0x0038 (0x0038 - 0x0000)
struct BP_CharacterPhone_C_CheckSwitchPointEnabled_ final
{
public:
	TArray<class ABP_PlayerSwitchPoint_C*>        CallFunc_GetSwitchPoint_NewParam;                  // 0x0000(0x0010)(ZeroConstructor, ReferenceParm)
	class ABP_PlayerSwitchPoint_C*                CallFunc_GetClosetPoint_TargetPoint;               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_PlayerSwitchPoint_C*>        CallFunc_GetSwitchPoint_NewParam1;                 // 0x0018(0x0010)(ZeroConstructor, ReferenceParm)
	class ABP_PlayerSwitchPoint_C*                CallFunc_GetClosetPoint_TargetPoint1;              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_CharacterPhone_C_CheckSwitchPointEnabled_) == 0x000008, "Wrong alignment on BP_CharacterPhone_C_CheckSwitchPointEnabled_");
static_assert(sizeof(BP_CharacterPhone_C_CheckSwitchPointEnabled_) == 0x000038, "Wrong size on BP_CharacterPhone_C_CheckSwitchPointEnabled_");
static_assert(offsetof(BP_CharacterPhone_C_CheckSwitchPointEnabled_, CallFunc_GetSwitchPoint_NewParam) == 0x000000, "Member 'BP_CharacterPhone_C_CheckSwitchPointEnabled_::CallFunc_GetSwitchPoint_NewParam' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_CheckSwitchPointEnabled_, CallFunc_GetClosetPoint_TargetPoint) == 0x000010, "Member 'BP_CharacterPhone_C_CheckSwitchPointEnabled_::CallFunc_GetClosetPoint_TargetPoint' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_CheckSwitchPointEnabled_, CallFunc_GetSwitchPoint_NewParam1) == 0x000018, "Member 'BP_CharacterPhone_C_CheckSwitchPointEnabled_::CallFunc_GetSwitchPoint_NewParam1' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_CheckSwitchPointEnabled_, CallFunc_GetClosetPoint_TargetPoint1) == 0x000028, "Member 'BP_CharacterPhone_C_CheckSwitchPointEnabled_::CallFunc_GetClosetPoint_TargetPoint1' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_CheckSwitchPointEnabled_, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'BP_CharacterPhone_C_CheckSwitchPointEnabled_::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_CharacterPhone_C_CheckSwitchPointEnabled_, CallFunc_IsValid_ReturnValue1) == 0x000031, "Member 'BP_CharacterPhone_C_CheckSwitchPointEnabled_::CallFunc_IsValid_ReturnValue1' has a wrong offset!");

// Function BP_CharacterPhone.BP_CharacterPhone_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_CharacterPhone_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CharacterPhone_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_CharacterPhone_C_ReceiveTick");
static_assert(sizeof(BP_CharacterPhone_C_ReceiveTick) == 0x000004, "Wrong size on BP_CharacterPhone_C_ReceiveTick");
static_assert(offsetof(BP_CharacterPhone_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_CharacterPhone_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

}

