#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Wpn_Sniper

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "SiliconRising_structs.hpp"


namespace SDK::Params
{

// Function Wpn_Sniper.Wpn_Sniper_C.ExecuteUbergraph_Wpn_Sniper
// 0x0040 (0x0040 - 0x0000)
struct Wpn_Sniper_C_ExecuteUbergraph_Wpn_Sniper final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Mer2Character_PC_C*                 K2Node_DynamicCast_AsBP_Mer_2Character_PC;         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             K2Node_DynamicCast_AsCharacter;                    // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wpn_Sniper_C_ExecuteUbergraph_Wpn_Sniper) == 0x000008, "Wrong alignment on Wpn_Sniper_C_ExecuteUbergraph_Wpn_Sniper");
static_assert(sizeof(Wpn_Sniper_C_ExecuteUbergraph_Wpn_Sniper) == 0x000040, "Wrong size on Wpn_Sniper_C_ExecuteUbergraph_Wpn_Sniper");
static_assert(offsetof(Wpn_Sniper_C_ExecuteUbergraph_Wpn_Sniper, EntryPoint) == 0x000000, "Member 'Wpn_Sniper_C_ExecuteUbergraph_Wpn_Sniper::EntryPoint' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_ExecuteUbergraph_Wpn_Sniper, CallFunc_GetPlayerPawn_ReturnValue) == 0x000008, "Member 'Wpn_Sniper_C_ExecuteUbergraph_Wpn_Sniper::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_ExecuteUbergraph_Wpn_Sniper, K2Node_DynamicCast_AsBP_Mer_2Character_PC) == 0x000010, "Member 'Wpn_Sniper_C_ExecuteUbergraph_Wpn_Sniper::K2Node_DynamicCast_AsBP_Mer_2Character_PC' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_ExecuteUbergraph_Wpn_Sniper, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'Wpn_Sniper_C_ExecuteUbergraph_Wpn_Sniper::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_ExecuteUbergraph_Wpn_Sniper, CallFunc_GetOwner_ReturnValue) == 0x000020, "Member 'Wpn_Sniper_C_ExecuteUbergraph_Wpn_Sniper::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_ExecuteUbergraph_Wpn_Sniper, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'Wpn_Sniper_C_ExecuteUbergraph_Wpn_Sniper::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_ExecuteUbergraph_Wpn_Sniper, K2Node_DynamicCast_AsCharacter) == 0x000030, "Member 'Wpn_Sniper_C_ExecuteUbergraph_Wpn_Sniper::K2Node_DynamicCast_AsCharacter' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_ExecuteUbergraph_Wpn_Sniper, K2Node_DynamicCast_bSuccess1) == 0x000038, "Member 'Wpn_Sniper_C_ExecuteUbergraph_Wpn_Sniper::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_ExecuteUbergraph_Wpn_Sniper, CallFunc_IsLocallyControlled_ReturnValue) == 0x000039, "Member 'Wpn_Sniper_C_ExecuteUbergraph_Wpn_Sniper::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_ExecuteUbergraph_Wpn_Sniper, K2Node_Event_DeltaSeconds) == 0x00003C, "Member 'Wpn_Sniper_C_ExecuteUbergraph_Wpn_Sniper::K2Node_Event_DeltaSeconds' has a wrong offset!");

// Function Wpn_Sniper.Wpn_Sniper_C.ChangeAnimState
// 0x0020 (0x0020 - 0x0000)
struct Wpn_Sniper_C_ChangeAnimState final
{
public:
	EWState                                       State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewParam1;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimBP_Wpn_SniperNew_C*                K2Node_DynamicCast_AsAnim_BP_Wpn_Sniper_New;       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wpn_Sniper_C_ChangeAnimState) == 0x000008, "Wrong alignment on Wpn_Sniper_C_ChangeAnimState");
static_assert(sizeof(Wpn_Sniper_C_ChangeAnimState) == 0x000020, "Wrong size on Wpn_Sniper_C_ChangeAnimState");
static_assert(offsetof(Wpn_Sniper_C_ChangeAnimState, State) == 0x000000, "Member 'Wpn_Sniper_C_ChangeAnimState::State' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_ChangeAnimState, NewParam1) == 0x000001, "Member 'Wpn_Sniper_C_ChangeAnimState::NewParam1' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_ChangeAnimState, K2Node_SwitchEnum_CmpSuccess) == 0x000002, "Member 'Wpn_Sniper_C_ChangeAnimState::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_ChangeAnimState, CallFunc_GetAnimInstance_ReturnValue) == 0x000008, "Member 'Wpn_Sniper_C_ChangeAnimState::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_ChangeAnimState, K2Node_DynamicCast_AsAnim_BP_Wpn_Sniper_New) == 0x000010, "Member 'Wpn_Sniper_C_ChangeAnimState::K2Node_DynamicCast_AsAnim_BP_Wpn_Sniper_New' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_ChangeAnimState, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'Wpn_Sniper_C_ChangeAnimState::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_ChangeAnimState, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'Wpn_Sniper_C_ChangeAnimState::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function Wpn_Sniper.Wpn_Sniper_C.UpdateFov
// 0x0030 (0x0030 - 0x0000)
struct Wpn_Sniper_C_UpdateFov final
{
public:
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_CharacterBase_C*                    K2Node_DynamicCast_AsBP_Character_Base;            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMer2GameMode_VR_C*                     K2Node_DynamicCast_AsMer_2Game_Mode_VR;            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wpn_Sniper_C_UpdateFov) == 0x000008, "Wrong alignment on Wpn_Sniper_C_UpdateFov");
static_assert(sizeof(Wpn_Sniper_C_UpdateFov) == 0x000030, "Wrong size on Wpn_Sniper_C_UpdateFov");
static_assert(offsetof(Wpn_Sniper_C_UpdateFov, CallFunc_GetPlayerPawn_ReturnValue) == 0x000000, "Member 'Wpn_Sniper_C_UpdateFov::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateFov, K2Node_DynamicCast_AsBP_Character_Base) == 0x000008, "Member 'Wpn_Sniper_C_UpdateFov::K2Node_DynamicCast_AsBP_Character_Base' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateFov, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'Wpn_Sniper_C_UpdateFov::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateFov, CallFunc_GetGameMode_ReturnValue) == 0x000018, "Member 'Wpn_Sniper_C_UpdateFov::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateFov, K2Node_DynamicCast_AsMer_2Game_Mode_VR) == 0x000020, "Member 'Wpn_Sniper_C_UpdateFov::K2Node_DynamicCast_AsMer_2Game_Mode_VR' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateFov, K2Node_DynamicCast_bSuccess1) == 0x000028, "Member 'Wpn_Sniper_C_UpdateFov::K2Node_DynamicCast_bSuccess1' has a wrong offset!");

// Function Wpn_Sniper.Wpn_Sniper_C.EnablePostProcess
// 0x0028 (0x0028 - 0x0000)
struct Wpn_Sniper_C_EnablePostProcess final
{
public:
	bool                                          lsEnable;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Mer2Character_PC_C*                 K2Node_DynamicCast_AsBP_Mer_2Character_PC;         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wpn_Sniper_C_EnablePostProcess) == 0x000008, "Wrong alignment on Wpn_Sniper_C_EnablePostProcess");
static_assert(sizeof(Wpn_Sniper_C_EnablePostProcess) == 0x000028, "Wrong size on Wpn_Sniper_C_EnablePostProcess");
static_assert(offsetof(Wpn_Sniper_C_EnablePostProcess, lsEnable) == 0x000000, "Member 'Wpn_Sniper_C_EnablePostProcess::lsEnable' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_EnablePostProcess, CallFunc_GetPlayerPawn_ReturnValue) == 0x000008, "Member 'Wpn_Sniper_C_EnablePostProcess::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_EnablePostProcess, CallFunc_SelectFloat_ReturnValue) == 0x000010, "Member 'Wpn_Sniper_C_EnablePostProcess::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_EnablePostProcess, K2Node_DynamicCast_AsBP_Mer_2Character_PC) == 0x000018, "Member 'Wpn_Sniper_C_EnablePostProcess::K2Node_DynamicCast_AsBP_Mer_2Character_PC' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_EnablePostProcess, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'Wpn_Sniper_C_EnablePostProcess::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function Wpn_Sniper.Wpn_Sniper_C.UpdateMark
// 0x03A0 (0x03A0 - 0x0000)
struct Wpn_Sniper_C_UpdateMark final
{
public:
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue;           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Mer2Character_PC_C*                 K2Node_DynamicCast_AsBP_Mer_2Character_PC;         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x0028(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue1;     // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue2;     // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x0078(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_101[0x3];                                      // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue3;     // 0x0104(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0111(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_112[0x2];                                      // 0x0112(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x011C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0128(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0134(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0140(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14C[0x4];                                      // 0x014C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0160(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0178(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0184(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0190(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue1;            // 0x019C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult;       // 0x01A8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue4;     // 0x0230(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue5;     // 0x023C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0248(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x024C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegCos_ReturnValue;                       // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue2;            // 0x025C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue6;     // 0x0268(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0274(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue1;       // 0x0280(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ProjectVectorOnToPlane_ReturnValue;       // 0x028C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0298(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x02A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A5[0x3];                                      // 0x02A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue1;        // 0x02A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue1;            // 0x02B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue2;            // 0x02C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue1;         // 0x02CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x02D8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue2;       // 0x0360(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36C[0x4];                                      // 0x036C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_NPC_Secret_C*>               CallFunc_GetAllActorsOfClass_OutActors;            // 0x0370(0x0010)(ZeroConstructor, ReferenceParm)
	struct FVector                                CallFunc_Normal_ReturnValue1;                      // 0x0380(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38C[0x4];                                      // 0x038C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_NPC_Secret_C*                       CallFunc_Array_Get_Item;                           // 0x0390(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x0398(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x039C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x039D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wpn_Sniper_C_UpdateMark) == 0x000008, "Wrong alignment on Wpn_Sniper_C_UpdateMark");
static_assert(sizeof(Wpn_Sniper_C_UpdateMark) == 0x0003A0, "Wrong size on Wpn_Sniper_C_UpdateMark");
static_assert(offsetof(Wpn_Sniper_C_UpdateMark, CallFunc_GetPlayerCharacter_ReturnValue) == 0x000000, "Member 'Wpn_Sniper_C_UpdateMark::CallFunc_GetPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateMark, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000008, "Member 'Wpn_Sniper_C_UpdateMark::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateMark, K2Node_DynamicCast_AsBP_Mer_2Character_PC) == 0x000018, "Member 'Wpn_Sniper_C_UpdateMark::K2Node_DynamicCast_AsBP_Mer_2Character_PC' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateMark, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'Wpn_Sniper_C_UpdateMark::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateMark, K2Node_MakeArray_Array) == 0x000028, "Member 'Wpn_Sniper_C_UpdateMark::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateMark, CallFunc_GetForwardVector_ReturnValue) == 0x000038, "Member 'Wpn_Sniper_C_UpdateMark::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateMark, CallFunc_K2_GetComponentLocation_ReturnValue1) == 0x000044, "Member 'Wpn_Sniper_C_UpdateMark::CallFunc_K2_GetComponentLocation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateMark, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000050, "Member 'Wpn_Sniper_C_UpdateMark::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateMark, CallFunc_Add_VectorVector_ReturnValue) == 0x00005C, "Member 'Wpn_Sniper_C_UpdateMark::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateMark, CallFunc_K2_GetComponentLocation_ReturnValue2) == 0x000068, "Member 'Wpn_Sniper_C_UpdateMark::CallFunc_K2_GetComponentLocation_ReturnValue2' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateMark, CallFunc_LineTraceSingle_OutHit) == 0x000078, "Member 'Wpn_Sniper_C_UpdateMark::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateMark, CallFunc_LineTraceSingle_ReturnValue) == 0x000100, "Member 'Wpn_Sniper_C_UpdateMark::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateMark, CallFunc_K2_GetComponentLocation_ReturnValue3) == 0x000104, "Member 'Wpn_Sniper_C_UpdateMark::CallFunc_K2_GetComponentLocation_ReturnValue3' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateMark, CallFunc_BreakHitResult_bBlockingHit) == 0x000110, "Member 'Wpn_Sniper_C_UpdateMark::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateMark, CallFunc_BreakHitResult_bInitialOverlap) == 0x000111, "Member 'Wpn_Sniper_C_UpdateMark::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateMark, CallFunc_BreakHitResult_Time) == 0x000114, "Member 'Wpn_Sniper_C_UpdateMark::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateMark, CallFunc_BreakHitResult_Distance) == 0x000118, "Member 'Wpn_Sniper_C_UpdateMark::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateMark, CallFunc_BreakHitResult_Location) == 0x00011C, "Member 'Wpn_Sniper_C_UpdateMark::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateMark, CallFunc_BreakHitResult_ImpactPoint) == 0x000128, "Member 'Wpn_Sniper_C_UpdateMark::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateMark, CallFunc_BreakHitResult_Normal) == 0x000134, "Member 'Wpn_Sniper_C_UpdateMark::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateMark, CallFunc_BreakHitResult_ImpactNormal) == 0x000140, "Member 'Wpn_Sniper_C_UpdateMark::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateMark, CallFunc_BreakHitResult_PhysMat) == 0x000150, "Member 'Wpn_Sniper_C_UpdateMark::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateMark, CallFunc_BreakHitResult_HitActor) == 0x000158, "Member 'Wpn_Sniper_C_UpdateMark::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateMark, CallFunc_BreakHitResult_HitComponent) == 0x000160, "Member 'Wpn_Sniper_C_UpdateMark::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateMark, CallFunc_BreakHitResult_HitBoneName) == 0x000168, "Member 'Wpn_Sniper_C_UpdateMark::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateMark, CallFunc_BreakHitResult_HitItem) == 0x000170, "Member 'Wpn_Sniper_C_UpdateMark::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateMark, CallFunc_BreakHitResult_FaceIndex) == 0x000174, "Member 'Wpn_Sniper_C_UpdateMark::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateMark, CallFunc_BreakHitResult_TraceStart) == 0x000178, "Member 'Wpn_Sniper_C_UpdateMark::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateMark, CallFunc_BreakHitResult_TraceEnd) == 0x000184, "Member 'Wpn_Sniper_C_UpdateMark::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateMark, CallFunc_FindLookAtRotation_ReturnValue) == 0x000190, "Member 'Wpn_Sniper_C_UpdateMark::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateMark, CallFunc_GetForwardVector_ReturnValue1) == 0x00019C, "Member 'Wpn_Sniper_C_UpdateMark::CallFunc_GetForwardVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateMark, CallFunc_K2_SetWorldRotation_SweepHitResult) == 0x0001A8, "Member 'Wpn_Sniper_C_UpdateMark::CallFunc_K2_SetWorldRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateMark, CallFunc_K2_GetComponentLocation_ReturnValue4) == 0x000230, "Member 'Wpn_Sniper_C_UpdateMark::CallFunc_K2_GetComponentLocation_ReturnValue4' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateMark, CallFunc_K2_GetComponentLocation_ReturnValue5) == 0x00023C, "Member 'Wpn_Sniper_C_UpdateMark::CallFunc_K2_GetComponentLocation_ReturnValue5' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateMark, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000248, "Member 'Wpn_Sniper_C_UpdateMark::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateMark, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00024C, "Member 'Wpn_Sniper_C_UpdateMark::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateMark, CallFunc_DegCos_ReturnValue) == 0x000258, "Member 'Wpn_Sniper_C_UpdateMark::CallFunc_DegCos_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateMark, CallFunc_GetForwardVector_ReturnValue2) == 0x00025C, "Member 'Wpn_Sniper_C_UpdateMark::CallFunc_GetForwardVector_ReturnValue2' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateMark, CallFunc_K2_GetComponentLocation_ReturnValue6) == 0x000268, "Member 'Wpn_Sniper_C_UpdateMark::CallFunc_K2_GetComponentLocation_ReturnValue6' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateMark, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000274, "Member 'Wpn_Sniper_C_UpdateMark::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateMark, CallFunc_Subtract_VectorVector_ReturnValue1) == 0x000280, "Member 'Wpn_Sniper_C_UpdateMark::CallFunc_Subtract_VectorVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateMark, CallFunc_ProjectVectorOnToPlane_ReturnValue) == 0x00028C, "Member 'Wpn_Sniper_C_UpdateMark::CallFunc_ProjectVectorOnToPlane_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateMark, CallFunc_Normal_ReturnValue) == 0x000298, "Member 'Wpn_Sniper_C_UpdateMark::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateMark, CallFunc_IsValid_ReturnValue) == 0x0002A4, "Member 'Wpn_Sniper_C_UpdateMark::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateMark, CallFunc_Multiply_VectorFloat_ReturnValue1) == 0x0002A8, "Member 'Wpn_Sniper_C_UpdateMark::CallFunc_Multiply_VectorFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateMark, CallFunc_Add_VectorVector_ReturnValue1) == 0x0002B4, "Member 'Wpn_Sniper_C_UpdateMark::CallFunc_Add_VectorVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateMark, CallFunc_Add_VectorVector_ReturnValue2) == 0x0002C0, "Member 'Wpn_Sniper_C_UpdateMark::CallFunc_Add_VectorVector_ReturnValue2' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateMark, CallFunc_K2_GetActorLocation_ReturnValue1) == 0x0002CC, "Member 'Wpn_Sniper_C_UpdateMark::CallFunc_K2_GetActorLocation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateMark, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x0002D8, "Member 'Wpn_Sniper_C_UpdateMark::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateMark, CallFunc_Subtract_VectorVector_ReturnValue2) == 0x000360, "Member 'Wpn_Sniper_C_UpdateMark::CallFunc_Subtract_VectorVector_ReturnValue2' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateMark, CallFunc_GetAllActorsOfClass_OutActors) == 0x000370, "Member 'Wpn_Sniper_C_UpdateMark::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateMark, CallFunc_Normal_ReturnValue1) == 0x000380, "Member 'Wpn_Sniper_C_UpdateMark::CallFunc_Normal_ReturnValue1' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateMark, CallFunc_Array_Get_Item) == 0x000390, "Member 'Wpn_Sniper_C_UpdateMark::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateMark, CallFunc_Dot_VectorVector_ReturnValue) == 0x000398, "Member 'Wpn_Sniper_C_UpdateMark::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateMark, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00039C, "Member 'Wpn_Sniper_C_UpdateMark::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateMark, CallFunc_IsValid_ReturnValue1) == 0x00039D, "Member 'Wpn_Sniper_C_UpdateMark::CallFunc_IsValid_ReturnValue1' has a wrong offset!");

// Function Wpn_Sniper.Wpn_Sniper_C.UpdateTransform
// 0x0170 (0x0170 - 0x0000)
struct Wpn_Sniper_C_UpdateTransform final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetActorLocationAndRotation_SweepHitResult; // 0x0008(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocationAndRotation_ReturnValue; // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetActorLocationAndRotation_SweepHitResult1; // 0x00B0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocationAndRotation_ReturnValue1; // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_139[0x3];                                      // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x013C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x014C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_14D[0x3];                                      // 0x014D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue;           // 0x0150(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0160(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Wpn_Sniper_C_UpdateTransform) == 0x000008, "Wrong alignment on Wpn_Sniper_C_UpdateTransform");
static_assert(sizeof(Wpn_Sniper_C_UpdateTransform) == 0x000170, "Wrong size on Wpn_Sniper_C_UpdateTransform");
static_assert(offsetof(Wpn_Sniper_C_UpdateTransform, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'Wpn_Sniper_C_UpdateTransform::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTransform, CallFunc_K2_SetActorLocationAndRotation_SweepHitResult) == 0x000008, "Member 'Wpn_Sniper_C_UpdateTransform::CallFunc_K2_SetActorLocationAndRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTransform, CallFunc_K2_SetActorLocationAndRotation_ReturnValue) == 0x000090, "Member 'Wpn_Sniper_C_UpdateTransform::CallFunc_K2_SetActorLocationAndRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTransform, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000094, "Member 'Wpn_Sniper_C_UpdateTransform::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTransform, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x0000A0, "Member 'Wpn_Sniper_C_UpdateTransform::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTransform, CallFunc_K2_SetActorLocationAndRotation_SweepHitResult1) == 0x0000B0, "Member 'Wpn_Sniper_C_UpdateTransform::CallFunc_K2_SetActorLocationAndRotation_SweepHitResult1' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTransform, CallFunc_K2_SetActorLocationAndRotation_ReturnValue1) == 0x000138, "Member 'Wpn_Sniper_C_UpdateTransform::CallFunc_K2_SetActorLocationAndRotation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTransform, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00013C, "Member 'Wpn_Sniper_C_UpdateTransform::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTransform, CallFunc_VSize_ReturnValue) == 0x000148, "Member 'Wpn_Sniper_C_UpdateTransform::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTransform, CallFunc_Less_FloatFloat_ReturnValue) == 0x00014C, "Member 'Wpn_Sniper_C_UpdateTransform::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTransform, CallFunc_Conv_FloatToString_ReturnValue) == 0x000150, "Member 'Wpn_Sniper_C_UpdateTransform::CallFunc_Conv_FloatToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTransform, CallFunc_Concat_StrStr_ReturnValue) == 0x000160, "Member 'Wpn_Sniper_C_UpdateTransform::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");

// Function Wpn_Sniper.Wpn_Sniper_C.UpdateLastPos
// 0x0010 (0x0010 - 0x0000)
struct Wpn_Sniper_C_UpdateLastPos final
{
public:
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wpn_Sniper_C_UpdateLastPos) == 0x000004, "Wrong alignment on Wpn_Sniper_C_UpdateLastPos");
static_assert(sizeof(Wpn_Sniper_C_UpdateLastPos) == 0x000010, "Wrong size on Wpn_Sniper_C_UpdateLastPos");
static_assert(offsetof(Wpn_Sniper_C_UpdateLastPos, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000000, "Member 'Wpn_Sniper_C_UpdateLastPos::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateLastPos, CallFunc_IsValid_ReturnValue) == 0x00000C, "Member 'Wpn_Sniper_C_UpdateLastPos::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function Wpn_Sniper.Wpn_Sniper_C.UpdateFocus
// 0x00B8 (0x00B8 - 0x0000)
struct Wpn_Sniper_C_UpdateFocus final
{
public:
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetUpVector_ReturnValue;                  // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult; // 0x0030(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Wpn_Sniper_C_UpdateFocus) == 0x000008, "Wrong alignment on Wpn_Sniper_C_UpdateFocus");
static_assert(sizeof(Wpn_Sniper_C_UpdateFocus) == 0x0000B8, "Wrong size on Wpn_Sniper_C_UpdateFocus");
static_assert(offsetof(Wpn_Sniper_C_UpdateFocus, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000000, "Member 'Wpn_Sniper_C_UpdateFocus::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateFocus, CallFunc_GetUpVector_ReturnValue) == 0x00000C, "Member 'Wpn_Sniper_C_UpdateFocus::CallFunc_GetUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateFocus, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000018, "Member 'Wpn_Sniper_C_UpdateFocus::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateFocus, CallFunc_Add_VectorVector_ReturnValue) == 0x000024, "Member 'Wpn_Sniper_C_UpdateFocus::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateFocus, CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult) == 0x000030, "Member 'Wpn_Sniper_C_UpdateFocus::CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult' has a wrong offset!");

// Function Wpn_Sniper.Wpn_Sniper_C.UpdateTrace
// 0x0168 (0x0168 - 0x0000)
struct Wpn_Sniper_C_UpdateTrace final
{
public:
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0000(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x0048(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D3[0x1];                                       // 0x00D3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0100(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0120(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0138(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0144(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ComponentHasTag_ReturnValue;              // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ComponentHasTag_ReturnValue1;             // 0x0151(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_152[0x6];                                      // 0x0152(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_NPC_Base_C*                         K2Node_DynamicCast_AsBP_NPC_Base;                  // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wpn_Sniper_C_UpdateTrace) == 0x000008, "Wrong alignment on Wpn_Sniper_C_UpdateTrace");
static_assert(sizeof(Wpn_Sniper_C_UpdateTrace) == 0x000168, "Wrong size on Wpn_Sniper_C_UpdateTrace");
static_assert(offsetof(Wpn_Sniper_C_UpdateTrace, Temp_object_Variable) == 0x000000, "Member 'Wpn_Sniper_C_UpdateTrace::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTrace, CallFunc_BooleanOR_ReturnValue) == 0x000010, "Member 'Wpn_Sniper_C_UpdateTrace::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTrace, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000014, "Member 'Wpn_Sniper_C_UpdateTrace::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTrace, CallFunc_GetForwardVector_ReturnValue) == 0x000020, "Member 'Wpn_Sniper_C_UpdateTrace::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTrace, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00002C, "Member 'Wpn_Sniper_C_UpdateTrace::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTrace, CallFunc_Add_VectorVector_ReturnValue) == 0x000038, "Member 'Wpn_Sniper_C_UpdateTrace::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTrace, CallFunc_LineTraceSingle_OutHit) == 0x000048, "Member 'Wpn_Sniper_C_UpdateTrace::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTrace, CallFunc_LineTraceSingle_ReturnValue) == 0x0000D0, "Member 'Wpn_Sniper_C_UpdateTrace::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTrace, CallFunc_BreakHitResult_bBlockingHit) == 0x0000D1, "Member 'Wpn_Sniper_C_UpdateTrace::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTrace, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000D2, "Member 'Wpn_Sniper_C_UpdateTrace::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTrace, CallFunc_BreakHitResult_Time) == 0x0000D4, "Member 'Wpn_Sniper_C_UpdateTrace::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTrace, CallFunc_BreakHitResult_Distance) == 0x0000D8, "Member 'Wpn_Sniper_C_UpdateTrace::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTrace, CallFunc_BreakHitResult_Location) == 0x0000DC, "Member 'Wpn_Sniper_C_UpdateTrace::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTrace, CallFunc_BreakHitResult_ImpactPoint) == 0x0000E8, "Member 'Wpn_Sniper_C_UpdateTrace::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTrace, CallFunc_BreakHitResult_Normal) == 0x0000F4, "Member 'Wpn_Sniper_C_UpdateTrace::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTrace, CallFunc_BreakHitResult_ImpactNormal) == 0x000100, "Member 'Wpn_Sniper_C_UpdateTrace::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTrace, CallFunc_BreakHitResult_PhysMat) == 0x000110, "Member 'Wpn_Sniper_C_UpdateTrace::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTrace, CallFunc_BreakHitResult_HitActor) == 0x000118, "Member 'Wpn_Sniper_C_UpdateTrace::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTrace, CallFunc_BreakHitResult_HitComponent) == 0x000120, "Member 'Wpn_Sniper_C_UpdateTrace::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTrace, CallFunc_BreakHitResult_HitBoneName) == 0x000128, "Member 'Wpn_Sniper_C_UpdateTrace::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTrace, CallFunc_BreakHitResult_HitItem) == 0x000130, "Member 'Wpn_Sniper_C_UpdateTrace::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTrace, CallFunc_BreakHitResult_FaceIndex) == 0x000134, "Member 'Wpn_Sniper_C_UpdateTrace::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTrace, CallFunc_BreakHitResult_TraceStart) == 0x000138, "Member 'Wpn_Sniper_C_UpdateTrace::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTrace, CallFunc_BreakHitResult_TraceEnd) == 0x000144, "Member 'Wpn_Sniper_C_UpdateTrace::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTrace, CallFunc_ComponentHasTag_ReturnValue) == 0x000150, "Member 'Wpn_Sniper_C_UpdateTrace::CallFunc_ComponentHasTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTrace, CallFunc_ComponentHasTag_ReturnValue1) == 0x000151, "Member 'Wpn_Sniper_C_UpdateTrace::CallFunc_ComponentHasTag_ReturnValue1' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTrace, K2Node_DynamicCast_AsBP_NPC_Base) == 0x000158, "Member 'Wpn_Sniper_C_UpdateTrace::K2Node_DynamicCast_AsBP_NPC_Base' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTrace, K2Node_DynamicCast_bSuccess) == 0x000160, "Member 'Wpn_Sniper_C_UpdateTrace::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function Wpn_Sniper.Wpn_Sniper_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct Wpn_Sniper_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wpn_Sniper_C_ReceiveTick) == 0x000004, "Wrong alignment on Wpn_Sniper_C_ReceiveTick");
static_assert(sizeof(Wpn_Sniper_C_ReceiveTick) == 0x000004, "Wrong size on Wpn_Sniper_C_ReceiveTick");
static_assert(offsetof(Wpn_Sniper_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'Wpn_Sniper_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function Wpn_Sniper.Wpn_Sniper_C.UpdateTraceHit
// 0x0268 (0x0268 - 0x0000)
struct Wpn_Sniper_C_UpdateTraceHit final
{
public:
	float                                         _Dt;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         dt;                                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                hitPos;                                            // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue1;           // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetComponentScale_ReturnValue;         // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue1;         // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegTan_ReturnValue;                       // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue1;     // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue2;     // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue3;     // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ProjectVectorOnToVector_ReturnValue;      // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue4;     // 0x00AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue1;       // 0x00C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue2;       // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue1;                       // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue2;         // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ProjectVectorOnToPlane_ReturnValue;       // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue1;           // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x00F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue3;         // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0108(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue5;     // 0x0114(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue1;            // 0x0120(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VInterpTo_ReturnValue;                    // 0x012C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue2;            // 0x0138(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_144[0x4];                                      // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x0148(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_VInterpTo_ReturnValue1;                   // 0x01D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1DC[0x4];                                      // 0x01DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult1;      // 0x01E0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Wpn_Sniper_C_UpdateTraceHit) == 0x000008, "Wrong alignment on Wpn_Sniper_C_UpdateTraceHit");
static_assert(sizeof(Wpn_Sniper_C_UpdateTraceHit) == 0x000268, "Wrong size on Wpn_Sniper_C_UpdateTraceHit");
static_assert(offsetof(Wpn_Sniper_C_UpdateTraceHit, _Dt) == 0x000000, "Member 'Wpn_Sniper_C_UpdateTraceHit::_Dt' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTraceHit, dt) == 0x000004, "Member 'Wpn_Sniper_C_UpdateTraceHit::dt' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTraceHit, hitPos) == 0x000008, "Member 'Wpn_Sniper_C_UpdateTraceHit::hitPos' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTraceHit, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000014, "Member 'Wpn_Sniper_C_UpdateTraceHit::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTraceHit, CallFunc_GetSocketLocation_ReturnValue) == 0x000020, "Member 'Wpn_Sniper_C_UpdateTraceHit::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTraceHit, CallFunc_GetSocketLocation_ReturnValue1) == 0x00002C, "Member 'Wpn_Sniper_C_UpdateTraceHit::CallFunc_GetSocketLocation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTraceHit, CallFunc_IsValid_ReturnValue) == 0x000038, "Member 'Wpn_Sniper_C_UpdateTraceHit::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTraceHit, CallFunc_Not_PreBool_ReturnValue) == 0x000039, "Member 'Wpn_Sniper_C_UpdateTraceHit::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTraceHit, CallFunc_BooleanOR_ReturnValue) == 0x00003A, "Member 'Wpn_Sniper_C_UpdateTraceHit::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTraceHit, CallFunc_BooleanAND_ReturnValue) == 0x00003B, "Member 'Wpn_Sniper_C_UpdateTraceHit::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTraceHit, CallFunc_K2_GetComponentScale_ReturnValue) == 0x00003C, "Member 'Wpn_Sniper_C_UpdateTraceHit::CallFunc_K2_GetComponentScale_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTraceHit, CallFunc_BreakVector_X) == 0x000048, "Member 'Wpn_Sniper_C_UpdateTraceHit::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTraceHit, CallFunc_BreakVector_Y) == 0x00004C, "Member 'Wpn_Sniper_C_UpdateTraceHit::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTraceHit, CallFunc_BreakVector_Z) == 0x000050, "Member 'Wpn_Sniper_C_UpdateTraceHit::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTraceHit, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000054, "Member 'Wpn_Sniper_C_UpdateTraceHit::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTraceHit, CallFunc_Multiply_FloatFloat_ReturnValue1) == 0x000058, "Member 'Wpn_Sniper_C_UpdateTraceHit::CallFunc_Multiply_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTraceHit, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00005C, "Member 'Wpn_Sniper_C_UpdateTraceHit::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTraceHit, CallFunc_DegTan_ReturnValue) == 0x000060, "Member 'Wpn_Sniper_C_UpdateTraceHit::CallFunc_DegTan_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTraceHit, CallFunc_K2_GetComponentLocation_ReturnValue1) == 0x000064, "Member 'Wpn_Sniper_C_UpdateTraceHit::CallFunc_K2_GetComponentLocation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTraceHit, CallFunc_K2_GetComponentLocation_ReturnValue2) == 0x000070, "Member 'Wpn_Sniper_C_UpdateTraceHit::CallFunc_K2_GetComponentLocation_ReturnValue2' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTraceHit, CallFunc_K2_GetComponentLocation_ReturnValue3) == 0x00007C, "Member 'Wpn_Sniper_C_UpdateTraceHit::CallFunc_K2_GetComponentLocation_ReturnValue3' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTraceHit, CallFunc_GetForwardVector_ReturnValue) == 0x000088, "Member 'Wpn_Sniper_C_UpdateTraceHit::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTraceHit, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000094, "Member 'Wpn_Sniper_C_UpdateTraceHit::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTraceHit, CallFunc_ProjectVectorOnToVector_ReturnValue) == 0x0000A0, "Member 'Wpn_Sniper_C_UpdateTraceHit::CallFunc_ProjectVectorOnToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTraceHit, CallFunc_K2_GetComponentLocation_ReturnValue4) == 0x0000AC, "Member 'Wpn_Sniper_C_UpdateTraceHit::CallFunc_K2_GetComponentLocation_ReturnValue4' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTraceHit, CallFunc_Add_VectorVector_ReturnValue) == 0x0000B8, "Member 'Wpn_Sniper_C_UpdateTraceHit::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTraceHit, CallFunc_Subtract_VectorVector_ReturnValue1) == 0x0000C4, "Member 'Wpn_Sniper_C_UpdateTraceHit::CallFunc_Subtract_VectorVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTraceHit, CallFunc_Subtract_VectorVector_ReturnValue2) == 0x0000D0, "Member 'Wpn_Sniper_C_UpdateTraceHit::CallFunc_Subtract_VectorVector_ReturnValue2' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTraceHit, CallFunc_VSize_ReturnValue) == 0x0000DC, "Member 'Wpn_Sniper_C_UpdateTraceHit::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTraceHit, CallFunc_VSize_ReturnValue1) == 0x0000E0, "Member 'Wpn_Sniper_C_UpdateTraceHit::CallFunc_VSize_ReturnValue1' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTraceHit, CallFunc_Multiply_FloatFloat_ReturnValue2) == 0x0000E4, "Member 'Wpn_Sniper_C_UpdateTraceHit::CallFunc_Multiply_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTraceHit, CallFunc_ProjectVectorOnToPlane_ReturnValue) == 0x0000E8, "Member 'Wpn_Sniper_C_UpdateTraceHit::CallFunc_ProjectVectorOnToPlane_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTraceHit, CallFunc_Divide_FloatFloat_ReturnValue1) == 0x0000F4, "Member 'Wpn_Sniper_C_UpdateTraceHit::CallFunc_Divide_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTraceHit, CallFunc_Normal_ReturnValue) == 0x0000F8, "Member 'Wpn_Sniper_C_UpdateTraceHit::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTraceHit, CallFunc_Multiply_FloatFloat_ReturnValue3) == 0x000104, "Member 'Wpn_Sniper_C_UpdateTraceHit::CallFunc_Multiply_FloatFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTraceHit, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000108, "Member 'Wpn_Sniper_C_UpdateTraceHit::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTraceHit, CallFunc_K2_GetComponentLocation_ReturnValue5) == 0x000114, "Member 'Wpn_Sniper_C_UpdateTraceHit::CallFunc_K2_GetComponentLocation_ReturnValue5' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTraceHit, CallFunc_Add_VectorVector_ReturnValue1) == 0x000120, "Member 'Wpn_Sniper_C_UpdateTraceHit::CallFunc_Add_VectorVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTraceHit, CallFunc_VInterpTo_ReturnValue) == 0x00012C, "Member 'Wpn_Sniper_C_UpdateTraceHit::CallFunc_VInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTraceHit, CallFunc_Add_VectorVector_ReturnValue2) == 0x000138, "Member 'Wpn_Sniper_C_UpdateTraceHit::CallFunc_Add_VectorVector_ReturnValue2' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTraceHit, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x000148, "Member 'Wpn_Sniper_C_UpdateTraceHit::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTraceHit, CallFunc_VInterpTo_ReturnValue1) == 0x0001D0, "Member 'Wpn_Sniper_C_UpdateTraceHit::CallFunc_VInterpTo_ReturnValue1' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateTraceHit, CallFunc_K2_SetWorldLocation_SweepHitResult1) == 0x0001E0, "Member 'Wpn_Sniper_C_UpdateTraceHit::CallFunc_K2_SetWorldLocation_SweepHitResult1' has a wrong offset!");

// Function Wpn_Sniper.Wpn_Sniper_C.UpdateHVLine
// 0x0220 (0x0220 - 0x0000)
struct Wpn_Sniper_C_UpdateHVLine final
{
public:
	float                                         _Dt;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                StandPos;                                          // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentScale_ReturnValue;         // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRightVector_ReturnValue;               // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentScale_ReturnValue1;        // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentScale_ReturnValue2;        // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X1;                           // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y1;                           // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z1;                           // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X2;                           // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y2;                           // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z2;                           // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue1;         // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Square_ReturnValue;                       // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue1;     // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ProjectVectorOnToVector_ReturnValue;      // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ProjectVectorOnToVector_ReturnValue1;     // 0x00AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSizeSquared_ReturnValue;                 // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSizeSquared_ReturnValue1;                // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue1;         // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Sqrt_ReturnValue;                         // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Sqrt_ReturnValue1;                        // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue2;         // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue3;         // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue1;           // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue1;                  // 0x00EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue1;            // 0x0104(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x0110(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult1;      // 0x0198(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Wpn_Sniper_C_UpdateHVLine) == 0x000008, "Wrong alignment on Wpn_Sniper_C_UpdateHVLine");
static_assert(sizeof(Wpn_Sniper_C_UpdateHVLine) == 0x000220, "Wrong size on Wpn_Sniper_C_UpdateHVLine");
static_assert(offsetof(Wpn_Sniper_C_UpdateHVLine, _Dt) == 0x000000, "Member 'Wpn_Sniper_C_UpdateHVLine::_Dt' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateHVLine, StandPos) == 0x000004, "Member 'Wpn_Sniper_C_UpdateHVLine::StandPos' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateHVLine, CallFunc_GetForwardVector_ReturnValue) == 0x000010, "Member 'Wpn_Sniper_C_UpdateHVLine::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateHVLine, CallFunc_K2_GetComponentScale_ReturnValue) == 0x00001C, "Member 'Wpn_Sniper_C_UpdateHVLine::CallFunc_K2_GetComponentScale_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateHVLine, CallFunc_GetRightVector_ReturnValue) == 0x000028, "Member 'Wpn_Sniper_C_UpdateHVLine::CallFunc_GetRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateHVLine, CallFunc_BreakVector_X) == 0x000034, "Member 'Wpn_Sniper_C_UpdateHVLine::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateHVLine, CallFunc_BreakVector_Y) == 0x000038, "Member 'Wpn_Sniper_C_UpdateHVLine::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateHVLine, CallFunc_BreakVector_Z) == 0x00003C, "Member 'Wpn_Sniper_C_UpdateHVLine::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateHVLine, CallFunc_K2_GetComponentScale_ReturnValue1) == 0x000040, "Member 'Wpn_Sniper_C_UpdateHVLine::CallFunc_K2_GetComponentScale_ReturnValue1' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateHVLine, CallFunc_K2_GetComponentScale_ReturnValue2) == 0x00004C, "Member 'Wpn_Sniper_C_UpdateHVLine::CallFunc_K2_GetComponentScale_ReturnValue2' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateHVLine, CallFunc_BreakVector_X1) == 0x000058, "Member 'Wpn_Sniper_C_UpdateHVLine::CallFunc_BreakVector_X1' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateHVLine, CallFunc_BreakVector_Y1) == 0x00005C, "Member 'Wpn_Sniper_C_UpdateHVLine::CallFunc_BreakVector_Y1' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateHVLine, CallFunc_BreakVector_Z1) == 0x000060, "Member 'Wpn_Sniper_C_UpdateHVLine::CallFunc_BreakVector_Z1' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateHVLine, CallFunc_BreakVector_X2) == 0x000064, "Member 'Wpn_Sniper_C_UpdateHVLine::CallFunc_BreakVector_X2' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateHVLine, CallFunc_BreakVector_Y2) == 0x000068, "Member 'Wpn_Sniper_C_UpdateHVLine::CallFunc_BreakVector_Y2' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateHVLine, CallFunc_BreakVector_Z2) == 0x00006C, "Member 'Wpn_Sniper_C_UpdateHVLine::CallFunc_BreakVector_Z2' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateHVLine, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000070, "Member 'Wpn_Sniper_C_UpdateHVLine::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateHVLine, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000074, "Member 'Wpn_Sniper_C_UpdateHVLine::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateHVLine, CallFunc_Multiply_FloatFloat_ReturnValue1) == 0x000080, "Member 'Wpn_Sniper_C_UpdateHVLine::CallFunc_Multiply_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateHVLine, CallFunc_Square_ReturnValue) == 0x000084, "Member 'Wpn_Sniper_C_UpdateHVLine::CallFunc_Square_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateHVLine, CallFunc_K2_GetComponentLocation_ReturnValue1) == 0x000088, "Member 'Wpn_Sniper_C_UpdateHVLine::CallFunc_K2_GetComponentLocation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateHVLine, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000094, "Member 'Wpn_Sniper_C_UpdateHVLine::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateHVLine, CallFunc_ProjectVectorOnToVector_ReturnValue) == 0x0000A0, "Member 'Wpn_Sniper_C_UpdateHVLine::CallFunc_ProjectVectorOnToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateHVLine, CallFunc_ProjectVectorOnToVector_ReturnValue1) == 0x0000AC, "Member 'Wpn_Sniper_C_UpdateHVLine::CallFunc_ProjectVectorOnToVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateHVLine, CallFunc_VSizeSquared_ReturnValue) == 0x0000B8, "Member 'Wpn_Sniper_C_UpdateHVLine::CallFunc_VSizeSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateHVLine, CallFunc_VSizeSquared_ReturnValue1) == 0x0000BC, "Member 'Wpn_Sniper_C_UpdateHVLine::CallFunc_VSizeSquared_ReturnValue1' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateHVLine, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0000C0, "Member 'Wpn_Sniper_C_UpdateHVLine::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateHVLine, CallFunc_Subtract_FloatFloat_ReturnValue1) == 0x0000C4, "Member 'Wpn_Sniper_C_UpdateHVLine::CallFunc_Subtract_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateHVLine, CallFunc_Sqrt_ReturnValue) == 0x0000C8, "Member 'Wpn_Sniper_C_UpdateHVLine::CallFunc_Sqrt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateHVLine, CallFunc_Sqrt_ReturnValue1) == 0x0000CC, "Member 'Wpn_Sniper_C_UpdateHVLine::CallFunc_Sqrt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateHVLine, CallFunc_Multiply_FloatFloat_ReturnValue2) == 0x0000D0, "Member 'Wpn_Sniper_C_UpdateHVLine::CallFunc_Multiply_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateHVLine, CallFunc_Multiply_FloatFloat_ReturnValue3) == 0x0000D4, "Member 'Wpn_Sniper_C_UpdateHVLine::CallFunc_Multiply_FloatFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateHVLine, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0000D8, "Member 'Wpn_Sniper_C_UpdateHVLine::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateHVLine, CallFunc_Divide_FloatFloat_ReturnValue1) == 0x0000DC, "Member 'Wpn_Sniper_C_UpdateHVLine::CallFunc_Divide_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateHVLine, CallFunc_MakeVector_ReturnValue) == 0x0000E0, "Member 'Wpn_Sniper_C_UpdateHVLine::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateHVLine, CallFunc_MakeVector_ReturnValue1) == 0x0000EC, "Member 'Wpn_Sniper_C_UpdateHVLine::CallFunc_MakeVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateHVLine, CallFunc_Add_VectorVector_ReturnValue) == 0x0000F8, "Member 'Wpn_Sniper_C_UpdateHVLine::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateHVLine, CallFunc_Add_VectorVector_ReturnValue1) == 0x000104, "Member 'Wpn_Sniper_C_UpdateHVLine::CallFunc_Add_VectorVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateHVLine, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x000110, "Member 'Wpn_Sniper_C_UpdateHVLine::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(Wpn_Sniper_C_UpdateHVLine, CallFunc_K2_SetWorldLocation_SweepHitResult1) == 0x000198, "Member 'Wpn_Sniper_C_UpdateHVLine::CallFunc_K2_SetWorldLocation_SweepHitResult1' has a wrong offset!");

}

