#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NPC_Base

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_NPC_Base.BP_NPC_Base_C
// 0x0170 (0x08B0 - 0x0740)
class ABP_NPC_Base_C : public ACharacter
{
public:
	uint8                                         Pad_738[0x8];                                      // 0x0738(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0740(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          BodyTrace;                                         // 0x0748(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          HeadTrace;                                         // 0x0750(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_BehaviorTriggerComponent_C*         BehaviorTriggerComponent;                          // 0x0758(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_BehaviorComponent_C*                BehaviorComponent;                                 // 0x0760(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       MeleeCollision;                                    // 0x0768(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_NewTrack_0_0A4278CC468BD15EEF2A079BE4C68463; // 0x0770(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_0A4278CC468BD15EEF2A079BE4C68463; // 0x0774(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_775[0x3];                                      // 0x0775(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x0778(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BaseTurnRate;                                      // 0x0780(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BaseLookUpRate;                                    // 0x0784(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Health;                                            // 0x0788(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	float                                         MaxHealth;                                         // 0x078C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DamageMelee;                                       // 0x0790(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHit;                                             // 0x0794(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_795[0x3];                                      // 0x0795(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BoneName;                                          // 0x0798(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlendWeight;                                       // 0x07A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PresureParam;                                      // 0x07A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PresureForward;                                    // 0x07A8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDead;                                            // 0x07B4(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B5[0x3];                                      // 0x07B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   WeaponSocket;                                      // 0x07B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABPWeaponBase_C*                        CurrentWeapon;                                     // 0x07C0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 DefaultWeapon;                                     // 0x07C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_DeadlyBulletSettings_C*             DeadlyBulletSettings;                              // 0x07D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AISpawner_C*                        Spawner;                                           // 0x07D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MyLocation;                                        // 0x07E0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRequireItem;                                     // 0x07EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7ED[0x3];                                      // 0x07ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HeadDamageRate;                                    // 0x07F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BodyDamageRate;                                    // 0x07F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LimbsDamageRate;                                   // 0x07F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsUndead;                                          // 0x07FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7FD[0x3];                                      // 0x07FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AISpawnerNEW_C*                     SpawnerNew;                                        // 0x0800(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAllowAttack;                                     // 0x0808(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsHeadShot;                                        // 0x0809(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_80A[0x2];                                      // 0x080A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitLocation;                                       // 0x080C(0x000C)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitNormal;                                         // 0x0818(0x000C)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x0824(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FocusTime;                                         // 0x0828(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          lsCheckFocus_;                                     // 0x082C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_82D[0x3];                                      // 0x082D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FocusDt;                                           // 0x0830(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_834[0x4];                                      // 0x0834(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_CharacterBase_C*                    playerPawn;                                        // 0x0838(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   OnFocusOver;                                       // 0x0840(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FVector                                Tpos;                                              // 0x0850(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_85C[0x4];                                      // 0x085C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnEventDead;                                       // 0x0860(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnDeadlyBulletFire;                                // 0x0870(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          EnableHitReact;                                    // 0x0880(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsNeedRagdoll;                                     // 0x0881(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_882[0x2];                                      // 0x0882(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeadlyBulletRate;                                  // 0x0884(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DestroyTime;                                       // 0x0888(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TwoP_HealthMultiplier;                             // 0x088C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Stuck;                                             // 0x0890(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_891[0x3];                                      // 0x0891(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                WeaponTarget;                                      // 0x0894(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NeedGenerateItem;                                  // 0x08A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8A1[0x7];                                      // 0x08A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 HitActor;                                          // 0x08A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_NPC_Base(int32 EntryPoint);
	void OnHitOtherDead(const struct FVector& HitLocation_0, const struct FVector& HitNormal_0, class APlayerController* PlayerController);
	void CallOnHitOtherDead(const struct FVector& HitLocation_0, const struct FVector& HitNormal_0, class APlayerController* PlayerController);
	void CallOnHitHeadDead(const struct FVector& HitLocation_0, const struct FVector& HitNormal_0, class APlayerController* PlayerController);
	void BndEvt__Mesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnHitHeadDead(const struct FVector& HitLocation_0, const struct FVector& HitNormal_0, class APlayerController* PlayerController);
	void OnPerformAttackRanged(class ABPWeaponBase_C* Weapon);
	void OnServerAttackRanged(class ABPWeaponBase_C* Weapon, const struct FVector& TargetPos, int32 SpecialCount);
	void OnHitOther(class APlayerController* PlayerController, const struct FVector& HitLocation_0, const struct FVector& HitNormal_0);
	void OnHitBody(class APlayerController* PlayerController, const struct FVector& HitLocation_0, const struct FVector& HitNormal_0);
	void OnHitHead(class APlayerController* PlayerController, const struct FVector& HitLocation_0, const struct FVector& HitNormal_0);
	void CheatDamge(float Damge);
	void ReceiveTick(float DeltaSeconds);
	void OnDeath(class APlayerController* PlayerController);
	void OnDamaged(float Damage_0, class AActor* DamageCauser);
	void OnRangedAttack();
	void OnMeleeAttack(bool HitSuccess);
	void ReceiveAnyDamage(float Damage_0, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceiveBeginPlay();
	void Timeline_0__UpdateFunc();
	void Timeline_0__FinishedFunc();
	void UserConstructionScript();
	void PerformMeleeAttack();
	void PerformRangedAttack(class ABPWeaponBase_C* Weapon, bool* IsAttack);
	void OnRep_Health();
	void SetWeaponByClass(class UClass* Type);
	struct FVector GetTargetPoint(bool IsSpecial, bool IsForceHead);
	void GetDamageFromBone(class FName BoneName_0, float BaseDamage, class APlayerController* PlayerController, const struct FVector& HitLocation_0, const struct FVector& HitNormal_0, float* Damage_0);
	void Rep_PerformRangedAttack(class ABPWeaponBase_C* Weapon, bool* IsAttack);
	void SetFocusCheckIn(float Time);
	void SetHidePause();
	void FindPathToLocation(const struct FVector& StartLocation, const struct FVector& TargetLocation, TArray<struct FVector>* Waypoint);
	void GetPlayerControllerFromObject(class AActor* In, class APlayerController** PlayerController);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_NPC_Base_C">();
	}
	static class ABP_NPC_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_NPC_Base_C>();
	}
};
static_assert(alignof(ABP_NPC_Base_C) == 0x000010, "Wrong alignment on ABP_NPC_Base_C");
static_assert(sizeof(ABP_NPC_Base_C) == 0x0008B0, "Wrong size on ABP_NPC_Base_C");
static_assert(offsetof(ABP_NPC_Base_C, UberGraphFrame) == 0x000740, "Member 'ABP_NPC_Base_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Base_C, BodyTrace) == 0x000748, "Member 'ABP_NPC_Base_C::BodyTrace' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Base_C, HeadTrace) == 0x000750, "Member 'ABP_NPC_Base_C::HeadTrace' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Base_C, BehaviorTriggerComponent) == 0x000758, "Member 'ABP_NPC_Base_C::BehaviorTriggerComponent' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Base_C, BehaviorComponent) == 0x000760, "Member 'ABP_NPC_Base_C::BehaviorComponent' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Base_C, MeleeCollision) == 0x000768, "Member 'ABP_NPC_Base_C::MeleeCollision' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Base_C, Timeline_0_NewTrack_0_0A4278CC468BD15EEF2A079BE4C68463) == 0x000770, "Member 'ABP_NPC_Base_C::Timeline_0_NewTrack_0_0A4278CC468BD15EEF2A079BE4C68463' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Base_C, Timeline_0__Direction_0A4278CC468BD15EEF2A079BE4C68463) == 0x000774, "Member 'ABP_NPC_Base_C::Timeline_0__Direction_0A4278CC468BD15EEF2A079BE4C68463' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Base_C, Timeline_0) == 0x000778, "Member 'ABP_NPC_Base_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Base_C, BaseTurnRate) == 0x000780, "Member 'ABP_NPC_Base_C::BaseTurnRate' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Base_C, BaseLookUpRate) == 0x000784, "Member 'ABP_NPC_Base_C::BaseLookUpRate' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Base_C, Health) == 0x000788, "Member 'ABP_NPC_Base_C::Health' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Base_C, MaxHealth) == 0x00078C, "Member 'ABP_NPC_Base_C::MaxHealth' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Base_C, DamageMelee) == 0x000790, "Member 'ABP_NPC_Base_C::DamageMelee' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Base_C, IsHit) == 0x000794, "Member 'ABP_NPC_Base_C::IsHit' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Base_C, BoneName) == 0x000798, "Member 'ABP_NPC_Base_C::BoneName' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Base_C, BlendWeight) == 0x0007A0, "Member 'ABP_NPC_Base_C::BlendWeight' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Base_C, PresureParam) == 0x0007A4, "Member 'ABP_NPC_Base_C::PresureParam' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Base_C, PresureForward) == 0x0007A8, "Member 'ABP_NPC_Base_C::PresureForward' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Base_C, IsDead) == 0x0007B4, "Member 'ABP_NPC_Base_C::IsDead' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Base_C, WeaponSocket) == 0x0007B8, "Member 'ABP_NPC_Base_C::WeaponSocket' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Base_C, CurrentWeapon) == 0x0007C0, "Member 'ABP_NPC_Base_C::CurrentWeapon' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Base_C, DefaultWeapon) == 0x0007C8, "Member 'ABP_NPC_Base_C::DefaultWeapon' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Base_C, DeadlyBulletSettings) == 0x0007D0, "Member 'ABP_NPC_Base_C::DeadlyBulletSettings' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Base_C, Spawner) == 0x0007D8, "Member 'ABP_NPC_Base_C::Spawner' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Base_C, MyLocation) == 0x0007E0, "Member 'ABP_NPC_Base_C::MyLocation' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Base_C, IsRequireItem) == 0x0007EC, "Member 'ABP_NPC_Base_C::IsRequireItem' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Base_C, HeadDamageRate) == 0x0007F0, "Member 'ABP_NPC_Base_C::HeadDamageRate' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Base_C, BodyDamageRate) == 0x0007F4, "Member 'ABP_NPC_Base_C::BodyDamageRate' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Base_C, LimbsDamageRate) == 0x0007F8, "Member 'ABP_NPC_Base_C::LimbsDamageRate' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Base_C, IsUndead) == 0x0007FC, "Member 'ABP_NPC_Base_C::IsUndead' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Base_C, SpawnerNew) == 0x000800, "Member 'ABP_NPC_Base_C::SpawnerNew' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Base_C, IsAllowAttack) == 0x000808, "Member 'ABP_NPC_Base_C::IsAllowAttack' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Base_C, IsHeadShot) == 0x000809, "Member 'ABP_NPC_Base_C::IsHeadShot' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Base_C, HitLocation) == 0x00080C, "Member 'ABP_NPC_Base_C::HitLocation' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Base_C, HitNormal) == 0x000818, "Member 'ABP_NPC_Base_C::HitNormal' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Base_C, Damage) == 0x000824, "Member 'ABP_NPC_Base_C::Damage' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Base_C, FocusTime) == 0x000828, "Member 'ABP_NPC_Base_C::FocusTime' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Base_C, lsCheckFocus_) == 0x00082C, "Member 'ABP_NPC_Base_C::lsCheckFocus_' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Base_C, FocusDt) == 0x000830, "Member 'ABP_NPC_Base_C::FocusDt' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Base_C, playerPawn) == 0x000838, "Member 'ABP_NPC_Base_C::playerPawn' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Base_C, OnFocusOver) == 0x000840, "Member 'ABP_NPC_Base_C::OnFocusOver' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Base_C, Tpos) == 0x000850, "Member 'ABP_NPC_Base_C::Tpos' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Base_C, OnEventDead) == 0x000860, "Member 'ABP_NPC_Base_C::OnEventDead' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Base_C, OnDeadlyBulletFire) == 0x000870, "Member 'ABP_NPC_Base_C::OnDeadlyBulletFire' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Base_C, EnableHitReact) == 0x000880, "Member 'ABP_NPC_Base_C::EnableHitReact' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Base_C, IsNeedRagdoll) == 0x000881, "Member 'ABP_NPC_Base_C::IsNeedRagdoll' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Base_C, DeadlyBulletRate) == 0x000884, "Member 'ABP_NPC_Base_C::DeadlyBulletRate' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Base_C, DestroyTime) == 0x000888, "Member 'ABP_NPC_Base_C::DestroyTime' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Base_C, TwoP_HealthMultiplier) == 0x00088C, "Member 'ABP_NPC_Base_C::TwoP_HealthMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Base_C, Stuck) == 0x000890, "Member 'ABP_NPC_Base_C::Stuck' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Base_C, WeaponTarget) == 0x000894, "Member 'ABP_NPC_Base_C::WeaponTarget' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Base_C, NeedGenerateItem) == 0x0008A0, "Member 'ABP_NPC_Base_C::NeedGenerateItem' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Base_C, HitActor) == 0x0008A8, "Member 'ABP_NPC_Base_C::HitActor' has a wrong offset!");

}

