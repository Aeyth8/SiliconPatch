#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SampleFilter

#include "Basic.hpp"

#include "SampleFilter_classes.hpp"
#include "SampleFilter_parameters.hpp"


namespace SDK
{

// Function SampleFilter.SampleFilter_C.SampleFilter
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FVector>&                 Array                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
// const struct FVector&                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MaxCount                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  Rate                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString*                          contentx                                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// class FString*                          contenty                                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// class FString*                          contentz                                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void USampleFilter_C::SampleFilter(TArray<struct FVector>& Array, const struct FVector& Value, int32 MaxCount, class UObject* __WorldContext, float* Rate, class FString* contentx, class FString* contenty, class FString* contentz)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SampleFilter_C", "SampleFilter");

	Params::SampleFilter_C_SampleFilter Parms{};

	Parms.Array = std::move(Array);
	Parms.Value = std::move(Value);
	Parms.MaxCount = MaxCount;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Array = std::move(Parms.Array);

	if (Rate != nullptr)
		*Rate = Parms.Rate;

	if (contentx != nullptr)
		*contentx = std::move(Parms.contentx);

	if (contenty != nullptr)
		*contenty = std::move(Parms.contenty);

	if (contentz != nullptr)
		*contentz = std::move(Parms.contentz);
}


// Function SampleFilter.SampleFilter_C.SliderArray
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FVector>&                 Array                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FVector&                         Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MaxCount                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  Count                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USampleFilter_C::SliderArray(TArray<struct FVector>& Array, struct FVector& Value, int32 MaxCount, class UObject* __WorldContext, int32* Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SampleFilter_C", "SliderArray");

	Params::SampleFilter_C_SliderArray Parms{};

	Parms.Array = std::move(Array);
	Parms.Value = std::move(Value);
	Parms.MaxCount = MaxCount;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Array = std::move(Parms.Array);
	Value = std::move(Parms.Value);

	if (Count != nullptr)
		*Count = Parms.Count;
}


// Function SampleFilter.SampleFilter_C.DeltaFilter
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Axis                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FVector>&                 Data                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                                    IsDebug                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  Ratio                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString*                          DebugText                                              (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void USampleFilter_C::DeltaFilter(int32 Axis, TArray<struct FVector>& Data, bool IsDebug, class UObject* __WorldContext, float* Ratio, class FString* DebugText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SampleFilter_C", "DeltaFilter");

	Params::SampleFilter_C_DeltaFilter Parms{};

	Parms.Axis = Axis;
	Parms.Data = std::move(Data);
	Parms.IsDebug = IsDebug;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Data = std::move(Parms.Data);

	if (Ratio != nullptr)
		*Ratio = Parms.Ratio;

	if (DebugText != nullptr)
		*DebugText = std::move(Parms.DebugText);
}

}

