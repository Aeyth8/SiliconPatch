#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Wpn_Pistol_PVP

#include "Basic.hpp"

#include "SiliconRising_structs.hpp"


namespace SDK::Params
{

// Function Wpn_Pistol_PVP.Wpn_Pistol_PVP_C.ExecuteUbergraph_Wpn_Pistol_PVP
// 0x0050 (0x0050 - 0x0000)
struct Wpn_Pistol_PVP_C_ExecuteUbergraph_Wpn_Pistol_PVP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class AWpn_Clip_C* Clip, bool IsDelay)> K2Node_CreateDelegate_OutputDelegate;     // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWeaponAnimInstance*                    K2Node_DynamicCast_AsWeapon_Anim_Instance;         // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AWpn_Clip_C*                            K2Node_CustomEvent_Clip;                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_IsDelay;                        // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsFromRightHand;                      // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Hand;                                 // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wpn_Pistol_PVP_C_ExecuteUbergraph_Wpn_Pistol_PVP) == 0x000008, "Wrong alignment on Wpn_Pistol_PVP_C_ExecuteUbergraph_Wpn_Pistol_PVP");
static_assert(sizeof(Wpn_Pistol_PVP_C_ExecuteUbergraph_Wpn_Pistol_PVP) == 0x000050, "Wrong size on Wpn_Pistol_PVP_C_ExecuteUbergraph_Wpn_Pistol_PVP");
static_assert(offsetof(Wpn_Pistol_PVP_C_ExecuteUbergraph_Wpn_Pistol_PVP, EntryPoint) == 0x000000, "Member 'Wpn_Pistol_PVP_C_ExecuteUbergraph_Wpn_Pistol_PVP::EntryPoint' has a wrong offset!");
static_assert(offsetof(Wpn_Pistol_PVP_C_ExecuteUbergraph_Wpn_Pistol_PVP, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'Wpn_Pistol_PVP_C_ExecuteUbergraph_Wpn_Pistol_PVP::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(Wpn_Pistol_PVP_C_ExecuteUbergraph_Wpn_Pistol_PVP, K2Node_Event_DeltaSeconds) == 0x000018, "Member 'Wpn_Pistol_PVP_C_ExecuteUbergraph_Wpn_Pistol_PVP::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(Wpn_Pistol_PVP_C_ExecuteUbergraph_Wpn_Pistol_PVP, CallFunc_HasAuthority_ReturnValue) == 0x00001C, "Member 'Wpn_Pistol_PVP_C_ExecuteUbergraph_Wpn_Pistol_PVP::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Pistol_PVP_C_ExecuteUbergraph_Wpn_Pistol_PVP, CallFunc_GetAnimInstance_ReturnValue) == 0x000020, "Member 'Wpn_Pistol_PVP_C_ExecuteUbergraph_Wpn_Pistol_PVP::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_Pistol_PVP_C_ExecuteUbergraph_Wpn_Pistol_PVP, K2Node_DynamicCast_AsWeapon_Anim_Instance) == 0x000028, "Member 'Wpn_Pistol_PVP_C_ExecuteUbergraph_Wpn_Pistol_PVP::K2Node_DynamicCast_AsWeapon_Anim_Instance' has a wrong offset!");
static_assert(offsetof(Wpn_Pistol_PVP_C_ExecuteUbergraph_Wpn_Pistol_PVP, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'Wpn_Pistol_PVP_C_ExecuteUbergraph_Wpn_Pistol_PVP::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Wpn_Pistol_PVP_C_ExecuteUbergraph_Wpn_Pistol_PVP, K2Node_CustomEvent_Clip) == 0x000038, "Member 'Wpn_Pistol_PVP_C_ExecuteUbergraph_Wpn_Pistol_PVP::K2Node_CustomEvent_Clip' has a wrong offset!");
static_assert(offsetof(Wpn_Pistol_PVP_C_ExecuteUbergraph_Wpn_Pistol_PVP, K2Node_CustomEvent_IsDelay) == 0x000040, "Member 'Wpn_Pistol_PVP_C_ExecuteUbergraph_Wpn_Pistol_PVP::K2Node_CustomEvent_IsDelay' has a wrong offset!");
static_assert(offsetof(Wpn_Pistol_PVP_C_ExecuteUbergraph_Wpn_Pistol_PVP, K2Node_Event_IsFromRightHand) == 0x000041, "Member 'Wpn_Pistol_PVP_C_ExecuteUbergraph_Wpn_Pistol_PVP::K2Node_Event_IsFromRightHand' has a wrong offset!");
static_assert(offsetof(Wpn_Pistol_PVP_C_ExecuteUbergraph_Wpn_Pistol_PVP, K2Node_Event_Hand) == 0x000048, "Member 'Wpn_Pistol_PVP_C_ExecuteUbergraph_Wpn_Pistol_PVP::K2Node_Event_Hand' has a wrong offset!");

// Function Wpn_Pistol_PVP.Wpn_Pistol_PVP_C.DoOnInsertClip
// 0x0010 (0x0010 - 0x0000)
struct Wpn_Pistol_PVP_C_DoOnInsertClip final
{
public:
	class AWpn_Clip_C*                            Clip_0;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDelay;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wpn_Pistol_PVP_C_DoOnInsertClip) == 0x000008, "Wrong alignment on Wpn_Pistol_PVP_C_DoOnInsertClip");
static_assert(sizeof(Wpn_Pistol_PVP_C_DoOnInsertClip) == 0x000010, "Wrong size on Wpn_Pistol_PVP_C_DoOnInsertClip");
static_assert(offsetof(Wpn_Pistol_PVP_C_DoOnInsertClip, Clip_0) == 0x000000, "Member 'Wpn_Pistol_PVP_C_DoOnInsertClip::Clip_0' has a wrong offset!");
static_assert(offsetof(Wpn_Pistol_PVP_C_DoOnInsertClip, IsDelay) == 0x000008, "Member 'Wpn_Pistol_PVP_C_DoOnInsertClip::IsDelay' has a wrong offset!");

// Function Wpn_Pistol_PVP.Wpn_Pistol_PVP_C.ChangeAnimState
// 0x0002 (0x0002 - 0x0000)
struct Wpn_Pistol_PVP_C_ChangeAnimState final
{
public:
	EWState                                       CurState;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewValue;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wpn_Pistol_PVP_C_ChangeAnimState) == 0x000001, "Wrong alignment on Wpn_Pistol_PVP_C_ChangeAnimState");
static_assert(sizeof(Wpn_Pistol_PVP_C_ChangeAnimState) == 0x000002, "Wrong size on Wpn_Pistol_PVP_C_ChangeAnimState");
static_assert(offsetof(Wpn_Pistol_PVP_C_ChangeAnimState, CurState) == 0x000000, "Member 'Wpn_Pistol_PVP_C_ChangeAnimState::CurState' has a wrong offset!");
static_assert(offsetof(Wpn_Pistol_PVP_C_ChangeAnimState, NewValue) == 0x000001, "Member 'Wpn_Pistol_PVP_C_ChangeAnimState::NewValue' has a wrong offset!");

// Function Wpn_Pistol_PVP.Wpn_Pistol_PVP_C.OnLineTriggerPull
// 0x0010 (0x0010 - 0x0000)
struct Wpn_Pistol_PVP_C_OnLineTriggerPull final
{
public:
	bool                                          IsFromRightHand;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 hand;                                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wpn_Pistol_PVP_C_OnLineTriggerPull) == 0x000008, "Wrong alignment on Wpn_Pistol_PVP_C_OnLineTriggerPull");
static_assert(sizeof(Wpn_Pistol_PVP_C_OnLineTriggerPull) == 0x000010, "Wrong size on Wpn_Pistol_PVP_C_OnLineTriggerPull");
static_assert(offsetof(Wpn_Pistol_PVP_C_OnLineTriggerPull, IsFromRightHand) == 0x000000, "Member 'Wpn_Pistol_PVP_C_OnLineTriggerPull::IsFromRightHand' has a wrong offset!");
static_assert(offsetof(Wpn_Pistol_PVP_C_OnLineTriggerPull, hand) == 0x000008, "Member 'Wpn_Pistol_PVP_C_OnLineTriggerPull::hand' has a wrong offset!");

// Function Wpn_Pistol_PVP.Wpn_Pistol_PVP_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct Wpn_Pistol_PVP_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wpn_Pistol_PVP_C_ReceiveTick) == 0x000004, "Wrong alignment on Wpn_Pistol_PVP_C_ReceiveTick");
static_assert(sizeof(Wpn_Pistol_PVP_C_ReceiveTick) == 0x000004, "Wrong size on Wpn_Pistol_PVP_C_ReceiveTick");
static_assert(offsetof(Wpn_Pistol_PVP_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'Wpn_Pistol_PVP_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

}

