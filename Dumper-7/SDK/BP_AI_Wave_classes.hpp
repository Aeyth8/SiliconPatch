#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AI_Wave

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Struct_SpawnerConfig_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_HttpWebBase_classes.hpp"
#include "EnumDifficuty_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AI_Wave.BP_AI_Wave_C
// 0x01B8 (0x0618 - 0x0460)
class ABP_AI_Wave_C final : public ABP_HttpWebBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AI_Wave_C;                       // 0x0460(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UTextRenderComponent*                   WaveType;                                          // 0x0468(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        MRCArrow;                                          // 0x0470(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       SplineMRC;                                         // 0x0478(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       ArrowSpline;                                       // 0x0480(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        TwoPArrow;                                         // 0x0488(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       Spline;                                            // 0x0490(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   TextRender;                                        // 0x0498(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x04A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x04A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Root;                                              // 0x04B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x04B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStartWave;                                       // 0x04C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsActive_;                                         // 0x04C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C2[0x6];                                      // 0x04C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FStruct_SpawnerConfig>          SpawnerConfigs;                                    // 0x04C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	float                                         ActiveDelay;                                       // 0x04D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4DC[0x4];                                      // 0x04DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AI_Wave_C*                          TeleportWave;                                      // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_AI_Wave_C*>                  ActiveWaves;                                       // 0x04E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	float                                         TeleportDelay;                                     // 0x04F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FadeOutDelay;                                      // 0x04FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FadeOutTime;                                       // 0x0500(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FadeInDelay;                                       // 0x0504(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FadeInTime;                                        // 0x0508(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50C[0x4];                                      // 0x050C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_PlayerSwitchPoint_C*>        PlayerSwithPoint;                                  // 0x0510(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	TArray<class ABP_AISpawner_C*>                SpawnerList;                                       // 0x0520(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          IsAddSpawner;                                      // 0x0530(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsStart;                                           // 0x0531(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FinishAll;                                         // 0x0532(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsTeleport;                                        // 0x0533(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsSetPlayerSwitchPoint;                            // 0x0534(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_535[0x3];                                      // 0x0535(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnBegin;                                           // 0x0538(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnEnd;                                             // 0x0548(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnTeleport;                                        // 0x0558(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class ABP_PlayerSwitchPoint_C*                SelfSwithPoint;                                    // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 TextColor;                                         // 0x0570(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TextSize;                                          // 0x0574(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_WallRoot_C*                         WallRoot;                                          // 0x0578(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   OnAllEnemyDead;                                    // 0x0580(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          ShouldTeleport;                                    // 0x0590(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Is2P;                                              // 0x0591(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_592[0x6];                                      // 0x0592(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStaticMeshComponent*>           Arrows;                                            // 0x0598(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                         ArrowWidth;                                        // 0x05A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ArrowLen;                                          // 0x05AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Nums;                                              // 0x05B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAddSwitchPoint;                                  // 0x05B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ShouldTeleportPlayerNextWave;                      // 0x05B5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ShouldVerifyGame;                                  // 0x05B6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          VerifyResult;                                      // 0x05B7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class FString                                 LevelPoint;                                        // 0x05B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	bool                                          IsAddWaveCount;                                    // 0x05C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsCountWave;                                       // 0x05C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5CA[0x6];                                      // 0x05CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnDoTeleport;                                      // 0x05D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         ElevatorIndexToCount;                              // 0x05E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5E4[0x4];                                      // 0x05E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_LevelVerify_C*                      LevelVerifyInstance;                               // 0x05E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   OnVerifySuccess;                                   // 0x05F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsShouldChoose;                                    // 0x0600(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsChoosed;                                         // 0x0601(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsNotCheckChoice;                                  // 0x0602(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsFreeMove;                                        // 0x0603(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsActiveTrigger;                                   // 0x0604(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UseTriggerBox;                                     // 0x0605(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsEnterTrigger;                                    // 0x0606(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_607[0x1];                                      // 0x0607(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_RestrictWall_C*>             RestricWalls;                                      // 0x0608(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)

public:
	void ExecuteUbergraph_BP_AI_Wave(int32 EntryPoint);
	void DeactiveRestricWalls(bool IsCheckNextWave);
	void BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void ActiveMe_Trigger();
	void BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void CustomEvent_0();
	void PrivateActiveMe(bool NotCheckChoice);
	void StartVerify();
	void CustomEvent_1(bool Success, const class FString& Msg);
	void OnManalTeleport();
	void OnSetSwitchPoints(bool IsClear);
	void ActiveSwitchPoints(bool Value);
	void OnFinishAll();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void ActiveMe(bool NotCheckChoose);
	void AddSpawner(const struct FStruct_SpawnerConfig& Config, class ABP_AISpawner_C** Spawner);
	void GetSpawnerFromIndex(int32 Index_0, class ABP_AISpawner_C** Spawner);
	void FadeCamera(bool IsFadeOut);
	void TeleportPlayer();
	void ResetMe();
	void ClearMapItems();
	void ActiveSwitchPoint(bool IsActive);
	void IsFinished(bool* IsFinished_0);
	void CheckPoint();
	void KillAllAI();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AI_Wave_C">();
	}
	static class ABP_AI_Wave_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AI_Wave_C>();
	}
};
static_assert(alignof(ABP_AI_Wave_C) == 0x000008, "Wrong alignment on ABP_AI_Wave_C");
static_assert(sizeof(ABP_AI_Wave_C) == 0x000618, "Wrong size on ABP_AI_Wave_C");
static_assert(offsetof(ABP_AI_Wave_C, UberGraphFrame_BP_AI_Wave_C) == 0x000460, "Member 'ABP_AI_Wave_C::UberGraphFrame_BP_AI_Wave_C' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, WaveType) == 0x000468, "Member 'ABP_AI_Wave_C::WaveType' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, MRCArrow) == 0x000470, "Member 'ABP_AI_Wave_C::MRCArrow' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, SplineMRC) == 0x000478, "Member 'ABP_AI_Wave_C::SplineMRC' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, ArrowSpline) == 0x000480, "Member 'ABP_AI_Wave_C::ArrowSpline' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, TwoPArrow) == 0x000488, "Member 'ABP_AI_Wave_C::TwoPArrow' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, Spline) == 0x000490, "Member 'ABP_AI_Wave_C::Spline' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, TextRender) == 0x000498, "Member 'ABP_AI_Wave_C::TextRender' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, Scene) == 0x0004A0, "Member 'ABP_AI_Wave_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, Arrow) == 0x0004A8, "Member 'ABP_AI_Wave_C::Arrow' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, Root) == 0x0004B0, "Member 'ABP_AI_Wave_C::Root' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, Box) == 0x0004B8, "Member 'ABP_AI_Wave_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, IsStartWave) == 0x0004C0, "Member 'ABP_AI_Wave_C::IsStartWave' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, IsActive_) == 0x0004C1, "Member 'ABP_AI_Wave_C::IsActive_' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, SpawnerConfigs) == 0x0004C8, "Member 'ABP_AI_Wave_C::SpawnerConfigs' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, ActiveDelay) == 0x0004D8, "Member 'ABP_AI_Wave_C::ActiveDelay' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, TeleportWave) == 0x0004E0, "Member 'ABP_AI_Wave_C::TeleportWave' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, ActiveWaves) == 0x0004E8, "Member 'ABP_AI_Wave_C::ActiveWaves' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, TeleportDelay) == 0x0004F8, "Member 'ABP_AI_Wave_C::TeleportDelay' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, FadeOutDelay) == 0x0004FC, "Member 'ABP_AI_Wave_C::FadeOutDelay' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, FadeOutTime) == 0x000500, "Member 'ABP_AI_Wave_C::FadeOutTime' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, FadeInDelay) == 0x000504, "Member 'ABP_AI_Wave_C::FadeInDelay' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, FadeInTime) == 0x000508, "Member 'ABP_AI_Wave_C::FadeInTime' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, PlayerSwithPoint) == 0x000510, "Member 'ABP_AI_Wave_C::PlayerSwithPoint' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, SpawnerList) == 0x000520, "Member 'ABP_AI_Wave_C::SpawnerList' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, IsAddSpawner) == 0x000530, "Member 'ABP_AI_Wave_C::IsAddSpawner' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, IsStart) == 0x000531, "Member 'ABP_AI_Wave_C::IsStart' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, FinishAll) == 0x000532, "Member 'ABP_AI_Wave_C::FinishAll' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, IsTeleport) == 0x000533, "Member 'ABP_AI_Wave_C::IsTeleport' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, IsSetPlayerSwitchPoint) == 0x000534, "Member 'ABP_AI_Wave_C::IsSetPlayerSwitchPoint' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, OnBegin) == 0x000538, "Member 'ABP_AI_Wave_C::OnBegin' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, OnEnd) == 0x000548, "Member 'ABP_AI_Wave_C::OnEnd' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, OnTeleport) == 0x000558, "Member 'ABP_AI_Wave_C::OnTeleport' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, SelfSwithPoint) == 0x000568, "Member 'ABP_AI_Wave_C::SelfSwithPoint' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, TextColor) == 0x000570, "Member 'ABP_AI_Wave_C::TextColor' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, TextSize) == 0x000574, "Member 'ABP_AI_Wave_C::TextSize' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, WallRoot) == 0x000578, "Member 'ABP_AI_Wave_C::WallRoot' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, OnAllEnemyDead) == 0x000580, "Member 'ABP_AI_Wave_C::OnAllEnemyDead' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, ShouldTeleport) == 0x000590, "Member 'ABP_AI_Wave_C::ShouldTeleport' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, Is2P) == 0x000591, "Member 'ABP_AI_Wave_C::Is2P' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, Arrows) == 0x000598, "Member 'ABP_AI_Wave_C::Arrows' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, ArrowWidth) == 0x0005A8, "Member 'ABP_AI_Wave_C::ArrowWidth' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, ArrowLen) == 0x0005AC, "Member 'ABP_AI_Wave_C::ArrowLen' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, Nums) == 0x0005B0, "Member 'ABP_AI_Wave_C::Nums' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, IsAddSwitchPoint) == 0x0005B4, "Member 'ABP_AI_Wave_C::IsAddSwitchPoint' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, ShouldTeleportPlayerNextWave) == 0x0005B5, "Member 'ABP_AI_Wave_C::ShouldTeleportPlayerNextWave' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, ShouldVerifyGame) == 0x0005B6, "Member 'ABP_AI_Wave_C::ShouldVerifyGame' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, VerifyResult) == 0x0005B7, "Member 'ABP_AI_Wave_C::VerifyResult' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, LevelPoint) == 0x0005B8, "Member 'ABP_AI_Wave_C::LevelPoint' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, IsAddWaveCount) == 0x0005C8, "Member 'ABP_AI_Wave_C::IsAddWaveCount' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, IsCountWave) == 0x0005C9, "Member 'ABP_AI_Wave_C::IsCountWave' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, OnDoTeleport) == 0x0005D0, "Member 'ABP_AI_Wave_C::OnDoTeleport' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, ElevatorIndexToCount) == 0x0005E0, "Member 'ABP_AI_Wave_C::ElevatorIndexToCount' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, LevelVerifyInstance) == 0x0005E8, "Member 'ABP_AI_Wave_C::LevelVerifyInstance' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, OnVerifySuccess) == 0x0005F0, "Member 'ABP_AI_Wave_C::OnVerifySuccess' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, IsShouldChoose) == 0x000600, "Member 'ABP_AI_Wave_C::IsShouldChoose' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, IsChoosed) == 0x000601, "Member 'ABP_AI_Wave_C::IsChoosed' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, IsNotCheckChoice) == 0x000602, "Member 'ABP_AI_Wave_C::IsNotCheckChoice' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, IsFreeMove) == 0x000603, "Member 'ABP_AI_Wave_C::IsFreeMove' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, IsActiveTrigger) == 0x000604, "Member 'ABP_AI_Wave_C::IsActiveTrigger' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, UseTriggerBox) == 0x000605, "Member 'ABP_AI_Wave_C::UseTriggerBox' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, IsEnterTrigger) == 0x000606, "Member 'ABP_AI_Wave_C::IsEnterTrigger' has a wrong offset!");
static_assert(offsetof(ABP_AI_Wave_C, RestricWalls) == 0x000608, "Member 'ABP_AI_Wave_C::RestricWalls' has a wrong offset!");

}

