#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Lv2_NPCBase

#include "Basic.hpp"

#include "Lv2_DifficultStruct_structs.hpp"
#include "EnumDifficuty_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Enum_BehaviorType_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_Lv2_NPCBase.BP_Lv2_NPCBase_C.ExecuteUbergraph_BP_Lv2_NPCBase
// 0x0290 (0x0290 - 0x0000)
struct BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0010(0x0030)(IsPlainOldData, NoDestructor)
	class AMer2GameState_C*                       K2Node_DynamicCast_AsMer_2Game_State;              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBlackboardComponent*                   CallFunc_GetBlackboard_ReturnValue;                // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_HitComponent;           // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_ComponentBoundEvent_NormalImpulse;          // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_Hit;                    // 0x0080(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10A[0x2];                                      // 0x010A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0114(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0120(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x012C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0138(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_144[0x4];                                      // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0158(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0170(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x017C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AProjectile_Sniper_C*                   K2Node_DynamicCast_AsProjectile_Sniper;            // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0191(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_192[0x6];                                      // 0x0192(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetInstigatorController_ReturnValue;      // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      K2Node_DynamicCast_AsPlayer_Controller;            // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A9[0x7];                                      // 0x01A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAttached_ReturnValue;         // 0x01B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_loacation;                      // 0x01B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_Normal;                         // 0x01C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidClass_ReturnValue;                 // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D9[0x7];                                      // 0x01D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABPWeaponBase_C*                        CallFunc_FinishSpawningActor_ReturnValue;          // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAtLocation_ReturnValue;       // 0x01E8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x01F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue1;         // 0x01FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0208(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x021C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0224(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0231(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_232[0x2];                                      // 0x0232(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue1;         // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0238(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMer2GameInstance_C*                    K2Node_DynamicCast_AsMer_2Game_Instance;           // 0x0240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess3;                      // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0249(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x024A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_24B[0x5];                                      // 0x024B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Lv2_NPCBase_C*                      K2Node_DynamicCast_AsBP_Lv_2_NPCBase;              // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess4;                      // 0x0258(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_259[0x3];                                      // 0x0259(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_Damage;                               // 0x025C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class UDamageType*                      K2Node_Event_DamageType;                           // 0x0260(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            K2Node_Event_InstigatedBy;                         // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_DamageCauser;                         // 0x0270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0278(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase) == 0x000010, "Wrong alignment on BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase");
static_assert(sizeof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase) == 0x000290, "Wrong size on BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, EntryPoint) == 0x000000, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, CallFunc_GetGameState_ReturnValue) == 0x000008, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, CallFunc_MakeTransform_ReturnValue) == 0x000010, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, K2Node_DynamicCast_AsMer_2Game_State) == 0x000040, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::K2Node_DynamicCast_AsMer_2Game_State' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, K2Node_Event_DeltaSeconds) == 0x00004C, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, CallFunc_GetBlackboard_ReturnValue) == 0x000050, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::CallFunc_GetBlackboard_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, K2Node_ComponentBoundEvent_HitComponent) == 0x000058, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::K2Node_ComponentBoundEvent_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, K2Node_ComponentBoundEvent_OtherActor) == 0x000060, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, K2Node_ComponentBoundEvent_OtherComp) == 0x000068, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, K2Node_ComponentBoundEvent_NormalImpulse) == 0x000070, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::K2Node_ComponentBoundEvent_NormalImpulse' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, K2Node_ComponentBoundEvent_Hit) == 0x000080, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::K2Node_ComponentBoundEvent_Hit' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, CallFunc_BreakHitResult_bBlockingHit) == 0x000108, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, CallFunc_BreakHitResult_bInitialOverlap) == 0x000109, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, CallFunc_BreakHitResult_Time) == 0x00010C, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, CallFunc_BreakHitResult_Distance) == 0x000110, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, CallFunc_BreakHitResult_Location) == 0x000114, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, CallFunc_BreakHitResult_ImpactPoint) == 0x000120, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, CallFunc_BreakHitResult_Normal) == 0x00012C, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, CallFunc_BreakHitResult_ImpactNormal) == 0x000138, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, CallFunc_BreakHitResult_PhysMat) == 0x000148, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, CallFunc_BreakHitResult_HitActor) == 0x000150, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, CallFunc_BreakHitResult_HitComponent) == 0x000158, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, CallFunc_BreakHitResult_HitBoneName) == 0x000160, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, CallFunc_BreakHitResult_HitItem) == 0x000168, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, CallFunc_BreakHitResult_FaceIndex) == 0x00016C, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, CallFunc_BreakHitResult_TraceStart) == 0x000170, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, CallFunc_BreakHitResult_TraceEnd) == 0x00017C, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, K2Node_DynamicCast_AsProjectile_Sniper) == 0x000188, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::K2Node_DynamicCast_AsProjectile_Sniper' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, K2Node_DynamicCast_bSuccess1) == 0x000190, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000191, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, CallFunc_GetInstigatorController_ReturnValue) == 0x000198, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::CallFunc_GetInstigatorController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, K2Node_DynamicCast_AsPlayer_Controller) == 0x0001A0, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::K2Node_DynamicCast_AsPlayer_Controller' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, K2Node_DynamicCast_bSuccess2) == 0x0001A8, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::K2Node_DynamicCast_bSuccess2' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, CallFunc_SpawnEmitterAttached_ReturnValue) == 0x0001B0, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::CallFunc_SpawnEmitterAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, K2Node_CustomEvent_loacation) == 0x0001B8, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::K2Node_CustomEvent_loacation' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, K2Node_CustomEvent_Normal) == 0x0001C4, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::K2Node_CustomEvent_Normal' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x0001D0, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, CallFunc_IsValidClass_ReturnValue) == 0x0001D8, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::CallFunc_IsValidClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, CallFunc_FinishSpawningActor_ReturnValue) == 0x0001E0, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, CallFunc_SpawnEmitterAtLocation_ReturnValue) == 0x0001E8, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::CallFunc_SpawnEmitterAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0001F0, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, CallFunc_K2_GetActorLocation_ReturnValue1) == 0x0001FC, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::CallFunc_K2_GetActorLocation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, CallFunc_FindLookAtRotation_ReturnValue) == 0x000208, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000214, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, CallFunc_BreakRotator_Roll) == 0x000218, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, CallFunc_BreakRotator_Pitch) == 0x00021C, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, CallFunc_BreakRotator_Yaw) == 0x000220, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, CallFunc_MakeRotator_ReturnValue) == 0x000224, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, CallFunc_K2_SetActorRotation_ReturnValue) == 0x000230, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000231, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, CallFunc_Subtract_FloatFloat_ReturnValue1) == 0x000234, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::CallFunc_Subtract_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, CallFunc_GetGameInstance_ReturnValue) == 0x000238, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, K2Node_DynamicCast_AsMer_2Game_Instance) == 0x000240, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::K2Node_DynamicCast_AsMer_2Game_Instance' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, K2Node_DynamicCast_bSuccess3) == 0x000248, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::K2Node_DynamicCast_bSuccess3' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, CallFunc_IsValid_ReturnValue) == 0x000249, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, CallFunc_IsValid_ReturnValue1) == 0x00024A, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, K2Node_DynamicCast_AsBP_Lv_2_NPCBase) == 0x000250, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::K2Node_DynamicCast_AsBP_Lv_2_NPCBase' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, K2Node_DynamicCast_bSuccess4) == 0x000258, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::K2Node_DynamicCast_bSuccess4' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, K2Node_Event_Damage) == 0x00025C, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::K2Node_Event_Damage' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, K2Node_Event_DamageType) == 0x000260, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::K2Node_Event_DamageType' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, K2Node_Event_InstigatedBy) == 0x000268, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::K2Node_Event_InstigatedBy' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, K2Node_Event_DamageCauser) == 0x000270, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::K2Node_Event_DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase, CallFunc_GetSocketLocation_ReturnValue) == 0x000278, "Member 'BP_Lv2_NPCBase_C_ExecuteUbergraph_BP_Lv2_NPCBase::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");

// Function BP_Lv2_NPCBase.BP_Lv2_NPCBase_C.ReceiveAnyDamage
// 0x0020 (0x0020 - 0x0000)
struct BP_Lv2_NPCBase_C_ReceiveAnyDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UDamageType*                      DamageType;                                        // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Lv2_NPCBase_C_ReceiveAnyDamage) == 0x000008, "Wrong alignment on BP_Lv2_NPCBase_C_ReceiveAnyDamage");
static_assert(sizeof(BP_Lv2_NPCBase_C_ReceiveAnyDamage) == 0x000020, "Wrong size on BP_Lv2_NPCBase_C_ReceiveAnyDamage");
static_assert(offsetof(BP_Lv2_NPCBase_C_ReceiveAnyDamage, Damage) == 0x000000, "Member 'BP_Lv2_NPCBase_C_ReceiveAnyDamage::Damage' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ReceiveAnyDamage, DamageType) == 0x000008, "Member 'BP_Lv2_NPCBase_C_ReceiveAnyDamage::DamageType' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ReceiveAnyDamage, InstigatedBy) == 0x000010, "Member 'BP_Lv2_NPCBase_C_ReceiveAnyDamage::InstigatedBy' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ReceiveAnyDamage, DamageCauser) == 0x000018, "Member 'BP_Lv2_NPCBase_C_ReceiveAnyDamage::DamageCauser' has a wrong offset!");

// Function BP_Lv2_NPCBase.BP_Lv2_NPCBase_C.HeadKill
// 0x0018 (0x0018 - 0x0000)
struct BP_Lv2_NPCBase_C_HeadKill final
{
public:
	struct FVector                                loacation;                                         // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Normal;                                            // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Lv2_NPCBase_C_HeadKill) == 0x000004, "Wrong alignment on BP_Lv2_NPCBase_C_HeadKill");
static_assert(sizeof(BP_Lv2_NPCBase_C_HeadKill) == 0x000018, "Wrong size on BP_Lv2_NPCBase_C_HeadKill");
static_assert(offsetof(BP_Lv2_NPCBase_C_HeadKill, loacation) == 0x000000, "Member 'BP_Lv2_NPCBase_C_HeadKill::loacation' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_HeadKill, Normal) == 0x00000C, "Member 'BP_Lv2_NPCBase_C_HeadKill::Normal' has a wrong offset!");

// Function BP_Lv2_NPCBase.BP_Lv2_NPCBase_C.BndEvt__Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature
// 0x00B0 (0x00B0 - 0x0000)
struct BP_Lv2_NPCBase_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             Hit;                                               // 0x0028(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_Lv2_NPCBase_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_Lv2_NPCBase_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature");
static_assert(sizeof(BP_Lv2_NPCBase_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature) == 0x0000B0, "Wrong size on BP_Lv2_NPCBase_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature");
static_assert(offsetof(BP_Lv2_NPCBase_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature, HitComponent) == 0x000000, "Member 'BP_Lv2_NPCBase_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature::HitComponent' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_Lv2_NPCBase_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_Lv2_NPCBase_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature, NormalImpulse) == 0x000018, "Member 'BP_Lv2_NPCBase_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature::NormalImpulse' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature, Hit) == 0x000028, "Member 'BP_Lv2_NPCBase_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature::Hit' has a wrong offset!");

// Function BP_Lv2_NPCBase.BP_Lv2_NPCBase_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_Lv2_NPCBase_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Lv2_NPCBase_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_Lv2_NPCBase_C_ReceiveTick");
static_assert(sizeof(BP_Lv2_NPCBase_C_ReceiveTick) == 0x000004, "Wrong size on BP_Lv2_NPCBase_C_ReceiveTick");
static_assert(offsetof(BP_Lv2_NPCBase_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_Lv2_NPCBase_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_Lv2_NPCBase.BP_Lv2_NPCBase_C.InitPatrol
// 0x0010 (0x0010 - 0x0000)
struct BP_Lv2_NPCBase_C_InitPatrol final
{
public:
	class ABP_PatrolRoute_C*                      Path;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue2;                     // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetNumberOfSplinePoints_ReturnValue;      // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Lv2_NPCBase_C_InitPatrol) == 0x000008, "Wrong alignment on BP_Lv2_NPCBase_C_InitPatrol");
static_assert(sizeof(BP_Lv2_NPCBase_C_InitPatrol) == 0x000010, "Wrong size on BP_Lv2_NPCBase_C_InitPatrol");
static_assert(offsetof(BP_Lv2_NPCBase_C_InitPatrol, Path) == 0x000000, "Member 'BP_Lv2_NPCBase_C_InitPatrol::Path' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_InitPatrol, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_Lv2_NPCBase_C_InitPatrol::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_InitPatrol, CallFunc_IsValid_ReturnValue1) == 0x000009, "Member 'BP_Lv2_NPCBase_C_InitPatrol::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_InitPatrol, CallFunc_IsValid_ReturnValue2) == 0x00000A, "Member 'BP_Lv2_NPCBase_C_InitPatrol::CallFunc_IsValid_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_InitPatrol, CallFunc_GetNumberOfSplinePoints_ReturnValue) == 0x00000C, "Member 'BP_Lv2_NPCBase_C_InitPatrol::CallFunc_GetNumberOfSplinePoints_ReturnValue' has a wrong offset!");

// Function BP_Lv2_NPCBase.BP_Lv2_NPCBase_C.NextSplinelocation
// 0x0120 (0x0120 - 0x0000)
struct BP_Lv2_NPCBase_C_NextSplinelocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                Nextlocation;                                      // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue1;           // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetNumberOfSplinePoints_ReturnValue;      // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue1;             // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0xC];                                       // 0x0044(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransformAtSplinePoint_ReturnValue;    // 0x0050(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0098(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue2;             // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue1;                  // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B8[0x8];                                       // 0x00B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransformAtSplinePoint_ReturnValue1;   // 0x00C0(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location1;                 // 0x00F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation1;                 // 0x00FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale1;                    // 0x0108(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0114(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue1;         // 0x0115(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0116(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Lv2_NPCBase_C_NextSplinelocation) == 0x000010, "Wrong alignment on BP_Lv2_NPCBase_C_NextSplinelocation");
static_assert(sizeof(BP_Lv2_NPCBase_C_NextSplinelocation) == 0x000120, "Wrong size on BP_Lv2_NPCBase_C_NextSplinelocation");
static_assert(offsetof(BP_Lv2_NPCBase_C_NextSplinelocation, Location) == 0x000000, "Member 'BP_Lv2_NPCBase_C_NextSplinelocation::Location' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_NextSplinelocation, Rotation) == 0x00000C, "Member 'BP_Lv2_NPCBase_C_NextSplinelocation::Rotation' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_NextSplinelocation, Nextlocation) == 0x000018, "Member 'BP_Lv2_NPCBase_C_NextSplinelocation::Nextlocation' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_NextSplinelocation, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000024, "Member 'BP_Lv2_NPCBase_C_NextSplinelocation::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_NextSplinelocation, CallFunc_Subtract_IntInt_ReturnValue) == 0x000028, "Member 'BP_Lv2_NPCBase_C_NextSplinelocation::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_NextSplinelocation, CallFunc_EqualEqual_IntInt_ReturnValue1) == 0x00002C, "Member 'BP_Lv2_NPCBase_C_NextSplinelocation::CallFunc_EqualEqual_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_NextSplinelocation, CallFunc_BooleanOR_ReturnValue) == 0x00002D, "Member 'BP_Lv2_NPCBase_C_NextSplinelocation::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_NextSplinelocation, CallFunc_GetNumberOfSplinePoints_ReturnValue) == 0x000030, "Member 'BP_Lv2_NPCBase_C_NextSplinelocation::CallFunc_GetNumberOfSplinePoints_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_NextSplinelocation, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000034, "Member 'BP_Lv2_NPCBase_C_NextSplinelocation::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_NextSplinelocation, CallFunc_Subtract_IntInt_ReturnValue1) == 0x000040, "Member 'BP_Lv2_NPCBase_C_NextSplinelocation::CallFunc_Subtract_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_NextSplinelocation, CallFunc_GetTransformAtSplinePoint_ReturnValue) == 0x000050, "Member 'BP_Lv2_NPCBase_C_NextSplinelocation::CallFunc_GetTransformAtSplinePoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_NextSplinelocation, CallFunc_BreakTransform_Location) == 0x000080, "Member 'BP_Lv2_NPCBase_C_NextSplinelocation::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_NextSplinelocation, CallFunc_BreakTransform_Rotation) == 0x00008C, "Member 'BP_Lv2_NPCBase_C_NextSplinelocation::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_NextSplinelocation, CallFunc_BreakTransform_Scale) == 0x000098, "Member 'BP_Lv2_NPCBase_C_NextSplinelocation::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_NextSplinelocation, CallFunc_IsValid_ReturnValue) == 0x0000A4, "Member 'BP_Lv2_NPCBase_C_NextSplinelocation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_NextSplinelocation, CallFunc_Add_IntInt_ReturnValue) == 0x0000A8, "Member 'BP_Lv2_NPCBase_C_NextSplinelocation::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_NextSplinelocation, CallFunc_Subtract_IntInt_ReturnValue2) == 0x0000AC, "Member 'BP_Lv2_NPCBase_C_NextSplinelocation::CallFunc_Subtract_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_NextSplinelocation, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0000B0, "Member 'BP_Lv2_NPCBase_C_NextSplinelocation::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_NextSplinelocation, CallFunc_Add_IntInt_ReturnValue1) == 0x0000B4, "Member 'BP_Lv2_NPCBase_C_NextSplinelocation::CallFunc_Add_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_NextSplinelocation, CallFunc_GetTransformAtSplinePoint_ReturnValue1) == 0x0000C0, "Member 'BP_Lv2_NPCBase_C_NextSplinelocation::CallFunc_GetTransformAtSplinePoint_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_NextSplinelocation, CallFunc_BreakTransform_Location1) == 0x0000F0, "Member 'BP_Lv2_NPCBase_C_NextSplinelocation::CallFunc_BreakTransform_Location1' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_NextSplinelocation, CallFunc_BreakTransform_Rotation1) == 0x0000FC, "Member 'BP_Lv2_NPCBase_C_NextSplinelocation::CallFunc_BreakTransform_Rotation1' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_NextSplinelocation, CallFunc_BreakTransform_Scale1) == 0x000108, "Member 'BP_Lv2_NPCBase_C_NextSplinelocation::CallFunc_BreakTransform_Scale1' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_NextSplinelocation, CallFunc_Less_IntInt_ReturnValue) == 0x000114, "Member 'BP_Lv2_NPCBase_C_NextSplinelocation::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_NextSplinelocation, CallFunc_GreaterEqual_IntInt_ReturnValue1) == 0x000115, "Member 'BP_Lv2_NPCBase_C_NextSplinelocation::CallFunc_GreaterEqual_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_NextSplinelocation, CallFunc_BooleanAND_ReturnValue) == 0x000116, "Member 'BP_Lv2_NPCBase_C_NextSplinelocation::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_Lv2_NPCBase.BP_Lv2_NPCBase_C.ChangeBehavior
// 0x0088 (0x0088 - 0x0000)
struct BP_Lv2_NPCBase_C_ChangeBehavior final
{
public:
	Enum_BehaviorType                             NewState;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetLocation;                                    // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_MakeLiteralName_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_VectorVector_ReturnValue;      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_VectorVector_ReturnValue;        // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue1;         // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue2;         // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue1;                  // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_NextSplinelocation_location;              // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_NextSplinelocation_rotation;              // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class FName                                   CallFunc_MakeLiteralName_ReturnValue1;             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_LV2_plunger_C*                      K2Node_DynamicCast_AsBP_LV2_Plunger;               // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_MakeLiteralName_ReturnValue2;             // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_FindMovePoint_NewParam;                   // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_MakeLiteralName_ReturnValue3;             // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_MakeLiteralName_ReturnValue4;             // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Lv2_NPCBase_C_ChangeBehavior) == 0x000008, "Wrong alignment on BP_Lv2_NPCBase_C_ChangeBehavior");
static_assert(sizeof(BP_Lv2_NPCBase_C_ChangeBehavior) == 0x000088, "Wrong size on BP_Lv2_NPCBase_C_ChangeBehavior");
static_assert(offsetof(BP_Lv2_NPCBase_C_ChangeBehavior, NewState) == 0x000000, "Member 'BP_Lv2_NPCBase_C_ChangeBehavior::NewState' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ChangeBehavior, TargetLocation) == 0x000004, "Member 'BP_Lv2_NPCBase_C_ChangeBehavior::TargetLocation' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ChangeBehavior, CallFunc_MakeLiteralName_ReturnValue) == 0x000010, "Member 'BP_Lv2_NPCBase_C_ChangeBehavior::CallFunc_MakeLiteralName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ChangeBehavior, CallFunc_EqualEqual_VectorVector_ReturnValue) == 0x000018, "Member 'BP_Lv2_NPCBase_C_ChangeBehavior::CallFunc_EqualEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ChangeBehavior, CallFunc_NotEqual_VectorVector_ReturnValue) == 0x000019, "Member 'BP_Lv2_NPCBase_C_ChangeBehavior::CallFunc_NotEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ChangeBehavior, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00001A, "Member 'BP_Lv2_NPCBase_C_ChangeBehavior::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ChangeBehavior, CallFunc_EqualEqual_ByteByte_ReturnValue1) == 0x00001B, "Member 'BP_Lv2_NPCBase_C_ChangeBehavior::CallFunc_EqualEqual_ByteByte_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ChangeBehavior, CallFunc_EqualEqual_ByteByte_ReturnValue2) == 0x00001C, "Member 'BP_Lv2_NPCBase_C_ChangeBehavior::CallFunc_EqualEqual_ByteByte_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ChangeBehavior, CallFunc_BooleanAND_ReturnValue) == 0x00001D, "Member 'BP_Lv2_NPCBase_C_ChangeBehavior::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ChangeBehavior, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x00001E, "Member 'BP_Lv2_NPCBase_C_ChangeBehavior::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ChangeBehavior, CallFunc_BooleanAND_ReturnValue1) == 0x00001F, "Member 'BP_Lv2_NPCBase_C_ChangeBehavior::CallFunc_BooleanAND_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ChangeBehavior, CallFunc_NextSplinelocation_location) == 0x000020, "Member 'BP_Lv2_NPCBase_C_ChangeBehavior::CallFunc_NextSplinelocation_location' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ChangeBehavior, CallFunc_NextSplinelocation_rotation) == 0x00002C, "Member 'BP_Lv2_NPCBase_C_ChangeBehavior::CallFunc_NextSplinelocation_rotation' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ChangeBehavior, CallFunc_MakeLiteralName_ReturnValue1) == 0x000038, "Member 'BP_Lv2_NPCBase_C_ChangeBehavior::CallFunc_MakeLiteralName_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ChangeBehavior, K2Node_DynamicCast_AsBP_LV2_Plunger) == 0x000040, "Member 'BP_Lv2_NPCBase_C_ChangeBehavior::K2Node_DynamicCast_AsBP_LV2_Plunger' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ChangeBehavior, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'BP_Lv2_NPCBase_C_ChangeBehavior::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ChangeBehavior, CallFunc_MakeLiteralName_ReturnValue2) == 0x000050, "Member 'BP_Lv2_NPCBase_C_ChangeBehavior::CallFunc_MakeLiteralName_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ChangeBehavior, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000058, "Member 'BP_Lv2_NPCBase_C_ChangeBehavior::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ChangeBehavior, CallFunc_FindMovePoint_NewParam) == 0x000064, "Member 'BP_Lv2_NPCBase_C_ChangeBehavior::CallFunc_FindMovePoint_NewParam' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ChangeBehavior, CallFunc_MakeLiteralName_ReturnValue3) == 0x000070, "Member 'BP_Lv2_NPCBase_C_ChangeBehavior::CallFunc_MakeLiteralName_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ChangeBehavior, CallFunc_MakeLiteralName_ReturnValue4) == 0x000078, "Member 'BP_Lv2_NPCBase_C_ChangeBehavior::CallFunc_MakeLiteralName_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_ChangeBehavior, CallFunc_IsValid_ReturnValue) == 0x000080, "Member 'BP_Lv2_NPCBase_C_ChangeBehavior::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_Lv2_NPCBase.BP_Lv2_NPCBase_C.FindEnemie
// 0x0008 (0x0008 - 0x0000)
struct BP_Lv2_NPCBase_C_FindEnemie final
{
public:
	class AActor*                                 TargetActor_0;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Lv2_NPCBase_C_FindEnemie) == 0x000008, "Wrong alignment on BP_Lv2_NPCBase_C_FindEnemie");
static_assert(sizeof(BP_Lv2_NPCBase_C_FindEnemie) == 0x000008, "Wrong size on BP_Lv2_NPCBase_C_FindEnemie");
static_assert(offsetof(BP_Lv2_NPCBase_C_FindEnemie, TargetActor_0) == 0x000000, "Member 'BP_Lv2_NPCBase_C_FindEnemie::TargetActor_0' has a wrong offset!");

// Function BP_Lv2_NPCBase.BP_Lv2_NPCBase_C.Findcorpse
// 0x0040 (0x0040 - 0x0000)
struct BP_Lv2_NPCBase_C_Findcorpse final
{
public:
	struct FVector                                TargetLocation;                                    // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMer2GameState_C*                       K2Node_DynamicCast_AsMer_2Game_State;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMer2GameInstance_C*                    K2Node_DynamicCast_AsMer_2Game_Instance;           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Lv2_NPCBase_C_Findcorpse) == 0x000008, "Wrong alignment on BP_Lv2_NPCBase_C_Findcorpse");
static_assert(sizeof(BP_Lv2_NPCBase_C_Findcorpse) == 0x000040, "Wrong size on BP_Lv2_NPCBase_C_Findcorpse");
static_assert(offsetof(BP_Lv2_NPCBase_C_Findcorpse, TargetLocation) == 0x000000, "Member 'BP_Lv2_NPCBase_C_Findcorpse::TargetLocation' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_Findcorpse, CallFunc_GetGameState_ReturnValue) == 0x000010, "Member 'BP_Lv2_NPCBase_C_Findcorpse::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_Findcorpse, CallFunc_GetGameInstance_ReturnValue) == 0x000018, "Member 'BP_Lv2_NPCBase_C_Findcorpse::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_Findcorpse, K2Node_DynamicCast_AsMer_2Game_State) == 0x000020, "Member 'BP_Lv2_NPCBase_C_Findcorpse::K2Node_DynamicCast_AsMer_2Game_State' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_Findcorpse, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_Lv2_NPCBase_C_Findcorpse::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_Findcorpse, K2Node_DynamicCast_AsMer_2Game_Instance) == 0x000030, "Member 'BP_Lv2_NPCBase_C_Findcorpse::K2Node_DynamicCast_AsMer_2Game_Instance' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_Findcorpse, K2Node_DynamicCast_bSuccess1) == 0x000038, "Member 'BP_Lv2_NPCBase_C_Findcorpse::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_Findcorpse, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000039, "Member 'BP_Lv2_NPCBase_C_Findcorpse::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_Lv2_NPCBase.BP_Lv2_NPCBase_C.SetSpeed
// 0x0001 (0x0001 - 0x0000)
struct BP_Lv2_NPCBase_C_SetSpeed final
{
public:
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Lv2_NPCBase_C_SetSpeed) == 0x000001, "Wrong alignment on BP_Lv2_NPCBase_C_SetSpeed");
static_assert(sizeof(BP_Lv2_NPCBase_C_SetSpeed) == 0x000001, "Wrong size on BP_Lv2_NPCBase_C_SetSpeed");
static_assert(offsetof(BP_Lv2_NPCBase_C_SetSpeed, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000000, "Member 'BP_Lv2_NPCBase_C_SetSpeed::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_Lv2_NPCBase.BP_Lv2_NPCBase_C.GameOver
// 0x0050 (0x0050 - 0x0000)
struct BP_Lv2_NPCBase_C_GameOver final
{
public:
	int32                                         TipsIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_Lv2_AlertSound_C*>           CallFunc_GetAllActorsOfClass_OutActors;            // 0x0008(0x0010)(ZeroConstructor, ReferenceParm)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Lv2_AlertSound_C*                   CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue1;           // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue;           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Lv2_characterBase_C*                K2Node_DynamicCast_AsBP_Lv_2_Character_Base;       // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Lv2_NPCBase_C_GameOver) == 0x000008, "Wrong alignment on BP_Lv2_NPCBase_C_GameOver");
static_assert(sizeof(BP_Lv2_NPCBase_C_GameOver) == 0x000050, "Wrong size on BP_Lv2_NPCBase_C_GameOver");
static_assert(offsetof(BP_Lv2_NPCBase_C_GameOver, TipsIndex) == 0x000000, "Member 'BP_Lv2_NPCBase_C_GameOver::TipsIndex' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_GameOver, CallFunc_GetAllActorsOfClass_OutActors) == 0x000008, "Member 'BP_Lv2_NPCBase_C_GameOver::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_GameOver, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000018, "Member 'BP_Lv2_NPCBase_C_GameOver::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_GameOver, CallFunc_Array_Get_Item) == 0x000020, "Member 'BP_Lv2_NPCBase_C_GameOver::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_GameOver, CallFunc_EqualEqual_IntInt_ReturnValue1) == 0x000028, "Member 'BP_Lv2_NPCBase_C_GameOver::CallFunc_EqualEqual_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_GameOver, CallFunc_BooleanOR_ReturnValue) == 0x000029, "Member 'BP_Lv2_NPCBase_C_GameOver::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_GameOver, CallFunc_GetPlayerCharacter_ReturnValue) == 0x000030, "Member 'BP_Lv2_NPCBase_C_GameOver::CallFunc_GetPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_GameOver, CallFunc_Not_PreBool_ReturnValue) == 0x000038, "Member 'BP_Lv2_NPCBase_C_GameOver::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_GameOver, K2Node_DynamicCast_AsBP_Lv_2_Character_Base) == 0x000040, "Member 'BP_Lv2_NPCBase_C_GameOver::K2Node_DynamicCast_AsBP_Lv_2_Character_Base' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_GameOver, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'BP_Lv2_NPCBase_C_GameOver::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_GameOver, CallFunc_BooleanAND_ReturnValue) == 0x000049, "Member 'BP_Lv2_NPCBase_C_GameOver::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_Lv2_NPCBase.BP_Lv2_NPCBase_C.Dead
// 0x0098 (0x0098 - 0x0000)
struct BP_Lv2_NPCBase_C_Dead final
{
public:
	bool                                          ByWeapon;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLv2_DifficultStruct                   CallFunc_GetDifficultConfig_NewParam;              // 0x0008(0x0038)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMer2GameState_C*                       K2Node_DynamicCast_AsMer_2Game_State;              // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Lv2_Gia_C*                          K2Node_DynamicCast_AsBP_Lv_2_Gia;                  // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue2;                     // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B[0x1];                                       // 0x006B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue;           // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Lv2_NPCBase_C_Dead) == 0x000008, "Wrong alignment on BP_Lv2_NPCBase_C_Dead");
static_assert(sizeof(BP_Lv2_NPCBase_C_Dead) == 0x000098, "Wrong size on BP_Lv2_NPCBase_C_Dead");
static_assert(offsetof(BP_Lv2_NPCBase_C_Dead, ByWeapon) == 0x000000, "Member 'BP_Lv2_NPCBase_C_Dead::ByWeapon' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_Dead, CallFunc_GetDifficultConfig_NewParam) == 0x000008, "Member 'BP_Lv2_NPCBase_C_Dead::CallFunc_GetDifficultConfig_NewParam' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_Dead, CallFunc_GetGameState_ReturnValue) == 0x000040, "Member 'BP_Lv2_NPCBase_C_Dead::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_Dead, K2Node_DynamicCast_AsMer_2Game_State) == 0x000048, "Member 'BP_Lv2_NPCBase_C_Dead::K2Node_DynamicCast_AsMer_2Game_State' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_Dead, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'BP_Lv2_NPCBase_C_Dead::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_Dead, K2Node_DynamicCast_AsBP_Lv_2_Gia) == 0x000058, "Member 'BP_Lv2_NPCBase_C_Dead::K2Node_DynamicCast_AsBP_Lv_2_Gia' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_Dead, K2Node_DynamicCast_bSuccess1) == 0x000060, "Member 'BP_Lv2_NPCBase_C_Dead::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_Dead, Temp_int_Variable) == 0x000064, "Member 'BP_Lv2_NPCBase_C_Dead::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_Dead, CallFunc_IsValid_ReturnValue) == 0x000068, "Member 'BP_Lv2_NPCBase_C_Dead::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_Dead, CallFunc_IsValid_ReturnValue1) == 0x000069, "Member 'BP_Lv2_NPCBase_C_Dead::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_Dead, CallFunc_IsValid_ReturnValue2) == 0x00006A, "Member 'BP_Lv2_NPCBase_C_Dead::CallFunc_IsValid_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_Dead, CallFunc_Add_IntInt_ReturnValue) == 0x00006C, "Member 'BP_Lv2_NPCBase_C_Dead::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_Dead, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000070, "Member 'BP_Lv2_NPCBase_C_Dead::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_Dead, CallFunc_Conv_FloatToString_ReturnValue) == 0x000078, "Member 'BP_Lv2_NPCBase_C_Dead::CallFunc_Conv_FloatToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_Dead, CallFunc_Concat_StrStr_ReturnValue) == 0x000088, "Member 'BP_Lv2_NPCBase_C_Dead::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");

// Function BP_Lv2_NPCBase.BP_Lv2_NPCBase_C.Attack
// 0x0058 (0x0058 - 0x0000)
struct BP_Lv2_NPCBase_C_Attack final
{
public:
	bool                                          UseControllerRotation;                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue1;             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Lv2_NPCBase_C*                      K2Node_DynamicCast_AsBP_Lv_2_NPCBase;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Lv2_characterBase_C*                K2Node_DynamicCast_AsBP_Lv_2_Character_Base;       // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0056(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Lv2_NPCBase_C_Attack) == 0x000008, "Wrong alignment on BP_Lv2_NPCBase_C_Attack");
static_assert(sizeof(BP_Lv2_NPCBase_C_Attack) == 0x000058, "Wrong size on BP_Lv2_NPCBase_C_Attack");
static_assert(offsetof(BP_Lv2_NPCBase_C_Attack, UseControllerRotation) == 0x000000, "Member 'BP_Lv2_NPCBase_C_Attack::UseControllerRotation' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_Attack, Delay) == 0x000004, "Member 'BP_Lv2_NPCBase_C_Attack::Delay' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_Attack, Temp_int_Variable) == 0x000008, "Member 'BP_Lv2_NPCBase_C_Attack::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_Attack, CallFunc_Subtract_IntInt_ReturnValue) == 0x00000C, "Member 'BP_Lv2_NPCBase_C_Attack::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_Attack, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000010, "Member 'BP_Lv2_NPCBase_C_Attack::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_Attack, CallFunc_Subtract_IntInt_ReturnValue1) == 0x000014, "Member 'BP_Lv2_NPCBase_C_Attack::CallFunc_Subtract_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_Attack, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BP_Lv2_NPCBase_C_Attack::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_Attack, K2Node_DynamicCast_AsBP_Lv_2_NPCBase) == 0x000020, "Member 'BP_Lv2_NPCBase_C_Attack::K2Node_DynamicCast_AsBP_Lv_2_NPCBase' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_Attack, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_Lv2_NPCBase_C_Attack::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_Attack, K2Node_DynamicCast_AsBP_Lv_2_Character_Base) == 0x000030, "Member 'BP_Lv2_NPCBase_C_Attack::K2Node_DynamicCast_AsBP_Lv_2_Character_Base' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_Attack, K2Node_DynamicCast_bSuccess1) == 0x000038, "Member 'BP_Lv2_NPCBase_C_Attack::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_Attack, CallFunc_GetSocketLocation_ReturnValue) == 0x00003C, "Member 'BP_Lv2_NPCBase_C_Attack::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_Attack, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000048, "Member 'BP_Lv2_NPCBase_C_Attack::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_Attack, CallFunc_IsValid_ReturnValue1) == 0x000054, "Member 'BP_Lv2_NPCBase_C_Attack::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_Attack, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000055, "Member 'BP_Lv2_NPCBase_C_Attack::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_Attack, CallFunc_BooleanAND_ReturnValue) == 0x000056, "Member 'BP_Lv2_NPCBase_C_Attack::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_Lv2_NPCBase.BP_Lv2_NPCBase_C.FindMovePoint
// 0x0080 (0x0080 - 0x0000)
struct BP_Lv2_NPCBase_C_FindMovePoint final
{
public:
	struct FVector                                NewParam;                                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 BeforePoint;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Distance;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable1;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue1;                  // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable1;                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue1;                 // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Lv2_TargetPoint_C*                  CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Lv2_TargetPoint_C*                  CallFunc_Array_Get_Item1;                          // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetDistanceTo_ReturnValue;                // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue1;                  // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_72[0x2];                                       // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue1;                // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue1;                 // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue2;                  // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Lv2_NPCBase_C_FindMovePoint) == 0x000008, "Wrong alignment on BP_Lv2_NPCBase_C_FindMovePoint");
static_assert(sizeof(BP_Lv2_NPCBase_C_FindMovePoint) == 0x000080, "Wrong size on BP_Lv2_NPCBase_C_FindMovePoint");
static_assert(offsetof(BP_Lv2_NPCBase_C_FindMovePoint, NewParam) == 0x000000, "Member 'BP_Lv2_NPCBase_C_FindMovePoint::NewParam' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_FindMovePoint, BeforePoint) == 0x000010, "Member 'BP_Lv2_NPCBase_C_FindMovePoint::BeforePoint' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_FindMovePoint, Distance) == 0x000018, "Member 'BP_Lv2_NPCBase_C_FindMovePoint::Distance' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_FindMovePoint, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'BP_Lv2_NPCBase_C_FindMovePoint::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_FindMovePoint, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'BP_Lv2_NPCBase_C_FindMovePoint::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_FindMovePoint, Temp_int_Array_Index_Variable) == 0x000024, "Member 'BP_Lv2_NPCBase_C_FindMovePoint::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_FindMovePoint, Temp_int_Loop_Counter_Variable1) == 0x000028, "Member 'BP_Lv2_NPCBase_C_FindMovePoint::Temp_int_Loop_Counter_Variable1' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_FindMovePoint, CallFunc_Add_IntInt_ReturnValue1) == 0x00002C, "Member 'BP_Lv2_NPCBase_C_FindMovePoint::CallFunc_Add_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_FindMovePoint, Temp_bool_True_if_break_was_hit_Variable) == 0x000030, "Member 'BP_Lv2_NPCBase_C_FindMovePoint::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_FindMovePoint, Temp_int_Array_Index_Variable1) == 0x000034, "Member 'BP_Lv2_NPCBase_C_FindMovePoint::Temp_int_Array_Index_Variable1' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_FindMovePoint, CallFunc_Not_PreBool_ReturnValue) == 0x000038, "Member 'BP_Lv2_NPCBase_C_FindMovePoint::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_FindMovePoint, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x000039, "Member 'BP_Lv2_NPCBase_C_FindMovePoint::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_FindMovePoint, CallFunc_Not_PreBool_ReturnValue1) == 0x00003A, "Member 'BP_Lv2_NPCBase_C_FindMovePoint::CallFunc_Not_PreBool_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_FindMovePoint, CallFunc_BooleanAND_ReturnValue) == 0x00003B, "Member 'BP_Lv2_NPCBase_C_FindMovePoint::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_FindMovePoint, CallFunc_IsValid_ReturnValue) == 0x00003C, "Member 'BP_Lv2_NPCBase_C_FindMovePoint::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_FindMovePoint, CallFunc_Array_Get_Item) == 0x000040, "Member 'BP_Lv2_NPCBase_C_FindMovePoint::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_FindMovePoint, CallFunc_IsValid_ReturnValue1) == 0x000048, "Member 'BP_Lv2_NPCBase_C_FindMovePoint::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_FindMovePoint, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00004C, "Member 'BP_Lv2_NPCBase_C_FindMovePoint::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_FindMovePoint, CallFunc_Array_Get_Item1) == 0x000058, "Member 'BP_Lv2_NPCBase_C_FindMovePoint::CallFunc_Array_Get_Item1' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_FindMovePoint, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000060, "Member 'BP_Lv2_NPCBase_C_FindMovePoint::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_FindMovePoint, CallFunc_GetDistanceTo_ReturnValue) == 0x000064, "Member 'BP_Lv2_NPCBase_C_FindMovePoint::CallFunc_GetDistanceTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_FindMovePoint, CallFunc_Less_FloatFloat_ReturnValue) == 0x000068, "Member 'BP_Lv2_NPCBase_C_FindMovePoint::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_FindMovePoint, CallFunc_Array_Length_ReturnValue) == 0x00006C, "Member 'BP_Lv2_NPCBase_C_FindMovePoint::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_FindMovePoint, CallFunc_BooleanAND_ReturnValue1) == 0x000070, "Member 'BP_Lv2_NPCBase_C_FindMovePoint::CallFunc_BooleanAND_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_FindMovePoint, CallFunc_Less_IntInt_ReturnValue) == 0x000071, "Member 'BP_Lv2_NPCBase_C_FindMovePoint::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_FindMovePoint, CallFunc_Array_Length_ReturnValue1) == 0x000074, "Member 'BP_Lv2_NPCBase_C_FindMovePoint::CallFunc_Array_Length_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_FindMovePoint, CallFunc_Less_IntInt_ReturnValue1) == 0x000078, "Member 'BP_Lv2_NPCBase_C_FindMovePoint::CallFunc_Less_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_FindMovePoint, CallFunc_BooleanAND_ReturnValue2) == 0x000079, "Member 'BP_Lv2_NPCBase_C_FindMovePoint::CallFunc_BooleanAND_ReturnValue2' has a wrong offset!");

// Function BP_Lv2_NPCBase.BP_Lv2_NPCBase_C.InitNPC
// 0x0050 (0x0050 - 0x0000)
struct BP_Lv2_NPCBase_C_InitNPC final
{
public:
	float                                         HP;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Alert;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicsAsset*                          PhysicAsset;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLv2_DifficultStruct                   CallFunc_GetDifficultConfig_NewParam;              // 0x0010(0x0038)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Lv2_NPCBase_C_InitNPC) == 0x000008, "Wrong alignment on BP_Lv2_NPCBase_C_InitNPC");
static_assert(sizeof(BP_Lv2_NPCBase_C_InitNPC) == 0x000050, "Wrong size on BP_Lv2_NPCBase_C_InitNPC");
static_assert(offsetof(BP_Lv2_NPCBase_C_InitNPC, HP) == 0x000000, "Member 'BP_Lv2_NPCBase_C_InitNPC::HP' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_InitNPC, Alert) == 0x000004, "Member 'BP_Lv2_NPCBase_C_InitNPC::Alert' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_InitNPC, PhysicAsset) == 0x000008, "Member 'BP_Lv2_NPCBase_C_InitNPC::PhysicAsset' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_InitNPC, CallFunc_GetDifficultConfig_NewParam) == 0x000010, "Member 'BP_Lv2_NPCBase_C_InitNPC::CallFunc_GetDifficultConfig_NewParam' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_InitNPC, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000048, "Member 'BP_Lv2_NPCBase_C_InitNPC::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_Lv2_NPCBase.BP_Lv2_NPCBase_C.GetDifficultConfig
// 0x00C0 (0x00C0 - 0x0000)
struct BP_Lv2_NPCBase_C_GetDifficultConfig final
{
public:
	struct FLv2_DifficultStruct                   NewParam;                                          // 0x0000(0x0038)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EnumDifficuty                                 Temp_byte_Variable;                                // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable;                                // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable1;                               // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable2;                               // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable3;                               // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMer2GameInstance_C*                    K2Node_DynamicCast_AsMer_2Game_Instance;           // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Select_Default;                             // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLv2_DifficultStruct                   CallFunc_GetDataTableRowFromName_OutRow;           // 0x0080(0x0038)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Lv2_NPCBase_C_GetDifficultConfig) == 0x000008, "Wrong alignment on BP_Lv2_NPCBase_C_GetDifficultConfig");
static_assert(sizeof(BP_Lv2_NPCBase_C_GetDifficultConfig) == 0x0000C0, "Wrong size on BP_Lv2_NPCBase_C_GetDifficultConfig");
static_assert(offsetof(BP_Lv2_NPCBase_C_GetDifficultConfig, NewParam) == 0x000000, "Member 'BP_Lv2_NPCBase_C_GetDifficultConfig::NewParam' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_GetDifficultConfig, Temp_byte_Variable) == 0x000038, "Member 'BP_Lv2_NPCBase_C_GetDifficultConfig::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_GetDifficultConfig, Temp_name_Variable) == 0x000040, "Member 'BP_Lv2_NPCBase_C_GetDifficultConfig::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_GetDifficultConfig, Temp_name_Variable1) == 0x000048, "Member 'BP_Lv2_NPCBase_C_GetDifficultConfig::Temp_name_Variable1' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_GetDifficultConfig, Temp_name_Variable2) == 0x000050, "Member 'BP_Lv2_NPCBase_C_GetDifficultConfig::Temp_name_Variable2' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_GetDifficultConfig, Temp_name_Variable3) == 0x000058, "Member 'BP_Lv2_NPCBase_C_GetDifficultConfig::Temp_name_Variable3' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_GetDifficultConfig, CallFunc_GetGameInstance_ReturnValue) == 0x000060, "Member 'BP_Lv2_NPCBase_C_GetDifficultConfig::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_GetDifficultConfig, K2Node_DynamicCast_AsMer_2Game_Instance) == 0x000068, "Member 'BP_Lv2_NPCBase_C_GetDifficultConfig::K2Node_DynamicCast_AsMer_2Game_Instance' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_GetDifficultConfig, K2Node_DynamicCast_bSuccess) == 0x000070, "Member 'BP_Lv2_NPCBase_C_GetDifficultConfig::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_GetDifficultConfig, K2Node_Select_Default) == 0x000078, "Member 'BP_Lv2_NPCBase_C_GetDifficultConfig::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_GetDifficultConfig, CallFunc_GetDataTableRowFromName_OutRow) == 0x000080, "Member 'BP_Lv2_NPCBase_C_GetDifficultConfig::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_Lv2_NPCBase_C_GetDifficultConfig, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x0000B8, "Member 'BP_Lv2_NPCBase_C_GetDifficultConfig::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");

}

