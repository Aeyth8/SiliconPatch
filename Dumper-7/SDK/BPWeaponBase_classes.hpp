#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPWeaponBase

#include "Basic.hpp"

#include "RecoilData_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BPWpnBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPWeaponBase.BPWeaponBase_C
// 0x0410 (0x0880 - 0x0470)
class ABPWeaponBase_C : public ABPWpnBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BPWeaponBase_C;                     // 0x0470(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USpotLightComponent*                    SpotLight;                                         // 0x0478(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        ThrowBulletDirection;                              // 0x0480(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          SecondHandCheck;                                   // 0x0488(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x0490(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        InfiniteHandParticle;                              // 0x0498(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        InfiniteParticle;                                  // 0x04A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        MobileUI;                                          // 0x04A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene1;                                            // 0x04B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       WeaponUI;                                          // 0x04B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene_0;                                           // 0x04C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_InteractionComponent_C*             BP_InteractionComponent;                           // 0x04C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Recoil_Matinee_Recoil_D5A32777476F42ED0C15CD893BA81AA4; // 0x04D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Recoil_Matinee__Direction_D5A32777476F42ED0C15CD893BA81AA4; // 0x04D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D5[0x3];                                      // 0x04D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Recoil_Matinee;                                    // 0x04D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurBullet;                                         // 0x04E0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsShow;                                            // 0x04E4(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4E5[0x3];                                      // 0x04E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurSetTotal;                                       // 0x04E8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRecoilData                            RecoilSettings;                                    // 0x04EC(0x0034)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRecoilData                            RecoilSettings_BothHand;                           // 0x0520(0x0034)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Random_Recoil_Roll;                                // 0x0554(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Random_Recoil_Pitch;                               // 0x0558(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Random_Recoil_Yaw;                                 // 0x055C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Recoil_Matinee_Length;                             // 0x0560(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_564[0xC];                                      // 0x0564(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Recoil_Starting_Transform;                         // 0x0570(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Apply_Recoil;                                      // 0x05A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          RecoilRecoveryFinished;                            // 0x05A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A2[0x2];                                      // 0x05A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RecoilRecoverDuration;                             // 0x05A4(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRecoilData                            InitialRecoilSettings;                             // 0x05A8(0x0034)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Recoil_1_Hand_Multiply;                            // 0x05DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TempRecoilMultiplier;                              // 0x05E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DynamicRecoilMultiplier;                           // 0x05E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5E8[0x8];                                      // 0x05E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CurrentRecoilOffset;                               // 0x05F0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UCurveFloat*                            RecoilCurve;                                       // 0x0620(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RecoilCurveEndTime;                                // 0x0628(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62C[0x4];                                      // 0x062C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             GoalRecoilOffset;                                  // 0x0630(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FTransform                             IdentityTransform;                                 // 0x0660(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FTransform                             InitRelativeTransform;                             // 0x0690(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UHapticFeedbackEffect_Base*             ShootingHapitcEffect;                              // 0x06C0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HapticShootScale;                                  // 0x06C8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          lsEquipByAI;                                       // 0x06CC(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6CD[0x3];                                      // 0x06CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 ClipClass;                                         // 0x06D0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWpn_Clip_C*                            ClipActor;                                         // 0x06D8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          IsClipDrop;                                        // 0x06E0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsNeedDropClip;                                    // 0x06E1(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E2[0x6];                                      // 0x06E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UWeaponUI_C*                            WeaponUIWidget;                                    // 0x06E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        shellAduio;                                        // 0x06F0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F8[0x8];                                      // 0x06F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RecoilToTransform;                                 // 0x0700(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class AActor*                                 MyOwner;                                           // 0x0730(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            OwnerPlayerController;                             // 0x0738(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsNeedInitPR;                                      // 0x0740(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_741[0x3];                                      // 0x0741(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DropDelay;                                         // 0x0744(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         WeaponMonitorMaterialIndex;                        // 0x0748(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74C[0x4];                                      // 0x074C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               WeaponMonitorMI;                                   // 0x0750(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        TargetComponent;                                   // 0x0758(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlyTime;                                           // 0x0760(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPickWeapon;                                      // 0x0764(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_765[0x3];                                      // 0x0765(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReloadTime;                                        // 0x0768(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReloadTimer;                                       // 0x076C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WeaponRelativeLocation;                            // 0x0770(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_77C[0x4];                                      // 0x077C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               InfinitePower;                                     // 0x0780(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPullBolt;                                        // 0x0788(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_789[0x3];                                      // 0x0789(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PullBoltLength;                                    // 0x078C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   OnPullBoltComplete;                                // 0x0790(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnInsertClip;                                      // 0x07A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FVector                                PullBoltPoseOffset_L;                              // 0x07B0(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PullBoltPoseOffset_R;                              // 0x07BC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PullBoltPoseIndex;                                 // 0x07C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsNeedPullBolt;                                    // 0x07CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsNeedManalReload;                                 // 0x07CD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CE[0x2];                                      // 0x07CE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UWeaponAnimInstance*                    AnimBP;                                            // 0x07D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   OnPullBoltReset;                                   // 0x07D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnReload;                                          // 0x07E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnPullBoltStart;                                   // 0x07F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class ABP_BulletBase_C*                       Bullet;                                            // 0x0808(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   OnPullBoltThrowBullet;                             // 0x0810(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FRecoilData                            RecoilSettings_Temp;                               // 0x0820(0x0034)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowBulletPower;                                  // 0x0854(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAutoReloading;                                   // 0x0858(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsReloadingClip;                                   // 0x0859(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85A[0x2];                                      // 0x085A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AutoReloadDelay;                                   // 0x085C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               BoltMI;                                            // 0x0860(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BoltMI_Index;                                      // 0x0868(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInsertClipNotPullBolt;                           // 0x086C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_86D[0x3];                                      // 0x086D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PullBoltTipsDelay;                                 // 0x0870(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTutorial;                                        // 0x0874(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_875[0x3];                                      // 0x0875(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LastBoltLength;                                    // 0x0878(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInTutorial;                                      // 0x087C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BPWeaponBase(int32 EntryPoint);
	void OnPullBoltHandOn(bool On);
	void Evt_ReloadLeftOneBullet();
	void HightlightBolt(bool Value);
	void DoOnInsertClip_Base(class AWpn_Clip_C* Clip, bool IsDelay);
	void CustomEvent_5(class AWpn_Clip_C* Clip, bool IsDelay);
	void SwitchLight(bool On);
	void BothHandHold(bool IsHold);
	void CheatOnInsertClip(class AActor* Clip);
	void CustomEvent_4();
	void CustomEvent_3();
	void BndEvt__SecondHandCheck_K2Node_ComponentBoundEvent_5_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__SecondHandCheck_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void Evt_PullTrigger();
	void Evt_ClipEmpty();
	void Evt_StopFire();
	void BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ResetPullBolt();
	void CustomEvent_1();
	void Evt_EndInfinite();
	void Evt_StartInfinite();
	void FlyToTarget(class USceneComponent* TargetComponent_0, bool IsFromRightHand);
	void InitPR();
	void Evt_ShotHaptic();
	void OnLineSpawnClip();
	void Evt_SpawnClip();
	void Evt_DropWeapon();
	void BP_PlayShellDropVfx(class UParticleSystem* VFX, const struct FTransform& T);
	void OnLineGripped();
	void OnLineTriggerReleased();
	void OnLineReload();
	void OnLineFire();
	void OnLineTriggerPull(bool IsFromRightHand, class AActor* hand);
	void Evt_Fire();
	void RecoilTimeLine();
	void UpdateUI();
	void CustomEvent_0(class FName EventName, float EmitterTime, int32 ParticleTime, const struct FVector& Location, const struct FVector& Velocity, const struct FVector& Direction, const struct FVector& Normal, class FName BoneName, class UPhysicalMaterial* PhysMat);
	void Evt_Reload();
	void Evt_RecoilTimeLine();
	void ReceiveBeginPlay();
	void BndEvt__BP_InteractionComponent_K2Node_ComponentBoundEvent_3_OnTriggerGripped__DelegateSignature();
	void BndEvt__BP_InteractionComponent_K2Node_ComponentBoundEvent_2_OnTriggerReleased__DelegateSignature();
	void BndEvt__BP_InteractionComponent_K2Node_ComponentBoundEvent_1_OnTriggerPulled__DelegateSignature(bool lsFromRightHand, class AActor* hand);
	void ReceiveTick(float DeltaSeconds);
	void SetRenderCustomDepth(bool Val);
	void OnPlayPickUpSound();
	void Recoil_Matinee__UpdateFunc();
	void Recoil_Matinee__FinishedFunc();
	void UserConstructionScript();
	void SetUIText(bool IsLeft);
	float ComputeYawRecoil();
	float ComputePitchRecoil();
	void ComputePushRecoil(float* Recoil_X_Push_);
	void ApplyRecoilToTransform(const struct FTransform& GunToWorld, struct FTransform* NewGunToWorld);
	void InitRelativePR();
	void SpawnClip();
	void DropClip();
	void GetLeftBulletInBag(int32* Num);
	void PlayPickUpSound();
	void OnRep_ClipClass();
	void OnRep_InitialRecoilSettings();
	void AjustUI();
	void CheckSize();
	float ComputeRollRecoil();
	void OnRep_ClipActor();
	void GetThrowBulletDirection(struct FVector* Direction);
	void GetBoltLength(float* Value);
	void PullBoltMaxLength();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPWeaponBase_C">();
	}
	static class ABPWeaponBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABPWeaponBase_C>();
	}
};
static_assert(alignof(ABPWeaponBase_C) == 0x000010, "Wrong alignment on ABPWeaponBase_C");
static_assert(sizeof(ABPWeaponBase_C) == 0x000880, "Wrong size on ABPWeaponBase_C");
static_assert(offsetof(ABPWeaponBase_C, UberGraphFrame_BPWeaponBase_C) == 0x000470, "Member 'ABPWeaponBase_C::UberGraphFrame_BPWeaponBase_C' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, SpotLight) == 0x000478, "Member 'ABPWeaponBase_C::SpotLight' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, ThrowBulletDirection) == 0x000480, "Member 'ABPWeaponBase_C::ThrowBulletDirection' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, SecondHandCheck) == 0x000488, "Member 'ABPWeaponBase_C::SecondHandCheck' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, Box) == 0x000490, "Member 'ABPWeaponBase_C::Box' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, InfiniteHandParticle) == 0x000498, "Member 'ABPWeaponBase_C::InfiniteHandParticle' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, InfiniteParticle) == 0x0004A0, "Member 'ABPWeaponBase_C::InfiniteParticle' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, MobileUI) == 0x0004A8, "Member 'ABPWeaponBase_C::MobileUI' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, Scene1) == 0x0004B0, "Member 'ABPWeaponBase_C::Scene1' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, WeaponUI) == 0x0004B8, "Member 'ABPWeaponBase_C::WeaponUI' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, Scene_0) == 0x0004C0, "Member 'ABPWeaponBase_C::Scene_0' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, BP_InteractionComponent) == 0x0004C8, "Member 'ABPWeaponBase_C::BP_InteractionComponent' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, Recoil_Matinee_Recoil_D5A32777476F42ED0C15CD893BA81AA4) == 0x0004D0, "Member 'ABPWeaponBase_C::Recoil_Matinee_Recoil_D5A32777476F42ED0C15CD893BA81AA4' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, Recoil_Matinee__Direction_D5A32777476F42ED0C15CD893BA81AA4) == 0x0004D4, "Member 'ABPWeaponBase_C::Recoil_Matinee__Direction_D5A32777476F42ED0C15CD893BA81AA4' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, Recoil_Matinee) == 0x0004D8, "Member 'ABPWeaponBase_C::Recoil_Matinee' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, CurBullet) == 0x0004E0, "Member 'ABPWeaponBase_C::CurBullet' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, IsShow) == 0x0004E4, "Member 'ABPWeaponBase_C::IsShow' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, CurSetTotal) == 0x0004E8, "Member 'ABPWeaponBase_C::CurSetTotal' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, RecoilSettings) == 0x0004EC, "Member 'ABPWeaponBase_C::RecoilSettings' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, RecoilSettings_BothHand) == 0x000520, "Member 'ABPWeaponBase_C::RecoilSettings_BothHand' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, Random_Recoil_Roll) == 0x000554, "Member 'ABPWeaponBase_C::Random_Recoil_Roll' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, Random_Recoil_Pitch) == 0x000558, "Member 'ABPWeaponBase_C::Random_Recoil_Pitch' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, Random_Recoil_Yaw) == 0x00055C, "Member 'ABPWeaponBase_C::Random_Recoil_Yaw' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, Recoil_Matinee_Length) == 0x000560, "Member 'ABPWeaponBase_C::Recoil_Matinee_Length' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, Recoil_Starting_Transform) == 0x000570, "Member 'ABPWeaponBase_C::Recoil_Starting_Transform' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, Apply_Recoil) == 0x0005A0, "Member 'ABPWeaponBase_C::Apply_Recoil' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, RecoilRecoveryFinished) == 0x0005A1, "Member 'ABPWeaponBase_C::RecoilRecoveryFinished' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, RecoilRecoverDuration) == 0x0005A4, "Member 'ABPWeaponBase_C::RecoilRecoverDuration' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, InitialRecoilSettings) == 0x0005A8, "Member 'ABPWeaponBase_C::InitialRecoilSettings' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, Recoil_1_Hand_Multiply) == 0x0005DC, "Member 'ABPWeaponBase_C::Recoil_1_Hand_Multiply' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, TempRecoilMultiplier) == 0x0005E0, "Member 'ABPWeaponBase_C::TempRecoilMultiplier' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, DynamicRecoilMultiplier) == 0x0005E4, "Member 'ABPWeaponBase_C::DynamicRecoilMultiplier' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, CurrentRecoilOffset) == 0x0005F0, "Member 'ABPWeaponBase_C::CurrentRecoilOffset' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, RecoilCurve) == 0x000620, "Member 'ABPWeaponBase_C::RecoilCurve' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, RecoilCurveEndTime) == 0x000628, "Member 'ABPWeaponBase_C::RecoilCurveEndTime' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, GoalRecoilOffset) == 0x000630, "Member 'ABPWeaponBase_C::GoalRecoilOffset' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, IdentityTransform) == 0x000660, "Member 'ABPWeaponBase_C::IdentityTransform' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, InitRelativeTransform) == 0x000690, "Member 'ABPWeaponBase_C::InitRelativeTransform' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, ShootingHapitcEffect) == 0x0006C0, "Member 'ABPWeaponBase_C::ShootingHapitcEffect' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, HapticShootScale) == 0x0006C8, "Member 'ABPWeaponBase_C::HapticShootScale' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, lsEquipByAI) == 0x0006CC, "Member 'ABPWeaponBase_C::lsEquipByAI' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, ClipClass) == 0x0006D0, "Member 'ABPWeaponBase_C::ClipClass' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, ClipActor) == 0x0006D8, "Member 'ABPWeaponBase_C::ClipActor' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, IsClipDrop) == 0x0006E0, "Member 'ABPWeaponBase_C::IsClipDrop' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, IsNeedDropClip) == 0x0006E1, "Member 'ABPWeaponBase_C::IsNeedDropClip' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, WeaponUIWidget) == 0x0006E8, "Member 'ABPWeaponBase_C::WeaponUIWidget' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, shellAduio) == 0x0006F0, "Member 'ABPWeaponBase_C::shellAduio' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, RecoilToTransform) == 0x000700, "Member 'ABPWeaponBase_C::RecoilToTransform' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, MyOwner) == 0x000730, "Member 'ABPWeaponBase_C::MyOwner' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, OwnerPlayerController) == 0x000738, "Member 'ABPWeaponBase_C::OwnerPlayerController' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, IsNeedInitPR) == 0x000740, "Member 'ABPWeaponBase_C::IsNeedInitPR' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, DropDelay) == 0x000744, "Member 'ABPWeaponBase_C::DropDelay' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, WeaponMonitorMaterialIndex) == 0x000748, "Member 'ABPWeaponBase_C::WeaponMonitorMaterialIndex' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, WeaponMonitorMI) == 0x000750, "Member 'ABPWeaponBase_C::WeaponMonitorMI' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, TargetComponent) == 0x000758, "Member 'ABPWeaponBase_C::TargetComponent' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, FlyTime) == 0x000760, "Member 'ABPWeaponBase_C::FlyTime' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, IsPickWeapon) == 0x000764, "Member 'ABPWeaponBase_C::IsPickWeapon' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, ReloadTime) == 0x000768, "Member 'ABPWeaponBase_C::ReloadTime' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, ReloadTimer) == 0x00076C, "Member 'ABPWeaponBase_C::ReloadTimer' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, WeaponRelativeLocation) == 0x000770, "Member 'ABPWeaponBase_C::WeaponRelativeLocation' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, InfinitePower) == 0x000780, "Member 'ABPWeaponBase_C::InfinitePower' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, IsPullBolt) == 0x000788, "Member 'ABPWeaponBase_C::IsPullBolt' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, PullBoltLength) == 0x00078C, "Member 'ABPWeaponBase_C::PullBoltLength' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, OnPullBoltComplete) == 0x000790, "Member 'ABPWeaponBase_C::OnPullBoltComplete' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, OnInsertClip) == 0x0007A0, "Member 'ABPWeaponBase_C::OnInsertClip' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, PullBoltPoseOffset_L) == 0x0007B0, "Member 'ABPWeaponBase_C::PullBoltPoseOffset_L' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, PullBoltPoseOffset_R) == 0x0007BC, "Member 'ABPWeaponBase_C::PullBoltPoseOffset_R' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, PullBoltPoseIndex) == 0x0007C8, "Member 'ABPWeaponBase_C::PullBoltPoseIndex' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, IsNeedPullBolt) == 0x0007CC, "Member 'ABPWeaponBase_C::IsNeedPullBolt' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, IsNeedManalReload) == 0x0007CD, "Member 'ABPWeaponBase_C::IsNeedManalReload' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, AnimBP) == 0x0007D0, "Member 'ABPWeaponBase_C::AnimBP' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, OnPullBoltReset) == 0x0007D8, "Member 'ABPWeaponBase_C::OnPullBoltReset' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, OnReload) == 0x0007E8, "Member 'ABPWeaponBase_C::OnReload' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, OnPullBoltStart) == 0x0007F8, "Member 'ABPWeaponBase_C::OnPullBoltStart' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, Bullet) == 0x000808, "Member 'ABPWeaponBase_C::Bullet' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, OnPullBoltThrowBullet) == 0x000810, "Member 'ABPWeaponBase_C::OnPullBoltThrowBullet' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, RecoilSettings_Temp) == 0x000820, "Member 'ABPWeaponBase_C::RecoilSettings_Temp' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, ThrowBulletPower) == 0x000854, "Member 'ABPWeaponBase_C::ThrowBulletPower' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, IsAutoReloading) == 0x000858, "Member 'ABPWeaponBase_C::IsAutoReloading' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, IsReloadingClip) == 0x000859, "Member 'ABPWeaponBase_C::IsReloadingClip' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, AutoReloadDelay) == 0x00085C, "Member 'ABPWeaponBase_C::AutoReloadDelay' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, BoltMI) == 0x000860, "Member 'ABPWeaponBase_C::BoltMI' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, BoltMI_Index) == 0x000868, "Member 'ABPWeaponBase_C::BoltMI_Index' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, IsInsertClipNotPullBolt) == 0x00086C, "Member 'ABPWeaponBase_C::IsInsertClipNotPullBolt' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, PullBoltTipsDelay) == 0x000870, "Member 'ABPWeaponBase_C::PullBoltTipsDelay' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, IsTutorial) == 0x000874, "Member 'ABPWeaponBase_C::IsTutorial' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, LastBoltLength) == 0x000878, "Member 'ABPWeaponBase_C::LastBoltLength' has a wrong offset!");
static_assert(offsetof(ABPWeaponBase_C, IsInTutorial) == 0x00087C, "Member 'ABPWeaponBase_C::IsInTutorial' has a wrong offset!");

}

