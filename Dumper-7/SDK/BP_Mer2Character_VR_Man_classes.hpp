#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Mer2Character_VR_Man

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_CharacterBase_classes.hpp"
#include "SiliconRising_structs.hpp"
#include "Enum_ControllerType_structs.hpp"
#include "Enum_PlayMode_structs.hpp"
#include "Enum_TurnMode_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Mer2Character_VR_Man.BP_Mer2Character_VR_Man_C
// 0x0090 (0x0D60 - 0x0CD0)
class ABP_Mer2Character_VR_Man_C : public ABP_CharacterBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Mer2Character_VR_Man_C;          // 0x0CD0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USkeletalMeshComponent*                 IKBody;                                            // 0x0CD8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Tracker;                                           // 0x0CE0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSetSpectatorUI;                                  // 0x0CE8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsFlipFlopUI;                                      // 0x0CE9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CEA[0x6];                                      // 0x0CEA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimBP_Andy_IK_C*                      AnimInstance;                                      // 0x0CF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEnableHMD;                                       // 0x0CF8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          IsOntoLeftHand;                                    // 0x0CF9(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsOntoRightHand;                                   // 0x0CFA(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsOntoHead;                                        // 0x0CFB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          OnSeat;                                            // 0x0CFC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CanMove;                                           // 0x0CFD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CFE[0x2];                                      // 0x0CFE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UIKAnimInstance*                        AnimBP;                                            // 0x0D00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LastDirectionVector;                               // 0x0D08(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDebug;                                           // 0x0D14(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D15[0x3];                                      // 0x0D15(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Adjust;                                            // 0x0D18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AdjustCount;                                       // 0x0D1C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USpectatorHud_C*                        SpectatorHud;                                      // 0x0D20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpectatorUISize_InPlay;                            // 0x0D28(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpectatorUISize_GameOVer;                          // 0x0D2C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoveSpeed;                                         // 0x0D30(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PreLocation;                                       // 0x0D34(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurnDegree;                                        // 0x0D40(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHandHold_L;                                      // 0x0D44(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsHandHold_R;                                      // 0x0D45(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D46[0x2];                                      // 0x0D46(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LastHMDPosition;                                   // 0x0D48(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LastActorPosition;                                 // 0x0D54(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Mer2Character_VR_Man(int32 EntryPoint);
	void ResetPlayMode();
	void OnShowLeaderboard();
	void UpdateToClient(const struct FTransform& head, const struct FTransform& LeftHand, const struct FTransform& RightHand);
	void UpdateToServer(const struct FTransform& head, const struct FTransform& LeftHand, const struct FTransform& RightHand);
	void UpdateReplication();
	void OnReleaseBothHand();
	void TickBothHand();
	void TickFreeMove();
	void InpActEvt_L_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_O_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void InpActEvt_I_K2Node_InputKeyEvent_2(const struct FKey& Key);
	void InpActEvt_K_K2Node_InputKeyEvent_3(const struct FKey& Key);
	void InpActEvt_Down_K2Node_InputKeyEvent_4(const struct FKey& Key);
	void InpActEvt_Up_K2Node_InputKeyEvent_5(const struct FKey& Key);
	void InpActEvt_Nine_K2Node_InputKeyEvent_6(const struct FKey& Key);
	void InpActEvt_Eight_K2Node_InputKeyEvent_7(const struct FKey& Key);
	void InpActEvt_SpaceBar_K2Node_InputKeyEvent_8(const struct FKey& Key);
	void InpActEvt_GripButton_R_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_GripButton_L_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpActEvt_L_K2Node_InputKeyEvent_9(const struct FKey& Key);
	void InpActEvt_K_K2Node_InputKeyEvent_10(const struct FKey& Key);
	void InpActEvt_CtrlMoveLeft_R_K2Node_InputActionEvent_2(const struct FKey& Key);
	void InpActEvt_CtrlMoveLeft_R_K2Node_InputActionEvent_3(const struct FKey& Key);
	void InpActEvt_CtrlTurnRight_L_K2Node_InputActionEvent_4(const struct FKey& Key);
	void InpActEvt_CtrlTurnRight_L_K2Node_InputActionEvent_5(const struct FKey& Key);
	void InpActEvt_CtrlTurnLeft_L_K2Node_InputActionEvent_6(const struct FKey& Key);
	void InpActEvt_CtrlTurnLeft_L_K2Node_InputActionEvent_7(const struct FKey& Key);
	void InpActEvt_CtrlMoveRight_R_K2Node_InputActionEvent_8(const struct FKey& Key);
	void InpActEvt_CtrlMoveRight_R_K2Node_InputActionEvent_9(const struct FKey& Key);
	void InpActEvt_CtrlMoveBackdown_R_K2Node_InputActionEvent_10(const struct FKey& Key);
	void InpActEvt_CtrlMoveBackdown_R_K2Node_InputActionEvent_11(const struct FKey& Key);
	void InpActEvt_CtrlMoveForward_R_K2Node_InputActionEvent_12(const struct FKey& Key);
	void InpActEvt_CtrlMoveForward_R_K2Node_InputActionEvent_13(const struct FKey& Key);
	void InpActEvt_CtrlTurnRight_K2Node_InputActionEvent_14(const struct FKey& Key);
	void InpActEvt_CtrlTurnRight_K2Node_InputActionEvent_15(const struct FKey& Key);
	void InpActEvt_CtrlTurnLeft_K2Node_InputActionEvent_16(const struct FKey& Key);
	void InpActEvt_CtrlTurnLeft_K2Node_InputActionEvent_17(const struct FKey& Key);
	void InpActEvt_CtrlMoveLeft_K2Node_InputActionEvent_18(const struct FKey& Key);
	void InpActEvt_CtrlMoveLeft_K2Node_InputActionEvent_19(const struct FKey& Key);
	void InpActEvt_CtrlMoveRight_K2Node_InputActionEvent_20(const struct FKey& Key);
	void InpActEvt_CtrlMoveRight_K2Node_InputActionEvent_21(const struct FKey& Key);
	void InpActEvt_CtrlMoveBackdown_K2Node_InputActionEvent_22(const struct FKey& Key);
	void InpActEvt_CtrlMoveBackdown_K2Node_InputActionEvent_23(const struct FKey& Key);
	void InpActEvt_CtrlMoveForward_K2Node_InputActionEvent_24(const struct FKey& Key);
	void InpActEvt_CtrlMoveForward_K2Node_InputActionEvent_25(const struct FKey& Key);
	void SetSpectatorUI(bool IsShow, bool IsGameOver_0);
	void ResetCameraHeight();
	void RotatePointAroundPoint(class USceneComponent* Center, const struct FVector& RotateTargetLocation, float Angle, struct FVector* TargetLocation);
	void SetTriggerStatus(bool IsRightHand, bool Value);
	void SetHandType(bool IsRightHand, EItemTypes Value);
	void ControllerTriggerRightRelease();
	void ControllerTriggerRightPress();
	void ControllerTriggerLeftRelease();
	void ControllerTriggerLeftPress();
	void InpAxisEvt_LookUp_K2Node_InputAxisEvent_172(float AxisValue);
	void InpAxisEvt_Turn_K2Node_InputAxisEvent_157(float AxisValue);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void OnShowDebugLine(bool Value);
	void UserConstructionScript();
	void SpawnWeapon(bool IsRight, EItemTypes WeaponType);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Mer2Character_VR_Man_C">();
	}
	static class ABP_Mer2Character_VR_Man_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Mer2Character_VR_Man_C>();
	}
};
static_assert(alignof(ABP_Mer2Character_VR_Man_C) == 0x000010, "Wrong alignment on ABP_Mer2Character_VR_Man_C");
static_assert(sizeof(ABP_Mer2Character_VR_Man_C) == 0x000D60, "Wrong size on ABP_Mer2Character_VR_Man_C");
static_assert(offsetof(ABP_Mer2Character_VR_Man_C, UberGraphFrame_BP_Mer2Character_VR_Man_C) == 0x000CD0, "Member 'ABP_Mer2Character_VR_Man_C::UberGraphFrame_BP_Mer2Character_VR_Man_C' has a wrong offset!");
static_assert(offsetof(ABP_Mer2Character_VR_Man_C, IKBody) == 0x000CD8, "Member 'ABP_Mer2Character_VR_Man_C::IKBody' has a wrong offset!");
static_assert(offsetof(ABP_Mer2Character_VR_Man_C, Tracker) == 0x000CE0, "Member 'ABP_Mer2Character_VR_Man_C::Tracker' has a wrong offset!");
static_assert(offsetof(ABP_Mer2Character_VR_Man_C, IsSetSpectatorUI) == 0x000CE8, "Member 'ABP_Mer2Character_VR_Man_C::IsSetSpectatorUI' has a wrong offset!");
static_assert(offsetof(ABP_Mer2Character_VR_Man_C, IsFlipFlopUI) == 0x000CE9, "Member 'ABP_Mer2Character_VR_Man_C::IsFlipFlopUI' has a wrong offset!");
static_assert(offsetof(ABP_Mer2Character_VR_Man_C, AnimInstance) == 0x000CF0, "Member 'ABP_Mer2Character_VR_Man_C::AnimInstance' has a wrong offset!");
static_assert(offsetof(ABP_Mer2Character_VR_Man_C, IsEnableHMD) == 0x000CF8, "Member 'ABP_Mer2Character_VR_Man_C::IsEnableHMD' has a wrong offset!");
static_assert(offsetof(ABP_Mer2Character_VR_Man_C, IsOntoLeftHand) == 0x000CF9, "Member 'ABP_Mer2Character_VR_Man_C::IsOntoLeftHand' has a wrong offset!");
static_assert(offsetof(ABP_Mer2Character_VR_Man_C, IsOntoRightHand) == 0x000CFA, "Member 'ABP_Mer2Character_VR_Man_C::IsOntoRightHand' has a wrong offset!");
static_assert(offsetof(ABP_Mer2Character_VR_Man_C, IsOntoHead) == 0x000CFB, "Member 'ABP_Mer2Character_VR_Man_C::IsOntoHead' has a wrong offset!");
static_assert(offsetof(ABP_Mer2Character_VR_Man_C, OnSeat) == 0x000CFC, "Member 'ABP_Mer2Character_VR_Man_C::OnSeat' has a wrong offset!");
static_assert(offsetof(ABP_Mer2Character_VR_Man_C, CanMove) == 0x000CFD, "Member 'ABP_Mer2Character_VR_Man_C::CanMove' has a wrong offset!");
static_assert(offsetof(ABP_Mer2Character_VR_Man_C, AnimBP) == 0x000D00, "Member 'ABP_Mer2Character_VR_Man_C::AnimBP' has a wrong offset!");
static_assert(offsetof(ABP_Mer2Character_VR_Man_C, LastDirectionVector) == 0x000D08, "Member 'ABP_Mer2Character_VR_Man_C::LastDirectionVector' has a wrong offset!");
static_assert(offsetof(ABP_Mer2Character_VR_Man_C, IsDebug) == 0x000D14, "Member 'ABP_Mer2Character_VR_Man_C::IsDebug' has a wrong offset!");
static_assert(offsetof(ABP_Mer2Character_VR_Man_C, Adjust) == 0x000D18, "Member 'ABP_Mer2Character_VR_Man_C::Adjust' has a wrong offset!");
static_assert(offsetof(ABP_Mer2Character_VR_Man_C, AdjustCount) == 0x000D1C, "Member 'ABP_Mer2Character_VR_Man_C::AdjustCount' has a wrong offset!");
static_assert(offsetof(ABP_Mer2Character_VR_Man_C, SpectatorHud) == 0x000D20, "Member 'ABP_Mer2Character_VR_Man_C::SpectatorHud' has a wrong offset!");
static_assert(offsetof(ABP_Mer2Character_VR_Man_C, SpectatorUISize_InPlay) == 0x000D28, "Member 'ABP_Mer2Character_VR_Man_C::SpectatorUISize_InPlay' has a wrong offset!");
static_assert(offsetof(ABP_Mer2Character_VR_Man_C, SpectatorUISize_GameOVer) == 0x000D2C, "Member 'ABP_Mer2Character_VR_Man_C::SpectatorUISize_GameOVer' has a wrong offset!");
static_assert(offsetof(ABP_Mer2Character_VR_Man_C, MoveSpeed) == 0x000D30, "Member 'ABP_Mer2Character_VR_Man_C::MoveSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Mer2Character_VR_Man_C, PreLocation) == 0x000D34, "Member 'ABP_Mer2Character_VR_Man_C::PreLocation' has a wrong offset!");
static_assert(offsetof(ABP_Mer2Character_VR_Man_C, TurnDegree) == 0x000D40, "Member 'ABP_Mer2Character_VR_Man_C::TurnDegree' has a wrong offset!");
static_assert(offsetof(ABP_Mer2Character_VR_Man_C, IsHandHold_L) == 0x000D44, "Member 'ABP_Mer2Character_VR_Man_C::IsHandHold_L' has a wrong offset!");
static_assert(offsetof(ABP_Mer2Character_VR_Man_C, IsHandHold_R) == 0x000D45, "Member 'ABP_Mer2Character_VR_Man_C::IsHandHold_R' has a wrong offset!");
static_assert(offsetof(ABP_Mer2Character_VR_Man_C, LastHMDPosition) == 0x000D48, "Member 'ABP_Mer2Character_VR_Man_C::LastHMDPosition' has a wrong offset!");
static_assert(offsetof(ABP_Mer2Character_VR_Man_C, LastActorPosition) == 0x000D54, "Member 'ABP_Mer2Character_VR_Man_C::LastActorPosition' has a wrong offset!");

}

