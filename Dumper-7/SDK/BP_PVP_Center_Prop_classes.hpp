#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PVP_Center_Prop

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PVP_Center_Prop.BP_PVP_Center_Prop_C
// 0x0158 (0x0480 - 0x0328)
class ABP_PVP_Center_Prop_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0328(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UParticleSystemComponent*               ParticleSystem;                                    // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Card1Point;                                        // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Card4Point;                                        // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Card3Point;                                        // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Card2Point;                                        // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   ScoreBoard;                                        // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        ScoreBoardPoint;                                   // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Prop_Rotatingtarget_spring_bot;                    // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Prop_Rotatingtarget_rotating;                      // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Prop_Rotatingtarget_spring_top;                    // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Prop_Rotatingtarget_SK;                            // 0x0380(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URotatingMovementComponent*             RotatingMovement;                                  // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   PhysicsBoard;                                      // 0x0390(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Root;                                              // 0x0398(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_NewTrack_1_3B51933C4317F485C48F849F3293009A; // 0x03A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_Value_3B51933C4317F485C48F849F3293009A; // 0x03A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_3B51933C4317F485C48F849F3293009A; // 0x03A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A9[0x7];                                      // 0x03A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B8[0x8];                                      // 0x03B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReplicateTransform;                                // 0x03C0(0x0030)(Edit, BlueprintVisible, Net, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	float                                         RotateSpeed;                                       // 0x03F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TeamA_Count;                                       // 0x03F4(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	int32                                         TeamB_Count;                                       // 0x03F8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3FC[0x4];                                      // 0x03FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABPPrjBase_C*                           LastHitter;                                        // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DecreaseSpeed;                                     // 0x0408(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time;                                              // 0x040C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TimeLeft;                                          // 0x0410(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AddTime;                                           // 0x0414(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InitTime;                                          // 0x0418(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41C[0x4];                                      // 0x041C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UProp_Rotatingtarget_SK_Skeleton_AnimBlueprint_C* AnimBP;                                  // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Recoil;                                            // 0x0428(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42C[0x4];                                      // 0x042C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               ScoreLineMI;                                       // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   OnShowUpEnd;                                       // 0x0438(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UMaterialInstanceDynamic*               ScoreBoardMI;                                      // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Prop_Slide_C*                       Slider;                                            // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CenterColor;                                       // 0x0458(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CenterInitColor;                                   // 0x0468(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_PVP_Center_Prop(int32 EntryPoint);
	void OnHitRotatingtarget();
	void OnHitCenterBroadcast();
	void OnHitCenter();
	void ShowUpEnd();
	void CastShowUp();
	void OnShowUp();
	void AddRecoil();
	void BndEvt__Prop_Rotatingtarget_rotating_K2Node_ComponentBoundEvent_4_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void BndEvt__Prop_Rotatingtarget_spring_top_K2Node_ComponentBoundEvent_3_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void Init();
	void CheatScore(bool IsBlue, int32 AddScore);
	void BndEvt__ScoreBoard_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnBroadHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void OnCenterColor(bool IsA);
	void Timeline_0__UpdateFunc();
	void Timeline_0__FinishedFunc();
	void UserConstructionScript();
	void OnRep_ReplicateTransform();
	void OnRep_Recoil();
	void OnRep_TeamA_Count();
	void OnRep_TeamB_Count();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PVP_Center_Prop_C">();
	}
	static class ABP_PVP_Center_Prop_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PVP_Center_Prop_C>();
	}
};
static_assert(alignof(ABP_PVP_Center_Prop_C) == 0x000010, "Wrong alignment on ABP_PVP_Center_Prop_C");
static_assert(sizeof(ABP_PVP_Center_Prop_C) == 0x000480, "Wrong size on ABP_PVP_Center_Prop_C");
static_assert(offsetof(ABP_PVP_Center_Prop_C, UberGraphFrame) == 0x000328, "Member 'ABP_PVP_Center_Prop_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_PVP_Center_Prop_C, ParticleSystem) == 0x000330, "Member 'ABP_PVP_Center_Prop_C::ParticleSystem' has a wrong offset!");
static_assert(offsetof(ABP_PVP_Center_Prop_C, Card1Point) == 0x000338, "Member 'ABP_PVP_Center_Prop_C::Card1Point' has a wrong offset!");
static_assert(offsetof(ABP_PVP_Center_Prop_C, Card4Point) == 0x000340, "Member 'ABP_PVP_Center_Prop_C::Card4Point' has a wrong offset!");
static_assert(offsetof(ABP_PVP_Center_Prop_C, Card3Point) == 0x000348, "Member 'ABP_PVP_Center_Prop_C::Card3Point' has a wrong offset!");
static_assert(offsetof(ABP_PVP_Center_Prop_C, Card2Point) == 0x000350, "Member 'ABP_PVP_Center_Prop_C::Card2Point' has a wrong offset!");
static_assert(offsetof(ABP_PVP_Center_Prop_C, ScoreBoard) == 0x000358, "Member 'ABP_PVP_Center_Prop_C::ScoreBoard' has a wrong offset!");
static_assert(offsetof(ABP_PVP_Center_Prop_C, ScoreBoardPoint) == 0x000360, "Member 'ABP_PVP_Center_Prop_C::ScoreBoardPoint' has a wrong offset!");
static_assert(offsetof(ABP_PVP_Center_Prop_C, Prop_Rotatingtarget_spring_bot) == 0x000368, "Member 'ABP_PVP_Center_Prop_C::Prop_Rotatingtarget_spring_bot' has a wrong offset!");
static_assert(offsetof(ABP_PVP_Center_Prop_C, Prop_Rotatingtarget_rotating) == 0x000370, "Member 'ABP_PVP_Center_Prop_C::Prop_Rotatingtarget_rotating' has a wrong offset!");
static_assert(offsetof(ABP_PVP_Center_Prop_C, Prop_Rotatingtarget_spring_top) == 0x000378, "Member 'ABP_PVP_Center_Prop_C::Prop_Rotatingtarget_spring_top' has a wrong offset!");
static_assert(offsetof(ABP_PVP_Center_Prop_C, Prop_Rotatingtarget_SK) == 0x000380, "Member 'ABP_PVP_Center_Prop_C::Prop_Rotatingtarget_SK' has a wrong offset!");
static_assert(offsetof(ABP_PVP_Center_Prop_C, RotatingMovement) == 0x000388, "Member 'ABP_PVP_Center_Prop_C::RotatingMovement' has a wrong offset!");
static_assert(offsetof(ABP_PVP_Center_Prop_C, PhysicsBoard) == 0x000390, "Member 'ABP_PVP_Center_Prop_C::PhysicsBoard' has a wrong offset!");
static_assert(offsetof(ABP_PVP_Center_Prop_C, Root) == 0x000398, "Member 'ABP_PVP_Center_Prop_C::Root' has a wrong offset!");
static_assert(offsetof(ABP_PVP_Center_Prop_C, Timeline_0_NewTrack_1_3B51933C4317F485C48F849F3293009A) == 0x0003A0, "Member 'ABP_PVP_Center_Prop_C::Timeline_0_NewTrack_1_3B51933C4317F485C48F849F3293009A' has a wrong offset!");
static_assert(offsetof(ABP_PVP_Center_Prop_C, Timeline_0_Value_3B51933C4317F485C48F849F3293009A) == 0x0003A4, "Member 'ABP_PVP_Center_Prop_C::Timeline_0_Value_3B51933C4317F485C48F849F3293009A' has a wrong offset!");
static_assert(offsetof(ABP_PVP_Center_Prop_C, Timeline_0__Direction_3B51933C4317F485C48F849F3293009A) == 0x0003A8, "Member 'ABP_PVP_Center_Prop_C::Timeline_0__Direction_3B51933C4317F485C48F849F3293009A' has a wrong offset!");
static_assert(offsetof(ABP_PVP_Center_Prop_C, Timeline_0) == 0x0003B0, "Member 'ABP_PVP_Center_Prop_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(ABP_PVP_Center_Prop_C, ReplicateTransform) == 0x0003C0, "Member 'ABP_PVP_Center_Prop_C::ReplicateTransform' has a wrong offset!");
static_assert(offsetof(ABP_PVP_Center_Prop_C, RotateSpeed) == 0x0003F0, "Member 'ABP_PVP_Center_Prop_C::RotateSpeed' has a wrong offset!");
static_assert(offsetof(ABP_PVP_Center_Prop_C, TeamA_Count) == 0x0003F4, "Member 'ABP_PVP_Center_Prop_C::TeamA_Count' has a wrong offset!");
static_assert(offsetof(ABP_PVP_Center_Prop_C, TeamB_Count) == 0x0003F8, "Member 'ABP_PVP_Center_Prop_C::TeamB_Count' has a wrong offset!");
static_assert(offsetof(ABP_PVP_Center_Prop_C, LastHitter) == 0x000400, "Member 'ABP_PVP_Center_Prop_C::LastHitter' has a wrong offset!");
static_assert(offsetof(ABP_PVP_Center_Prop_C, DecreaseSpeed) == 0x000408, "Member 'ABP_PVP_Center_Prop_C::DecreaseSpeed' has a wrong offset!");
static_assert(offsetof(ABP_PVP_Center_Prop_C, Time) == 0x00040C, "Member 'ABP_PVP_Center_Prop_C::Time' has a wrong offset!");
static_assert(offsetof(ABP_PVP_Center_Prop_C, TimeLeft) == 0x000410, "Member 'ABP_PVP_Center_Prop_C::TimeLeft' has a wrong offset!");
static_assert(offsetof(ABP_PVP_Center_Prop_C, AddTime) == 0x000414, "Member 'ABP_PVP_Center_Prop_C::AddTime' has a wrong offset!");
static_assert(offsetof(ABP_PVP_Center_Prop_C, InitTime) == 0x000418, "Member 'ABP_PVP_Center_Prop_C::InitTime' has a wrong offset!");
static_assert(offsetof(ABP_PVP_Center_Prop_C, AnimBP) == 0x000420, "Member 'ABP_PVP_Center_Prop_C::AnimBP' has a wrong offset!");
static_assert(offsetof(ABP_PVP_Center_Prop_C, Recoil) == 0x000428, "Member 'ABP_PVP_Center_Prop_C::Recoil' has a wrong offset!");
static_assert(offsetof(ABP_PVP_Center_Prop_C, ScoreLineMI) == 0x000430, "Member 'ABP_PVP_Center_Prop_C::ScoreLineMI' has a wrong offset!");
static_assert(offsetof(ABP_PVP_Center_Prop_C, OnShowUpEnd) == 0x000438, "Member 'ABP_PVP_Center_Prop_C::OnShowUpEnd' has a wrong offset!");
static_assert(offsetof(ABP_PVP_Center_Prop_C, ScoreBoardMI) == 0x000448, "Member 'ABP_PVP_Center_Prop_C::ScoreBoardMI' has a wrong offset!");
static_assert(offsetof(ABP_PVP_Center_Prop_C, Slider) == 0x000450, "Member 'ABP_PVP_Center_Prop_C::Slider' has a wrong offset!");
static_assert(offsetof(ABP_PVP_Center_Prop_C, CenterColor) == 0x000458, "Member 'ABP_PVP_Center_Prop_C::CenterColor' has a wrong offset!");
static_assert(offsetof(ABP_PVP_Center_Prop_C, CenterInitColor) == 0x000468, "Member 'ABP_PVP_Center_Prop_C::CenterInitColor' has a wrong offset!");

}

