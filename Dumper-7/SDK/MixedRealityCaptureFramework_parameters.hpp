#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MixedRealityCaptureFramework

#include "Basic.hpp"

#include "MixedRealityCaptureFramework_structs.hpp"
#include "OpenCVLensDistortion_structs.hpp"


namespace SDK::Params
{

// Function MixedRealityCaptureFramework.MrcFocalDriver.GetHorizontalFieldOfView
// 0x0004 (0x0004 - 0x0000)
struct MrcFocalDriver_GetHorizontalFieldOfView final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MrcFocalDriver_GetHorizontalFieldOfView) == 0x000004, "Wrong alignment on MrcFocalDriver_GetHorizontalFieldOfView");
static_assert(sizeof(MrcFocalDriver_GetHorizontalFieldOfView) == 0x000004, "Wrong size on MrcFocalDriver_GetHorizontalFieldOfView");
static_assert(offsetof(MrcFocalDriver_GetHorizontalFieldOfView, ReturnValue) == 0x000000, "Member 'MrcFocalDriver_GetHorizontalFieldOfView::ReturnValue' has a wrong offset!");

// Function MixedRealityCaptureFramework.MrcGarbageMatteCaptureComponent.ApplyCalibrationData
// 0x0008 (0x0008 - 0x0000)
struct MrcGarbageMatteCaptureComponent_ApplyCalibrationData final
{
public:
	const class UMrcCalibrationData*              ConfigData;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MrcGarbageMatteCaptureComponent_ApplyCalibrationData) == 0x000008, "Wrong alignment on MrcGarbageMatteCaptureComponent_ApplyCalibrationData");
static_assert(sizeof(MrcGarbageMatteCaptureComponent_ApplyCalibrationData) == 0x000008, "Wrong size on MrcGarbageMatteCaptureComponent_ApplyCalibrationData");
static_assert(offsetof(MrcGarbageMatteCaptureComponent_ApplyCalibrationData, ConfigData) == 0x000000, "Member 'MrcGarbageMatteCaptureComponent_ApplyCalibrationData::ConfigData' has a wrong offset!");

// Function MixedRealityCaptureFramework.MrcGarbageMatteCaptureComponent.GetGarbageMatteData
// 0x0010 (0x0010 - 0x0000)
struct MrcGarbageMatteCaptureComponent_GetGarbageMatteData final
{
public:
	TArray<struct FMrcGarbageMatteSaveData>       GarbageMatteDataOut;                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MrcGarbageMatteCaptureComponent_GetGarbageMatteData) == 0x000008, "Wrong alignment on MrcGarbageMatteCaptureComponent_GetGarbageMatteData");
static_assert(sizeof(MrcGarbageMatteCaptureComponent_GetGarbageMatteData) == 0x000010, "Wrong size on MrcGarbageMatteCaptureComponent_GetGarbageMatteData");
static_assert(offsetof(MrcGarbageMatteCaptureComponent_GetGarbageMatteData, GarbageMatteDataOut) == 0x000000, "Member 'MrcGarbageMatteCaptureComponent_GetGarbageMatteData::GarbageMatteDataOut' has a wrong offset!");

// Function MixedRealityCaptureFramework.MrcGarbageMatteCaptureComponent.SetFocalDriver
// 0x0010 (0x0010 - 0x0000)
struct MrcGarbageMatteCaptureComponent_SetFocalDriver final
{
public:
	TScriptInterface<class IMrcFocalDriver>       InFocalDriver;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(MrcGarbageMatteCaptureComponent_SetFocalDriver) == 0x000008, "Wrong alignment on MrcGarbageMatteCaptureComponent_SetFocalDriver");
static_assert(sizeof(MrcGarbageMatteCaptureComponent_SetFocalDriver) == 0x000010, "Wrong size on MrcGarbageMatteCaptureComponent_SetFocalDriver");
static_assert(offsetof(MrcGarbageMatteCaptureComponent_SetFocalDriver, InFocalDriver) == 0x000000, "Member 'MrcGarbageMatteCaptureComponent_SetFocalDriver::InFocalDriver' has a wrong offset!");

// Function MixedRealityCaptureFramework.MrcGarbageMatteCaptureComponent.SetGarbageMatteActor
// 0x0008 (0x0008 - 0x0000)
struct MrcGarbageMatteCaptureComponent_SetGarbageMatteActor final
{
public:
	class AMrcGarbageMatteActor*                  NewActor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MrcGarbageMatteCaptureComponent_SetGarbageMatteActor) == 0x000008, "Wrong alignment on MrcGarbageMatteCaptureComponent_SetGarbageMatteActor");
static_assert(sizeof(MrcGarbageMatteCaptureComponent_SetGarbageMatteActor) == 0x000008, "Wrong size on MrcGarbageMatteCaptureComponent_SetGarbageMatteActor");
static_assert(offsetof(MrcGarbageMatteCaptureComponent_SetGarbageMatteActor, NewActor) == 0x000000, "Member 'MrcGarbageMatteCaptureComponent_SetGarbageMatteActor::NewActor' has a wrong offset!");

// Function MixedRealityCaptureFramework.MrcGarbageMatteCaptureComponent.SetTrackingOrigin
// 0x0008 (0x0008 - 0x0000)
struct MrcGarbageMatteCaptureComponent_SetTrackingOrigin final
{
public:
	class USceneComponent*                        TrackingOrigin;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MrcGarbageMatteCaptureComponent_SetTrackingOrigin) == 0x000008, "Wrong alignment on MrcGarbageMatteCaptureComponent_SetTrackingOrigin");
static_assert(sizeof(MrcGarbageMatteCaptureComponent_SetTrackingOrigin) == 0x000008, "Wrong size on MrcGarbageMatteCaptureComponent_SetTrackingOrigin");
static_assert(offsetof(MrcGarbageMatteCaptureComponent_SetTrackingOrigin, TrackingOrigin) == 0x000000, "Member 'MrcGarbageMatteCaptureComponent_SetTrackingOrigin::TrackingOrigin' has a wrong offset!");

// Function MixedRealityCaptureFramework.MrcGarbageMatteCaptureComponent.SpawnNewGarbageMatteActor
// 0x0010 (0x0010 - 0x0000)
struct MrcGarbageMatteCaptureComponent_SpawnNewGarbageMatteActor final
{
public:
	class USceneComponent*                        TrackingOrigin;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMrcGarbageMatteActor*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MrcGarbageMatteCaptureComponent_SpawnNewGarbageMatteActor) == 0x000008, "Wrong alignment on MrcGarbageMatteCaptureComponent_SpawnNewGarbageMatteActor");
static_assert(sizeof(MrcGarbageMatteCaptureComponent_SpawnNewGarbageMatteActor) == 0x000010, "Wrong size on MrcGarbageMatteCaptureComponent_SpawnNewGarbageMatteActor");
static_assert(offsetof(MrcGarbageMatteCaptureComponent_SpawnNewGarbageMatteActor, TrackingOrigin) == 0x000000, "Member 'MrcGarbageMatteCaptureComponent_SpawnNewGarbageMatteActor::TrackingOrigin' has a wrong offset!");
static_assert(offsetof(MrcGarbageMatteCaptureComponent_SpawnNewGarbageMatteActor, ReturnValue) == 0x000008, "Member 'MrcGarbageMatteCaptureComponent_SpawnNewGarbageMatteActor::ReturnValue' has a wrong offset!");

// Function MixedRealityCaptureFramework.MixedRealityCaptureActor.GetCaptureTexture
// 0x0008 (0x0008 - 0x0000)
struct MixedRealityCaptureActor_GetCaptureTexture final
{
public:
	class UTexture*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MixedRealityCaptureActor_GetCaptureTexture) == 0x000008, "Wrong alignment on MixedRealityCaptureActor_GetCaptureTexture");
static_assert(sizeof(MixedRealityCaptureActor_GetCaptureTexture) == 0x000008, "Wrong size on MixedRealityCaptureActor_GetCaptureTexture");
static_assert(offsetof(MixedRealityCaptureActor_GetCaptureTexture, ReturnValue) == 0x000000, "Member 'MixedRealityCaptureActor_GetCaptureTexture::ReturnValue' has a wrong offset!");

// Function MixedRealityCaptureFramework.MixedRealityCaptureActor.IsBroadcasting
// 0x0001 (0x0001 - 0x0000)
struct MixedRealityCaptureActor_IsBroadcasting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MixedRealityCaptureActor_IsBroadcasting) == 0x000001, "Wrong alignment on MixedRealityCaptureActor_IsBroadcasting");
static_assert(sizeof(MixedRealityCaptureActor_IsBroadcasting) == 0x000001, "Wrong size on MixedRealityCaptureActor_IsBroadcasting");
static_assert(offsetof(MixedRealityCaptureActor_IsBroadcasting, ReturnValue) == 0x000000, "Member 'MixedRealityCaptureActor_IsBroadcasting::ReturnValue' has a wrong offset!");

// Function MixedRealityCaptureFramework.MixedRealityCaptureActor.OnTargetDestroyed
// 0x0008 (0x0008 - 0x0000)
struct MixedRealityCaptureActor_OnTargetDestroyed final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MixedRealityCaptureActor_OnTargetDestroyed) == 0x000008, "Wrong alignment on MixedRealityCaptureActor_OnTargetDestroyed");
static_assert(sizeof(MixedRealityCaptureActor_OnTargetDestroyed) == 0x000008, "Wrong size on MixedRealityCaptureActor_OnTargetDestroyed");
static_assert(offsetof(MixedRealityCaptureActor_OnTargetDestroyed, DestroyedActor) == 0x000000, "Member 'MixedRealityCaptureActor_OnTargetDestroyed::DestroyedActor' has a wrong offset!");

// Function MixedRealityCaptureFramework.MixedRealityCaptureActor.SetAutoBroadcast
// 0x0001 (0x0001 - 0x0000)
struct MixedRealityCaptureActor_SetAutoBroadcast final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MixedRealityCaptureActor_SetAutoBroadcast) == 0x000001, "Wrong alignment on MixedRealityCaptureActor_SetAutoBroadcast");
static_assert(sizeof(MixedRealityCaptureActor_SetAutoBroadcast) == 0x000001, "Wrong size on MixedRealityCaptureActor_SetAutoBroadcast");
static_assert(offsetof(MixedRealityCaptureActor_SetAutoBroadcast, bNewValue) == 0x000000, "Member 'MixedRealityCaptureActor_SetAutoBroadcast::bNewValue' has a wrong offset!");

// Function MixedRealityCaptureFramework.MixedRealityCaptureComponent.ApplyCalibrationData
// 0x0008 (0x0008 - 0x0000)
struct MixedRealityCaptureComponent_ApplyCalibrationData final
{
public:
	class UMrcCalibrationData*                    ConfigData;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MixedRealityCaptureComponent_ApplyCalibrationData) == 0x000008, "Wrong alignment on MixedRealityCaptureComponent_ApplyCalibrationData");
static_assert(sizeof(MixedRealityCaptureComponent_ApplyCalibrationData) == 0x000008, "Wrong size on MixedRealityCaptureComponent_ApplyCalibrationData");
static_assert(offsetof(MixedRealityCaptureComponent_ApplyCalibrationData, ConfigData) == 0x000000, "Member 'MixedRealityCaptureComponent_ApplyCalibrationData::ConfigData' has a wrong offset!");

// Function MixedRealityCaptureFramework.MixedRealityCaptureComponent.LoadConfiguration
// 0x0018 (0x0018 - 0x0000)
struct MixedRealityCaptureComponent_LoadConfiguration final
{
public:
	class FString                                 SlotName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserIndex;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MixedRealityCaptureComponent_LoadConfiguration) == 0x000008, "Wrong alignment on MixedRealityCaptureComponent_LoadConfiguration");
static_assert(sizeof(MixedRealityCaptureComponent_LoadConfiguration) == 0x000018, "Wrong size on MixedRealityCaptureComponent_LoadConfiguration");
static_assert(offsetof(MixedRealityCaptureComponent_LoadConfiguration, SlotName) == 0x000000, "Member 'MixedRealityCaptureComponent_LoadConfiguration::SlotName' has a wrong offset!");
static_assert(offsetof(MixedRealityCaptureComponent_LoadConfiguration, UserIndex) == 0x000010, "Member 'MixedRealityCaptureComponent_LoadConfiguration::UserIndex' has a wrong offset!");
static_assert(offsetof(MixedRealityCaptureComponent_LoadConfiguration, ReturnValue) == 0x000014, "Member 'MixedRealityCaptureComponent_LoadConfiguration::ReturnValue' has a wrong offset!");

// Function MixedRealityCaptureFramework.MixedRealityCaptureComponent.LoadDefaultConfiguration
// 0x0001 (0x0001 - 0x0000)
struct MixedRealityCaptureComponent_LoadDefaultConfiguration final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MixedRealityCaptureComponent_LoadDefaultConfiguration) == 0x000001, "Wrong alignment on MixedRealityCaptureComponent_LoadDefaultConfiguration");
static_assert(sizeof(MixedRealityCaptureComponent_LoadDefaultConfiguration) == 0x000001, "Wrong size on MixedRealityCaptureComponent_LoadDefaultConfiguration");
static_assert(offsetof(MixedRealityCaptureComponent_LoadDefaultConfiguration, ReturnValue) == 0x000000, "Member 'MixedRealityCaptureComponent_LoadDefaultConfiguration::ReturnValue' has a wrong offset!");

// Function MixedRealityCaptureFramework.MixedRealityCaptureComponent.OnVideoFeedOpened
// 0x0018 (0x0018 - 0x0000)
struct MixedRealityCaptureComponent_OnVideoFeedOpened final
{
public:
	struct FMrcVideoCaptureFeedIndex              FeedRef;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MixedRealityCaptureComponent_OnVideoFeedOpened) == 0x000008, "Wrong alignment on MixedRealityCaptureComponent_OnVideoFeedOpened");
static_assert(sizeof(MixedRealityCaptureComponent_OnVideoFeedOpened) == 0x000018, "Wrong size on MixedRealityCaptureComponent_OnVideoFeedOpened");
static_assert(offsetof(MixedRealityCaptureComponent_OnVideoFeedOpened, FeedRef) == 0x000000, "Member 'MixedRealityCaptureComponent_OnVideoFeedOpened::FeedRef' has a wrong offset!");

// Function MixedRealityCaptureFramework.MixedRealityCaptureComponent.SaveAsDefaultConfiguration_K2
// 0x0001 (0x0001 - 0x0000)
struct MixedRealityCaptureComponent_SaveAsDefaultConfiguration_K2 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MixedRealityCaptureComponent_SaveAsDefaultConfiguration_K2) == 0x000001, "Wrong alignment on MixedRealityCaptureComponent_SaveAsDefaultConfiguration_K2");
static_assert(sizeof(MixedRealityCaptureComponent_SaveAsDefaultConfiguration_K2) == 0x000001, "Wrong size on MixedRealityCaptureComponent_SaveAsDefaultConfiguration_K2");
static_assert(offsetof(MixedRealityCaptureComponent_SaveAsDefaultConfiguration_K2, ReturnValue) == 0x000000, "Member 'MixedRealityCaptureComponent_SaveAsDefaultConfiguration_K2::ReturnValue' has a wrong offset!");

// Function MixedRealityCaptureFramework.MixedRealityCaptureComponent.SaveConfiguration_K2
// 0x0018 (0x0018 - 0x0000)
struct MixedRealityCaptureComponent_SaveConfiguration_K2 final
{
public:
	class FString                                 SlotName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserIndex;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MixedRealityCaptureComponent_SaveConfiguration_K2) == 0x000008, "Wrong alignment on MixedRealityCaptureComponent_SaveConfiguration_K2");
static_assert(sizeof(MixedRealityCaptureComponent_SaveConfiguration_K2) == 0x000018, "Wrong size on MixedRealityCaptureComponent_SaveConfiguration_K2");
static_assert(offsetof(MixedRealityCaptureComponent_SaveConfiguration_K2, SlotName) == 0x000000, "Member 'MixedRealityCaptureComponent_SaveConfiguration_K2::SlotName' has a wrong offset!");
static_assert(offsetof(MixedRealityCaptureComponent_SaveConfiguration_K2, UserIndex) == 0x000010, "Member 'MixedRealityCaptureComponent_SaveConfiguration_K2::UserIndex' has a wrong offset!");
static_assert(offsetof(MixedRealityCaptureComponent_SaveConfiguration_K2, ReturnValue) == 0x000014, "Member 'MixedRealityCaptureComponent_SaveConfiguration_K2::ReturnValue' has a wrong offset!");

// Function MixedRealityCaptureFramework.MixedRealityCaptureComponent.SetCaptureDevice
// 0x0018 (0x0018 - 0x0000)
struct MixedRealityCaptureComponent_SetCaptureDevice final
{
public:
	struct FMrcVideoCaptureFeedIndex              FeedRef;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MixedRealityCaptureComponent_SetCaptureDevice) == 0x000008, "Wrong alignment on MixedRealityCaptureComponent_SetCaptureDevice");
static_assert(sizeof(MixedRealityCaptureComponent_SetCaptureDevice) == 0x000018, "Wrong size on MixedRealityCaptureComponent_SetCaptureDevice");
static_assert(offsetof(MixedRealityCaptureComponent_SetCaptureDevice, FeedRef) == 0x000000, "Member 'MixedRealityCaptureComponent_SetCaptureDevice::FeedRef' has a wrong offset!");

// Function MixedRealityCaptureFramework.MixedRealityCaptureComponent.SetDeviceAttachment
// 0x0008 (0x0008 - 0x0000)
struct MixedRealityCaptureComponent_SetDeviceAttachment final
{
public:
	class FName                                   SourceName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MixedRealityCaptureComponent_SetDeviceAttachment) == 0x000004, "Wrong alignment on MixedRealityCaptureComponent_SetDeviceAttachment");
static_assert(sizeof(MixedRealityCaptureComponent_SetDeviceAttachment) == 0x000008, "Wrong size on MixedRealityCaptureComponent_SetDeviceAttachment");
static_assert(offsetof(MixedRealityCaptureComponent_SetDeviceAttachment, SourceName) == 0x000000, "Member 'MixedRealityCaptureComponent_SetDeviceAttachment::SourceName' has a wrong offset!");

// Function MixedRealityCaptureFramework.MixedRealityCaptureComponent.SetEnableProjectionDepthTracking
// 0x0001 (0x0001 - 0x0000)
struct MixedRealityCaptureComponent_SetEnableProjectionDepthTracking final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MixedRealityCaptureComponent_SetEnableProjectionDepthTracking) == 0x000001, "Wrong alignment on MixedRealityCaptureComponent_SetEnableProjectionDepthTracking");
static_assert(sizeof(MixedRealityCaptureComponent_SetEnableProjectionDepthTracking) == 0x000001, "Wrong size on MixedRealityCaptureComponent_SetEnableProjectionDepthTracking");
static_assert(offsetof(MixedRealityCaptureComponent_SetEnableProjectionDepthTracking, bEnable) == 0x000000, "Member 'MixedRealityCaptureComponent_SetEnableProjectionDepthTracking::bEnable' has a wrong offset!");

// Function MixedRealityCaptureFramework.MixedRealityCaptureComponent.SetGarbageMatteActor
// 0x0010 (0x0010 - 0x0000)
struct MixedRealityCaptureComponent_SetGarbageMatteActor final
{
public:
	class AMrcGarbageMatteActor*                  Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MixedRealityCaptureComponent_SetGarbageMatteActor) == 0x000008, "Wrong alignment on MixedRealityCaptureComponent_SetGarbageMatteActor");
static_assert(sizeof(MixedRealityCaptureComponent_SetGarbageMatteActor) == 0x000010, "Wrong size on MixedRealityCaptureComponent_SetGarbageMatteActor");
static_assert(offsetof(MixedRealityCaptureComponent_SetGarbageMatteActor, Actor) == 0x000000, "Member 'MixedRealityCaptureComponent_SetGarbageMatteActor::Actor' has a wrong offset!");
static_assert(offsetof(MixedRealityCaptureComponent_SetGarbageMatteActor, ReturnValue) == 0x000008, "Member 'MixedRealityCaptureComponent_SetGarbageMatteActor::ReturnValue' has a wrong offset!");

// Function MixedRealityCaptureFramework.MixedRealityCaptureComponent.SetLensDistortionParameters
// 0x0034 (0x0034 - 0x0000)
struct MixedRealityCaptureComponent_SetLensDistortionParameters final
{
public:
	struct FOpenCVLensDistortionParameters        ModelRef;                                          // 0x0000(0x0034)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MixedRealityCaptureComponent_SetLensDistortionParameters) == 0x000004, "Wrong alignment on MixedRealityCaptureComponent_SetLensDistortionParameters");
static_assert(sizeof(MixedRealityCaptureComponent_SetLensDistortionParameters) == 0x000034, "Wrong size on MixedRealityCaptureComponent_SetLensDistortionParameters");
static_assert(offsetof(MixedRealityCaptureComponent_SetLensDistortionParameters, ModelRef) == 0x000000, "Member 'MixedRealityCaptureComponent_SetLensDistortionParameters::ModelRef' has a wrong offset!");

// Function MixedRealityCaptureFramework.MixedRealityCaptureComponent.SetProjectionDepthOffset
// 0x0004 (0x0004 - 0x0000)
struct MixedRealityCaptureComponent_SetProjectionDepthOffset final
{
public:
	float                                         DepthOffset;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MixedRealityCaptureComponent_SetProjectionDepthOffset) == 0x000004, "Wrong alignment on MixedRealityCaptureComponent_SetProjectionDepthOffset");
static_assert(sizeof(MixedRealityCaptureComponent_SetProjectionDepthOffset) == 0x000004, "Wrong size on MixedRealityCaptureComponent_SetProjectionDepthOffset");
static_assert(offsetof(MixedRealityCaptureComponent_SetProjectionDepthOffset, DepthOffset) == 0x000000, "Member 'MixedRealityCaptureComponent_SetProjectionDepthOffset::DepthOffset' has a wrong offset!");

// Function MixedRealityCaptureFramework.MixedRealityCaptureComponent.SetTrackingDelay
// 0x0004 (0x0004 - 0x0000)
struct MixedRealityCaptureComponent_SetTrackingDelay final
{
public:
	int32                                         DelayMS;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MixedRealityCaptureComponent_SetTrackingDelay) == 0x000004, "Wrong alignment on MixedRealityCaptureComponent_SetTrackingDelay");
static_assert(sizeof(MixedRealityCaptureComponent_SetTrackingDelay) == 0x000004, "Wrong size on MixedRealityCaptureComponent_SetTrackingDelay");
static_assert(offsetof(MixedRealityCaptureComponent_SetTrackingDelay, DelayMS) == 0x000000, "Member 'MixedRealityCaptureComponent_SetTrackingDelay::DelayMS' has a wrong offset!");

// Function MixedRealityCaptureFramework.MixedRealityCaptureComponent.SetVidProcessingParams
// 0x00A0 (0x00A0 - 0x0000)
struct MixedRealityCaptureComponent_SetVidProcessingParams final
{
public:
	struct FMrcVideoProcessingParams              NewVidProcessingParams;                            // 0x0000(0x00A0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MixedRealityCaptureComponent_SetVidProcessingParams) == 0x000008, "Wrong alignment on MixedRealityCaptureComponent_SetVidProcessingParams");
static_assert(sizeof(MixedRealityCaptureComponent_SetVidProcessingParams) == 0x0000A0, "Wrong size on MixedRealityCaptureComponent_SetVidProcessingParams");
static_assert(offsetof(MixedRealityCaptureComponent_SetVidProcessingParams, NewVidProcessingParams) == 0x000000, "Member 'MixedRealityCaptureComponent_SetVidProcessingParams::NewVidProcessingParams' has a wrong offset!");

// Function MixedRealityCaptureFramework.MixedRealityCaptureComponent.SetVidProjectionMat
// 0x0008 (0x0008 - 0x0000)
struct MixedRealityCaptureComponent_SetVidProjectionMat final
{
public:
	class UMaterialInterface*                     NewMaterial;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MixedRealityCaptureComponent_SetVidProjectionMat) == 0x000008, "Wrong alignment on MixedRealityCaptureComponent_SetVidProjectionMat");
static_assert(sizeof(MixedRealityCaptureComponent_SetVidProjectionMat) == 0x000008, "Wrong size on MixedRealityCaptureComponent_SetVidProjectionMat");
static_assert(offsetof(MixedRealityCaptureComponent_SetVidProjectionMat, NewMaterial) == 0x000000, "Member 'MixedRealityCaptureComponent_SetVidProjectionMat::NewMaterial' has a wrong offset!");

// Function MixedRealityCaptureFramework.MixedRealityCaptureComponent.ConstructCalibrationData
// 0x0008 (0x0008 - 0x0000)
struct MixedRealityCaptureComponent_ConstructCalibrationData final
{
public:
	class UMrcCalibrationData*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MixedRealityCaptureComponent_ConstructCalibrationData) == 0x000008, "Wrong alignment on MixedRealityCaptureComponent_ConstructCalibrationData");
static_assert(sizeof(MixedRealityCaptureComponent_ConstructCalibrationData) == 0x000008, "Wrong size on MixedRealityCaptureComponent_ConstructCalibrationData");
static_assert(offsetof(MixedRealityCaptureComponent_ConstructCalibrationData, ReturnValue) == 0x000000, "Member 'MixedRealityCaptureComponent_ConstructCalibrationData::ReturnValue' has a wrong offset!");

// Function MixedRealityCaptureFramework.MixedRealityCaptureComponent.FillOutCalibrationData
// 0x0008 (0x0008 - 0x0000)
struct MixedRealityCaptureComponent_FillOutCalibrationData final
{
public:
	class UMrcCalibrationData*                    Dst;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MixedRealityCaptureComponent_FillOutCalibrationData) == 0x000008, "Wrong alignment on MixedRealityCaptureComponent_FillOutCalibrationData");
static_assert(sizeof(MixedRealityCaptureComponent_FillOutCalibrationData) == 0x000008, "Wrong size on MixedRealityCaptureComponent_FillOutCalibrationData");
static_assert(offsetof(MixedRealityCaptureComponent_FillOutCalibrationData, Dst) == 0x000000, "Member 'MixedRealityCaptureComponent_FillOutCalibrationData::Dst' has a wrong offset!");

// Function MixedRealityCaptureFramework.MixedRealityCaptureComponent.GetProjectionActor_K2
// 0x0008 (0x0008 - 0x0000)
struct MixedRealityCaptureComponent_GetProjectionActor_K2 final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MixedRealityCaptureComponent_GetProjectionActor_K2) == 0x000008, "Wrong alignment on MixedRealityCaptureComponent_GetProjectionActor_K2");
static_assert(sizeof(MixedRealityCaptureComponent_GetProjectionActor_K2) == 0x000008, "Wrong size on MixedRealityCaptureComponent_GetProjectionActor_K2");
static_assert(offsetof(MixedRealityCaptureComponent_GetProjectionActor_K2, ReturnValue) == 0x000000, "Member 'MixedRealityCaptureComponent_GetProjectionActor_K2::ReturnValue' has a wrong offset!");

// Function MixedRealityCaptureFramework.MixedRealityCaptureComponent.GetTrackingDelay
// 0x0004 (0x0004 - 0x0000)
struct MixedRealityCaptureComponent_GetTrackingDelay final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MixedRealityCaptureComponent_GetTrackingDelay) == 0x000004, "Wrong alignment on MixedRealityCaptureComponent_GetTrackingDelay");
static_assert(sizeof(MixedRealityCaptureComponent_GetTrackingDelay) == 0x000004, "Wrong size on MixedRealityCaptureComponent_GetTrackingDelay");
static_assert(offsetof(MixedRealityCaptureComponent_GetTrackingDelay, ReturnValue) == 0x000000, "Member 'MixedRealityCaptureComponent_GetTrackingDelay::ReturnValue' has a wrong offset!");

// Function MixedRealityCaptureFramework.MixedRealityCaptureComponent.IsTracked
// 0x0001 (0x0001 - 0x0000)
struct MixedRealityCaptureComponent_IsTracked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MixedRealityCaptureComponent_IsTracked) == 0x000001, "Wrong alignment on MixedRealityCaptureComponent_IsTracked");
static_assert(sizeof(MixedRealityCaptureComponent_IsTracked) == 0x000001, "Wrong size on MixedRealityCaptureComponent_IsTracked");
static_assert(offsetof(MixedRealityCaptureComponent_IsTracked, ReturnValue) == 0x000000, "Member 'MixedRealityCaptureComponent_IsTracked::ReturnValue' has a wrong offset!");

// Function MixedRealityCaptureFramework.MrcGarbageMatteActor.AddNewGabageMatte
// 0x0040 (0x0040 - 0x0000)
struct MrcGarbageMatteActor_AddNewGabageMatte final
{
public:
	struct FMrcGarbageMatteSaveData               GarbageMatteData;                                  // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    ReturnValue;                                       // 0x0030(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MrcGarbageMatteActor_AddNewGabageMatte) == 0x000010, "Wrong alignment on MrcGarbageMatteActor_AddNewGabageMatte");
static_assert(sizeof(MrcGarbageMatteActor_AddNewGabageMatte) == 0x000040, "Wrong size on MrcGarbageMatteActor_AddNewGabageMatte");
static_assert(offsetof(MrcGarbageMatteActor_AddNewGabageMatte, GarbageMatteData) == 0x000000, "Member 'MrcGarbageMatteActor_AddNewGabageMatte::GarbageMatteData' has a wrong offset!");
static_assert(offsetof(MrcGarbageMatteActor_AddNewGabageMatte, ReturnValue) == 0x000030, "Member 'MrcGarbageMatteActor_AddNewGabageMatte::ReturnValue' has a wrong offset!");

// Function MixedRealityCaptureFramework.MrcGarbageMatteActor.ApplyCalibrationData
// 0x0010 (0x0010 - 0x0000)
struct MrcGarbageMatteActor_ApplyCalibrationData final
{
public:
	TArray<struct FMrcGarbageMatteSaveData>       GarbageMatteData;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MrcGarbageMatteActor_ApplyCalibrationData) == 0x000008, "Wrong alignment on MrcGarbageMatteActor_ApplyCalibrationData");
static_assert(sizeof(MrcGarbageMatteActor_ApplyCalibrationData) == 0x000010, "Wrong size on MrcGarbageMatteActor_ApplyCalibrationData");
static_assert(offsetof(MrcGarbageMatteActor_ApplyCalibrationData, GarbageMatteData) == 0x000000, "Member 'MrcGarbageMatteActor_ApplyCalibrationData::GarbageMatteData' has a wrong offset!");

// Function MixedRealityCaptureFramework.MrcGarbageMatteActor.CreateGarbageMatte
// 0x0040 (0x0040 - 0x0000)
struct MrcGarbageMatteActor_CreateGarbageMatte final
{
public:
	struct FMrcGarbageMatteSaveData               GarbageMatteData;                                  // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    ReturnValue;                                       // 0x0030(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MrcGarbageMatteActor_CreateGarbageMatte) == 0x000010, "Wrong alignment on MrcGarbageMatteActor_CreateGarbageMatte");
static_assert(sizeof(MrcGarbageMatteActor_CreateGarbageMatte) == 0x000040, "Wrong size on MrcGarbageMatteActor_CreateGarbageMatte");
static_assert(offsetof(MrcGarbageMatteActor_CreateGarbageMatte, GarbageMatteData) == 0x000000, "Member 'MrcGarbageMatteActor_CreateGarbageMatte::GarbageMatteData' has a wrong offset!");
static_assert(offsetof(MrcGarbageMatteActor_CreateGarbageMatte, ReturnValue) == 0x000030, "Member 'MrcGarbageMatteActor_CreateGarbageMatte::ReturnValue' has a wrong offset!");

// Function MixedRealityCaptureFramework.MrcGarbageMatteActor.GetGarbageMatteData
// 0x0010 (0x0010 - 0x0000)
struct MrcGarbageMatteActor_GetGarbageMatteData final
{
public:
	TArray<struct FMrcGarbageMatteSaveData>       GarbageMatteDataOut;                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MrcGarbageMatteActor_GetGarbageMatteData) == 0x000008, "Wrong alignment on MrcGarbageMatteActor_GetGarbageMatteData");
static_assert(sizeof(MrcGarbageMatteActor_GetGarbageMatteData) == 0x000010, "Wrong size on MrcGarbageMatteActor_GetGarbageMatteData");
static_assert(offsetof(MrcGarbageMatteActor_GetGarbageMatteData, GarbageMatteDataOut) == 0x000000, "Member 'MrcGarbageMatteActor_GetGarbageMatteData::GarbageMatteDataOut' has a wrong offset!");

// Function MixedRealityCaptureFramework.MrcUtilLibrary.GetMixedRealityCaptureTexture
// 0x0008 (0x0008 - 0x0000)
struct MrcUtilLibrary_GetMixedRealityCaptureTexture final
{
public:
	class UTexture*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MrcUtilLibrary_GetMixedRealityCaptureTexture) == 0x000008, "Wrong alignment on MrcUtilLibrary_GetMixedRealityCaptureTexture");
static_assert(sizeof(MrcUtilLibrary_GetMixedRealityCaptureTexture) == 0x000008, "Wrong size on MrcUtilLibrary_GetMixedRealityCaptureTexture");
static_assert(offsetof(MrcUtilLibrary_GetMixedRealityCaptureTexture, ReturnValue) == 0x000000, "Member 'MrcUtilLibrary_GetMixedRealityCaptureTexture::ReturnValue' has a wrong offset!");

// Function MixedRealityCaptureFramework.MrcUtilLibrary.IsMixedRealityCaptureBroadcasting
// 0x0001 (0x0001 - 0x0000)
struct MrcUtilLibrary_IsMixedRealityCaptureBroadcasting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MrcUtilLibrary_IsMixedRealityCaptureBroadcasting) == 0x000001, "Wrong alignment on MrcUtilLibrary_IsMixedRealityCaptureBroadcasting");
static_assert(sizeof(MrcUtilLibrary_IsMixedRealityCaptureBroadcasting) == 0x000001, "Wrong size on MrcUtilLibrary_IsMixedRealityCaptureBroadcasting");
static_assert(offsetof(MrcUtilLibrary_IsMixedRealityCaptureBroadcasting, ReturnValue) == 0x000000, "Member 'MrcUtilLibrary_IsMixedRealityCaptureBroadcasting::ReturnValue' has a wrong offset!");

// Function MixedRealityCaptureFramework.MrcUtilLibrary.SetMixedRealityCaptureBroadcasting
// 0x0001 (0x0001 - 0x0000)
struct MrcUtilLibrary_SetMixedRealityCaptureBroadcasting final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MrcUtilLibrary_SetMixedRealityCaptureBroadcasting) == 0x000001, "Wrong alignment on MrcUtilLibrary_SetMixedRealityCaptureBroadcasting");
static_assert(sizeof(MrcUtilLibrary_SetMixedRealityCaptureBroadcasting) == 0x000001, "Wrong size on MrcUtilLibrary_SetMixedRealityCaptureBroadcasting");
static_assert(offsetof(MrcUtilLibrary_SetMixedRealityCaptureBroadcasting, bEnable) == 0x000000, "Member 'MrcUtilLibrary_SetMixedRealityCaptureBroadcasting::bEnable' has a wrong offset!");

// Function MixedRealityCaptureFramework.AsyncTask_OpenMrcVidCaptureFeedBase.OnVideoFeedOpened
// 0x0010 (0x0010 - 0x0000)
struct AsyncTask_OpenMrcVidCaptureFeedBase_OnVideoFeedOpened final
{
public:
	class FString                                 DeviceURL;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncTask_OpenMrcVidCaptureFeedBase_OnVideoFeedOpened) == 0x000008, "Wrong alignment on AsyncTask_OpenMrcVidCaptureFeedBase_OnVideoFeedOpened");
static_assert(sizeof(AsyncTask_OpenMrcVidCaptureFeedBase_OnVideoFeedOpened) == 0x000010, "Wrong size on AsyncTask_OpenMrcVidCaptureFeedBase_OnVideoFeedOpened");
static_assert(offsetof(AsyncTask_OpenMrcVidCaptureFeedBase_OnVideoFeedOpened, DeviceURL) == 0x000000, "Member 'AsyncTask_OpenMrcVidCaptureFeedBase_OnVideoFeedOpened::DeviceURL' has a wrong offset!");

// Function MixedRealityCaptureFramework.AsyncTask_OpenMrcVidCaptureFeedBase.OnVideoFeedOpenFailure
// 0x0010 (0x0010 - 0x0000)
struct AsyncTask_OpenMrcVidCaptureFeedBase_OnVideoFeedOpenFailure final
{
public:
	class FString                                 DeviceURL;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncTask_OpenMrcVidCaptureFeedBase_OnVideoFeedOpenFailure) == 0x000008, "Wrong alignment on AsyncTask_OpenMrcVidCaptureFeedBase_OnVideoFeedOpenFailure");
static_assert(sizeof(AsyncTask_OpenMrcVidCaptureFeedBase_OnVideoFeedOpenFailure) == 0x000010, "Wrong size on AsyncTask_OpenMrcVidCaptureFeedBase_OnVideoFeedOpenFailure");
static_assert(offsetof(AsyncTask_OpenMrcVidCaptureFeedBase_OnVideoFeedOpenFailure, DeviceURL) == 0x000000, "Member 'AsyncTask_OpenMrcVidCaptureFeedBase_OnVideoFeedOpenFailure::DeviceURL' has a wrong offset!");

}

