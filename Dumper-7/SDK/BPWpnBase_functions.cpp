#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPWpnBase

#include "Basic.hpp"

#include "BPWpnBase_classes.hpp"
#include "BPWpnBase_parameters.hpp"


namespace SDK
{

// Function BPWpnBase.BPWpnBase_C.ExecuteUbergraph_BPWpnBase
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPWpnBase_C::ExecuteUbergraph_BPWpnBase(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWpnBase_C", "ExecuteUbergraph_BPWpnBase");

	Params::BPWpnBase_C_ExecuteUbergraph_BPWpnBase Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPWpnBase.BPWpnBase_C.Evt_ReloadLeftOneBullet
// (BlueprintCallable, BlueprintEvent)

void ABPWpnBase_C::Evt_ReloadLeftOneBullet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWpnBase_C", "Evt_ReloadLeftOneBullet");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPWpnBase.BPWpnBase_C.Evt_ThrowOneBullet
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABPWpnBase_C::Evt_ThrowOneBullet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWpnBase_C", "Evt_ThrowOneBullet");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPWpnBase.BPWpnBase_C.Evt_PlayOutOfAmmoSound
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABPWpnBase_C::Evt_PlayOutOfAmmoSound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWpnBase_C", "Evt_PlayOutOfAmmoSound");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPWpnBase.BPWpnBase_C.Evt_PullTrigger
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABPWpnBase_C::Evt_PullTrigger()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWpnBase_C", "Evt_PullTrigger");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPWpnBase.BPWpnBase_C.Evt_EndInfinite
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABPWpnBase_C::Evt_EndInfinite()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWpnBase_C", "Evt_EndInfinite");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPWpnBase.BPWpnBase_C.Evt_StartInfinite
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABPWpnBase_C::Evt_StartInfinite()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWpnBase_C", "Evt_StartInfinite");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPWpnBase.BPWpnBase_C.DoInfinite
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPWpnBase_C::DoInfinite(float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWpnBase_C", "DoInfinite");

	Params::BPWpnBase_C_DoInfinite Parms{};

	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPWpnBase.BPWpnBase_C.DoDropWeapon
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABPWpnBase_C::DoDropWeapon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWpnBase_C", "DoDropWeapon");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPWpnBase.BPWpnBase_C.Evt_DropWeapon
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABPWpnBase_C::Evt_DropWeapon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWpnBase_C", "Evt_DropWeapon");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPWpnBase.BPWpnBase_C.PlayShellDropSound
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             EventName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   EmitterTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ParticleTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Velocity                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Normal                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             BoneName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPhysicalMaterial*                PhysMat                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPWpnBase_C::PlayShellDropSound(class FName EventName, float EmitterTime, int32 ParticleTime, const struct FVector& Location, const struct FVector& Velocity, const struct FVector& Direction, const struct FVector& Normal, class FName BoneName, class UPhysicalMaterial* PhysMat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWpnBase_C", "PlayShellDropSound");

	Params::BPWpnBase_C_PlayShellDropSound Parms{};

	Parms.EventName = EventName;
	Parms.EmitterTime = EmitterTime;
	Parms.ParticleTime = ParticleTime;
	Parms.Location = std::move(Location);
	Parms.Velocity = std::move(Velocity);
	Parms.Direction = std::move(Direction);
	Parms.Normal = std::move(Normal);
	Parms.BoneName = BoneName;
	Parms.PhysMat = PhysMat;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPWpnBase.BPWpnBase_C.Evt_DropShell
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABPWpnBase_C::Evt_DropShell()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWpnBase_C", "Evt_DropShell");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPWpnBase.BPWpnBase_C.Evt_SpawnClip
// (BlueprintCallable, BlueprintEvent)

void ABPWpnBase_C::Evt_SpawnClip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWpnBase_C", "Evt_SpawnClip");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPWpnBase.BPWpnBase_C.Evt_RecoilTimeLine
// (BlueprintCallable, BlueprintEvent)

void ABPWpnBase_C::Evt_RecoilTimeLine()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWpnBase_C", "Evt_RecoilTimeLine");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPWpnBase.BPWpnBase_C.Evt_ShotHaptic
// (BlueprintCallable, BlueprintEvent)

void ABPWpnBase_C::Evt_ShotHaptic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWpnBase_C", "Evt_ShotHaptic");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPWpnBase.BPWpnBase_C.Evt_StopFire
// (BlueprintCallable, BlueprintEvent)

void ABPWpnBase_C::Evt_StopFire()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWpnBase_C", "Evt_StopFire");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPWpnBase.BPWpnBase_C.Evt_ClipEmpty
// (BlueprintCallable, BlueprintEvent)

void ABPWpnBase_C::Evt_ClipEmpty()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWpnBase_C", "Evt_ClipEmpty");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPWpnBase.BPWpnBase_C.Evt_Reload
// (BlueprintCallable, BlueprintEvent)

void ABPWpnBase_C::Evt_Reload()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWpnBase_C", "Evt_Reload");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPWpnBase.BPWpnBase_C.Evt_Fire
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABPWpnBase_C::Evt_Fire()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWpnBase_C", "Evt_Fire");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPWpnBase.BPWpnBase_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPWpnBase_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWpnBase_C", "ReceiveTick");

	Params::BPWpnBase_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPWpnBase.BPWpnBase_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABPWpnBase_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWpnBase_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPWpnBase.BPWpnBase_C.OnPlaySFX
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USoundBase*                       Sound                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsDrop                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsOnlyOne                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsReplace                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABPWpnBase_C::OnPlaySFX(class USoundBase* Sound, const struct FVector& Location, bool IsDrop, bool IsOnlyOne, bool IsReplace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWpnBase_C", "OnPlaySFX");

	Params::BPWpnBase_C_OnPlaySFX Parms{};

	Parms.Sound = Sound;
	Parms.Location = std::move(Location);
	Parms.IsDrop = IsDrop;
	Parms.IsOnlyOne = IsOnlyOne;
	Parms.IsReplace = IsReplace;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPWpnBase.BPWpnBase_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABPWpnBase_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWpnBase_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPWpnBase.BPWpnBase_C.CanFire
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABPWpnBase_C::CanFire(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWpnBase_C", "CanFire");

	Params::BPWpnBase_C_CanFire Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BPWpnBase.BPWpnBase_C.Reset
// (Public, BlueprintCallable, BlueprintEvent)

void ABPWpnBase_C::Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWpnBase_C", "Reset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPWpnBase.BPWpnBase_C.ExecFire
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   DeadlyBulletNum                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   TargetPoint                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsUseOffset_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsSpecial_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsNpc_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    FromRightHand                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABPWpnBase_C::ExecFire(int32 DeadlyBulletNum, const struct FVector& TargetPoint, bool IsUseOffset_0, bool IsSpecial_0, bool IsNpc_0, bool FromRightHand)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWpnBase_C", "ExecFire");

	Params::BPWpnBase_C_ExecFire Parms{};

	Parms.DeadlyBulletNum = DeadlyBulletNum;
	Parms.TargetPoint = std::move(TargetPoint);
	Parms.IsUseOffset_0 = IsUseOffset_0;
	Parms.IsSpecial_0 = IsSpecial_0;
	Parms.IsNpc_0 = IsNpc_0;
	Parms.FromRightHand = FromRightHand;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPWpnBase.BPWpnBase_C.PlayVFX
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UParticleSystem*                  VFX                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FTransform&                Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// class UParticleSystemComponent**        ReturnVFX                                              (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPWpnBase_C::PlayVFX(class UParticleSystem* VFX, const struct FTransform& Transform, class UParticleSystemComponent** ReturnVFX)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWpnBase_C", "PlayVFX");

	Params::BPWpnBase_C_PlayVFX Parms{};

	Parms.VFX = VFX;
	Parms.Transform = std::move(Transform);

	UObject::ProcessEvent(Func, &Parms);

	if (ReturnVFX != nullptr)
		*ReturnVFX = Parms.ReturnVFX;
}


// Function BPWpnBase.BPWpnBase_C.PlaySFX
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USoundBase*                       Sound                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsDrop                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsOnlyOne                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsReplace                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABPWpnBase_C::PlaySFX(class USoundBase* Sound, const struct FVector& Location, bool IsDrop, bool IsOnlyOne, bool IsReplace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWpnBase_C", "PlaySFX");

	Params::BPWpnBase_C_PlaySFX Parms{};

	Parms.Sound = Sound;
	Parms.Location = std::move(Location);
	Parms.IsDrop = IsDrop;
	Parms.IsOnlyOne = IsOnlyOne;
	Parms.IsReplace = IsReplace;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPWpnBase.BPWpnBase_C.ExecReload
// (Public, BlueprintCallable, BlueprintEvent)

void ABPWpnBase_C::ExecReload()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWpnBase_C", "ExecReload");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPWpnBase.BPWpnBase_C.StopReload
// (Public, BlueprintCallable, BlueprintEvent)

void ABPWpnBase_C::StopReload()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWpnBase_C", "StopReload");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPWpnBase.BPWpnBase_C.ChangeClip
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    FillBullet                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABPWpnBase_C::ChangeClip(bool FillBullet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWpnBase_C", "ChangeClip");

	Params::BPWpnBase_C_ChangeClip Parms{};

	Parms.FillBullet = FillBullet;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPWpnBase.BPWpnBase_C.StopFire
// (Public, BlueprintCallable, BlueprintEvent)

void ABPWpnBase_C::StopFire()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWpnBase_C", "StopFire");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPWpnBase.BPWpnBase_C.UpdateFire
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABPWpnBase_C::UpdateFire()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWpnBase_C", "UpdateFire");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPWpnBase.BPWpnBase_C.GetAimOffsetDirection
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector*                         Direction                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPWpnBase_C::GetAimOffsetDirection(struct FVector* Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWpnBase_C", "GetAimOffsetDirection");

	Params::BPWpnBase_C_GetAimOffsetDirection Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Direction != nullptr)
		*Direction = std::move(Parms.Direction);
}


// Function BPWpnBase.BPWpnBase_C.GetAimDirection
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector*                         Direction                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPWpnBase_C::GetAimDirection(struct FVector* Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWpnBase_C", "GetAimDirection");

	Params::BPWpnBase_C_GetAimDirection Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Direction != nullptr)
		*Direction = std::move(Parms.Direction);
}


// Function BPWpnBase.BPWpnBase_C.DropWeapon
// (Public, BlueprintCallable, BlueprintEvent)

void ABPWpnBase_C::DropWeapon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWpnBase_C", "DropWeapon");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPWpnBase.BPWpnBase_C.UpdateAimLocation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPWpnBase_C::UpdateAimLocation(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWpnBase_C", "UpdateAimLocation");

	Params::BPWpnBase_C_UpdateAimLocation Parms{};

	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPWpnBase.BPWpnBase_C.CheckCD
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABPWpnBase_C::CheckCD()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWpnBase_C", "CheckCD");

	Params::BPWpnBase_C_CheckCD Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BPWpnBase.BPWpnBase_C.GetSniperAimDirection
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector*                         Direction                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABPWpnBase_C::GetSniperAimDirection(struct FVector* Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWpnBase_C", "GetSniperAimDirection");

	Params::BPWpnBase_C_GetSniperAimDirection Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Direction != nullptr)
		*Direction = std::move(Parms.Direction);
}


// Function BPWpnBase.BPWpnBase_C.PullBoltFinished
// (Public, BlueprintCallable, BlueprintEvent)

void ABPWpnBase_C::PullBoltFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWpnBase_C", "PullBoltFinished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPWpnBase.BPWpnBase_C.PullBoltMaxLength
// (Public, BlueprintCallable, BlueprintEvent)

void ABPWpnBase_C::PullBoltMaxLength()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPWpnBase_C", "PullBoltMaxLength");

	UObject::ProcessEvent(Func, nullptr);
}

}

