#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Lv2_characterBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_CharacterBase_classes.hpp"
#include "InputCore_structs.hpp"
#include "Enum_Language_structs.hpp"
#include "SiliconRising_structs.hpp"
#include "Enum_ControllerType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Lv2_characterBase.BP_Lv2_characterBase_C
// 0x0170 (0x0E40 - 0x0CD0)
class ABP_Lv2_characterBase_C : public ABP_CharacterBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Lv2_characterBase_C;             // 0x0CD0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USphereComponent*                       Sphere1;                                           // 0x0CD8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   ChildActor1;                                       // 0x0CE0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere_0;                                          // 0x0CE8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   ChildActor;                                        // 0x0CF0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         ____0_NewTrack_0_15C9E9C040399461512CFA8CF4BEA26C; // 0x0CF8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ____0__Direction_15C9E9C040399461512CFA8CF4BEA26C; // 0x0CFC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CFD[0x3];                                      // 0x0CFD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     时间轴_0;                                          // 0x0D00(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 WeaponClass_0;                                     // 0x0D08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanThermal;                                        // 0x0D10(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D11[0x3];                                      // 0x0D11(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ThermalCD;                                         // 0x0D14(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ThermalIsOpen;                                     // 0x0D18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D19[0x3];                                      // 0x0D19(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                R_HandTarget;                                      // 0x0D1C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Delta;                                             // 0x0D28(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D2C[0x4];                                      // 0x0D2C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 LocalActor;                                        // 0x0D30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AvoidJitterRate_Hand;                              // 0x0D38(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         R_InterpSpeed;                                     // 0x0D3C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RotationXiShu;                                     // 0x0D40(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RotationIndex;                                     // 0x0D44(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RotationSpeed;                                     // 0x0D48(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               HandLRotation;                                     // 0x0D4C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          LeftHandoverlap;                                   // 0x0D58(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D59[0x3];                                      // 0x0D59(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         L_interpSpeed;                                     // 0x0D5C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_HandTarget;                                      // 0x0D60(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OpenL;                                             // 0x0D6C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          OpenR;                                             // 0x0D6D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D6E[0x2];                                      // 0x0D6E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 actorrr;                                           // 0x0D70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 LeftHand;                                          // 0x0D78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 RightHand;                                         // 0x0D80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 SelfVirtualPawn;                                   // 0x0D88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameOverTips_C*                        Lv2GameOverTips;                                   // 0x0D90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ALv2_SniperRifle_C*                     sniperRifle;                                       // 0x0D98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   CheckCharacter;                                    // 0x0DA0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   GamePause;                                         // 0x0DB0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         SniperRifleScale;                                  // 0x0DC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPressFOV;                                        // 0x0DC4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsShouldHiddenHands;                               // 0x0DC5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DC6[0x2];                                      // 0x0DC6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FOVAdjust;                                         // 0x0DC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeadHandDistance;                                  // 0x0DCC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DistanceTmp;                                       // 0x0DD0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AvoidJitterRateNearHead_Hand;                      // 0x0DD4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AvoidJitterSpeed_Hand;                             // 0x0DD8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AvoidJitterRate_Camera;                            // 0x0DDC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AvoidJitterRateNearHead_Camera;                    // 0x0DE0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AvoidJitterSpeed_Camera;                           // 0x0DE4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DistanceTmp_Camera;                                // 0x0DE8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPressCtrl;                                       // 0x0DEC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsPressAlt;                                        // 0x0DED(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DEE[0x2];                                      // 0x0DEE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OriginControllerPos_AvoidJitter;                   // 0x0DF0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetControllerPos_AvoidJitter;                   // 0x0DFC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               ControllerRot_AvoidJitter;                         // 0x0E08(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsPressShift;                                      // 0x0E14(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E15[0x3];                                      // 0x0E15(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AvoidJitterAdd_Camera;                             // 0x0E18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScopeScaleMax;                                     // 0x0E1C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TriggerAxisMax;                                    // 0x0E20(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TriggerActionValue;                                // 0x0E24(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TriggerAvoidJitterValue;                           // 0x0E28(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TriggerAvoidJitterRate;                            // 0x0E2C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSwitchThermal;                                   // 0x0E30(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E31[0x3];                                      // 0x0E31(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ScopeDistanceMini;                                 // 0x0E34(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScopeDistanceMax;                                  // 0x0E38(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Lv2_characterBase(int32 EntryPoint);
	void InpAxisEvt_MotionController_Right_TriggerAxis_K2Node_InputAxisEvent_3(float AxisValue);
	void InpAxisEvt_MotionController_Left_TriggerAxis_K2Node_InputAxisEvent_0(float AxisValue);
	void PlayerDead();
	void GameFailed();
	void HiddenGameTips(int32 tips, int32 Time);
	void GameOverTips(int32 TipsIndex, int32 Time);
	void CustomEvent_222(TArray<struct FLeaderBoardData>& LeaderBoardData);
	void DisplayGameTips(int32 TipsIndex, int32 Time);
	void FindVirtualPawn();
	void SetAimPostHidden(bool NewParam);
	void BothHand_Anim(bool Open);
	void DisableScopeDistance();
	void FOVCheckTick();
	void UpdateSniperFov(float Delta_0);
	void InpActEvt_RightShift_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_RightShift_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void InpActEvt_LeftShift_K2Node_InputKeyEvent_2(const struct FKey& Key);
	void InpActEvt_LeftShift_K2Node_InputKeyEvent_3(const struct FKey& Key);
	void InpActEvt_RightAlt_K2Node_InputKeyEvent_4(const struct FKey& Key);
	void InpActEvt_RightAlt_K2Node_InputKeyEvent_5(const struct FKey& Key);
	void InpActEvt_LeftAlt_K2Node_InputKeyEvent_6(const struct FKey& Key);
	void InpActEvt_LeftAlt_K2Node_InputKeyEvent_7(const struct FKey& Key);
	void InpActEvt_Right_K2Node_InputKeyEvent_8(const struct FKey& Key);
	void InpActEvt_Left_K2Node_InputKeyEvent_9(const struct FKey& Key);
	void InpActEvt_Down_K2Node_InputKeyEvent_10(const struct FKey& Key);
	void InpActEvt_Up_K2Node_InputKeyEvent_11(const struct FKey& Key);
	void InpActEvt_RightControl_K2Node_InputKeyEvent_12(const struct FKey& Key);
	void InpActEvt_RightControl_K2Node_InputKeyEvent_13(const struct FKey& Key);
	void InpActEvt_LeftControl_K2Node_InputKeyEvent_14(const struct FKey& Key);
	void InpActEvt_LeftControl_K2Node_InputKeyEvent_15(const struct FKey& Key);
	void InpActEvt_Fire_L_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_Fire_L_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpActEvt_SpaceBar_K2Node_InputKeyEvent_16(const struct FKey& Key);
	void InpActEvt_Fire_K2Node_InputActionEvent_2(const struct FKey& Key);
	void InpActEvt_Fire_K2Node_InputActionEvent_3(const struct FKey& Key);
	void InpActEvt_FOV_DOWN_L_K2Node_InputActionEvent_4(const struct FKey& Key);
	void InpActEvt_FOV_DOWN_L_K2Node_InputActionEvent_5(const struct FKey& Key);
	void InpActEvt_FOV_UP_L_K2Node_InputActionEvent_6(const struct FKey& Key);
	void InpActEvt_FOV_UP_L_K2Node_InputActionEvent_7(const struct FKey& Key);
	void InpActEvt_MotionController_Right_Shoulder_K2Node_InputKeyEvent_17(const struct FKey& Key);
	void InpActEvt_MotionController_Right_FaceButton2_K2Node_InputKeyEvent_18(const struct FKey& Key);
	void InpActEvt_MotionController_Right_FaceButton1_K2Node_InputKeyEvent_19(const struct FKey& Key);
	void InpActEvt_FOV_DOWN_K2Node_InputActionEvent_8(const struct FKey& Key);
	void InpActEvt_FOV_DOWN_K2Node_InputActionEvent_9(const struct FKey& Key);
	void InpActEvt_FOV_UP_K2Node_InputActionEvent_10(const struct FKey& Key);
	void InpActEvt_FOV_UP_K2Node_InputActionEvent_11(const struct FKey& Key);
	void InpActEvt_MotionController_Left_FaceButton2_K2Node_InputKeyEvent_20(const struct FKey& Key);
	void InpActEvt_MotionController_Left_FaceButton1_K2Node_InputKeyEvent_21(const struct FKey& Key);
	void InpActEvt_MotionController_Left_Shoulder_K2Node_InputKeyEvent_22(const struct FKey& Key);
	void InpActEvt_GripButton_R_K2Node_InputActionEvent_12(const struct FKey& Key);
	void InpActEvt_GripButton_R_K2Node_InputActionEvent_13(const struct FKey& Key);
	void InpActEvt_GripButton_L_K2Node_InputActionEvent_14(const struct FKey& Key);
	void InpActEvt_GripButton_L_K2Node_InputActionEvent_15(const struct FKey& Key);
	void 时间轴_0__UpdateFunc();
	void 时间轴_0__FinishedFunc();
	void ToggleThermal();
	void BindSniperRifle(class ALv2_SniperRifle_C* NewParam);
	void SpawnSniperRifle();
	void BindHandToMotion();
	void BothHand(bool IsPress);
	void ShowFaildParticle(int32 Index_0);
	void ReloadLeftRelease();
	void ReloadLeftPress();
	void ReloadRightRelease();
	void ReloadRightPress();
	void OnSendScore(bool IsPass, int32 LevelNumber);
	void GameOver(int32 LevelNumber, bool RightNow);
	void DeadLogic();
	void OnDamgeEffect();
	void CheckPlungerNpc(class AActor* _hitActor, const struct FVector& _hitPos);
	void ReleaseFireR();
	void FireR();
	void TeleportRight();
	void TeleportLeft();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void OnHapticEffect(class UHapticFeedbackEffect_Base* HapticEffect, EControllerHand hand, float Scale, bool Loop);
	void ShowUI(bool IsShow);
	void OnGripButton_Right_Released();
	void OnGripButton_Right_Pressed();
	void OnGripButton_Left_Released();
	void OnGripButton_Left_Pressed();
	void SpawnClipToHold(bool IsLeft);
	void OnPullBoltEvent(class ABPDefaultHand_C* GunHand, class ABPDefaultHand_C* PullHand, class ABPWeaponBase_C* HideWeapon, class ABPWeaponBase_C* GunToPull, bool IsPull, bool RightHand_0);
	void TickCheck();
	void BndEvt__Capsule_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__Capsule_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void SetHeldItem_R(class AActor* InputPin, bool IsHideOld);
	void UserConstructionScript();
	void SetHeldItem_L(class AActor* InputPin, bool IsHideOld);
	void SpawnWeapon(bool IsRight, EItemTypes WeaponType);
	void InitHand();
	void GetCameraTargetPoint(struct FVector* Location);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Lv2_characterBase_C">();
	}
	static class ABP_Lv2_characterBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Lv2_characterBase_C>();
	}
};
static_assert(alignof(ABP_Lv2_characterBase_C) == 0x000010, "Wrong alignment on ABP_Lv2_characterBase_C");
static_assert(sizeof(ABP_Lv2_characterBase_C) == 0x000E40, "Wrong size on ABP_Lv2_characterBase_C");
static_assert(offsetof(ABP_Lv2_characterBase_C, UberGraphFrame_BP_Lv2_characterBase_C) == 0x000CD0, "Member 'ABP_Lv2_characterBase_C::UberGraphFrame_BP_Lv2_characterBase_C' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, Sphere1) == 0x000CD8, "Member 'ABP_Lv2_characterBase_C::Sphere1' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, ChildActor1) == 0x000CE0, "Member 'ABP_Lv2_characterBase_C::ChildActor1' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, Sphere_0) == 0x000CE8, "Member 'ABP_Lv2_characterBase_C::Sphere_0' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, ChildActor) == 0x000CF0, "Member 'ABP_Lv2_characterBase_C::ChildActor' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, ____0_NewTrack_0_15C9E9C040399461512CFA8CF4BEA26C) == 0x000CF8, "Member 'ABP_Lv2_characterBase_C::____0_NewTrack_0_15C9E9C040399461512CFA8CF4BEA26C' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, ____0__Direction_15C9E9C040399461512CFA8CF4BEA26C) == 0x000CFC, "Member 'ABP_Lv2_characterBase_C::____0__Direction_15C9E9C040399461512CFA8CF4BEA26C' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, 时间轴_0) == 0x000D00, "Member 'ABP_Lv2_characterBase_C::时间轴_0' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, WeaponClass_0) == 0x000D08, "Member 'ABP_Lv2_characterBase_C::WeaponClass_0' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, CanThermal) == 0x000D10, "Member 'ABP_Lv2_characterBase_C::CanThermal' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, ThermalCD) == 0x000D14, "Member 'ABP_Lv2_characterBase_C::ThermalCD' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, ThermalIsOpen) == 0x000D18, "Member 'ABP_Lv2_characterBase_C::ThermalIsOpen' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, R_HandTarget) == 0x000D1C, "Member 'ABP_Lv2_characterBase_C::R_HandTarget' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, Delta) == 0x000D28, "Member 'ABP_Lv2_characterBase_C::Delta' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, LocalActor) == 0x000D30, "Member 'ABP_Lv2_characterBase_C::LocalActor' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, AvoidJitterRate_Hand) == 0x000D38, "Member 'ABP_Lv2_characterBase_C::AvoidJitterRate_Hand' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, R_InterpSpeed) == 0x000D3C, "Member 'ABP_Lv2_characterBase_C::R_InterpSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, RotationXiShu) == 0x000D40, "Member 'ABP_Lv2_characterBase_C::RotationXiShu' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, RotationIndex) == 0x000D44, "Member 'ABP_Lv2_characterBase_C::RotationIndex' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, RotationSpeed) == 0x000D48, "Member 'ABP_Lv2_characterBase_C::RotationSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, HandLRotation) == 0x000D4C, "Member 'ABP_Lv2_characterBase_C::HandLRotation' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, LeftHandoverlap) == 0x000D58, "Member 'ABP_Lv2_characterBase_C::LeftHandoverlap' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, L_interpSpeed) == 0x000D5C, "Member 'ABP_Lv2_characterBase_C::L_interpSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, L_HandTarget) == 0x000D60, "Member 'ABP_Lv2_characterBase_C::L_HandTarget' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, OpenL) == 0x000D6C, "Member 'ABP_Lv2_characterBase_C::OpenL' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, OpenR) == 0x000D6D, "Member 'ABP_Lv2_characterBase_C::OpenR' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, actorrr) == 0x000D70, "Member 'ABP_Lv2_characterBase_C::actorrr' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, LeftHand) == 0x000D78, "Member 'ABP_Lv2_characterBase_C::LeftHand' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, RightHand) == 0x000D80, "Member 'ABP_Lv2_characterBase_C::RightHand' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, SelfVirtualPawn) == 0x000D88, "Member 'ABP_Lv2_characterBase_C::SelfVirtualPawn' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, Lv2GameOverTips) == 0x000D90, "Member 'ABP_Lv2_characterBase_C::Lv2GameOverTips' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, sniperRifle) == 0x000D98, "Member 'ABP_Lv2_characterBase_C::sniperRifle' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, CheckCharacter) == 0x000DA0, "Member 'ABP_Lv2_characterBase_C::CheckCharacter' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, GamePause) == 0x000DB0, "Member 'ABP_Lv2_characterBase_C::GamePause' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, SniperRifleScale) == 0x000DC0, "Member 'ABP_Lv2_characterBase_C::SniperRifleScale' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, IsPressFOV) == 0x000DC4, "Member 'ABP_Lv2_characterBase_C::IsPressFOV' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, IsShouldHiddenHands) == 0x000DC5, "Member 'ABP_Lv2_characterBase_C::IsShouldHiddenHands' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, FOVAdjust) == 0x000DC8, "Member 'ABP_Lv2_characterBase_C::FOVAdjust' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, HeadHandDistance) == 0x000DCC, "Member 'ABP_Lv2_characterBase_C::HeadHandDistance' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, DistanceTmp) == 0x000DD0, "Member 'ABP_Lv2_characterBase_C::DistanceTmp' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, AvoidJitterRateNearHead_Hand) == 0x000DD4, "Member 'ABP_Lv2_characterBase_C::AvoidJitterRateNearHead_Hand' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, AvoidJitterSpeed_Hand) == 0x000DD8, "Member 'ABP_Lv2_characterBase_C::AvoidJitterSpeed_Hand' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, AvoidJitterRate_Camera) == 0x000DDC, "Member 'ABP_Lv2_characterBase_C::AvoidJitterRate_Camera' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, AvoidJitterRateNearHead_Camera) == 0x000DE0, "Member 'ABP_Lv2_characterBase_C::AvoidJitterRateNearHead_Camera' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, AvoidJitterSpeed_Camera) == 0x000DE4, "Member 'ABP_Lv2_characterBase_C::AvoidJitterSpeed_Camera' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, DistanceTmp_Camera) == 0x000DE8, "Member 'ABP_Lv2_characterBase_C::DistanceTmp_Camera' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, IsPressCtrl) == 0x000DEC, "Member 'ABP_Lv2_characterBase_C::IsPressCtrl' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, IsPressAlt) == 0x000DED, "Member 'ABP_Lv2_characterBase_C::IsPressAlt' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, OriginControllerPos_AvoidJitter) == 0x000DF0, "Member 'ABP_Lv2_characterBase_C::OriginControllerPos_AvoidJitter' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, TargetControllerPos_AvoidJitter) == 0x000DFC, "Member 'ABP_Lv2_characterBase_C::TargetControllerPos_AvoidJitter' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, ControllerRot_AvoidJitter) == 0x000E08, "Member 'ABP_Lv2_characterBase_C::ControllerRot_AvoidJitter' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, IsPressShift) == 0x000E14, "Member 'ABP_Lv2_characterBase_C::IsPressShift' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, AvoidJitterAdd_Camera) == 0x000E18, "Member 'ABP_Lv2_characterBase_C::AvoidJitterAdd_Camera' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, ScopeScaleMax) == 0x000E1C, "Member 'ABP_Lv2_characterBase_C::ScopeScaleMax' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, TriggerAxisMax) == 0x000E20, "Member 'ABP_Lv2_characterBase_C::TriggerAxisMax' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, TriggerActionValue) == 0x000E24, "Member 'ABP_Lv2_characterBase_C::TriggerActionValue' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, TriggerAvoidJitterValue) == 0x000E28, "Member 'ABP_Lv2_characterBase_C::TriggerAvoidJitterValue' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, TriggerAvoidJitterRate) == 0x000E2C, "Member 'ABP_Lv2_characterBase_C::TriggerAvoidJitterRate' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, IsSwitchThermal) == 0x000E30, "Member 'ABP_Lv2_characterBase_C::IsSwitchThermal' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, ScopeDistanceMini) == 0x000E34, "Member 'ABP_Lv2_characterBase_C::ScopeDistanceMini' has a wrong offset!");
static_assert(offsetof(ABP_Lv2_characterBase_C, ScopeDistanceMax) == 0x000E38, "Member 'ABP_Lv2_characterBase_C::ScopeDistanceMax' has a wrong offset!");

}

