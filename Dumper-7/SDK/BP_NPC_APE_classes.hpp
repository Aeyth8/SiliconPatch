#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NPC_APE

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "EnumScoreType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AIModule_structs.hpp"
#include "E_NPC_APE_MachineGunStatus_structs.hpp"
#include "Enum_BehaviorType_structs.hpp"
#include "BP_NPC_Base_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_NPC_APE.BP_NPC_APE_C
// 0x02E0 (0x0B90 - 0x08B0)
class ABP_NPC_APE_C final : public ABP_NPC_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_NPC_APE_C;                       // 0x08B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USkeletalMeshComponent*                 BrokenMesh;                                        // 0x08B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 proxy_box1;                                        // 0x08C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 proxy_box;                                         // 0x08C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   GlowMesh;                                          // 0x08D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       PowerCenter;                                       // 0x08D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BackCoverL;                                        // 0x08E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BackCoverR;                                        // 0x08E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         HeadGlow_NewTrack_0_061849AF4DFB95A4526CAC907FE63983; // 0x08F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            HeadGlow__Direction_061849AF4DFB95A4526CAC907FE63983; // 0x08F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F5[0x3];                                      // 0x08F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     HeadGlow;                                          // 0x08F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_4_NewTrack_0_84AA5A494CB336FEBE7C769E3ADD24F1; // 0x0900(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_4__Direction_84AA5A494CB336FEBE7C769E3ADD24F1; // 0x0904(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_905[0x3];                                      // 0x0905(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_4;                                        // 0x0908(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_3_NewTrack_0_414886D54D3B9033C647EA8B12FFEFEA; // 0x0910(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_3__Direction_414886D54D3B9033C647EA8B12FFEFEA; // 0x0914(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_915[0x3];                                      // 0x0915(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_3;                                        // 0x0918(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_2_NewTrack_0_FCA48ABD4B56623374EC2DB49D6C8368; // 0x0920(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_2__Direction_FCA48ABD4B56623374EC2DB49D6C8368; // 0x0924(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_925[0x3];                                      // 0x0925(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_2;                                        // 0x0928(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_1_Alpha_EFA834C541B407065DFF73A06AFD8B42; // 0x0930(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_1__Direction_EFA834C541B407065DFF73A06AFD8B42; // 0x0934(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_935[0x3];                                      // 0x0935(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_1;                                        // 0x0938(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DashJumpTimeLine_NewTrack_0_821AB98C4285DEB65EEC22BCECEA5CBA; // 0x0940(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            DashJumpTimeLine__Direction_821AB98C4285DEB65EEC22BCECEA5CBA; // 0x0944(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_945[0x3];                                      // 0x0945(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     DashJumpTimeLine;                                  // 0x0948(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimBP_APE_C*                          AnimBP;                                            // 0x0950(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CheckMoveInterval;                                 // 0x0958(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_959[0x3];                                      // 0x0959(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SwitchCoverInterval;                               // 0x095C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaTurn;                                         // 0x0960(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_NPC_APE_MachineGunStatus                    MachineGunShootStatus;                             // 0x0964(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_965[0x3];                                      // 0x0965(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AWpn_AI_Ape_MachineGun_C*               MachineGun;                                        // 0x0968(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	float                                         MissileInterval_stage_1;                           // 0x0970(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MissilePrepareTime_stage_1;                        // 0x0974(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MissileInterval_stage_2;                           // 0x0978(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MissilePrepareTime_stage_2;                        // 0x097C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MissileInterval_stage_3;                           // 0x0980(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MissilePrepareTime_stage_3;                        // 0x0984(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBreakShoot;                                      // 0x0988(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          StartShoot;                                        // 0x0989(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_98A[0x6];                                      // 0x098A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           TimeHandle;                                        // 0x0990(0x0008)(Edit, BlueprintVisible, Net, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           MissilePrepareHandle;                              // 0x0998(0x0008)(Edit, BlueprintVisible, Net, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldStand;                                       // 0x09A0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9A1[0x3];                                      // 0x09A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TurnCheck;                                         // 0x09A4(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ActionRadius;                                      // 0x09A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MissileMiddleHight;                                // 0x09AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DashDamage;                                        // 0x09B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ArmorHealth_Current;                               // 0x09B4(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMissileLoop;                                     // 0x09B8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9B9[0x7];                                      // 0x09B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           DashLoopTimeHandle;                                // 0x09C0(0x0008)(Edit, BlueprintVisible, Net, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DashTargetLocation;                                // 0x09C8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DashStartLocation;                                 // 0x09D4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         KeepDistanceMini;                                  // 0x09E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         KeepDistanceMax;                                   // 0x09E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CenterLocation;                                    // 0x09E8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StartDashing;                                      // 0x09F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsDashLaunching;                                   // 0x09F5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9F6[0x2];                                      // 0x09F6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         JumpCount;                                         // 0x09F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9FC[0x4];                                      // 0x09FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_CharacterBase_C*                    DashTarget;                                        // 0x0A00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IdleTime;                                          // 0x0A08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MoveToCenter;                                      // 0x0A0C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A0D[0x3];                                      // 0x0A0D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AAI_Ape_Missile_C*                      Missile_1;                                         // 0x0A10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAI_Ape_Missile_C*                      Missile_2;                                         // 0x0A18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAI_Ape_Missile_C*                      Missile_3;                                         // 0x0A20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAI_Ape_Missile_C*                      Missile_4;                                         // 0x0A28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CenterPowerDamgeRate;                              // 0x0A30(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BackPowerDamgeRate;                                // 0x0A34(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<float>                                 BossHealthRateSpawnAI;                             // 0x0A38(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class ABP_AI_Wave_C*                          AIWave;                                            // 0x0A48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CheckSpawnAITime;                                  // 0x0A50(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CheckAITime;                                       // 0x0A54(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsWaveFinished;                                    // 0x0A58(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A59[0x3];                                      // 0x0A59(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TurnCheckInRelaxEnd;                               // 0x0A5C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDashHitPlayer;                                   // 0x0A60(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A61[0x3];                                      // 0x0A61(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DashLoopTime;                                      // 0x0A64(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           RandomLocationHandle;                              // 0x0A68(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TempRndLocation;                                   // 0x0A70(0x000C)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TempNowLocation;                                   // 0x0A7C(0x000C)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RandomMoveCheck;                                   // 0x0A88(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsGoBack;                                          // 0x0A89(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A8A[0x6];                                      // 0x0A8A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             HitResult;                                         // 0x0A90(0x0088)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UMaterialInstanceDynamic*               MaterialOfBody;                                    // 0x0B18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               GlowMID;                                           // 0x0B20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         AssistWave;                                        // 0x0B28(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	struct FVector                                TempCheckLocation;                                 // 0x0B38(0x000C)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B44[0x4];                                      // 0x0B44(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           TempBoneList;                                      // 0x0B48(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class UAudioComponent*                        Sound;                                             // 0x0B58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        MissileChargeSound;                                // 0x0B60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsReset;                                           // 0x0B68(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B69[0x7];                                      // 0x0B69(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnStartJump;                                       // 0x0B70(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         MeleeCheckRange;                                   // 0x0B80(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MeleeDamage;                                       // 0x0B84(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DashAttackRange;                                   // 0x0B88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_NPC_APE(int32 EntryPoint);
	void CustomEvent_0();
	void CheckMeleeDistance();
	void OnAddScore(EnumScoreType scoreType, class APlayerController* PlayerController);
	void OnAllPlayMissileCharge(class USoundBase* Sound_0, const struct FVector& Location);
	void OnServerPlayMissileCharge(class USoundBase* Sound_0, const struct FVector& Location);
	void ShowUpShoot(bool Shoot);
	void PlaySoundAt(class USoundBase* SoundBase, const struct FVector& Location);
	void OnPlaySoundAtLocation(class USoundBase* Sound_0, const struct FVector& Location);
	void OnSetAnimRandomDirection(float Value);
	void OnHitOtherDead(const struct FVector& HitLocation_0, const struct FVector& HitNormal_0, class APlayerController* PlayerController);
	void OnSetAnimRandomMove(bool Value);
	void OnKeepDistance(const struct FVector& TargetLocation);
	void OnStartRandomMove();
	void BndEvt__PowerCenter_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnMachineGunLoopEnd();
	void BndEvt__BackCoverL_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void BndEvt__BackCoverR_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnDashAttack();
	void OnSetMachineGunState(E_NPC_APE_MachineGunStatus Value);
	void OnSetRelaxing(bool Value);
	void OnNeedLaunch(bool Value);
	void OnPrepareDash(bool Value);
	void OnMissileLaunch();
	void DashPrepareEnd();
	void ResetDoOnceOnDash();
	void OnEndDashJump();
	void OnStartDashJump();
	void DashMainLoop();
	void SetupDashAttack();
	void StopMachineGunAndMissile();
	void OnMissileAlert(bool IsStart);
	void OnSetShootMissileFalse();
	void OnSetShootMissileTrue();
	void SetupMissileTimer(float MissisileInterval, float MissilePrepareTime);
	void OnMissilePrepareEnd();
	void OnMissileLoop();
	void OnCompleted_394F91C04EB3AA6F59B779A7B97A664B(class FName NotifyName);
	void OnBlendOut_394F91C04EB3AA6F59B779A7B97A664B(class FName NotifyName);
	void OnInterrupted_394F91C04EB3AA6F59B779A7B97A664B(class FName NotifyName);
	void OnNotifyBegin_394F91C04EB3AA6F59B779A7B97A664B(class FName NotifyName);
	void OnNotifyEnd_394F91C04EB3AA6F59B779A7B97A664B(class FName NotifyName);
	void OnSuccess_1E52BC3F47440C73D89B02B0FE61E38F(EPathFollowingResult MovementResult);
	void OnFail_1E52BC3F47440C73D89B02B0FE61E38F(EPathFollowingResult MovementResult);
	void OnSuccess_0F45F1B74BDC9B5B9A9DA0BC19DB6696(EPathFollowingResult MovementResult);
	void OnFail_0F45F1B74BDC9B5B9A9DA0BC19DB6696(EPathFollowingResult MovementResult);
	void HeadGlow__UpdateFunc();
	void HeadGlow__FinishedFunc();
	void Timeline_4__UpdateFunc();
	void Timeline_4__FinishedFunc();
	void Timeline_3__UpdateFunc();
	void Timeline_3__FinishedFunc();
	void Timeline_2__UpdateFunc();
	void Timeline_2__FinishedFunc();
	void Timeline_1__UpdateFunc();
	void Timeline_1__FinishedFunc();
	void DashJumpTimeLine__UpdateFunc();
	void DashJumpTimeLine__FinishedFunc();
	void GetDistanceFromTarget(float* Distance);
	void FaceToTarget(bool IsNoLerp, const struct FVector& TargetLocation);
	void IsMoving(bool* IsMoving_0);
	void CheckAttackStage(int32* Stage);
	void ShootMissile(bool* Success);
	void CheckTimeHandle();
	void GetMissileTimeSettings(float* Interval, float* Prepare);
	void GetPlayerHead(bool* Found, class UBoxComponent** HeadCollision);
	void OnRep_MachineGun();
	void PrepareSpawnMissile();
	void GetRandomLocation(float MinDistance, float MaxDistance, bool* IsRight, struct FVector* Location);
	void GetRandomBoneList(TArray<class FName>* BoneList);
	void OnHitHeadDead(const struct FVector& HitLocation_0, const struct FVector& HitNormal_0, class APlayerController* PlayerController);
	void OnHitHead(class APlayerController* PlayerController, const struct FVector& HitLocation_0, const struct FVector& HitNormal_0);
	void OnDeath(class APlayerController* PlayerController);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveAnyDamage(float Damage_0, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceiveBeginPlay();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_NPC_APE_C">();
	}
	static class ABP_NPC_APE_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_NPC_APE_C>();
	}
};
static_assert(alignof(ABP_NPC_APE_C) == 0x000010, "Wrong alignment on ABP_NPC_APE_C");
static_assert(sizeof(ABP_NPC_APE_C) == 0x000B90, "Wrong size on ABP_NPC_APE_C");
static_assert(offsetof(ABP_NPC_APE_C, UberGraphFrame_BP_NPC_APE_C) == 0x0008B0, "Member 'ABP_NPC_APE_C::UberGraphFrame_BP_NPC_APE_C' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, BrokenMesh) == 0x0008B8, "Member 'ABP_NPC_APE_C::BrokenMesh' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, proxy_box1) == 0x0008C0, "Member 'ABP_NPC_APE_C::proxy_box1' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, proxy_box) == 0x0008C8, "Member 'ABP_NPC_APE_C::proxy_box' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, GlowMesh) == 0x0008D0, "Member 'ABP_NPC_APE_C::GlowMesh' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, PowerCenter) == 0x0008D8, "Member 'ABP_NPC_APE_C::PowerCenter' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, BackCoverL) == 0x0008E0, "Member 'ABP_NPC_APE_C::BackCoverL' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, BackCoverR) == 0x0008E8, "Member 'ABP_NPC_APE_C::BackCoverR' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, HeadGlow_NewTrack_0_061849AF4DFB95A4526CAC907FE63983) == 0x0008F0, "Member 'ABP_NPC_APE_C::HeadGlow_NewTrack_0_061849AF4DFB95A4526CAC907FE63983' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, HeadGlow__Direction_061849AF4DFB95A4526CAC907FE63983) == 0x0008F4, "Member 'ABP_NPC_APE_C::HeadGlow__Direction_061849AF4DFB95A4526CAC907FE63983' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, HeadGlow) == 0x0008F8, "Member 'ABP_NPC_APE_C::HeadGlow' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, Timeline_4_NewTrack_0_84AA5A494CB336FEBE7C769E3ADD24F1) == 0x000900, "Member 'ABP_NPC_APE_C::Timeline_4_NewTrack_0_84AA5A494CB336FEBE7C769E3ADD24F1' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, Timeline_4__Direction_84AA5A494CB336FEBE7C769E3ADD24F1) == 0x000904, "Member 'ABP_NPC_APE_C::Timeline_4__Direction_84AA5A494CB336FEBE7C769E3ADD24F1' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, Timeline_4) == 0x000908, "Member 'ABP_NPC_APE_C::Timeline_4' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, Timeline_3_NewTrack_0_414886D54D3B9033C647EA8B12FFEFEA) == 0x000910, "Member 'ABP_NPC_APE_C::Timeline_3_NewTrack_0_414886D54D3B9033C647EA8B12FFEFEA' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, Timeline_3__Direction_414886D54D3B9033C647EA8B12FFEFEA) == 0x000914, "Member 'ABP_NPC_APE_C::Timeline_3__Direction_414886D54D3B9033C647EA8B12FFEFEA' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, Timeline_3) == 0x000918, "Member 'ABP_NPC_APE_C::Timeline_3' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, Timeline_2_NewTrack_0_FCA48ABD4B56623374EC2DB49D6C8368) == 0x000920, "Member 'ABP_NPC_APE_C::Timeline_2_NewTrack_0_FCA48ABD4B56623374EC2DB49D6C8368' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, Timeline_2__Direction_FCA48ABD4B56623374EC2DB49D6C8368) == 0x000924, "Member 'ABP_NPC_APE_C::Timeline_2__Direction_FCA48ABD4B56623374EC2DB49D6C8368' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, Timeline_2) == 0x000928, "Member 'ABP_NPC_APE_C::Timeline_2' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, Timeline_1_Alpha_EFA834C541B407065DFF73A06AFD8B42) == 0x000930, "Member 'ABP_NPC_APE_C::Timeline_1_Alpha_EFA834C541B407065DFF73A06AFD8B42' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, Timeline_1__Direction_EFA834C541B407065DFF73A06AFD8B42) == 0x000934, "Member 'ABP_NPC_APE_C::Timeline_1__Direction_EFA834C541B407065DFF73A06AFD8B42' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, Timeline_1) == 0x000938, "Member 'ABP_NPC_APE_C::Timeline_1' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, DashJumpTimeLine_NewTrack_0_821AB98C4285DEB65EEC22BCECEA5CBA) == 0x000940, "Member 'ABP_NPC_APE_C::DashJumpTimeLine_NewTrack_0_821AB98C4285DEB65EEC22BCECEA5CBA' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, DashJumpTimeLine__Direction_821AB98C4285DEB65EEC22BCECEA5CBA) == 0x000944, "Member 'ABP_NPC_APE_C::DashJumpTimeLine__Direction_821AB98C4285DEB65EEC22BCECEA5CBA' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, DashJumpTimeLine) == 0x000948, "Member 'ABP_NPC_APE_C::DashJumpTimeLine' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, AnimBP) == 0x000950, "Member 'ABP_NPC_APE_C::AnimBP' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, CheckMoveInterval) == 0x000958, "Member 'ABP_NPC_APE_C::CheckMoveInterval' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, SwitchCoverInterval) == 0x00095C, "Member 'ABP_NPC_APE_C::SwitchCoverInterval' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, DeltaTurn) == 0x000960, "Member 'ABP_NPC_APE_C::DeltaTurn' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, MachineGunShootStatus) == 0x000964, "Member 'ABP_NPC_APE_C::MachineGunShootStatus' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, MachineGun) == 0x000968, "Member 'ABP_NPC_APE_C::MachineGun' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, MissileInterval_stage_1) == 0x000970, "Member 'ABP_NPC_APE_C::MissileInterval_stage_1' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, MissilePrepareTime_stage_1) == 0x000974, "Member 'ABP_NPC_APE_C::MissilePrepareTime_stage_1' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, MissileInterval_stage_2) == 0x000978, "Member 'ABP_NPC_APE_C::MissileInterval_stage_2' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, MissilePrepareTime_stage_2) == 0x00097C, "Member 'ABP_NPC_APE_C::MissilePrepareTime_stage_2' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, MissileInterval_stage_3) == 0x000980, "Member 'ABP_NPC_APE_C::MissileInterval_stage_3' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, MissilePrepareTime_stage_3) == 0x000984, "Member 'ABP_NPC_APE_C::MissilePrepareTime_stage_3' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, IsBreakShoot) == 0x000988, "Member 'ABP_NPC_APE_C::IsBreakShoot' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, StartShoot) == 0x000989, "Member 'ABP_NPC_APE_C::StartShoot' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, TimeHandle) == 0x000990, "Member 'ABP_NPC_APE_C::TimeHandle' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, MissilePrepareHandle) == 0x000998, "Member 'ABP_NPC_APE_C::MissilePrepareHandle' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, ShouldStand) == 0x0009A0, "Member 'ABP_NPC_APE_C::ShouldStand' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, TurnCheck) == 0x0009A4, "Member 'ABP_NPC_APE_C::TurnCheck' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, ActionRadius) == 0x0009A8, "Member 'ABP_NPC_APE_C::ActionRadius' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, MissileMiddleHight) == 0x0009AC, "Member 'ABP_NPC_APE_C::MissileMiddleHight' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, DashDamage) == 0x0009B0, "Member 'ABP_NPC_APE_C::DashDamage' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, ArmorHealth_Current) == 0x0009B4, "Member 'ABP_NPC_APE_C::ArmorHealth_Current' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, IsMissileLoop) == 0x0009B8, "Member 'ABP_NPC_APE_C::IsMissileLoop' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, DashLoopTimeHandle) == 0x0009C0, "Member 'ABP_NPC_APE_C::DashLoopTimeHandle' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, DashTargetLocation) == 0x0009C8, "Member 'ABP_NPC_APE_C::DashTargetLocation' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, DashStartLocation) == 0x0009D4, "Member 'ABP_NPC_APE_C::DashStartLocation' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, KeepDistanceMini) == 0x0009E0, "Member 'ABP_NPC_APE_C::KeepDistanceMini' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, KeepDistanceMax) == 0x0009E4, "Member 'ABP_NPC_APE_C::KeepDistanceMax' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, CenterLocation) == 0x0009E8, "Member 'ABP_NPC_APE_C::CenterLocation' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, StartDashing) == 0x0009F4, "Member 'ABP_NPC_APE_C::StartDashing' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, IsDashLaunching) == 0x0009F5, "Member 'ABP_NPC_APE_C::IsDashLaunching' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, JumpCount) == 0x0009F8, "Member 'ABP_NPC_APE_C::JumpCount' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, DashTarget) == 0x000A00, "Member 'ABP_NPC_APE_C::DashTarget' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, IdleTime) == 0x000A08, "Member 'ABP_NPC_APE_C::IdleTime' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, MoveToCenter) == 0x000A0C, "Member 'ABP_NPC_APE_C::MoveToCenter' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, Missile_1) == 0x000A10, "Member 'ABP_NPC_APE_C::Missile_1' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, Missile_2) == 0x000A18, "Member 'ABP_NPC_APE_C::Missile_2' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, Missile_3) == 0x000A20, "Member 'ABP_NPC_APE_C::Missile_3' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, Missile_4) == 0x000A28, "Member 'ABP_NPC_APE_C::Missile_4' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, CenterPowerDamgeRate) == 0x000A30, "Member 'ABP_NPC_APE_C::CenterPowerDamgeRate' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, BackPowerDamgeRate) == 0x000A34, "Member 'ABP_NPC_APE_C::BackPowerDamgeRate' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, BossHealthRateSpawnAI) == 0x000A38, "Member 'ABP_NPC_APE_C::BossHealthRateSpawnAI' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, AIWave) == 0x000A48, "Member 'ABP_NPC_APE_C::AIWave' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, CheckSpawnAITime) == 0x000A50, "Member 'ABP_NPC_APE_C::CheckSpawnAITime' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, CheckAITime) == 0x000A54, "Member 'ABP_NPC_APE_C::CheckAITime' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, IsWaveFinished) == 0x000A58, "Member 'ABP_NPC_APE_C::IsWaveFinished' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, TurnCheckInRelaxEnd) == 0x000A5C, "Member 'ABP_NPC_APE_C::TurnCheckInRelaxEnd' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, IsDashHitPlayer) == 0x000A60, "Member 'ABP_NPC_APE_C::IsDashHitPlayer' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, DashLoopTime) == 0x000A64, "Member 'ABP_NPC_APE_C::DashLoopTime' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, RandomLocationHandle) == 0x000A68, "Member 'ABP_NPC_APE_C::RandomLocationHandle' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, TempRndLocation) == 0x000A70, "Member 'ABP_NPC_APE_C::TempRndLocation' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, TempNowLocation) == 0x000A7C, "Member 'ABP_NPC_APE_C::TempNowLocation' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, RandomMoveCheck) == 0x000A88, "Member 'ABP_NPC_APE_C::RandomMoveCheck' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, IsGoBack) == 0x000A89, "Member 'ABP_NPC_APE_C::IsGoBack' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, HitResult) == 0x000A90, "Member 'ABP_NPC_APE_C::HitResult' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, MaterialOfBody) == 0x000B18, "Member 'ABP_NPC_APE_C::MaterialOfBody' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, GlowMID) == 0x000B20, "Member 'ABP_NPC_APE_C::GlowMID' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, AssistWave) == 0x000B28, "Member 'ABP_NPC_APE_C::AssistWave' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, TempCheckLocation) == 0x000B38, "Member 'ABP_NPC_APE_C::TempCheckLocation' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, TempBoneList) == 0x000B48, "Member 'ABP_NPC_APE_C::TempBoneList' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, Sound) == 0x000B58, "Member 'ABP_NPC_APE_C::Sound' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, MissileChargeSound) == 0x000B60, "Member 'ABP_NPC_APE_C::MissileChargeSound' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, IsReset) == 0x000B68, "Member 'ABP_NPC_APE_C::IsReset' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, OnStartJump) == 0x000B70, "Member 'ABP_NPC_APE_C::OnStartJump' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, MeleeCheckRange) == 0x000B80, "Member 'ABP_NPC_APE_C::MeleeCheckRange' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, MeleeDamage) == 0x000B84, "Member 'ABP_NPC_APE_C::MeleeDamage' has a wrong offset!");
static_assert(offsetof(ABP_NPC_APE_C, DashAttackRange) == 0x000B88, "Member 'ABP_NPC_APE_C::DashAttackRange' has a wrong offset!");

}

