#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BlueMan_VehicleAI

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BlueMan_VehicleAI.VehicleAI_AdvancedPathfinding.GetAllRuntimeData
// 0x0090 (0x0090 - 0x0000)
struct VehicleAI_AdvancedPathfinding_GetAllRuntimeData final
{
public:
	float                                         SteeringOutput;                                    // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThrottleOutput;                                    // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         PathData;                                          // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         SteeringAngleData;                                 // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ParentData;                                        // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        DataStorageData;                                   // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 ValueData;                                         // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         OpenListData;                                      // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ClosedListData;                                    // 0x0060(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         NeighboursData;                                    // 0x0070(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         RightSensorAlphaData;                              // 0x0080(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CentralSensorAlphaData;                            // 0x0084(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeftSensorAlphaData;                               // 0x0088(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsVehicleAIModuleEnabledData;                      // 0x008C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VehicleAI_AdvancedPathfinding_GetAllRuntimeData) == 0x000008, "Wrong alignment on VehicleAI_AdvancedPathfinding_GetAllRuntimeData");
static_assert(sizeof(VehicleAI_AdvancedPathfinding_GetAllRuntimeData) == 0x000090, "Wrong size on VehicleAI_AdvancedPathfinding_GetAllRuntimeData");
static_assert(offsetof(VehicleAI_AdvancedPathfinding_GetAllRuntimeData, SteeringOutput) == 0x000000, "Member 'VehicleAI_AdvancedPathfinding_GetAllRuntimeData::SteeringOutput' has a wrong offset!");
static_assert(offsetof(VehicleAI_AdvancedPathfinding_GetAllRuntimeData, ThrottleOutput) == 0x000004, "Member 'VehicleAI_AdvancedPathfinding_GetAllRuntimeData::ThrottleOutput' has a wrong offset!");
static_assert(offsetof(VehicleAI_AdvancedPathfinding_GetAllRuntimeData, PathData) == 0x000008, "Member 'VehicleAI_AdvancedPathfinding_GetAllRuntimeData::PathData' has a wrong offset!");
static_assert(offsetof(VehicleAI_AdvancedPathfinding_GetAllRuntimeData, SteeringAngleData) == 0x000018, "Member 'VehicleAI_AdvancedPathfinding_GetAllRuntimeData::SteeringAngleData' has a wrong offset!");
static_assert(offsetof(VehicleAI_AdvancedPathfinding_GetAllRuntimeData, ParentData) == 0x000020, "Member 'VehicleAI_AdvancedPathfinding_GetAllRuntimeData::ParentData' has a wrong offset!");
static_assert(offsetof(VehicleAI_AdvancedPathfinding_GetAllRuntimeData, DataStorageData) == 0x000030, "Member 'VehicleAI_AdvancedPathfinding_GetAllRuntimeData::DataStorageData' has a wrong offset!");
static_assert(offsetof(VehicleAI_AdvancedPathfinding_GetAllRuntimeData, ValueData) == 0x000040, "Member 'VehicleAI_AdvancedPathfinding_GetAllRuntimeData::ValueData' has a wrong offset!");
static_assert(offsetof(VehicleAI_AdvancedPathfinding_GetAllRuntimeData, OpenListData) == 0x000050, "Member 'VehicleAI_AdvancedPathfinding_GetAllRuntimeData::OpenListData' has a wrong offset!");
static_assert(offsetof(VehicleAI_AdvancedPathfinding_GetAllRuntimeData, ClosedListData) == 0x000060, "Member 'VehicleAI_AdvancedPathfinding_GetAllRuntimeData::ClosedListData' has a wrong offset!");
static_assert(offsetof(VehicleAI_AdvancedPathfinding_GetAllRuntimeData, NeighboursData) == 0x000070, "Member 'VehicleAI_AdvancedPathfinding_GetAllRuntimeData::NeighboursData' has a wrong offset!");
static_assert(offsetof(VehicleAI_AdvancedPathfinding_GetAllRuntimeData, RightSensorAlphaData) == 0x000080, "Member 'VehicleAI_AdvancedPathfinding_GetAllRuntimeData::RightSensorAlphaData' has a wrong offset!");
static_assert(offsetof(VehicleAI_AdvancedPathfinding_GetAllRuntimeData, CentralSensorAlphaData) == 0x000084, "Member 'VehicleAI_AdvancedPathfinding_GetAllRuntimeData::CentralSensorAlphaData' has a wrong offset!");
static_assert(offsetof(VehicleAI_AdvancedPathfinding_GetAllRuntimeData, LeftSensorAlphaData) == 0x000088, "Member 'VehicleAI_AdvancedPathfinding_GetAllRuntimeData::LeftSensorAlphaData' has a wrong offset!");
static_assert(offsetof(VehicleAI_AdvancedPathfinding_GetAllRuntimeData, IsVehicleAIModuleEnabledData) == 0x00008C, "Member 'VehicleAI_AdvancedPathfinding_GetAllRuntimeData::IsVehicleAIModuleEnabledData' has a wrong offset!");

// Function BlueMan_VehicleAI.VehicleAI_AdvancedPathfinding.SetPathfindingDestination
// 0x0008 (0x0008 - 0x0000)
struct VehicleAI_AdvancedPathfinding_SetPathfindingDestination final
{
public:
	class AActor*                                 Destination;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleAI_AdvancedPathfinding_SetPathfindingDestination) == 0x000008, "Wrong alignment on VehicleAI_AdvancedPathfinding_SetPathfindingDestination");
static_assert(sizeof(VehicleAI_AdvancedPathfinding_SetPathfindingDestination) == 0x000008, "Wrong size on VehicleAI_AdvancedPathfinding_SetPathfindingDestination");
static_assert(offsetof(VehicleAI_AdvancedPathfinding_SetPathfindingDestination, Destination) == 0x000000, "Member 'VehicleAI_AdvancedPathfinding_SetPathfindingDestination::Destination' has a wrong offset!");

// Function BlueMan_VehicleAI.VehicleAI_AdvancedPathfinding.SetRequiredProperties
// 0x0038 (0x0038 - 0x0000)
struct VehicleAI_AdvancedPathfinding_SetRequiredProperties final
{
public:
	class AWheeledVehicle*                        WheeledVehicleReferenceInput;                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UArrowComponent*                        LeftSensorInput;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UArrowComponent*                        CentralSensorInput;                                // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UArrowComponent*                        RightSensorInput;                                  // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ActorInput;                                        // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         WaypointsInput;                                    // 0x0028(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleAI_AdvancedPathfinding_SetRequiredProperties) == 0x000008, "Wrong alignment on VehicleAI_AdvancedPathfinding_SetRequiredProperties");
static_assert(sizeof(VehicleAI_AdvancedPathfinding_SetRequiredProperties) == 0x000038, "Wrong size on VehicleAI_AdvancedPathfinding_SetRequiredProperties");
static_assert(offsetof(VehicleAI_AdvancedPathfinding_SetRequiredProperties, WheeledVehicleReferenceInput) == 0x000000, "Member 'VehicleAI_AdvancedPathfinding_SetRequiredProperties::WheeledVehicleReferenceInput' has a wrong offset!");
static_assert(offsetof(VehicleAI_AdvancedPathfinding_SetRequiredProperties, LeftSensorInput) == 0x000008, "Member 'VehicleAI_AdvancedPathfinding_SetRequiredProperties::LeftSensorInput' has a wrong offset!");
static_assert(offsetof(VehicleAI_AdvancedPathfinding_SetRequiredProperties, CentralSensorInput) == 0x000010, "Member 'VehicleAI_AdvancedPathfinding_SetRequiredProperties::CentralSensorInput' has a wrong offset!");
static_assert(offsetof(VehicleAI_AdvancedPathfinding_SetRequiredProperties, RightSensorInput) == 0x000018, "Member 'VehicleAI_AdvancedPathfinding_SetRequiredProperties::RightSensorInput' has a wrong offset!");
static_assert(offsetof(VehicleAI_AdvancedPathfinding_SetRequiredProperties, ActorInput) == 0x000020, "Member 'VehicleAI_AdvancedPathfinding_SetRequiredProperties::ActorInput' has a wrong offset!");
static_assert(offsetof(VehicleAI_AdvancedPathfinding_SetRequiredProperties, WaypointsInput) == 0x000028, "Member 'VehicleAI_AdvancedPathfinding_SetRequiredProperties::WaypointsInput' has a wrong offset!");

// Function BlueMan_VehicleAI.VehicleAIModule_DeathMatch.GetAllRuntimeData
// 0x0020 (0x0020 - 0x0000)
struct VehicleAIModule_DeathMatch_GetAllRuntimeData final
{
public:
	float                                         ThrottleOutputData;                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SteeringOutputData;                                // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WaypointLocationData;                              // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InReverseData;                                     // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SteeringAngleData;                                 // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsVehicleAIModuleEnabledData;                      // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VehicleAIModule_DeathMatch_GetAllRuntimeData) == 0x000004, "Wrong alignment on VehicleAIModule_DeathMatch_GetAllRuntimeData");
static_assert(sizeof(VehicleAIModule_DeathMatch_GetAllRuntimeData) == 0x000020, "Wrong size on VehicleAIModule_DeathMatch_GetAllRuntimeData");
static_assert(offsetof(VehicleAIModule_DeathMatch_GetAllRuntimeData, ThrottleOutputData) == 0x000000, "Member 'VehicleAIModule_DeathMatch_GetAllRuntimeData::ThrottleOutputData' has a wrong offset!");
static_assert(offsetof(VehicleAIModule_DeathMatch_GetAllRuntimeData, SteeringOutputData) == 0x000004, "Member 'VehicleAIModule_DeathMatch_GetAllRuntimeData::SteeringOutputData' has a wrong offset!");
static_assert(offsetof(VehicleAIModule_DeathMatch_GetAllRuntimeData, WaypointLocationData) == 0x000008, "Member 'VehicleAIModule_DeathMatch_GetAllRuntimeData::WaypointLocationData' has a wrong offset!");
static_assert(offsetof(VehicleAIModule_DeathMatch_GetAllRuntimeData, InReverseData) == 0x000014, "Member 'VehicleAIModule_DeathMatch_GetAllRuntimeData::InReverseData' has a wrong offset!");
static_assert(offsetof(VehicleAIModule_DeathMatch_GetAllRuntimeData, SteeringAngleData) == 0x000018, "Member 'VehicleAIModule_DeathMatch_GetAllRuntimeData::SteeringAngleData' has a wrong offset!");
static_assert(offsetof(VehicleAIModule_DeathMatch_GetAllRuntimeData, IsVehicleAIModuleEnabledData) == 0x00001C, "Member 'VehicleAIModule_DeathMatch_GetAllRuntimeData::IsVehicleAIModuleEnabledData' has a wrong offset!");

// Function BlueMan_VehicleAI.VehicleAIModule_DeathMatch.SetRequiredProperties
// 0x0040 (0x0040 - 0x0000)
struct VehicleAIModule_DeathMatch_SetRequiredProperties final
{
public:
	class AActor*                                 ActorInput;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AWheeledVehicle*                        VehicleMovementComponentInput;                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ArrayOfActorsUsedAsWaypointsInput;                 // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class UArrowComponent*                        ArrowComponentInput;                               // 0x0020(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseHealthSystem;                                   // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ArrayOfActorsUsedAsHealthPickupsInput;             // 0x0030(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleAIModule_DeathMatch_SetRequiredProperties) == 0x000008, "Wrong alignment on VehicleAIModule_DeathMatch_SetRequiredProperties");
static_assert(sizeof(VehicleAIModule_DeathMatch_SetRequiredProperties) == 0x000040, "Wrong size on VehicleAIModule_DeathMatch_SetRequiredProperties");
static_assert(offsetof(VehicleAIModule_DeathMatch_SetRequiredProperties, ActorInput) == 0x000000, "Member 'VehicleAIModule_DeathMatch_SetRequiredProperties::ActorInput' has a wrong offset!");
static_assert(offsetof(VehicleAIModule_DeathMatch_SetRequiredProperties, VehicleMovementComponentInput) == 0x000008, "Member 'VehicleAIModule_DeathMatch_SetRequiredProperties::VehicleMovementComponentInput' has a wrong offset!");
static_assert(offsetof(VehicleAIModule_DeathMatch_SetRequiredProperties, ArrayOfActorsUsedAsWaypointsInput) == 0x000010, "Member 'VehicleAIModule_DeathMatch_SetRequiredProperties::ArrayOfActorsUsedAsWaypointsInput' has a wrong offset!");
static_assert(offsetof(VehicleAIModule_DeathMatch_SetRequiredProperties, ArrowComponentInput) == 0x000020, "Member 'VehicleAIModule_DeathMatch_SetRequiredProperties::ArrowComponentInput' has a wrong offset!");
static_assert(offsetof(VehicleAIModule_DeathMatch_SetRequiredProperties, UseHealthSystem) == 0x000028, "Member 'VehicleAIModule_DeathMatch_SetRequiredProperties::UseHealthSystem' has a wrong offset!");
static_assert(offsetof(VehicleAIModule_DeathMatch_SetRequiredProperties, ArrayOfActorsUsedAsHealthPickupsInput) == 0x000030, "Member 'VehicleAIModule_DeathMatch_SetRequiredProperties::ArrayOfActorsUsedAsHealthPickupsInput' has a wrong offset!");

// Function BlueMan_VehicleAI.VehicleAIModule_Racing.GetAllRuntimeData
// 0x0038 (0x0038 - 0x0000)
struct VehicleAIModule_Racing_GetAllRuntimeData final
{
public:
	float                                         ThrottleOutputData;                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SteeringOutputData;                                // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsVehicleAIModuleEnabledData;                      // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GoInReverseData;                                   // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SteeringAngleData;                                 // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AvoidanceSteeringLevelData;                        // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARacingAI_Waypoint*                     CurrentWaypointData;                               // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 WaypointData;                                      // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeftSensorAlphaData;                               // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightSensorAlphaData;                              // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CentralSensorAlphaData;                            // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCurrentWaypointDataValid;                        // 0x0034(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsWaypointDataValid;                               // 0x0035(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VehicleAIModule_Racing_GetAllRuntimeData) == 0x000008, "Wrong alignment on VehicleAIModule_Racing_GetAllRuntimeData");
static_assert(sizeof(VehicleAIModule_Racing_GetAllRuntimeData) == 0x000038, "Wrong size on VehicleAIModule_Racing_GetAllRuntimeData");
static_assert(offsetof(VehicleAIModule_Racing_GetAllRuntimeData, ThrottleOutputData) == 0x000000, "Member 'VehicleAIModule_Racing_GetAllRuntimeData::ThrottleOutputData' has a wrong offset!");
static_assert(offsetof(VehicleAIModule_Racing_GetAllRuntimeData, SteeringOutputData) == 0x000004, "Member 'VehicleAIModule_Racing_GetAllRuntimeData::SteeringOutputData' has a wrong offset!");
static_assert(offsetof(VehicleAIModule_Racing_GetAllRuntimeData, IsVehicleAIModuleEnabledData) == 0x000008, "Member 'VehicleAIModule_Racing_GetAllRuntimeData::IsVehicleAIModuleEnabledData' has a wrong offset!");
static_assert(offsetof(VehicleAIModule_Racing_GetAllRuntimeData, GoInReverseData) == 0x000009, "Member 'VehicleAIModule_Racing_GetAllRuntimeData::GoInReverseData' has a wrong offset!");
static_assert(offsetof(VehicleAIModule_Racing_GetAllRuntimeData, SteeringAngleData) == 0x00000C, "Member 'VehicleAIModule_Racing_GetAllRuntimeData::SteeringAngleData' has a wrong offset!");
static_assert(offsetof(VehicleAIModule_Racing_GetAllRuntimeData, AvoidanceSteeringLevelData) == 0x000010, "Member 'VehicleAIModule_Racing_GetAllRuntimeData::AvoidanceSteeringLevelData' has a wrong offset!");
static_assert(offsetof(VehicleAIModule_Racing_GetAllRuntimeData, CurrentWaypointData) == 0x000018, "Member 'VehicleAIModule_Racing_GetAllRuntimeData::CurrentWaypointData' has a wrong offset!");
static_assert(offsetof(VehicleAIModule_Racing_GetAllRuntimeData, WaypointData) == 0x000020, "Member 'VehicleAIModule_Racing_GetAllRuntimeData::WaypointData' has a wrong offset!");
static_assert(offsetof(VehicleAIModule_Racing_GetAllRuntimeData, LeftSensorAlphaData) == 0x000028, "Member 'VehicleAIModule_Racing_GetAllRuntimeData::LeftSensorAlphaData' has a wrong offset!");
static_assert(offsetof(VehicleAIModule_Racing_GetAllRuntimeData, RightSensorAlphaData) == 0x00002C, "Member 'VehicleAIModule_Racing_GetAllRuntimeData::RightSensorAlphaData' has a wrong offset!");
static_assert(offsetof(VehicleAIModule_Racing_GetAllRuntimeData, CentralSensorAlphaData) == 0x000030, "Member 'VehicleAIModule_Racing_GetAllRuntimeData::CentralSensorAlphaData' has a wrong offset!");
static_assert(offsetof(VehicleAIModule_Racing_GetAllRuntimeData, IsCurrentWaypointDataValid) == 0x000034, "Member 'VehicleAIModule_Racing_GetAllRuntimeData::IsCurrentWaypointDataValid' has a wrong offset!");
static_assert(offsetof(VehicleAIModule_Racing_GetAllRuntimeData, IsWaypointDataValid) == 0x000035, "Member 'VehicleAIModule_Racing_GetAllRuntimeData::IsWaypointDataValid' has a wrong offset!");

// Function BlueMan_VehicleAI.VehicleAIModule_Racing.SetNextWaypoint
// 0x0008 (0x0008 - 0x0000)
struct VehicleAIModule_Racing_SetNextWaypoint final
{
public:
	class ARacingAI_Waypoint*                     NextWaypointActor;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleAIModule_Racing_SetNextWaypoint) == 0x000008, "Wrong alignment on VehicleAIModule_Racing_SetNextWaypoint");
static_assert(sizeof(VehicleAIModule_Racing_SetNextWaypoint) == 0x000008, "Wrong size on VehicleAIModule_Racing_SetNextWaypoint");
static_assert(offsetof(VehicleAIModule_Racing_SetNextWaypoint, NextWaypointActor) == 0x000000, "Member 'VehicleAIModule_Racing_SetNextWaypoint::NextWaypointActor' has a wrong offset!");

// Function BlueMan_VehicleAI.VehicleAIModule_Racing.SetRequiredProperties
// 0x0028 (0x0028 - 0x0000)
struct VehicleAIModule_Racing_SetRequiredProperties final
{
public:
	class UArrowComponent*                        RightSensorArrowInput;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UArrowComponent*                        CentralSensorArrowInput;                           // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UArrowComponent*                        LeftSensorArrowInput;                              // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AWheeledVehicle*                        WheeledVehicleReferenceInput;                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ActorInput;                                        // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleAIModule_Racing_SetRequiredProperties) == 0x000008, "Wrong alignment on VehicleAIModule_Racing_SetRequiredProperties");
static_assert(sizeof(VehicleAIModule_Racing_SetRequiredProperties) == 0x000028, "Wrong size on VehicleAIModule_Racing_SetRequiredProperties");
static_assert(offsetof(VehicleAIModule_Racing_SetRequiredProperties, RightSensorArrowInput) == 0x000000, "Member 'VehicleAIModule_Racing_SetRequiredProperties::RightSensorArrowInput' has a wrong offset!");
static_assert(offsetof(VehicleAIModule_Racing_SetRequiredProperties, CentralSensorArrowInput) == 0x000008, "Member 'VehicleAIModule_Racing_SetRequiredProperties::CentralSensorArrowInput' has a wrong offset!");
static_assert(offsetof(VehicleAIModule_Racing_SetRequiredProperties, LeftSensorArrowInput) == 0x000010, "Member 'VehicleAIModule_Racing_SetRequiredProperties::LeftSensorArrowInput' has a wrong offset!");
static_assert(offsetof(VehicleAIModule_Racing_SetRequiredProperties, WheeledVehicleReferenceInput) == 0x000018, "Member 'VehicleAIModule_Racing_SetRequiredProperties::WheeledVehicleReferenceInput' has a wrong offset!");
static_assert(offsetof(VehicleAIModule_Racing_SetRequiredProperties, ActorInput) == 0x000020, "Member 'VehicleAIModule_Racing_SetRequiredProperties::ActorInput' has a wrong offset!");

}

