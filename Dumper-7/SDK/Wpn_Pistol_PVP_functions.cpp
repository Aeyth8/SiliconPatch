#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Wpn_Pistol_PVP

#include "Basic.hpp"

#include "Wpn_Pistol_PVP_classes.hpp"
#include "Wpn_Pistol_PVP_parameters.hpp"


namespace SDK
{

// Function Wpn_Pistol_PVP.Wpn_Pistol_PVP_C.ExecuteUbergraph_Wpn_Pistol_PVP
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AWpn_Pistol_PVP_C::ExecuteUbergraph_Wpn_Pistol_PVP(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Wpn_Pistol_PVP_C", "ExecuteUbergraph_Wpn_Pistol_PVP");

	Params::Wpn_Pistol_PVP_C_ExecuteUbergraph_Wpn_Pistol_PVP Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Wpn_Pistol_PVP.Wpn_Pistol_PVP_C.FirstTutorial
// (BlueprintCallable, BlueprintEvent)

void AWpn_Pistol_PVP_C::FirstTutorial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Wpn_Pistol_PVP_C", "FirstTutorial");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Wpn_Pistol_PVP.Wpn_Pistol_PVP_C.DoOnInsertClip
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AWpn_Clip_C*                      Clip_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsDelay                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AWpn_Pistol_PVP_C::DoOnInsertClip(class AWpn_Clip_C* Clip_0, bool IsDelay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Wpn_Pistol_PVP_C", "DoOnInsertClip");

	Params::Wpn_Pistol_PVP_C_DoOnInsertClip Parms{};

	Parms.Clip_0 = Clip_0;
	Parms.IsDelay = IsDelay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Wpn_Pistol_PVP.Wpn_Pistol_PVP_C.ChangeAnimState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EWState                                 CurState                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NewValue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AWpn_Pistol_PVP_C::ChangeAnimState(EWState CurState, bool NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Wpn_Pistol_PVP_C", "ChangeAnimState");

	Params::Wpn_Pistol_PVP_C_ChangeAnimState Parms{};

	Parms.CurState = CurState;
	Parms.NewValue = NewValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Wpn_Pistol_PVP.Wpn_Pistol_PVP_C.Evt_PullTrigger
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void AWpn_Pistol_PVP_C::Evt_PullTrigger()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Wpn_Pistol_PVP_C", "Evt_PullTrigger");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Wpn_Pistol_PVP.Wpn_Pistol_PVP_C.Evt_ClipEmpty
// (BlueprintCallable, BlueprintEvent)

void AWpn_Pistol_PVP_C::Evt_ClipEmpty()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Wpn_Pistol_PVP_C", "Evt_ClipEmpty");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Wpn_Pistol_PVP.Wpn_Pistol_PVP_C.Evt_StopFire
// (BlueprintCallable, BlueprintEvent)

void AWpn_Pistol_PVP_C::Evt_StopFire()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Wpn_Pistol_PVP_C", "Evt_StopFire");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Wpn_Pistol_PVP.Wpn_Pistol_PVP_C.OnLineTriggerPull
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsFromRightHand                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class AActor*                           hand                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AWpn_Pistol_PVP_C::OnLineTriggerPull(bool IsFromRightHand, class AActor* hand)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Wpn_Pistol_PVP_C", "OnLineTriggerPull");

	Params::Wpn_Pistol_PVP_C_OnLineTriggerPull Parms{};

	Parms.IsFromRightHand = IsFromRightHand;
	Parms.hand = hand;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Wpn_Pistol_PVP.Wpn_Pistol_PVP_C.Evt_Fire
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void AWpn_Pistol_PVP_C::Evt_Fire()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Wpn_Pistol_PVP_C", "Evt_Fire");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Wpn_Pistol_PVP.Wpn_Pistol_PVP_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AWpn_Pistol_PVP_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Wpn_Pistol_PVP_C", "ReceiveTick");

	Params::Wpn_Pistol_PVP_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Wpn_Pistol_PVP.Wpn_Pistol_PVP_C.Evt_Reload
// (BlueprintCallable, BlueprintEvent)

void AWpn_Pistol_PVP_C::Evt_Reload()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Wpn_Pistol_PVP_C", "Evt_Reload");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Wpn_Pistol_PVP.Wpn_Pistol_PVP_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AWpn_Pistol_PVP_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Wpn_Pistol_PVP_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Wpn_Pistol_PVP.Wpn_Pistol_PVP_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AWpn_Pistol_PVP_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Wpn_Pistol_PVP_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}

}

