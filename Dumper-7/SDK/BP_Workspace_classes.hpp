#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Workspace

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Workspace.BP_Workspace_C
// 0x0068 (0x0390 - 0x0328)
class ABP_Workspace_C final : public AActor
{
public:
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Extent;                                            // 0x0330(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         CurrentWorkers;                                    // 0x033C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         WorkerLimit;                                       // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_344[0x4];                                      // 0x0344(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ACharacter*>                     WorkersArray;                                      // 0x0348(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class UAnimMontage*>                   Animations;                                        // 0x0358(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn)
	TArray<struct FTransform>                     SlotTransforms;                                    // 0x0368(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn)
	float                                         WorkDuration;                                      // 0x0378(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         RandomDeviation;                                   // 0x037C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UCapsuleComponent*>              SlotsArray;                                        // 0x0380(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)

public:
	void UserConstructionScript();
	void HasAvailableSlot(bool* Available);
	void TakeSlot(class ACharacter* WorkerRef, struct FVector* SlotLocation, float* Duration);
	void PlayWorkerInSlot(class ACharacter* WorkerRef, bool* WorkSuccess);
	void GetRandomAnimation(class UAnimMontage** RandAnim);
	void RemoveFromSlot(class ACharacter* WorkerRef);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Workspace_C">();
	}
	static class ABP_Workspace_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Workspace_C>();
	}
};
static_assert(alignof(ABP_Workspace_C) == 0x000008, "Wrong alignment on ABP_Workspace_C");
static_assert(sizeof(ABP_Workspace_C) == 0x000390, "Wrong size on ABP_Workspace_C");
static_assert(offsetof(ABP_Workspace_C, DefaultSceneRoot) == 0x000328, "Member 'ABP_Workspace_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Workspace_C, Extent) == 0x000330, "Member 'ABP_Workspace_C::Extent' has a wrong offset!");
static_assert(offsetof(ABP_Workspace_C, CurrentWorkers) == 0x00033C, "Member 'ABP_Workspace_C::CurrentWorkers' has a wrong offset!");
static_assert(offsetof(ABP_Workspace_C, WorkerLimit) == 0x000340, "Member 'ABP_Workspace_C::WorkerLimit' has a wrong offset!");
static_assert(offsetof(ABP_Workspace_C, WorkersArray) == 0x000348, "Member 'ABP_Workspace_C::WorkersArray' has a wrong offset!");
static_assert(offsetof(ABP_Workspace_C, Animations) == 0x000358, "Member 'ABP_Workspace_C::Animations' has a wrong offset!");
static_assert(offsetof(ABP_Workspace_C, SlotTransforms) == 0x000368, "Member 'ABP_Workspace_C::SlotTransforms' has a wrong offset!");
static_assert(offsetof(ABP_Workspace_C, WorkDuration) == 0x000378, "Member 'ABP_Workspace_C::WorkDuration' has a wrong offset!");
static_assert(offsetof(ABP_Workspace_C, RandomDeviation) == 0x00037C, "Member 'ABP_Workspace_C::RandomDeviation' has a wrong offset!");
static_assert(offsetof(ABP_Workspace_C, SlotsArray) == 0x000380, "Member 'ABP_Workspace_C::SlotsArray' has a wrong offset!");

}

