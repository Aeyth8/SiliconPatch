#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FunctionLibrary

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function FunctionLibrary.FunctionLibrary_C.Distance Between Actors
// 0x0048 (0x0048 - 0x0000)
struct FunctionLibrary_C_Distance_Between_Actors final
{
public:
	class AActor*                                 Actor1;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor2;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Distance;                                          // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue1;         // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FunctionLibrary_C_Distance_Between_Actors) == 0x000008, "Wrong alignment on FunctionLibrary_C_Distance_Between_Actors");
static_assert(sizeof(FunctionLibrary_C_Distance_Between_Actors) == 0x000048, "Wrong size on FunctionLibrary_C_Distance_Between_Actors");
static_assert(offsetof(FunctionLibrary_C_Distance_Between_Actors, Actor1) == 0x000000, "Member 'FunctionLibrary_C_Distance_Between_Actors::Actor1' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_Distance_Between_Actors, Actor2) == 0x000008, "Member 'FunctionLibrary_C_Distance_Between_Actors::Actor2' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_Distance_Between_Actors, __WorldContext) == 0x000010, "Member 'FunctionLibrary_C_Distance_Between_Actors::__WorldContext' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_Distance_Between_Actors, Distance) == 0x000018, "Member 'FunctionLibrary_C_Distance_Between_Actors::Distance' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_Distance_Between_Actors, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00001C, "Member 'FunctionLibrary_C_Distance_Between_Actors::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_Distance_Between_Actors, CallFunc_K2_GetActorLocation_ReturnValue1) == 0x000028, "Member 'FunctionLibrary_C_Distance_Between_Actors::CallFunc_K2_GetActorLocation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_Distance_Between_Actors, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000034, "Member 'FunctionLibrary_C_Distance_Between_Actors::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_Distance_Between_Actors, CallFunc_VSize_ReturnValue) == 0x000040, "Member 'FunctionLibrary_C_Distance_Between_Actors::CallFunc_VSize_ReturnValue' has a wrong offset!");

// Function FunctionLibrary.FunctionLibrary_C.Distance Between Locations
// 0x0038 (0x0038 - 0x0000)
struct FunctionLibrary_C_Distance_Between_Locations final
{
public:
	struct FVector                                Loc1;                                              // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Loc2;                                              // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Distance;                                          // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FunctionLibrary_C_Distance_Between_Locations) == 0x000008, "Wrong alignment on FunctionLibrary_C_Distance_Between_Locations");
static_assert(sizeof(FunctionLibrary_C_Distance_Between_Locations) == 0x000038, "Wrong size on FunctionLibrary_C_Distance_Between_Locations");
static_assert(offsetof(FunctionLibrary_C_Distance_Between_Locations, Loc1) == 0x000000, "Member 'FunctionLibrary_C_Distance_Between_Locations::Loc1' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_Distance_Between_Locations, Loc2) == 0x00000C, "Member 'FunctionLibrary_C_Distance_Between_Locations::Loc2' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_Distance_Between_Locations, __WorldContext) == 0x000018, "Member 'FunctionLibrary_C_Distance_Between_Locations::__WorldContext' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_Distance_Between_Locations, Distance) == 0x000020, "Member 'FunctionLibrary_C_Distance_Between_Locations::Distance' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_Distance_Between_Locations, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000024, "Member 'FunctionLibrary_C_Distance_Between_Locations::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_Distance_Between_Locations, CallFunc_VSize_ReturnValue) == 0x000030, "Member 'FunctionLibrary_C_Distance_Between_Locations::CallFunc_VSize_ReturnValue' has a wrong offset!");

// Function FunctionLibrary.FunctionLibrary_C.FloatIsInRange
// 0x0020 (0x0020 - 0x0000)
struct FunctionLibrary_C_FloatIsInRange final
{
public:
	float                                         Number;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RangeMin;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RangeMax;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInRange;                                         // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FunctionLibrary_C_FloatIsInRange) == 0x000008, "Wrong alignment on FunctionLibrary_C_FloatIsInRange");
static_assert(sizeof(FunctionLibrary_C_FloatIsInRange) == 0x000020, "Wrong size on FunctionLibrary_C_FloatIsInRange");
static_assert(offsetof(FunctionLibrary_C_FloatIsInRange, Number) == 0x000000, "Member 'FunctionLibrary_C_FloatIsInRange::Number' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_FloatIsInRange, RangeMin) == 0x000004, "Member 'FunctionLibrary_C_FloatIsInRange::RangeMin' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_FloatIsInRange, RangeMax) == 0x000008, "Member 'FunctionLibrary_C_FloatIsInRange::RangeMax' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_FloatIsInRange, __WorldContext) == 0x000010, "Member 'FunctionLibrary_C_FloatIsInRange::__WorldContext' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_FloatIsInRange, IsInRange) == 0x000018, "Member 'FunctionLibrary_C_FloatIsInRange::IsInRange' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_FloatIsInRange, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000019, "Member 'FunctionLibrary_C_FloatIsInRange::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_FloatIsInRange, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x00001A, "Member 'FunctionLibrary_C_FloatIsInRange::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_FloatIsInRange, CallFunc_BooleanAND_ReturnValue) == 0x00001B, "Member 'FunctionLibrary_C_FloatIsInRange::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function FunctionLibrary.FunctionLibrary_C.ProjectLocationOnSphere
// 0x0068 (0x0068 - 0x0000)
struct FunctionLibrary_C_ProjectLocationOnSphere final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SphereCenter;                                      // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SphereRadius;                                      // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LocationOnSphere;                                  // 0x0028(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FunctionLibrary_C_ProjectLocationOnSphere) == 0x000008, "Wrong alignment on FunctionLibrary_C_ProjectLocationOnSphere");
static_assert(sizeof(FunctionLibrary_C_ProjectLocationOnSphere) == 0x000068, "Wrong size on FunctionLibrary_C_ProjectLocationOnSphere");
static_assert(offsetof(FunctionLibrary_C_ProjectLocationOnSphere, Location) == 0x000000, "Member 'FunctionLibrary_C_ProjectLocationOnSphere::Location' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_ProjectLocationOnSphere, SphereCenter) == 0x00000C, "Member 'FunctionLibrary_C_ProjectLocationOnSphere::SphereCenter' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_ProjectLocationOnSphere, SphereRadius) == 0x000018, "Member 'FunctionLibrary_C_ProjectLocationOnSphere::SphereRadius' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_ProjectLocationOnSphere, __WorldContext) == 0x000020, "Member 'FunctionLibrary_C_ProjectLocationOnSphere::__WorldContext' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_ProjectLocationOnSphere, LocationOnSphere) == 0x000028, "Member 'FunctionLibrary_C_ProjectLocationOnSphere::LocationOnSphere' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_ProjectLocationOnSphere, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000034, "Member 'FunctionLibrary_C_ProjectLocationOnSphere::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_ProjectLocationOnSphere, CallFunc_Normal_ReturnValue) == 0x000040, "Member 'FunctionLibrary_C_ProjectLocationOnSphere::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_ProjectLocationOnSphere, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00004C, "Member 'FunctionLibrary_C_ProjectLocationOnSphere::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_ProjectLocationOnSphere, CallFunc_Add_VectorVector_ReturnValue) == 0x000058, "Member 'FunctionLibrary_C_ProjectLocationOnSphere::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");

// Function FunctionLibrary.FunctionLibrary_C.Distance Between Actors 2D
// 0x0050 (0x0050 - 0x0000)
struct FunctionLibrary_C_Distance_Between_Actors_2D final
{
public:
	class AActor*                                 Actor1;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor2;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Distance;                                          // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue1;         // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Conv_VectorToVector2D_ReturnValue;        // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize2D_ReturnValue;                      // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FunctionLibrary_C_Distance_Between_Actors_2D) == 0x000008, "Wrong alignment on FunctionLibrary_C_Distance_Between_Actors_2D");
static_assert(sizeof(FunctionLibrary_C_Distance_Between_Actors_2D) == 0x000050, "Wrong size on FunctionLibrary_C_Distance_Between_Actors_2D");
static_assert(offsetof(FunctionLibrary_C_Distance_Between_Actors_2D, Actor1) == 0x000000, "Member 'FunctionLibrary_C_Distance_Between_Actors_2D::Actor1' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_Distance_Between_Actors_2D, Actor2) == 0x000008, "Member 'FunctionLibrary_C_Distance_Between_Actors_2D::Actor2' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_Distance_Between_Actors_2D, __WorldContext) == 0x000010, "Member 'FunctionLibrary_C_Distance_Between_Actors_2D::__WorldContext' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_Distance_Between_Actors_2D, Distance) == 0x000018, "Member 'FunctionLibrary_C_Distance_Between_Actors_2D::Distance' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_Distance_Between_Actors_2D, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00001C, "Member 'FunctionLibrary_C_Distance_Between_Actors_2D::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_Distance_Between_Actors_2D, CallFunc_K2_GetActorLocation_ReturnValue1) == 0x000028, "Member 'FunctionLibrary_C_Distance_Between_Actors_2D::CallFunc_K2_GetActorLocation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_Distance_Between_Actors_2D, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000034, "Member 'FunctionLibrary_C_Distance_Between_Actors_2D::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_Distance_Between_Actors_2D, CallFunc_Conv_VectorToVector2D_ReturnValue) == 0x000040, "Member 'FunctionLibrary_C_Distance_Between_Actors_2D::CallFunc_Conv_VectorToVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_Distance_Between_Actors_2D, CallFunc_VSize2D_ReturnValue) == 0x000048, "Member 'FunctionLibrary_C_Distance_Between_Actors_2D::CallFunc_VSize2D_ReturnValue' has a wrong offset!");

// Function FunctionLibrary.FunctionLibrary_C.Distance Between Locations 2D
// 0x0040 (0x0040 - 0x0000)
struct FunctionLibrary_C_Distance_Between_Locations_2D final
{
public:
	struct FVector                                Loc1;                                              // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Loc2;                                              // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Distance;                                          // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Conv_VectorToVector2D_ReturnValue;        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize2D_ReturnValue;                      // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FunctionLibrary_C_Distance_Between_Locations_2D) == 0x000008, "Wrong alignment on FunctionLibrary_C_Distance_Between_Locations_2D");
static_assert(sizeof(FunctionLibrary_C_Distance_Between_Locations_2D) == 0x000040, "Wrong size on FunctionLibrary_C_Distance_Between_Locations_2D");
static_assert(offsetof(FunctionLibrary_C_Distance_Between_Locations_2D, Loc1) == 0x000000, "Member 'FunctionLibrary_C_Distance_Between_Locations_2D::Loc1' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_Distance_Between_Locations_2D, Loc2) == 0x00000C, "Member 'FunctionLibrary_C_Distance_Between_Locations_2D::Loc2' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_Distance_Between_Locations_2D, __WorldContext) == 0x000018, "Member 'FunctionLibrary_C_Distance_Between_Locations_2D::__WorldContext' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_Distance_Between_Locations_2D, Distance) == 0x000020, "Member 'FunctionLibrary_C_Distance_Between_Locations_2D::Distance' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_Distance_Between_Locations_2D, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000024, "Member 'FunctionLibrary_C_Distance_Between_Locations_2D::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_Distance_Between_Locations_2D, CallFunc_Conv_VectorToVector2D_ReturnValue) == 0x000030, "Member 'FunctionLibrary_C_Distance_Between_Locations_2D::CallFunc_Conv_VectorToVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_Distance_Between_Locations_2D, CallFunc_VSize2D_ReturnValue) == 0x000038, "Member 'FunctionLibrary_C_Distance_Between_Locations_2D::CallFunc_VSize2D_ReturnValue' has a wrong offset!");

// Function FunctionLibrary.FunctionLibrary_C.NegateFloatRandom
// 0x0020 (0x0020 - 0x0000)
struct FunctionLibrary_C_NegateFloatRandom final
{
public:
	float                                         In;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Out;                                               // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RandomBool_ReturnValue;                   // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FunctionLibrary_C_NegateFloatRandom) == 0x000008, "Wrong alignment on FunctionLibrary_C_NegateFloatRandom");
static_assert(sizeof(FunctionLibrary_C_NegateFloatRandom) == 0x000020, "Wrong size on FunctionLibrary_C_NegateFloatRandom");
static_assert(offsetof(FunctionLibrary_C_NegateFloatRandom, In) == 0x000000, "Member 'FunctionLibrary_C_NegateFloatRandom::In' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_NegateFloatRandom, __WorldContext) == 0x000008, "Member 'FunctionLibrary_C_NegateFloatRandom::__WorldContext' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_NegateFloatRandom, Out) == 0x000010, "Member 'FunctionLibrary_C_NegateFloatRandom::Out' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_NegateFloatRandom, CallFunc_RandomBool_ReturnValue) == 0x000014, "Member 'FunctionLibrary_C_NegateFloatRandom::CallFunc_RandomBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_NegateFloatRandom, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000018, "Member 'FunctionLibrary_C_NegateFloatRandom::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_NegateFloatRandom, CallFunc_SelectFloat_ReturnValue) == 0x00001C, "Member 'FunctionLibrary_C_NegateFloatRandom::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");

// Function FunctionLibrary.FunctionLibrary_C.RotateAngleShortPath
// 0x00A8 (0x00A8 - 0x0000)
struct FunctionLibrary_C_RotateAngleShortPath final
{
public:
	float                                         CurrentAngle;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetAngle;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaTime;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ResultAngle;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RightTarget;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RightCurrent;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Result;                                            // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BehindMe;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoveDir;                                           // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue1;                 // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue;       // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_RLerp_ReturnValue;                        // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll1;                       // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch1;                      // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw1;                        // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RLerp_ReturnValue1;                       // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll2;                       // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch2;                      // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw2;                        // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FunctionLibrary_C_RotateAngleShortPath) == 0x000008, "Wrong alignment on FunctionLibrary_C_RotateAngleShortPath");
static_assert(sizeof(FunctionLibrary_C_RotateAngleShortPath) == 0x0000A8, "Wrong size on FunctionLibrary_C_RotateAngleShortPath");
static_assert(offsetof(FunctionLibrary_C_RotateAngleShortPath, CurrentAngle) == 0x000000, "Member 'FunctionLibrary_C_RotateAngleShortPath::CurrentAngle' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_RotateAngleShortPath, TargetAngle) == 0x000004, "Member 'FunctionLibrary_C_RotateAngleShortPath::TargetAngle' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_RotateAngleShortPath, Speed) == 0x000008, "Member 'FunctionLibrary_C_RotateAngleShortPath::Speed' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_RotateAngleShortPath, DeltaTime) == 0x00000C, "Member 'FunctionLibrary_C_RotateAngleShortPath::DeltaTime' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_RotateAngleShortPath, __WorldContext) == 0x000010, "Member 'FunctionLibrary_C_RotateAngleShortPath::__WorldContext' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_RotateAngleShortPath, ResultAngle) == 0x000018, "Member 'FunctionLibrary_C_RotateAngleShortPath::ResultAngle' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_RotateAngleShortPath, RightTarget) == 0x00001C, "Member 'FunctionLibrary_C_RotateAngleShortPath::RightTarget' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_RotateAngleShortPath, RightCurrent) == 0x000020, "Member 'FunctionLibrary_C_RotateAngleShortPath::RightCurrent' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_RotateAngleShortPath, Result) == 0x000024, "Member 'FunctionLibrary_C_RotateAngleShortPath::Result' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_RotateAngleShortPath, BehindMe) == 0x000028, "Member 'FunctionLibrary_C_RotateAngleShortPath::BehindMe' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_RotateAngleShortPath, MoveDir) == 0x00002C, "Member 'FunctionLibrary_C_RotateAngleShortPath::MoveDir' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_RotateAngleShortPath, CallFunc_MakeRotator_ReturnValue) == 0x000030, "Member 'FunctionLibrary_C_RotateAngleShortPath::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_RotateAngleShortPath, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00003C, "Member 'FunctionLibrary_C_RotateAngleShortPath::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_RotateAngleShortPath, CallFunc_MakeRotator_ReturnValue1) == 0x000040, "Member 'FunctionLibrary_C_RotateAngleShortPath::CallFunc_MakeRotator_ReturnValue1' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_RotateAngleShortPath, CallFunc_NormalizedDeltaRotator_ReturnValue) == 0x00004C, "Member 'FunctionLibrary_C_RotateAngleShortPath::CallFunc_NormalizedDeltaRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_RotateAngleShortPath, CallFunc_RLerp_ReturnValue) == 0x000058, "Member 'FunctionLibrary_C_RotateAngleShortPath::CallFunc_RLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_RotateAngleShortPath, CallFunc_BreakRotator_Roll) == 0x000064, "Member 'FunctionLibrary_C_RotateAngleShortPath::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_RotateAngleShortPath, CallFunc_BreakRotator_Pitch) == 0x000068, "Member 'FunctionLibrary_C_RotateAngleShortPath::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_RotateAngleShortPath, CallFunc_BreakRotator_Yaw) == 0x00006C, "Member 'FunctionLibrary_C_RotateAngleShortPath::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_RotateAngleShortPath, CallFunc_BreakRotator_Roll1) == 0x000070, "Member 'FunctionLibrary_C_RotateAngleShortPath::CallFunc_BreakRotator_Roll1' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_RotateAngleShortPath, CallFunc_BreakRotator_Pitch1) == 0x000074, "Member 'FunctionLibrary_C_RotateAngleShortPath::CallFunc_BreakRotator_Pitch1' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_RotateAngleShortPath, CallFunc_BreakRotator_Yaw1) == 0x000078, "Member 'FunctionLibrary_C_RotateAngleShortPath::CallFunc_BreakRotator_Yaw1' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_RotateAngleShortPath, CallFunc_Abs_ReturnValue) == 0x00007C, "Member 'FunctionLibrary_C_RotateAngleShortPath::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_RotateAngleShortPath, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000080, "Member 'FunctionLibrary_C_RotateAngleShortPath::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_RotateAngleShortPath, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000084, "Member 'FunctionLibrary_C_RotateAngleShortPath::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_RotateAngleShortPath, CallFunc_FClamp_ReturnValue) == 0x000088, "Member 'FunctionLibrary_C_RotateAngleShortPath::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_RotateAngleShortPath, CallFunc_RLerp_ReturnValue1) == 0x00008C, "Member 'FunctionLibrary_C_RotateAngleShortPath::CallFunc_RLerp_ReturnValue1' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_RotateAngleShortPath, CallFunc_BreakRotator_Roll2) == 0x000098, "Member 'FunctionLibrary_C_RotateAngleShortPath::CallFunc_BreakRotator_Roll2' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_RotateAngleShortPath, CallFunc_BreakRotator_Pitch2) == 0x00009C, "Member 'FunctionLibrary_C_RotateAngleShortPath::CallFunc_BreakRotator_Pitch2' has a wrong offset!");
static_assert(offsetof(FunctionLibrary_C_RotateAngleShortPath, CallFunc_BreakRotator_Yaw2) == 0x0000A0, "Member 'FunctionLibrary_C_RotateAngleShortPath::CallFunc_BreakRotator_Yaw2' has a wrong offset!");

}

