#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AISpawner

#include "Basic.hpp"

#include "BP_AISpawner_classes.hpp"
#include "BP_AISpawner_parameters.hpp"


namespace SDK
{

// Function BP_AISpawner.BP_AISpawner_C.ExecuteUbergraph_BP_AISpawner
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AISpawner_C::ExecuteUbergraph_BP_AISpawner(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_C", "ExecuteUbergraph_BP_AISpawner");

	Params::BP_AISpawner_C_ExecuteUbergraph_BP_AISpawner Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AISpawner.BP_AISpawner_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_AISpawner_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AISpawner.BP_AISpawner_C.InitSpawner
// (BlueprintCallable, BlueprintEvent)

void ABP_AISpawner_C::InitSpawner()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_C", "InitSpawner");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AISpawner.BP_AISpawner_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AISpawner_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_C", "ReceiveTick");

	Params::BP_AISpawner_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AISpawner.BP_AISpawner_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_AISpawner_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AISpawner.BP_AISpawner_C.GetSpawnCountLeft
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32*                                  CountLeft                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AISpawner_C::GetSpawnCountLeft(int32* CountLeft)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_C", "GetSpawnCountLeft");

	Params::BP_AISpawner_C_GetSpawnCountLeft Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CountLeft != nullptr)
		*CountLeft = Parms.CountLeft;
}


// Function BP_AISpawner.BP_AISpawner_C.IsWaitDelay
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AISpawner_C::IsWaitDelay(float DeltaTime, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_C", "IsWaitDelay");

	Params::BP_AISpawner_C_IsWaitDelay Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_AISpawner.BP_AISpawner_C.IsOtherSpawnerEmpty
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AISpawner_C::IsOtherSpawnerEmpty(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_C", "IsOtherSpawnerEmpty");

	Params::BP_AISpawner_C_IsOtherSpawnerEmpty Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_AISpawner.BP_AISpawner_C.IsPreviousDead
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AISpawner_C::IsPreviousDead(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_C", "IsPreviousDead");

	Params::BP_AISpawner_C_IsPreviousDead Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_AISpawner.BP_AISpawner_C.SpwanAI
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   RetryCount                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_NPC_Base_C**                  NPC                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AISpawner_C::SpwanAI(int32 RetryCount, class ABP_NPC_Base_C** NPC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_C", "SpwanAI");

	Params::BP_AISpawner_C_SpwanAI Parms{};

	Parms.RetryCount = RetryCount;

	UObject::ProcessEvent(Func, &Parms);

	if (NPC != nullptr)
		*NPC = Parms.NPC;
}


// Function BP_AISpawner.BP_AISpawner_C.IsActive
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   Active                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AISpawner_C::IsActive(bool* Active)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_C", "IsActive");

	Params::BP_AISpawner_C_IsActive Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Active != nullptr)
		*Active = Parms.Active;
}


// Function BP_AISpawner.BP_AISpawner_C.IsComplete
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   Complete                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AISpawner_C::IsComplete(bool* Complete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_C", "IsComplete");

	Params::BP_AISpawner_C_IsComplete Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Complete != nullptr)
		*Complete = Parms.Complete;
}


// Function BP_AISpawner.BP_AISpawner_C.ActiveMe
// (Protected, BlueprintCallable, BlueprintEvent)

void ABP_AISpawner_C::ActiveMe()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_C", "ActiveMe");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AISpawner.BP_AISpawner_C.IsAllDead
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   AllDead_0                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AISpawner_C::IsAllDead(bool* AllDead_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_C", "IsAllDead");

	Params::BP_AISpawner_C_IsAllDead Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AllDead_0 != nullptr)
		*AllDead_0 = Parms.AllDead_0;
}


// Function BP_AISpawner.BP_AISpawner_C.ResetMe
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AISpawner_C::ResetMe()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_C", "ResetMe");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AISpawner.BP_AISpawner_C.CheckGroupMembers
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AISpawner_C::CheckGroupMembers(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_C", "CheckGroupMembers");

	Params::BP_AISpawner_C_CheckGroupMembers Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_AISpawner.BP_AISpawner_C.KillAll
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AISpawner_C::KillAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AISpawner_C", "KillAll");

	UObject::ProcessEvent(Func, nullptr);
}

}

