#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTT_Caravoid

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BTT_Caravoid.BTT_CarAvoid_C.ExecuteUbergraph_BTT_CarAvoid
// 0x00E8 (0x00E8 - 0x0000)
struct BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetBlackboardValueAsVector_ReturnValue;   // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetBlackboardValueAsFloat_ReturnValue;    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          K2Node_Event_OwnerController;                      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn;                       // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AVehicle_MC_C*                          K2Node_DynamicCast_AsVehicle_MC;                   // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Lv3_BaseCar_C*                      K2Node_DynamicCast_AsBP_Lv_3_Base_Car;             // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector2D_X;                          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X1;                         // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y1;                         // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRightVector_ReturnValue;               // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A[0x2];                                       // 0x007A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Trace_Result;                             // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Trace_CurXRel;                            // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Trace_CurYRel;                            // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue1;         // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue2;         // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetBlackboardValueAsVector_ReturnValue1;  // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Trace_Result1;                            // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Trace_CurXRel1;                           // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Trace_CurYRel1;                           // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Trace_Result2;                            // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Trace_CurXRel2;                           // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Trace_CurYRel2;                           // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue3;         // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue4;         // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue5;         // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue6;         // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DD[0x3];                                       // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue7;         // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid) == 0x000008, "Wrong alignment on BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid");
static_assert(sizeof(BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid) == 0x0000E8, "Wrong size on BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid");
static_assert(offsetof(BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid, EntryPoint) == 0x000000, "Member 'BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid::EntryPoint' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid, CallFunc_GetBlackboardValueAsVector_ReturnValue) == 0x000004, "Member 'BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid::CallFunc_GetBlackboardValueAsVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid, CallFunc_GetBlackboardValueAsFloat_ReturnValue) == 0x000010, "Member 'BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid::CallFunc_GetBlackboardValueAsFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid, K2Node_Event_OwnerController) == 0x000018, "Member 'BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid::K2Node_Event_OwnerController' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid, K2Node_Event_ControlledPawn) == 0x000020, "Member 'BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid::K2Node_Event_ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000028, "Member 'BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid, K2Node_DynamicCast_AsVehicle_MC) == 0x000030, "Member 'BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid::K2Node_DynamicCast_AsVehicle_MC' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid, K2Node_DynamicCast_AsBP_Lv_3_Base_Car) == 0x000040, "Member 'BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid::K2Node_DynamicCast_AsBP_Lv_3_Base_Car' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid, K2Node_DynamicCast_bSuccess1) == 0x000048, "Member 'BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000049, "Member 'BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid, CallFunc_BreakVector2D_X) == 0x00004C, "Member 'BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid, CallFunc_BreakVector2D_Y) == 0x000050, "Member 'BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000054, "Member 'BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid, CallFunc_BreakVector2D_X1) == 0x000058, "Member 'BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid::CallFunc_BreakVector2D_X1' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid, CallFunc_BreakVector2D_Y1) == 0x00005C, "Member 'BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid::CallFunc_BreakVector2D_Y1' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid, CallFunc_GetRightVector_ReturnValue) == 0x000060, "Member 'BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid::CallFunc_GetRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00006C, "Member 'BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid, CallFunc_BooleanOR_ReturnValue) == 0x000078, "Member 'BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid, CallFunc_Greater_IntInt_ReturnValue) == 0x000079, "Member 'BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid, CallFunc_K2_GetActorRotation_ReturnValue) == 0x00007C, "Member 'BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid, CallFunc_GetForwardVector_ReturnValue) == 0x000088, "Member 'BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid, CallFunc_Trace_Result) == 0x000094, "Member 'BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid::CallFunc_Trace_Result' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid, CallFunc_Trace_CurXRel) == 0x000098, "Member 'BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid::CallFunc_Trace_CurXRel' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid, CallFunc_Trace_CurYRel) == 0x00009C, "Member 'BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid::CallFunc_Trace_CurYRel' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid, CallFunc_Subtract_FloatFloat_ReturnValue1) == 0x0000A0, "Member 'BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid::CallFunc_Subtract_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid, CallFunc_Subtract_FloatFloat_ReturnValue2) == 0x0000A4, "Member 'BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid::CallFunc_Subtract_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid, CallFunc_GetBlackboardValueAsVector_ReturnValue1) == 0x0000A8, "Member 'BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid::CallFunc_GetBlackboardValueAsVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid, CallFunc_Trace_Result1) == 0x0000B4, "Member 'BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid::CallFunc_Trace_Result1' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid, CallFunc_Trace_CurXRel1) == 0x0000B8, "Member 'BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid::CallFunc_Trace_CurXRel1' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid, CallFunc_Trace_CurYRel1) == 0x0000BC, "Member 'BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid::CallFunc_Trace_CurYRel1' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid, CallFunc_Trace_Result2) == 0x0000C0, "Member 'BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid::CallFunc_Trace_Result2' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid, CallFunc_Trace_CurXRel2) == 0x0000C4, "Member 'BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid::CallFunc_Trace_CurXRel2' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid, CallFunc_Trace_CurYRel2) == 0x0000C8, "Member 'BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid::CallFunc_Trace_CurYRel2' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid, CallFunc_Subtract_FloatFloat_ReturnValue3) == 0x0000CC, "Member 'BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid::CallFunc_Subtract_FloatFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid, CallFunc_Subtract_FloatFloat_ReturnValue4) == 0x0000D0, "Member 'BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid::CallFunc_Subtract_FloatFloat_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid, CallFunc_Subtract_FloatFloat_ReturnValue5) == 0x0000D4, "Member 'BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid::CallFunc_Subtract_FloatFloat_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid, CallFunc_Subtract_FloatFloat_ReturnValue6) == 0x0000D8, "Member 'BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid::CallFunc_Subtract_FloatFloat_ReturnValue6' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid, CallFunc_BooleanAND_ReturnValue) == 0x0000DC, "Member 'BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid, CallFunc_Add_FloatFloat_ReturnValue) == 0x0000E0, "Member 'BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid, CallFunc_Subtract_FloatFloat_ReturnValue7) == 0x0000E4, "Member 'BTT_CarAvoid_C_ExecuteUbergraph_BTT_CarAvoid::CallFunc_Subtract_FloatFloat_ReturnValue7' has a wrong offset!");

// Function BTT_Caravoid.BTT_CarAvoid_C.ReceiveExecuteAI
// 0x0010 (0x0010 - 0x0000)
struct BTT_CarAvoid_C_ReceiveExecuteAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_CarAvoid_C_ReceiveExecuteAI) == 0x000008, "Wrong alignment on BTT_CarAvoid_C_ReceiveExecuteAI");
static_assert(sizeof(BTT_CarAvoid_C_ReceiveExecuteAI) == 0x000010, "Wrong size on BTT_CarAvoid_C_ReceiveExecuteAI");
static_assert(offsetof(BTT_CarAvoid_C_ReceiveExecuteAI, OwnerController) == 0x000000, "Member 'BTT_CarAvoid_C_ReceiveExecuteAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_ReceiveExecuteAI, ControlledPawn) == 0x000008, "Member 'BTT_CarAvoid_C_ReceiveExecuteAI::ControlledPawn' has a wrong offset!");

// Function BTT_Caravoid.BTT_CarAvoid_C.Trace
// 0x01A0 (0x01A0 - 0x0000)
struct BTT_CarAvoid_C_Trace final
{
public:
	class UArrowComponent*                        Arrow;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Distance;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Dir;                                               // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HalfSize;                                          // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurXRel;                                           // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurYRel;                                           // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurYRelative;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ActorXOffset;                                      // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurXRelative;                                      // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ActorYOffset;                                      // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LResult;                                           // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0078(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	struct FHitResult                             CallFunc_BoxTraceSingle_OutHit;                    // 0x0088(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_BoxTraceSingle_ReturnValue;               // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0111(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0112(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_113[0x1];                                      // 0x0113(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x011C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0128(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0134(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0140(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14C[0x4];                                      // 0x014C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0160(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0178(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0184(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Lv3_BaseCar_C*                      K2Node_DynamicCast_AsBP_Lv_3_Base_Car;             // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0199(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BTT_CarAvoid_C_Trace) == 0x000008, "Wrong alignment on BTT_CarAvoid_C_Trace");
static_assert(sizeof(BTT_CarAvoid_C_Trace) == 0x0001A0, "Wrong size on BTT_CarAvoid_C_Trace");
static_assert(offsetof(BTT_CarAvoid_C_Trace, Arrow) == 0x000000, "Member 'BTT_CarAvoid_C_Trace::Arrow' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_Trace, Distance) == 0x000008, "Member 'BTT_CarAvoid_C_Trace::Distance' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_Trace, Dir) == 0x00000C, "Member 'BTT_CarAvoid_C_Trace::Dir' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_Trace, HalfSize) == 0x000018, "Member 'BTT_CarAvoid_C_Trace::HalfSize' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_Trace, Result) == 0x000024, "Member 'BTT_CarAvoid_C_Trace::Result' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_Trace, CurXRel) == 0x000028, "Member 'BTT_CarAvoid_C_Trace::CurXRel' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_Trace, CurYRel) == 0x00002C, "Member 'BTT_CarAvoid_C_Trace::CurYRel' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_Trace, CurYRelative) == 0x000030, "Member 'BTT_CarAvoid_C_Trace::CurYRelative' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_Trace, ActorXOffset) == 0x000034, "Member 'BTT_CarAvoid_C_Trace::ActorXOffset' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_Trace, CurXRelative) == 0x000038, "Member 'BTT_CarAvoid_C_Trace::CurXRelative' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_Trace, ActorYOffset) == 0x00003C, "Member 'BTT_CarAvoid_C_Trace::ActorYOffset' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_Trace, LResult) == 0x000040, "Member 'BTT_CarAvoid_C_Trace::LResult' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_Trace, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x000044, "Member 'BTT_CarAvoid_C_Trace::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_Trace, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000050, "Member 'BTT_CarAvoid_C_Trace::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_Trace, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x00005C, "Member 'BTT_CarAvoid_C_Trace::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_Trace, CallFunc_Add_VectorVector_ReturnValue) == 0x000068, "Member 'BTT_CarAvoid_C_Trace::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_Trace, Temp_object_Variable) == 0x000078, "Member 'BTT_CarAvoid_C_Trace::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_Trace, CallFunc_BoxTraceSingle_OutHit) == 0x000088, "Member 'BTT_CarAvoid_C_Trace::CallFunc_BoxTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_Trace, CallFunc_BoxTraceSingle_ReturnValue) == 0x000110, "Member 'BTT_CarAvoid_C_Trace::CallFunc_BoxTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_Trace, CallFunc_BreakHitResult_bBlockingHit) == 0x000111, "Member 'BTT_CarAvoid_C_Trace::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_Trace, CallFunc_BreakHitResult_bInitialOverlap) == 0x000112, "Member 'BTT_CarAvoid_C_Trace::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_Trace, CallFunc_BreakHitResult_Time) == 0x000114, "Member 'BTT_CarAvoid_C_Trace::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_Trace, CallFunc_BreakHitResult_Distance) == 0x000118, "Member 'BTT_CarAvoid_C_Trace::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_Trace, CallFunc_BreakHitResult_Location) == 0x00011C, "Member 'BTT_CarAvoid_C_Trace::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_Trace, CallFunc_BreakHitResult_ImpactPoint) == 0x000128, "Member 'BTT_CarAvoid_C_Trace::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_Trace, CallFunc_BreakHitResult_Normal) == 0x000134, "Member 'BTT_CarAvoid_C_Trace::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_Trace, CallFunc_BreakHitResult_ImpactNormal) == 0x000140, "Member 'BTT_CarAvoid_C_Trace::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_Trace, CallFunc_BreakHitResult_PhysMat) == 0x000150, "Member 'BTT_CarAvoid_C_Trace::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_Trace, CallFunc_BreakHitResult_HitActor) == 0x000158, "Member 'BTT_CarAvoid_C_Trace::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_Trace, CallFunc_BreakHitResult_HitComponent) == 0x000160, "Member 'BTT_CarAvoid_C_Trace::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_Trace, CallFunc_BreakHitResult_HitBoneName) == 0x000168, "Member 'BTT_CarAvoid_C_Trace::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_Trace, CallFunc_BreakHitResult_HitItem) == 0x000170, "Member 'BTT_CarAvoid_C_Trace::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_Trace, CallFunc_BreakHitResult_FaceIndex) == 0x000174, "Member 'BTT_CarAvoid_C_Trace::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_Trace, CallFunc_BreakHitResult_TraceStart) == 0x000178, "Member 'BTT_CarAvoid_C_Trace::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_Trace, CallFunc_BreakHitResult_TraceEnd) == 0x000184, "Member 'BTT_CarAvoid_C_Trace::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_Trace, K2Node_DynamicCast_AsBP_Lv_3_Base_Car) == 0x000190, "Member 'BTT_CarAvoid_C_Trace::K2Node_DynamicCast_AsBP_Lv_3_Base_Car' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_Trace, K2Node_DynamicCast_bSuccess) == 0x000198, "Member 'BTT_CarAvoid_C_Trace::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_Trace, CallFunc_IsValid_ReturnValue) == 0x000199, "Member 'BTT_CarAvoid_C_Trace::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BTT_Caravoid.BTT_CarAvoid_C.GetLRoffset
// 0x000C (0x000C - 0x0000)
struct BTT_CarAvoid_C_GetLRoffset final
{
public:
	int32                                         Result;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Steering;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BTT_CarAvoid_C_GetLRoffset) == 0x000004, "Wrong alignment on BTT_CarAvoid_C_GetLRoffset");
static_assert(sizeof(BTT_CarAvoid_C_GetLRoffset) == 0x00000C, "Wrong size on BTT_CarAvoid_C_GetLRoffset");
static_assert(offsetof(BTT_CarAvoid_C_GetLRoffset, Result) == 0x000000, "Member 'BTT_CarAvoid_C_GetLRoffset::Result' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_GetLRoffset, Steering) == 0x000004, "Member 'BTT_CarAvoid_C_GetLRoffset::Steering' has a wrong offset!");
static_assert(offsetof(BTT_CarAvoid_C_GetLRoffset, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000008, "Member 'BTT_CarAvoid_C_GetLRoffset::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

}

