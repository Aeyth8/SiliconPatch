#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Logo_Widget

#include "Basic.hpp"

#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function Logo_Widget.Logo_Widget_C.ExecuteUbergraph_Logo_Widget
// 0x01B8 (0x01B8 - 0x0000)
struct Logo_Widget_C_ExecuteUbergraph_Logo_Widget final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable1;                               // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Temp_object_Variable;                              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable1;                             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable2;                               // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Temp_object_Variable2;                             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable3;                             // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 K2Node_CustomEvent_ErrMsg;                         // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USaveGame*                              CallFunc_LoadGameFromSlot_ReturnValue;             // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMer2OnlineSave_C*                      K2Node_DynamicCast_AsMer_2Online_Save;             // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMer2GameInstance_C*                    K2Node_DynamicCast_AsMer_2Game_Instance;           // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_IsEnglish;                      // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUseNewGameLogo_UseNew;                  // 0x008A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B[0x5];                                       // 0x008B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       K2Node_Select_Default;                             // 0x0090(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                K2Node_Select1_Default;                            // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                K2Node_Select2_Default;                            // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateBrush                            K2Node_MakeStruct_SlateBrush;                      // 0x00A8(0x0088)()
	struct FSlateBrush                            K2Node_MakeStruct_SlateBrush1;                     // 0x0130(0x0088)()
};
static_assert(alignof(Logo_Widget_C_ExecuteUbergraph_Logo_Widget) == 0x000008, "Wrong alignment on Logo_Widget_C_ExecuteUbergraph_Logo_Widget");
static_assert(sizeof(Logo_Widget_C_ExecuteUbergraph_Logo_Widget) == 0x0001B8, "Wrong size on Logo_Widget_C_ExecuteUbergraph_Logo_Widget");
static_assert(offsetof(Logo_Widget_C_ExecuteUbergraph_Logo_Widget, EntryPoint) == 0x000000, "Member 'Logo_Widget_C_ExecuteUbergraph_Logo_Widget::EntryPoint' has a wrong offset!");
static_assert(offsetof(Logo_Widget_C_ExecuteUbergraph_Logo_Widget, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'Logo_Widget_C_ExecuteUbergraph_Logo_Widget::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(Logo_Widget_C_ExecuteUbergraph_Logo_Widget, Temp_bool_Variable) == 0x000018, "Member 'Logo_Widget_C_ExecuteUbergraph_Logo_Widget::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Logo_Widget_C_ExecuteUbergraph_Logo_Widget, Temp_bool_Variable1) == 0x000019, "Member 'Logo_Widget_C_ExecuteUbergraph_Logo_Widget::Temp_bool_Variable1' has a wrong offset!");
static_assert(offsetof(Logo_Widget_C_ExecuteUbergraph_Logo_Widget, Temp_object_Variable) == 0x000020, "Member 'Logo_Widget_C_ExecuteUbergraph_Logo_Widget::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(Logo_Widget_C_ExecuteUbergraph_Logo_Widget, Temp_object_Variable1) == 0x000028, "Member 'Logo_Widget_C_ExecuteUbergraph_Logo_Widget::Temp_object_Variable1' has a wrong offset!");
static_assert(offsetof(Logo_Widget_C_ExecuteUbergraph_Logo_Widget, Temp_bool_Variable2) == 0x000030, "Member 'Logo_Widget_C_ExecuteUbergraph_Logo_Widget::Temp_bool_Variable2' has a wrong offset!");
static_assert(offsetof(Logo_Widget_C_ExecuteUbergraph_Logo_Widget, Temp_object_Variable2) == 0x000038, "Member 'Logo_Widget_C_ExecuteUbergraph_Logo_Widget::Temp_object_Variable2' has a wrong offset!");
static_assert(offsetof(Logo_Widget_C_ExecuteUbergraph_Logo_Widget, Temp_object_Variable3) == 0x000040, "Member 'Logo_Widget_C_ExecuteUbergraph_Logo_Widget::Temp_object_Variable3' has a wrong offset!");
static_assert(offsetof(Logo_Widget_C_ExecuteUbergraph_Logo_Widget, K2Node_CustomEvent_ErrMsg) == 0x000048, "Member 'Logo_Widget_C_ExecuteUbergraph_Logo_Widget::K2Node_CustomEvent_ErrMsg' has a wrong offset!");
static_assert(offsetof(Logo_Widget_C_ExecuteUbergraph_Logo_Widget, K2Node_Event_IsDesignTime) == 0x000058, "Member 'Logo_Widget_C_ExecuteUbergraph_Logo_Widget::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(Logo_Widget_C_ExecuteUbergraph_Logo_Widget, CallFunc_LoadGameFromSlot_ReturnValue) == 0x000060, "Member 'Logo_Widget_C_ExecuteUbergraph_Logo_Widget::CallFunc_LoadGameFromSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(Logo_Widget_C_ExecuteUbergraph_Logo_Widget, K2Node_DynamicCast_AsMer_2Online_Save) == 0x000068, "Member 'Logo_Widget_C_ExecuteUbergraph_Logo_Widget::K2Node_DynamicCast_AsMer_2Online_Save' has a wrong offset!");
static_assert(offsetof(Logo_Widget_C_ExecuteUbergraph_Logo_Widget, K2Node_DynamicCast_bSuccess) == 0x000070, "Member 'Logo_Widget_C_ExecuteUbergraph_Logo_Widget::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Logo_Widget_C_ExecuteUbergraph_Logo_Widget, CallFunc_GetGameInstance_ReturnValue) == 0x000078, "Member 'Logo_Widget_C_ExecuteUbergraph_Logo_Widget::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(Logo_Widget_C_ExecuteUbergraph_Logo_Widget, K2Node_DynamicCast_AsMer_2Game_Instance) == 0x000080, "Member 'Logo_Widget_C_ExecuteUbergraph_Logo_Widget::K2Node_DynamicCast_AsMer_2Game_Instance' has a wrong offset!");
static_assert(offsetof(Logo_Widget_C_ExecuteUbergraph_Logo_Widget, K2Node_DynamicCast_bSuccess1) == 0x000088, "Member 'Logo_Widget_C_ExecuteUbergraph_Logo_Widget::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(Logo_Widget_C_ExecuteUbergraph_Logo_Widget, K2Node_CustomEvent_IsEnglish) == 0x000089, "Member 'Logo_Widget_C_ExecuteUbergraph_Logo_Widget::K2Node_CustomEvent_IsEnglish' has a wrong offset!");
static_assert(offsetof(Logo_Widget_C_ExecuteUbergraph_Logo_Widget, CallFunc_IsUseNewGameLogo_UseNew) == 0x00008A, "Member 'Logo_Widget_C_ExecuteUbergraph_Logo_Widget::CallFunc_IsUseNewGameLogo_UseNew' has a wrong offset!");
static_assert(offsetof(Logo_Widget_C_ExecuteUbergraph_Logo_Widget, K2Node_Select_Default) == 0x000090, "Member 'Logo_Widget_C_ExecuteUbergraph_Logo_Widget::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Logo_Widget_C_ExecuteUbergraph_Logo_Widget, K2Node_Select1_Default) == 0x000098, "Member 'Logo_Widget_C_ExecuteUbergraph_Logo_Widget::K2Node_Select1_Default' has a wrong offset!");
static_assert(offsetof(Logo_Widget_C_ExecuteUbergraph_Logo_Widget, K2Node_Select2_Default) == 0x0000A0, "Member 'Logo_Widget_C_ExecuteUbergraph_Logo_Widget::K2Node_Select2_Default' has a wrong offset!");
static_assert(offsetof(Logo_Widget_C_ExecuteUbergraph_Logo_Widget, K2Node_MakeStruct_SlateBrush) == 0x0000A8, "Member 'Logo_Widget_C_ExecuteUbergraph_Logo_Widget::K2Node_MakeStruct_SlateBrush' has a wrong offset!");
static_assert(offsetof(Logo_Widget_C_ExecuteUbergraph_Logo_Widget, K2Node_MakeStruct_SlateBrush1) == 0x000130, "Member 'Logo_Widget_C_ExecuteUbergraph_Logo_Widget::K2Node_MakeStruct_SlateBrush1' has a wrong offset!");

// Function Logo_Widget.Logo_Widget_C.UpdateLanguage
// 0x0001 (0x0001 - 0x0000)
struct Logo_Widget_C_UpdateLanguage final
{
public:
	bool                                          IsEnglish_0;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Logo_Widget_C_UpdateLanguage) == 0x000001, "Wrong alignment on Logo_Widget_C_UpdateLanguage");
static_assert(sizeof(Logo_Widget_C_UpdateLanguage) == 0x000001, "Wrong size on Logo_Widget_C_UpdateLanguage");
static_assert(offsetof(Logo_Widget_C_UpdateLanguage, IsEnglish_0) == 0x000000, "Member 'Logo_Widget_C_UpdateLanguage::IsEnglish_0' has a wrong offset!");

// Function Logo_Widget.Logo_Widget_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct Logo_Widget_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Logo_Widget_C_PreConstruct) == 0x000001, "Wrong alignment on Logo_Widget_C_PreConstruct");
static_assert(sizeof(Logo_Widget_C_PreConstruct) == 0x000001, "Wrong size on Logo_Widget_C_PreConstruct");
static_assert(offsetof(Logo_Widget_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'Logo_Widget_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function Logo_Widget.Logo_Widget_C.OnShowLoginFailed
// 0x0010 (0x0010 - 0x0000)
struct Logo_Widget_C_OnShowLoginFailed final
{
public:
	class FString                                 ErrMsg_0;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Logo_Widget_C_OnShowLoginFailed) == 0x000008, "Wrong alignment on Logo_Widget_C_OnShowLoginFailed");
static_assert(sizeof(Logo_Widget_C_OnShowLoginFailed) == 0x000010, "Wrong size on Logo_Widget_C_OnShowLoginFailed");
static_assert(offsetof(Logo_Widget_C_OnShowLoginFailed, ErrMsg_0) == 0x000000, "Member 'Logo_Widget_C_OnShowLoginFailed::ErrMsg_0' has a wrong offset!");

// Function Logo_Widget.Logo_Widget_C.ApplyText
// 0x00C0 (0x00C0 - 0x0000)
struct Logo_Widget_C_ApplyText final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UTextBlock*                             TextBox;                                           // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ApplySize;                                         // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetLanguageText_Found;                    // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetLanguageText_Lan_Text;                 // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetLanguageText_FontSize;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         K2Node_MakeStruct_SlateFontInfo;                   // 0x0038(0x0058)(HasGetValueTypeHash)
	class FString                                 K2Node_Select_Default;                             // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x00A0(0x0018)()
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Logo_Widget_C_ApplyText) == 0x000008, "Wrong alignment on Logo_Widget_C_ApplyText");
static_assert(sizeof(Logo_Widget_C_ApplyText) == 0x0000C0, "Wrong size on Logo_Widget_C_ApplyText");
static_assert(offsetof(Logo_Widget_C_ApplyText, Text) == 0x000000, "Member 'Logo_Widget_C_ApplyText::Text' has a wrong offset!");
static_assert(offsetof(Logo_Widget_C_ApplyText, TextBox) == 0x000010, "Member 'Logo_Widget_C_ApplyText::TextBox' has a wrong offset!");
static_assert(offsetof(Logo_Widget_C_ApplyText, ApplySize) == 0x000018, "Member 'Logo_Widget_C_ApplyText::ApplySize' has a wrong offset!");
static_assert(offsetof(Logo_Widget_C_ApplyText, Temp_bool_Variable) == 0x000019, "Member 'Logo_Widget_C_ApplyText::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Logo_Widget_C_ApplyText, CallFunc_GetLanguageText_Found) == 0x00001A, "Member 'Logo_Widget_C_ApplyText::CallFunc_GetLanguageText_Found' has a wrong offset!");
static_assert(offsetof(Logo_Widget_C_ApplyText, CallFunc_GetLanguageText_Lan_Text) == 0x000020, "Member 'Logo_Widget_C_ApplyText::CallFunc_GetLanguageText_Lan_Text' has a wrong offset!");
static_assert(offsetof(Logo_Widget_C_ApplyText, CallFunc_GetLanguageText_FontSize) == 0x000030, "Member 'Logo_Widget_C_ApplyText::CallFunc_GetLanguageText_FontSize' has a wrong offset!");
static_assert(offsetof(Logo_Widget_C_ApplyText, K2Node_MakeStruct_SlateFontInfo) == 0x000038, "Member 'Logo_Widget_C_ApplyText::K2Node_MakeStruct_SlateFontInfo' has a wrong offset!");
static_assert(offsetof(Logo_Widget_C_ApplyText, K2Node_Select_Default) == 0x000090, "Member 'Logo_Widget_C_ApplyText::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Logo_Widget_C_ApplyText, CallFunc_Conv_StringToText_ReturnValue) == 0x0000A0, "Member 'Logo_Widget_C_ApplyText::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(Logo_Widget_C_ApplyText, CallFunc_BooleanAND_ReturnValue) == 0x0000B8, "Member 'Logo_Widget_C_ApplyText::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

}

