#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AI_WaveNEW

#include "Basic.hpp"

#include "Struct_SpawnerConfigNew_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AI_WaveNEW.BP_AI_WaveNEW_C
// 0x00B8 (0x03E0 - 0x0328)
class ABP_AI_WaveNEW_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0328(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UTextRenderComponent*                   TextRender;                                        // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          IsActive_;                                         // 0x0350(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_351[0x7];                                      // 0x0351(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FStruct_SpawnerConfigNew>       SpawnerConfigs;                                    // 0x0358(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	float                                         ActiveDelay;                                       // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36C[0x4];                                      // 0x036C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_AISpawnerNEW_C*>             SpawnerList;                                       // 0x0370(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          IsAddSpawner;                                      // 0x0380(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsStart;                                           // 0x0381(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_382[0x6];                                      // 0x0382(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnBegin;                                           // 0x0388(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnEnd;                                             // 0x0398(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FColor                                 TextColor;                                         // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TextSize;                                          // 0x03AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   OnCurrentAICountChanged;                           // 0x03B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         leftAICount;                                       // 0x03C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          lsAISpawnFinished;                                 // 0x03C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C5[0x3];                                      // 0x03C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnAllAICountChanged;                               // 0x03C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         leftAIlAICount;                                    // 0x03D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         currentAICount;                                    // 0x03DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AI_WaveNEW(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void ActiveMe();
	void AddSpawner(const struct FStruct_SpawnerConfigNew& Config, int32 _index, class ABP_AISpawnerNEW_C** Spawner);
	void GetSpawnerFromIndex(int32 Index_0, class ABP_AISpawnerNEW_C** Spawner);
	void ResetMe();
	void ClearMapItems();
	void CheckleftAICount();
	void CheckAllLeftAICount();
	void UpdateAICount();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AI_WaveNEW_C">();
	}
	static class ABP_AI_WaveNEW_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AI_WaveNEW_C>();
	}
};
static_assert(alignof(ABP_AI_WaveNEW_C) == 0x000008, "Wrong alignment on ABP_AI_WaveNEW_C");
static_assert(sizeof(ABP_AI_WaveNEW_C) == 0x0003E0, "Wrong size on ABP_AI_WaveNEW_C");
static_assert(offsetof(ABP_AI_WaveNEW_C, UberGraphFrame) == 0x000328, "Member 'ABP_AI_WaveNEW_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_AI_WaveNEW_C, TextRender) == 0x000330, "Member 'ABP_AI_WaveNEW_C::TextRender' has a wrong offset!");
static_assert(offsetof(ABP_AI_WaveNEW_C, Scene) == 0x000338, "Member 'ABP_AI_WaveNEW_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_AI_WaveNEW_C, Arrow) == 0x000340, "Member 'ABP_AI_WaveNEW_C::Arrow' has a wrong offset!");
static_assert(offsetof(ABP_AI_WaveNEW_C, DefaultSceneRoot) == 0x000348, "Member 'ABP_AI_WaveNEW_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_AI_WaveNEW_C, IsActive_) == 0x000350, "Member 'ABP_AI_WaveNEW_C::IsActive_' has a wrong offset!");
static_assert(offsetof(ABP_AI_WaveNEW_C, SpawnerConfigs) == 0x000358, "Member 'ABP_AI_WaveNEW_C::SpawnerConfigs' has a wrong offset!");
static_assert(offsetof(ABP_AI_WaveNEW_C, ActiveDelay) == 0x000368, "Member 'ABP_AI_WaveNEW_C::ActiveDelay' has a wrong offset!");
static_assert(offsetof(ABP_AI_WaveNEW_C, SpawnerList) == 0x000370, "Member 'ABP_AI_WaveNEW_C::SpawnerList' has a wrong offset!");
static_assert(offsetof(ABP_AI_WaveNEW_C, IsAddSpawner) == 0x000380, "Member 'ABP_AI_WaveNEW_C::IsAddSpawner' has a wrong offset!");
static_assert(offsetof(ABP_AI_WaveNEW_C, IsStart) == 0x000381, "Member 'ABP_AI_WaveNEW_C::IsStart' has a wrong offset!");
static_assert(offsetof(ABP_AI_WaveNEW_C, OnBegin) == 0x000388, "Member 'ABP_AI_WaveNEW_C::OnBegin' has a wrong offset!");
static_assert(offsetof(ABP_AI_WaveNEW_C, OnEnd) == 0x000398, "Member 'ABP_AI_WaveNEW_C::OnEnd' has a wrong offset!");
static_assert(offsetof(ABP_AI_WaveNEW_C, TextColor) == 0x0003A8, "Member 'ABP_AI_WaveNEW_C::TextColor' has a wrong offset!");
static_assert(offsetof(ABP_AI_WaveNEW_C, TextSize) == 0x0003AC, "Member 'ABP_AI_WaveNEW_C::TextSize' has a wrong offset!");
static_assert(offsetof(ABP_AI_WaveNEW_C, OnCurrentAICountChanged) == 0x0003B0, "Member 'ABP_AI_WaveNEW_C::OnCurrentAICountChanged' has a wrong offset!");
static_assert(offsetof(ABP_AI_WaveNEW_C, leftAICount) == 0x0003C0, "Member 'ABP_AI_WaveNEW_C::leftAICount' has a wrong offset!");
static_assert(offsetof(ABP_AI_WaveNEW_C, lsAISpawnFinished) == 0x0003C4, "Member 'ABP_AI_WaveNEW_C::lsAISpawnFinished' has a wrong offset!");
static_assert(offsetof(ABP_AI_WaveNEW_C, OnAllAICountChanged) == 0x0003C8, "Member 'ABP_AI_WaveNEW_C::OnAllAICountChanged' has a wrong offset!");
static_assert(offsetof(ABP_AI_WaveNEW_C, leftAIlAICount) == 0x0003D8, "Member 'ABP_AI_WaveNEW_C::leftAIlAICount' has a wrong offset!");
static_assert(offsetof(ABP_AI_WaveNEW_C, currentAICount) == 0x0003DC, "Member 'ABP_AI_WaveNEW_C::currentAICount' has a wrong offset!");

}

