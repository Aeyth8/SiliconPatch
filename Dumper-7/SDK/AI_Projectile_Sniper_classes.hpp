#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AI_Projectile_Sniper

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AI_Projectile_classes.hpp"
#include "EnumDifficuty_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass AI_Projectile_Sniper.AI_Projectile_Sniper_C
// 0x0010 (0x0550 - 0x0540)
class AAI_Projectile_Sniper_C final : public AAI_Projectile_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_AI_Projectile_Sniper_C;             // 0x0540(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	float                                         Damage;                                            // 0x0548(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x054C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_AI_Projectile_Sniper(int32 EntryPoint);
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void HeadToVelocityDirection();
	void Init();
	void OnMulticastBulletHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AI_Projectile_Sniper_C">();
	}
	static class AAI_Projectile_Sniper_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAI_Projectile_Sniper_C>();
	}
};
static_assert(alignof(AAI_Projectile_Sniper_C) == 0x000008, "Wrong alignment on AAI_Projectile_Sniper_C");
static_assert(sizeof(AAI_Projectile_Sniper_C) == 0x000550, "Wrong size on AAI_Projectile_Sniper_C");
static_assert(offsetof(AAI_Projectile_Sniper_C, UberGraphFrame_AI_Projectile_Sniper_C) == 0x000540, "Member 'AAI_Projectile_Sniper_C::UberGraphFrame_AI_Projectile_Sniper_C' has a wrong offset!");
static_assert(offsetof(AAI_Projectile_Sniper_C, Damage) == 0x000548, "Member 'AAI_Projectile_Sniper_C::Damage' has a wrong offset!");
static_assert(offsetof(AAI_Projectile_Sniper_C, Speed) == 0x00054C, "Member 'AAI_Projectile_Sniper_C::Speed' has a wrong offset!");

}

