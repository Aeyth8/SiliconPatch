#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Character_MainMenu

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Character_MainMenu.BP_Character_MainMenu_C
// 0x0070 (0x07B0 - 0x0740)
class ABP_Character_MainMenu_C final : public ACharacter
{
public:
	uint8                                         Pad_738[0x8];                                      // 0x0738(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0740(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPointLightComponent*                   PointLight;                                        // 0x0748(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetInteractionComponent*            LeftHandInteraction;                               // 0x0750(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetInteractionComponent*            RightHandInteraction;                              // 0x0758(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMotionControllerComponent*             MotionControllerLeft;                              // 0x0760(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMotionControllerComponent*             MotionControllerRight;                             // 0x0768(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       Camera;                                            // 0x0770(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        VRRoot;                                            // 0x0778(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ABPDefaultHand_C*                       LeftHand;                                          // 0x0780(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABPDefaultHand_C*                       RightHand;                                         // 0x0788(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWpn_Pistol_MainMenu_C*                 RightWeapon;                                       // 0x0790(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWpn_Pistol_MainMenu_C*                 LeftWeapon;                                        // 0x0798(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DominantHandLeft;                                  // 0x07A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_Character_MainMenu(int32 EntryPoint);
	void InpAxisEvt_LookUp_K2Node_InputAxisEvent_172(float AxisValue);
	void InpAxisEvt_Turn_K2Node_InputAxisEvent_157(float AxisValue);
	void InpAxisEvt_MoveRight_K2Node_InputAxisEvent_192(float AxisValue);
	void InpAxisEvt_MoveForward_K2Node_InputAxisEvent_181(float AxisValue);
	void ReceiveTick(float DeltaSeconds);
	void InpActEvt_Fire_K2Node_InputActionEvent_4(const struct FKey& Key);
	void InpActEvt_Fire_K2Node_InputActionEvent_5(const struct FKey& Key);
	void InpActEvt_Fire_L_K2Node_InputActionEvent_2(const struct FKey& Key);
	void InpActEvt_Fire_L_K2Node_InputActionEvent_3(const struct FKey& Key);
	void InpActEvt_Reload_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpActEvt_Reload_L_K2Node_InputActionEvent_0(const struct FKey& Key);
	void ReceiveBeginPlay();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Character_MainMenu_C">();
	}
	static class ABP_Character_MainMenu_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Character_MainMenu_C>();
	}
};
static_assert(alignof(ABP_Character_MainMenu_C) == 0x000010, "Wrong alignment on ABP_Character_MainMenu_C");
static_assert(sizeof(ABP_Character_MainMenu_C) == 0x0007B0, "Wrong size on ABP_Character_MainMenu_C");
static_assert(offsetof(ABP_Character_MainMenu_C, UberGraphFrame) == 0x000740, "Member 'ABP_Character_MainMenu_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Character_MainMenu_C, PointLight) == 0x000748, "Member 'ABP_Character_MainMenu_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABP_Character_MainMenu_C, LeftHandInteraction) == 0x000750, "Member 'ABP_Character_MainMenu_C::LeftHandInteraction' has a wrong offset!");
static_assert(offsetof(ABP_Character_MainMenu_C, RightHandInteraction) == 0x000758, "Member 'ABP_Character_MainMenu_C::RightHandInteraction' has a wrong offset!");
static_assert(offsetof(ABP_Character_MainMenu_C, MotionControllerLeft) == 0x000760, "Member 'ABP_Character_MainMenu_C::MotionControllerLeft' has a wrong offset!");
static_assert(offsetof(ABP_Character_MainMenu_C, MotionControllerRight) == 0x000768, "Member 'ABP_Character_MainMenu_C::MotionControllerRight' has a wrong offset!");
static_assert(offsetof(ABP_Character_MainMenu_C, Camera) == 0x000770, "Member 'ABP_Character_MainMenu_C::Camera' has a wrong offset!");
static_assert(offsetof(ABP_Character_MainMenu_C, VRRoot) == 0x000778, "Member 'ABP_Character_MainMenu_C::VRRoot' has a wrong offset!");
static_assert(offsetof(ABP_Character_MainMenu_C, LeftHand) == 0x000780, "Member 'ABP_Character_MainMenu_C::LeftHand' has a wrong offset!");
static_assert(offsetof(ABP_Character_MainMenu_C, RightHand) == 0x000788, "Member 'ABP_Character_MainMenu_C::RightHand' has a wrong offset!");
static_assert(offsetof(ABP_Character_MainMenu_C, RightWeapon) == 0x000790, "Member 'ABP_Character_MainMenu_C::RightWeapon' has a wrong offset!");
static_assert(offsetof(ABP_Character_MainMenu_C, LeftWeapon) == 0x000798, "Member 'ABP_Character_MainMenu_C::LeftWeapon' has a wrong offset!");
static_assert(offsetof(ABP_Character_MainMenu_C, DominantHandLeft) == 0x0007A0, "Member 'ABP_Character_MainMenu_C::DominantHandLeft' has a wrong offset!");

}

