#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DeadlyBulletSettings

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Struct_DeadlyBulletSettings_structs.hpp"
#include "SiliconRising_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DeadlyBulletSettings.BP_DeadlyBulletSettings_C
// 0x00D8 (0x0400 - 0x0328)
class ABP_DeadlyBulletSettings_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0328(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         BulletNum_MIN_;                                    // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BulletNum_MAX_;                                    // 0x033C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BulletWaveInterval_MIN_;                           // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BulletWaveInterval_MAX_;                           // 0x0344(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         DeadlyProjectileList;                              // 0x0348(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         NormalBulletCount;                                 // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RemoveIndex;                                       // 0x035C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BulletInterval_MIN_;                               // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BulletInterval_MAX_;                               // 0x0364(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStruct_DeadlyBulletSettings           Settings;                                          // 0x0368(0x004C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeadlyWaveBulletInterval;                          // 0x03B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentWaveDeadlyBulletInterval;                   // 0x03B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StartRecalc;                                       // 0x03BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3BD[0x3];                                      // 0x03BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentDeadlyBulletInterval;                       // 0x03C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeadlyBulletInterval;                              // 0x03C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RandomBulletNum;                                   // 0x03C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DeadlyCount;                                       // 0x03CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         WaveCount;                                         // 0x03D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D4[0x4];                                      // 0x03D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnHitAnyBonus;                                     // 0x03D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          BonusTips_Mark;                                    // 0x03E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E9[0x7];                                      // 0x03E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnGenerateBonus;                                   // 0x03F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void ExecuteUbergraph_BP_DeadlyBulletSettings(int32 EntryPoint);
	void OnHitBonus();
	void SetCustomDifficult();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void UserConstructionScript();
	void IsAllowDeadlyBullet(float Rate, bool* Result);
	void AddDeadlyBullet(bool IsDeadly);
	void AddNormalBullet();
	void GetGenerateItem(EItemTypes* Result);
	void RequireGenerateItem(class AActor* FromWho, const struct FVector& Location, EItemTypes Special, class AActor** ActorReturn);
	void SetSettings(const struct FStruct_DeadlyBulletSettings& Settings_0);
	void CountWaves();
	void GetSettings(struct FStruct_DeadlyBulletSettings* Settings_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DeadlyBulletSettings_C">();
	}
	static class ABP_DeadlyBulletSettings_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DeadlyBulletSettings_C>();
	}
};
static_assert(alignof(ABP_DeadlyBulletSettings_C) == 0x000008, "Wrong alignment on ABP_DeadlyBulletSettings_C");
static_assert(sizeof(ABP_DeadlyBulletSettings_C) == 0x000400, "Wrong size on ABP_DeadlyBulletSettings_C");
static_assert(offsetof(ABP_DeadlyBulletSettings_C, UberGraphFrame) == 0x000328, "Member 'ABP_DeadlyBulletSettings_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_DeadlyBulletSettings_C, DefaultSceneRoot) == 0x000330, "Member 'ABP_DeadlyBulletSettings_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_DeadlyBulletSettings_C, BulletNum_MIN_) == 0x000338, "Member 'ABP_DeadlyBulletSettings_C::BulletNum_MIN_' has a wrong offset!");
static_assert(offsetof(ABP_DeadlyBulletSettings_C, BulletNum_MAX_) == 0x00033C, "Member 'ABP_DeadlyBulletSettings_C::BulletNum_MAX_' has a wrong offset!");
static_assert(offsetof(ABP_DeadlyBulletSettings_C, BulletWaveInterval_MIN_) == 0x000340, "Member 'ABP_DeadlyBulletSettings_C::BulletWaveInterval_MIN_' has a wrong offset!");
static_assert(offsetof(ABP_DeadlyBulletSettings_C, BulletWaveInterval_MAX_) == 0x000344, "Member 'ABP_DeadlyBulletSettings_C::BulletWaveInterval_MAX_' has a wrong offset!");
static_assert(offsetof(ABP_DeadlyBulletSettings_C, DeadlyProjectileList) == 0x000348, "Member 'ABP_DeadlyBulletSettings_C::DeadlyProjectileList' has a wrong offset!");
static_assert(offsetof(ABP_DeadlyBulletSettings_C, NormalBulletCount) == 0x000358, "Member 'ABP_DeadlyBulletSettings_C::NormalBulletCount' has a wrong offset!");
static_assert(offsetof(ABP_DeadlyBulletSettings_C, RemoveIndex) == 0x00035C, "Member 'ABP_DeadlyBulletSettings_C::RemoveIndex' has a wrong offset!");
static_assert(offsetof(ABP_DeadlyBulletSettings_C, BulletInterval_MIN_) == 0x000360, "Member 'ABP_DeadlyBulletSettings_C::BulletInterval_MIN_' has a wrong offset!");
static_assert(offsetof(ABP_DeadlyBulletSettings_C, BulletInterval_MAX_) == 0x000364, "Member 'ABP_DeadlyBulletSettings_C::BulletInterval_MAX_' has a wrong offset!");
static_assert(offsetof(ABP_DeadlyBulletSettings_C, Settings) == 0x000368, "Member 'ABP_DeadlyBulletSettings_C::Settings' has a wrong offset!");
static_assert(offsetof(ABP_DeadlyBulletSettings_C, DeadlyWaveBulletInterval) == 0x0003B4, "Member 'ABP_DeadlyBulletSettings_C::DeadlyWaveBulletInterval' has a wrong offset!");
static_assert(offsetof(ABP_DeadlyBulletSettings_C, CurrentWaveDeadlyBulletInterval) == 0x0003B8, "Member 'ABP_DeadlyBulletSettings_C::CurrentWaveDeadlyBulletInterval' has a wrong offset!");
static_assert(offsetof(ABP_DeadlyBulletSettings_C, StartRecalc) == 0x0003BC, "Member 'ABP_DeadlyBulletSettings_C::StartRecalc' has a wrong offset!");
static_assert(offsetof(ABP_DeadlyBulletSettings_C, CurrentDeadlyBulletInterval) == 0x0003C0, "Member 'ABP_DeadlyBulletSettings_C::CurrentDeadlyBulletInterval' has a wrong offset!");
static_assert(offsetof(ABP_DeadlyBulletSettings_C, DeadlyBulletInterval) == 0x0003C4, "Member 'ABP_DeadlyBulletSettings_C::DeadlyBulletInterval' has a wrong offset!");
static_assert(offsetof(ABP_DeadlyBulletSettings_C, RandomBulletNum) == 0x0003C8, "Member 'ABP_DeadlyBulletSettings_C::RandomBulletNum' has a wrong offset!");
static_assert(offsetof(ABP_DeadlyBulletSettings_C, DeadlyCount) == 0x0003CC, "Member 'ABP_DeadlyBulletSettings_C::DeadlyCount' has a wrong offset!");
static_assert(offsetof(ABP_DeadlyBulletSettings_C, WaveCount) == 0x0003D0, "Member 'ABP_DeadlyBulletSettings_C::WaveCount' has a wrong offset!");
static_assert(offsetof(ABP_DeadlyBulletSettings_C, OnHitAnyBonus) == 0x0003D8, "Member 'ABP_DeadlyBulletSettings_C::OnHitAnyBonus' has a wrong offset!");
static_assert(offsetof(ABP_DeadlyBulletSettings_C, BonusTips_Mark) == 0x0003E8, "Member 'ABP_DeadlyBulletSettings_C::BonusTips_Mark' has a wrong offset!");
static_assert(offsetof(ABP_DeadlyBulletSettings_C, OnGenerateBonus) == 0x0003F0, "Member 'ABP_DeadlyBulletSettings_C::OnGenerateBonus' has a wrong offset!");

}

