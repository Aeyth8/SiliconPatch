#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AISpawner

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Struct_SpawnerConfig_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AISpawner.BP_AISpawner_C
// 0x00F8 (0x0420 - 0x0328)
class ABP_AISpawner_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0328(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FStruct_SpawnerConfig                  SpawnerConfig;                                     // 0x0338(0x0058)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         CurrentCount;                                      // 0x0390(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentDelay;                                      // 0x0394(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RandomDelay;                                       // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39C[0x4];                                      // 0x039C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_NPC_Base_C*                         PreviousAI;                                        // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TickDeltaTime;                                     // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsComplete_;                                       // 0x03AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsFirstRun;                                        // 0x03AD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsWaitOtherAllDead;                                // 0x03AE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsActive_;                                         // 0x03AF(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class ABP_AI_Wave_C*                          ParentWave;                                        // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStart;                                           // 0x03B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B9[0x7];                                      // 0x03B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_NPC_Base_C*>                 AIList;                                            // 0x03C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	float                                         FirstWaitTime;                                     // 0x03D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurFirstWaitTime;                                  // 0x03D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 GroupName;                                         // 0x03D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ABP_AISpawner_C*>                GroupMembers;                                      // 0x03E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          IsGroupOK;                                         // 0x03F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsActiveOther;                                     // 0x03F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FA[0x2];                                      // 0x03FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AdjustSpawnBox;                                    // 0x03FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   AllDead;                                           // 0x0400(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnSpawnAI;                                         // 0x0410(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void ExecuteUbergraph_BP_AISpawner(int32 EntryPoint);
	void ReceiveBeginPlay();
	void InitSpawner();
	void ReceiveTick(float DeltaSeconds);
	void UserConstructionScript();
	void GetSpawnCountLeft(int32* CountLeft);
	void IsWaitDelay(float DeltaTime, bool* Result);
	void IsOtherSpawnerEmpty(bool* Result);
	void IsPreviousDead(bool* Result);
	void SpwanAI(int32 RetryCount, class ABP_NPC_Base_C** NPC);
	void IsActive(bool* Active);
	void IsComplete(bool* Complete);
	void ActiveMe();
	void IsAllDead(bool* AllDead_0);
	void ResetMe();
	void CheckGroupMembers(bool* Result);
	void KillAll();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AISpawner_C">();
	}
	static class ABP_AISpawner_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AISpawner_C>();
	}
};
static_assert(alignof(ABP_AISpawner_C) == 0x000008, "Wrong alignment on ABP_AISpawner_C");
static_assert(sizeof(ABP_AISpawner_C) == 0x000420, "Wrong size on ABP_AISpawner_C");
static_assert(offsetof(ABP_AISpawner_C, UberGraphFrame) == 0x000328, "Member 'ABP_AISpawner_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_AISpawner_C, DefaultSceneRoot) == 0x000330, "Member 'ABP_AISpawner_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_AISpawner_C, SpawnerConfig) == 0x000338, "Member 'ABP_AISpawner_C::SpawnerConfig' has a wrong offset!");
static_assert(offsetof(ABP_AISpawner_C, CurrentCount) == 0x000390, "Member 'ABP_AISpawner_C::CurrentCount' has a wrong offset!");
static_assert(offsetof(ABP_AISpawner_C, CurrentDelay) == 0x000394, "Member 'ABP_AISpawner_C::CurrentDelay' has a wrong offset!");
static_assert(offsetof(ABP_AISpawner_C, RandomDelay) == 0x000398, "Member 'ABP_AISpawner_C::RandomDelay' has a wrong offset!");
static_assert(offsetof(ABP_AISpawner_C, PreviousAI) == 0x0003A0, "Member 'ABP_AISpawner_C::PreviousAI' has a wrong offset!");
static_assert(offsetof(ABP_AISpawner_C, TickDeltaTime) == 0x0003A8, "Member 'ABP_AISpawner_C::TickDeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_AISpawner_C, IsComplete_) == 0x0003AC, "Member 'ABP_AISpawner_C::IsComplete_' has a wrong offset!");
static_assert(offsetof(ABP_AISpawner_C, IsFirstRun) == 0x0003AD, "Member 'ABP_AISpawner_C::IsFirstRun' has a wrong offset!");
static_assert(offsetof(ABP_AISpawner_C, IsWaitOtherAllDead) == 0x0003AE, "Member 'ABP_AISpawner_C::IsWaitOtherAllDead' has a wrong offset!");
static_assert(offsetof(ABP_AISpawner_C, IsActive_) == 0x0003AF, "Member 'ABP_AISpawner_C::IsActive_' has a wrong offset!");
static_assert(offsetof(ABP_AISpawner_C, ParentWave) == 0x0003B0, "Member 'ABP_AISpawner_C::ParentWave' has a wrong offset!");
static_assert(offsetof(ABP_AISpawner_C, IsStart) == 0x0003B8, "Member 'ABP_AISpawner_C::IsStart' has a wrong offset!");
static_assert(offsetof(ABP_AISpawner_C, AIList) == 0x0003C0, "Member 'ABP_AISpawner_C::AIList' has a wrong offset!");
static_assert(offsetof(ABP_AISpawner_C, FirstWaitTime) == 0x0003D0, "Member 'ABP_AISpawner_C::FirstWaitTime' has a wrong offset!");
static_assert(offsetof(ABP_AISpawner_C, CurFirstWaitTime) == 0x0003D4, "Member 'ABP_AISpawner_C::CurFirstWaitTime' has a wrong offset!");
static_assert(offsetof(ABP_AISpawner_C, GroupName) == 0x0003D8, "Member 'ABP_AISpawner_C::GroupName' has a wrong offset!");
static_assert(offsetof(ABP_AISpawner_C, GroupMembers) == 0x0003E8, "Member 'ABP_AISpawner_C::GroupMembers' has a wrong offset!");
static_assert(offsetof(ABP_AISpawner_C, IsGroupOK) == 0x0003F8, "Member 'ABP_AISpawner_C::IsGroupOK' has a wrong offset!");
static_assert(offsetof(ABP_AISpawner_C, IsActiveOther) == 0x0003F9, "Member 'ABP_AISpawner_C::IsActiveOther' has a wrong offset!");
static_assert(offsetof(ABP_AISpawner_C, AdjustSpawnBox) == 0x0003FC, "Member 'ABP_AISpawner_C::AdjustSpawnBox' has a wrong offset!");
static_assert(offsetof(ABP_AISpawner_C, AllDead) == 0x000400, "Member 'ABP_AISpawner_C::AllDead' has a wrong offset!");
static_assert(offsetof(ABP_AISpawner_C, OnSpawnAI) == 0x000410, "Member 'ABP_AISpawner_C::OnSpawnAI' has a wrong offset!");

}

