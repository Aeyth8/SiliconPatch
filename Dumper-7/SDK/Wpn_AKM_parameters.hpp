#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Wpn_AKM

#include "Basic.hpp"


namespace SDK::Params
{

// Function Wpn_AKM.Wpn_AKM_C.ExecuteUbergraph_Wpn_AKM
// 0x0030 (0x0030 - 0x0000)
struct Wpn_AKM_C_ExecuteUbergraph_Wpn_AKM final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsFromRightHand;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_Hand;                                 // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWeaponAnimInstance*                    K2Node_DynamicCast_AsWeapon_Anim_Instance;         // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue2;                     // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue3;                     // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Wpn_AKM_C_ExecuteUbergraph_Wpn_AKM) == 0x000008, "Wrong alignment on Wpn_AKM_C_ExecuteUbergraph_Wpn_AKM");
static_assert(sizeof(Wpn_AKM_C_ExecuteUbergraph_Wpn_AKM) == 0x000030, "Wrong size on Wpn_AKM_C_ExecuteUbergraph_Wpn_AKM");
static_assert(offsetof(Wpn_AKM_C_ExecuteUbergraph_Wpn_AKM, EntryPoint) == 0x000000, "Member 'Wpn_AKM_C_ExecuteUbergraph_Wpn_AKM::EntryPoint' has a wrong offset!");
static_assert(offsetof(Wpn_AKM_C_ExecuteUbergraph_Wpn_AKM, CallFunc_HasAuthority_ReturnValue) == 0x000004, "Member 'Wpn_AKM_C_ExecuteUbergraph_Wpn_AKM::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_AKM_C_ExecuteUbergraph_Wpn_AKM, K2Node_Event_DeltaSeconds) == 0x000008, "Member 'Wpn_AKM_C_ExecuteUbergraph_Wpn_AKM::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(Wpn_AKM_C_ExecuteUbergraph_Wpn_AKM, K2Node_Event_IsFromRightHand) == 0x00000C, "Member 'Wpn_AKM_C_ExecuteUbergraph_Wpn_AKM::K2Node_Event_IsFromRightHand' has a wrong offset!");
static_assert(offsetof(Wpn_AKM_C_ExecuteUbergraph_Wpn_AKM, K2Node_Event_Hand) == 0x000010, "Member 'Wpn_AKM_C_ExecuteUbergraph_Wpn_AKM::K2Node_Event_Hand' has a wrong offset!");
static_assert(offsetof(Wpn_AKM_C_ExecuteUbergraph_Wpn_AKM, CallFunc_GetAnimInstance_ReturnValue) == 0x000018, "Member 'Wpn_AKM_C_ExecuteUbergraph_Wpn_AKM::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_AKM_C_ExecuteUbergraph_Wpn_AKM, K2Node_DynamicCast_AsWeapon_Anim_Instance) == 0x000020, "Member 'Wpn_AKM_C_ExecuteUbergraph_Wpn_AKM::K2Node_DynamicCast_AsWeapon_Anim_Instance' has a wrong offset!");
static_assert(offsetof(Wpn_AKM_C_ExecuteUbergraph_Wpn_AKM, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'Wpn_AKM_C_ExecuteUbergraph_Wpn_AKM::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Wpn_AKM_C_ExecuteUbergraph_Wpn_AKM, CallFunc_IsValid_ReturnValue) == 0x000029, "Member 'Wpn_AKM_C_ExecuteUbergraph_Wpn_AKM::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Wpn_AKM_C_ExecuteUbergraph_Wpn_AKM, CallFunc_IsValid_ReturnValue1) == 0x00002A, "Member 'Wpn_AKM_C_ExecuteUbergraph_Wpn_AKM::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(Wpn_AKM_C_ExecuteUbergraph_Wpn_AKM, CallFunc_IsValid_ReturnValue2) == 0x00002B, "Member 'Wpn_AKM_C_ExecuteUbergraph_Wpn_AKM::CallFunc_IsValid_ReturnValue2' has a wrong offset!");
static_assert(offsetof(Wpn_AKM_C_ExecuteUbergraph_Wpn_AKM, CallFunc_IsValid_ReturnValue3) == 0x00002C, "Member 'Wpn_AKM_C_ExecuteUbergraph_Wpn_AKM::CallFunc_IsValid_ReturnValue3' has a wrong offset!");

// Function Wpn_AKM.Wpn_AKM_C.OnLineTriggerPull
// 0x0010 (0x0010 - 0x0000)
struct Wpn_AKM_C_OnLineTriggerPull final
{
public:
	bool                                          IsFromRightHand;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 hand;                                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wpn_AKM_C_OnLineTriggerPull) == 0x000008, "Wrong alignment on Wpn_AKM_C_OnLineTriggerPull");
static_assert(sizeof(Wpn_AKM_C_OnLineTriggerPull) == 0x000010, "Wrong size on Wpn_AKM_C_OnLineTriggerPull");
static_assert(offsetof(Wpn_AKM_C_OnLineTriggerPull, IsFromRightHand) == 0x000000, "Member 'Wpn_AKM_C_OnLineTriggerPull::IsFromRightHand' has a wrong offset!");
static_assert(offsetof(Wpn_AKM_C_OnLineTriggerPull, hand) == 0x000008, "Member 'Wpn_AKM_C_OnLineTriggerPull::hand' has a wrong offset!");

// Function Wpn_AKM.Wpn_AKM_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct Wpn_AKM_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Wpn_AKM_C_ReceiveTick) == 0x000004, "Wrong alignment on Wpn_AKM_C_ReceiveTick");
static_assert(sizeof(Wpn_AKM_C_ReceiveTick) == 0x000004, "Wrong size on Wpn_AKM_C_ReceiveTick");
static_assert(offsetof(Wpn_AKM_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'Wpn_AKM_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

}

