#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NVSplineMesh

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SSplineMeshDetails_structs.hpp"
#include "SSplineMeshInstanceList_structs.hpp"
#include "ESplineMeshStretchMode_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ESplineMeshStaticMeshType_structs.hpp"
#include "ESplineMeshSequenceDistanceModifierType_structs.hpp"
#include "ESplineMeshSequenceType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_NVSplineMesh.BP_NVSplineMesh_C
// 0x0120 (0x0448 - 0x0328)
class ABP_NVSplineMesh_C final : public AActor
{
public:
	class USplineComponent*                       Spline;                                            // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FSSplineMeshDetails>            SplineMeshDetails;                                 // 0x0338(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	TMap<class UStaticMesh*, class UInstancedStaticMeshComponent*> StaticMeshInstances;              // 0x0348(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FRandomStream                          RandomStream;                                      // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor)
	int32                                         SequenceNumber;                                    // 0x03A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SnapToGround;                                      // 0x03A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          OverrideCurveType;                                 // 0x03A5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	ESplinePointType                              CurveType;                                         // 0x03A6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EComponentMobility                            Mobility;                                          // 0x03A7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<int32, struct FSSplineMeshInstanceList>  SplineMeshes;                                      // 0x03A8(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	ESplineMeshStaticMeshType                     StaticMeshType;                                    // 0x03F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F9[0x7];                                      // 0x03F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStaticMeshComponent*>           StaticMeshes;                                      // 0x0400(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class UStaticMesh*                            StaticMesh;                                        // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 IgnoreIndex_R;                                     // 0x0418(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	TArray<int32>                                 IgnoreIndex_L;                                     // 0x0428(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	struct FVector2D                              Offset;                                            // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Distance;                                          // 0x0440(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SpawnAirWall;                                      // 0x0444(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void UserConstructionScript();
	void BuildMeshSequence(const struct FSSplineMeshDetails& SplineMeshDetails_0, float StartDistance, float EndDistnace, TArray<struct FSSplineMeshStep>* Mesh_segment_sequence);
	void GetLongestMeshes(TArray<class UStaticMesh*>& Meshes, float Tolerance, TArray<class UStaticMesh*>* Matching_Meshes);
	void ChooseNextMeshInSequence(const struct FSSplineMeshDetails& SplineMeshDetails_0, bool First, class UStaticMesh** Chosen_Mesh);
	void FindBestMeshForLength(const struct FSSplineMeshDetails& Mesh_Details, float Desired_Length, class UStaticMesh* InitialChoice, class UStaticMesh** ChosenMesh);
	void PlaceMeshSequence(TArray<struct FSSplineMeshStep>& Mesh_Sequence, const struct FSSplineMeshDetails& SplineMeshDetails_0, TArray<struct FSSplineMeshDetails>& Dependants, int32 MeshSequenceNumber);
	void CreateStaticMeshesAtDistancesAlongSpline(const struct FSSplineMeshDetails& Spline_Mesh_Details);
	void PlaceDependants(TArray<struct FSSplineMeshDetails>& Dependants, float Distance_0, bool IsStart, bool IsMiddle, bool IsEnd);
	void CreateStaticMeshAtDistanceAlongSplineFunc(class UStaticMesh* Mesh, float Distance_0, const struct FSSplineMeshDetails& SplineMeshDetails_0);
	void CreateSplineMeshBetweenTwoDistancesAlongSpline(class UStaticMesh* Mesh, float Start_Distance, float End_Distance, float Gap, class USplineMeshComponent** CreatedSplineMesh);
	void BuildSplineMeshSequence();
	void DropSplinePointsToGround();
	void SetSplinePointCurveTypes(ESplinePointType Type);
	void ClearStaticMeshInstances();
	void PlaceSplineMeshBetweenTwoDistances(class USplineMeshComponent* SplineMeshComponent, class UStaticMesh* NewMesh, float StartDistance, float EndDistance, float Gap);
	struct FTransform CalculatePositionForStaticMeshAtDistance(float Distance_0, const struct FSSplineMeshDetails& SplineMeshDetails_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_NVSplineMesh_C">();
	}
	static class ABP_NVSplineMesh_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_NVSplineMesh_C>();
	}
};
static_assert(alignof(ABP_NVSplineMesh_C) == 0x000008, "Wrong alignment on ABP_NVSplineMesh_C");
static_assert(sizeof(ABP_NVSplineMesh_C) == 0x000448, "Wrong size on ABP_NVSplineMesh_C");
static_assert(offsetof(ABP_NVSplineMesh_C, Spline) == 0x000328, "Member 'ABP_NVSplineMesh_C::Spline' has a wrong offset!");
static_assert(offsetof(ABP_NVSplineMesh_C, DefaultSceneRoot) == 0x000330, "Member 'ABP_NVSplineMesh_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_NVSplineMesh_C, SplineMeshDetails) == 0x000338, "Member 'ABP_NVSplineMesh_C::SplineMeshDetails' has a wrong offset!");
static_assert(offsetof(ABP_NVSplineMesh_C, StaticMeshInstances) == 0x000348, "Member 'ABP_NVSplineMesh_C::StaticMeshInstances' has a wrong offset!");
static_assert(offsetof(ABP_NVSplineMesh_C, RandomStream) == 0x000398, "Member 'ABP_NVSplineMesh_C::RandomStream' has a wrong offset!");
static_assert(offsetof(ABP_NVSplineMesh_C, SequenceNumber) == 0x0003A0, "Member 'ABP_NVSplineMesh_C::SequenceNumber' has a wrong offset!");
static_assert(offsetof(ABP_NVSplineMesh_C, SnapToGround) == 0x0003A4, "Member 'ABP_NVSplineMesh_C::SnapToGround' has a wrong offset!");
static_assert(offsetof(ABP_NVSplineMesh_C, OverrideCurveType) == 0x0003A5, "Member 'ABP_NVSplineMesh_C::OverrideCurveType' has a wrong offset!");
static_assert(offsetof(ABP_NVSplineMesh_C, CurveType) == 0x0003A6, "Member 'ABP_NVSplineMesh_C::CurveType' has a wrong offset!");
static_assert(offsetof(ABP_NVSplineMesh_C, Mobility) == 0x0003A7, "Member 'ABP_NVSplineMesh_C::Mobility' has a wrong offset!");
static_assert(offsetof(ABP_NVSplineMesh_C, SplineMeshes) == 0x0003A8, "Member 'ABP_NVSplineMesh_C::SplineMeshes' has a wrong offset!");
static_assert(offsetof(ABP_NVSplineMesh_C, StaticMeshType) == 0x0003F8, "Member 'ABP_NVSplineMesh_C::StaticMeshType' has a wrong offset!");
static_assert(offsetof(ABP_NVSplineMesh_C, StaticMeshes) == 0x000400, "Member 'ABP_NVSplineMesh_C::StaticMeshes' has a wrong offset!");
static_assert(offsetof(ABP_NVSplineMesh_C, StaticMesh) == 0x000410, "Member 'ABP_NVSplineMesh_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_NVSplineMesh_C, IgnoreIndex_R) == 0x000418, "Member 'ABP_NVSplineMesh_C::IgnoreIndex_R' has a wrong offset!");
static_assert(offsetof(ABP_NVSplineMesh_C, IgnoreIndex_L) == 0x000428, "Member 'ABP_NVSplineMesh_C::IgnoreIndex_L' has a wrong offset!");
static_assert(offsetof(ABP_NVSplineMesh_C, Offset) == 0x000438, "Member 'ABP_NVSplineMesh_C::Offset' has a wrong offset!");
static_assert(offsetof(ABP_NVSplineMesh_C, Distance) == 0x000440, "Member 'ABP_NVSplineMesh_C::Distance' has a wrong offset!");
static_assert(offsetof(ABP_NVSplineMesh_C, SpawnAirWall) == 0x000444, "Member 'ABP_NVSplineMesh_C::SpawnAirWall' has a wrong offset!");

}

