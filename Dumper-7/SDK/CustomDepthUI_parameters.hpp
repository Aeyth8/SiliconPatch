#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CustomDepthUI

#include "Basic.hpp"

#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function CustomDepthUI.CustomDepthUI_C.ExecuteUbergraph_CustomDepthUI
// 0x0044 (0x0044 - 0x0000)
struct CustomDepthUI_C_ExecuteUbergraph_CustomDepthUI final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0008(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CustomDepthUI_C_ExecuteUbergraph_CustomDepthUI) == 0x000004, "Wrong alignment on CustomDepthUI_C_ExecuteUbergraph_CustomDepthUI");
static_assert(sizeof(CustomDepthUI_C_ExecuteUbergraph_CustomDepthUI) == 0x000044, "Wrong size on CustomDepthUI_C_ExecuteUbergraph_CustomDepthUI");
static_assert(offsetof(CustomDepthUI_C_ExecuteUbergraph_CustomDepthUI, EntryPoint) == 0x000000, "Member 'CustomDepthUI_C_ExecuteUbergraph_CustomDepthUI::EntryPoint' has a wrong offset!");
static_assert(offsetof(CustomDepthUI_C_ExecuteUbergraph_CustomDepthUI, K2Node_Event_IsDesignTime) == 0x000004, "Member 'CustomDepthUI_C_ExecuteUbergraph_CustomDepthUI::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(CustomDepthUI_C_ExecuteUbergraph_CustomDepthUI, K2Node_Event_MyGeometry) == 0x000008, "Member 'CustomDepthUI_C_ExecuteUbergraph_CustomDepthUI::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(CustomDepthUI_C_ExecuteUbergraph_CustomDepthUI, K2Node_Event_InDeltaTime) == 0x000040, "Member 'CustomDepthUI_C_ExecuteUbergraph_CustomDepthUI::K2Node_Event_InDeltaTime' has a wrong offset!");

// Function CustomDepthUI.CustomDepthUI_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct CustomDepthUI_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CustomDepthUI_C_PreConstruct) == 0x000001, "Wrong alignment on CustomDepthUI_C_PreConstruct");
static_assert(sizeof(CustomDepthUI_C_PreConstruct) == 0x000001, "Wrong size on CustomDepthUI_C_PreConstruct");
static_assert(offsetof(CustomDepthUI_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'CustomDepthUI_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function CustomDepthUI.CustomDepthUI_C.Tick
// 0x003C (0x003C - 0x0000)
struct CustomDepthUI_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CustomDepthUI_C_Tick) == 0x000004, "Wrong alignment on CustomDepthUI_C_Tick");
static_assert(sizeof(CustomDepthUI_C_Tick) == 0x00003C, "Wrong size on CustomDepthUI_C_Tick");
static_assert(offsetof(CustomDepthUI_C_Tick, MyGeometry) == 0x000000, "Member 'CustomDepthUI_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(CustomDepthUI_C_Tick, InDeltaTime) == 0x000038, "Member 'CustomDepthUI_C_Tick::InDeltaTime' has a wrong offset!");

}

