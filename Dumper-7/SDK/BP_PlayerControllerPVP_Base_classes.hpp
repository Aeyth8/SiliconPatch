#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerControllerPVP_Base

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "SiliconRising_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlayerControllerPVP_Base.BP_PlayerControllerPVP_Base_C
// 0x0070 (0x06F0 - 0x0680)
class ABP_PlayerControllerPVP_Base_C final : public AMer2_PVP_PlayerController
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0680(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	float                                         MouseInputSense;                                   // 0x0688(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_68C[0x4];                                      // 0x068C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_CharacterPVP_Base_C*                ControlledChar;                                    // 0x0690(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWpn_Pistol_C*                          Weapon;                                            // 0x0698(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CharType;                                          // 0x06A0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A4[0x4];                                      // 0x06A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayerID;                                          // 0x06A8(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 nickName;                                          // 0x06B8(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 HeadUrl;                                           // 0x06C8(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         Accurate;                                          // 0x06D8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WinRate;                                           // 0x06DC(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Kills;                                             // 0x06E0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalScore;                                        // 0x06E4(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RoomIndex;                                         // 0x06E8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_PlayerControllerPVP_Base(int32 EntryPoint);
	void InitPlayerController(const struct FYYMsgReqAckRoomMember& PlayerInfo, int32 CharType_0);
	void Logout();
	void ReceiveBeginPlay();
	void ReceiveDestroyed();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlayerControllerPVP_Base_C">();
	}
	static class ABP_PlayerControllerPVP_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PlayerControllerPVP_Base_C>();
	}
};
static_assert(alignof(ABP_PlayerControllerPVP_Base_C) == 0x000008, "Wrong alignment on ABP_PlayerControllerPVP_Base_C");
static_assert(sizeof(ABP_PlayerControllerPVP_Base_C) == 0x0006F0, "Wrong size on ABP_PlayerControllerPVP_Base_C");
static_assert(offsetof(ABP_PlayerControllerPVP_Base_C, UberGraphFrame) == 0x000680, "Member 'ABP_PlayerControllerPVP_Base_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_PlayerControllerPVP_Base_C, MouseInputSense) == 0x000688, "Member 'ABP_PlayerControllerPVP_Base_C::MouseInputSense' has a wrong offset!");
static_assert(offsetof(ABP_PlayerControllerPVP_Base_C, ControlledChar) == 0x000690, "Member 'ABP_PlayerControllerPVP_Base_C::ControlledChar' has a wrong offset!");
static_assert(offsetof(ABP_PlayerControllerPVP_Base_C, Weapon) == 0x000698, "Member 'ABP_PlayerControllerPVP_Base_C::Weapon' has a wrong offset!");
static_assert(offsetof(ABP_PlayerControllerPVP_Base_C, CharType) == 0x0006A0, "Member 'ABP_PlayerControllerPVP_Base_C::CharType' has a wrong offset!");
static_assert(offsetof(ABP_PlayerControllerPVP_Base_C, PlayerID) == 0x0006A8, "Member 'ABP_PlayerControllerPVP_Base_C::PlayerID' has a wrong offset!");
static_assert(offsetof(ABP_PlayerControllerPVP_Base_C, nickName) == 0x0006B8, "Member 'ABP_PlayerControllerPVP_Base_C::nickName' has a wrong offset!");
static_assert(offsetof(ABP_PlayerControllerPVP_Base_C, HeadUrl) == 0x0006C8, "Member 'ABP_PlayerControllerPVP_Base_C::HeadUrl' has a wrong offset!");
static_assert(offsetof(ABP_PlayerControllerPVP_Base_C, Accurate) == 0x0006D8, "Member 'ABP_PlayerControllerPVP_Base_C::Accurate' has a wrong offset!");
static_assert(offsetof(ABP_PlayerControllerPVP_Base_C, WinRate) == 0x0006DC, "Member 'ABP_PlayerControllerPVP_Base_C::WinRate' has a wrong offset!");
static_assert(offsetof(ABP_PlayerControllerPVP_Base_C, Kills) == 0x0006E0, "Member 'ABP_PlayerControllerPVP_Base_C::Kills' has a wrong offset!");
static_assert(offsetof(ABP_PlayerControllerPVP_Base_C, TotalScore) == 0x0006E4, "Member 'ABP_PlayerControllerPVP_Base_C::TotalScore' has a wrong offset!");
static_assert(offsetof(ABP_PlayerControllerPVP_Base_C, RoomIndex) == 0x0006E8, "Member 'ABP_PlayerControllerPVP_Base_C::RoomIndex' has a wrong offset!");

}

