#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AnimIK

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"


namespace SDK
{

// Enum AnimIK.CCDState
// NumValues: 0x0004
enum class ECCDState : uint8
{
	CS_NONE                                  = 0,
	CS_Begin                                 = 1,
	CS_SAVE                                  = 2,
	CS_MAX                                   = 3,
};

// ScriptStruct AnimIK.AnimIKBoneTransform
// 0x0040 (0x0040 - 0x0000)
struct FAnimIKBoneTransform final
{
public:
	int32                                         BoneIndex;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0030)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimIKBoneTransform) == 0x000010, "Wrong alignment on FAnimIKBoneTransform");
static_assert(sizeof(FAnimIKBoneTransform) == 0x000040, "Wrong size on FAnimIKBoneTransform");
static_assert(offsetof(FAnimIKBoneTransform, BoneIndex) == 0x000000, "Member 'FAnimIKBoneTransform::BoneIndex' has a wrong offset!");
static_assert(offsetof(FAnimIKBoneTransform, Transform) == 0x000010, "Member 'FAnimIKBoneTransform::Transform' has a wrong offset!");

// ScriptStruct AnimIK.LimitBoneType_FullBodyIK
// 0x0038 (0x0038 - 0x0000)
struct FLimitBoneType_FullBodyIK final
{
public:
	struct FBoneReference                         LimitBone;                                         // 0x0000(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               MinAngle;                                          // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               MaxAngle;                                          // 0x0024(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDefaultRefPos;                                    // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RotatorWeight;                                     // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLimitBoneType_FullBodyIK) == 0x000008, "Wrong alignment on FLimitBoneType_FullBodyIK");
static_assert(sizeof(FLimitBoneType_FullBodyIK) == 0x000038, "Wrong size on FLimitBoneType_FullBodyIK");
static_assert(offsetof(FLimitBoneType_FullBodyIK, LimitBone) == 0x000000, "Member 'FLimitBoneType_FullBodyIK::LimitBone' has a wrong offset!");
static_assert(offsetof(FLimitBoneType_FullBodyIK, MinAngle) == 0x000018, "Member 'FLimitBoneType_FullBodyIK::MinAngle' has a wrong offset!");
static_assert(offsetof(FLimitBoneType_FullBodyIK, MaxAngle) == 0x000024, "Member 'FLimitBoneType_FullBodyIK::MaxAngle' has a wrong offset!");
static_assert(offsetof(FLimitBoneType_FullBodyIK, bEnable) == 0x000030, "Member 'FLimitBoneType_FullBodyIK::bEnable' has a wrong offset!");
static_assert(offsetof(FLimitBoneType_FullBodyIK, bDefaultRefPos) == 0x000031, "Member 'FLimitBoneType_FullBodyIK::bDefaultRefPos' has a wrong offset!");
static_assert(offsetof(FLimitBoneType_FullBodyIK, RotatorWeight) == 0x000034, "Member 'FLimitBoneType_FullBodyIK::RotatorWeight' has a wrong offset!");

// ScriptStruct AnimIK.LimitBoneType
// 0x0038 (0x0038 - 0x0000)
struct FLimitBoneType final
{
public:
	struct FBoneReference                         LimitBone;                                         // 0x0000(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               MinAngle;                                          // 0x0018(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               MaxAngle;                                          // 0x0024(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDefaultRefPos;                                    // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RotatorWeight;                                     // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLimitBoneType) == 0x000008, "Wrong alignment on FLimitBoneType");
static_assert(sizeof(FLimitBoneType) == 0x000038, "Wrong size on FLimitBoneType");
static_assert(offsetof(FLimitBoneType, LimitBone) == 0x000000, "Member 'FLimitBoneType::LimitBone' has a wrong offset!");
static_assert(offsetof(FLimitBoneType, MinAngle) == 0x000018, "Member 'FLimitBoneType::MinAngle' has a wrong offset!");
static_assert(offsetof(FLimitBoneType, MaxAngle) == 0x000024, "Member 'FLimitBoneType::MaxAngle' has a wrong offset!");
static_assert(offsetof(FLimitBoneType, bEnable) == 0x000030, "Member 'FLimitBoneType::bEnable' has a wrong offset!");
static_assert(offsetof(FLimitBoneType, bDefaultRefPos) == 0x000031, "Member 'FLimitBoneType::bDefaultRefPos' has a wrong offset!");
static_assert(offsetof(FLimitBoneType, RotatorWeight) == 0x000034, "Member 'FLimitBoneType::RotatorWeight' has a wrong offset!");

// ScriptStruct AnimIK.AnimNode_CustomCCDIK
// 0x00A8 (0x0198 - 0x00F0)
struct FAnimNode_CustomCCDIK final : public FAnimNode_SkeletalControlBase
{
public:
	struct FVector                                TargetLocation;                                    // 0x00F0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Offset;                                            // 0x00FC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECCDState                                     State;                                             // 0x0108(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         EffectorBone;                                      // 0x0110(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         RootBone;                                          // 0x0128(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Precision;                                         // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxIterations;                                     // 0x0144(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableDebugDraw;                                  // 0x0148(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_149[0x7];                                      // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLimitBoneType>                 LimitBones;                                        // 0x0150(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         CacheSize;                                         // 0x0160(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_164[0x34];                                     // 0x0164(0x0034)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_CustomCCDIK) == 0x000008, "Wrong alignment on FAnimNode_CustomCCDIK");
static_assert(sizeof(FAnimNode_CustomCCDIK) == 0x000198, "Wrong size on FAnimNode_CustomCCDIK");
static_assert(offsetof(FAnimNode_CustomCCDIK, TargetLocation) == 0x0000F0, "Member 'FAnimNode_CustomCCDIK::TargetLocation' has a wrong offset!");
static_assert(offsetof(FAnimNode_CustomCCDIK, Offset) == 0x0000FC, "Member 'FAnimNode_CustomCCDIK::Offset' has a wrong offset!");
static_assert(offsetof(FAnimNode_CustomCCDIK, State) == 0x000108, "Member 'FAnimNode_CustomCCDIK::State' has a wrong offset!");
static_assert(offsetof(FAnimNode_CustomCCDIK, EffectorBone) == 0x000110, "Member 'FAnimNode_CustomCCDIK::EffectorBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_CustomCCDIK, RootBone) == 0x000128, "Member 'FAnimNode_CustomCCDIK::RootBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_CustomCCDIK, Precision) == 0x000140, "Member 'FAnimNode_CustomCCDIK::Precision' has a wrong offset!");
static_assert(offsetof(FAnimNode_CustomCCDIK, MaxIterations) == 0x000144, "Member 'FAnimNode_CustomCCDIK::MaxIterations' has a wrong offset!");
static_assert(offsetof(FAnimNode_CustomCCDIK, bEnableDebugDraw) == 0x000148, "Member 'FAnimNode_CustomCCDIK::bEnableDebugDraw' has a wrong offset!");
static_assert(offsetof(FAnimNode_CustomCCDIK, LimitBones) == 0x000150, "Member 'FAnimNode_CustomCCDIK::LimitBones' has a wrong offset!");
static_assert(offsetof(FAnimNode_CustomCCDIK, CacheSize) == 0x000160, "Member 'FAnimNode_CustomCCDIK::CacheSize' has a wrong offset!");

// ScriptStruct AnimIK.AnimNode_FullBodyIK
// 0x0440 (0x0530 - 0x00F0)
struct FAnimNode_FullBodyIK final : public FAnimNode_SkeletalControlBase
{
public:
	struct FTransform                             HeadTargetTransform;                               // 0x00F0(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             LeftHandTargetTransform;                           // 0x0120(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             RightHandTargetTransform;                          // 0x0150(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                LeftFootOffSet;                                    // 0x0180(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RightFootOffSet;                                   // 0x018C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LeftHandOffset;                                    // 0x0198(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RightHandOffset;                                   // 0x01A4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HeadBoneOffset;                                    // 0x01B0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BC[0x4];                                      // 0x01BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         HeadBone;                                          // 0x01C0(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         PrevisRootBone;                                    // 0x01D8(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         LeftUpperLegBone;                                  // 0x01F0(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         LeftLegBone;                                       // 0x0208(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         LeftFootBone;                                      // 0x0220(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         RightUpperLegBone;                                 // 0x0238(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         RightLegBone;                                      // 0x0250(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         RightFootBone;                                     // 0x0268(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         LeftHandBone;                                      // 0x0280(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         LeftArmBone;                                       // 0x0298(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         LeftUpperArmBone;                                  // 0x02B0(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         LeftClaArmBone;                                    // 0x02C8(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         RightHandBone;                                     // 0x02E0(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         RightArmBone;                                      // 0x02F8(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         RightUpperArmBone;                                 // 0x0310(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         RightClaArmBone;                                   // 0x0328(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         BodyPrecision;                                     // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BodyMaxIterations;                                 // 0x0344(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LegPrecision;                                      // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LegMaxIterations;                                  // 0x034C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandPrecision;                                     // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HandMaxIterations;                                 // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHandLength;                                     // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35C[0x4];                                      // 0x035C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLimitBoneType_FullBodyIK>      LimitBodyBones;                                    // 0x0360(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FLimitBoneType_FullBodyIK>      LimitLeftLegBones;                                 // 0x0370(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FLimitBoneType_FullBodyIK>      LimitRightLegBones;                                // 0x0380(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FLimitBoneType_FullBodyIK>      LimitLeftHandBones;                                // 0x0390(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FLimitBoneType_FullBodyIK>      LimitRightHandBones;                               // 0x03A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                TargetLimitMax;                                    // 0x03B0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLimitMin;                                    // 0x03BC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MovingValue;                                       // 0x03C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Sitting;                                           // 0x03CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3CD[0x3];                                      // 0x03CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HeadRotatorSpeed;                                  // 0x03D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HandEnable;                                        // 0x03D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D5[0x3];                                      // 0x03D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UpCrouchSpeed;                                     // 0x03D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeftHandDirection;                                 // 0x03DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightHandDirection;                                // 0x03E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeadDirection;                                     // 0x03E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdjustDownDis;                                     // 0x03E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3EC[0x114];                                    // 0x03EC(0x0114)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAnimIKBoneTransform>           Save_Rig_Skeleton_DeltTransform;                   // 0x0500(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FAnimIKBoneTransform>           Save_RigSpaceTransform;                            // 0x0510(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_520[0x10];                                     // 0x0520(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_FullBodyIK) == 0x000010, "Wrong alignment on FAnimNode_FullBodyIK");
static_assert(sizeof(FAnimNode_FullBodyIK) == 0x000530, "Wrong size on FAnimNode_FullBodyIK");
static_assert(offsetof(FAnimNode_FullBodyIK, HeadTargetTransform) == 0x0000F0, "Member 'FAnimNode_FullBodyIK::HeadTargetTransform' has a wrong offset!");
static_assert(offsetof(FAnimNode_FullBodyIK, LeftHandTargetTransform) == 0x000120, "Member 'FAnimNode_FullBodyIK::LeftHandTargetTransform' has a wrong offset!");
static_assert(offsetof(FAnimNode_FullBodyIK, RightHandTargetTransform) == 0x000150, "Member 'FAnimNode_FullBodyIK::RightHandTargetTransform' has a wrong offset!");
static_assert(offsetof(FAnimNode_FullBodyIK, LeftFootOffSet) == 0x000180, "Member 'FAnimNode_FullBodyIK::LeftFootOffSet' has a wrong offset!");
static_assert(offsetof(FAnimNode_FullBodyIK, RightFootOffSet) == 0x00018C, "Member 'FAnimNode_FullBodyIK::RightFootOffSet' has a wrong offset!");
static_assert(offsetof(FAnimNode_FullBodyIK, LeftHandOffset) == 0x000198, "Member 'FAnimNode_FullBodyIK::LeftHandOffset' has a wrong offset!");
static_assert(offsetof(FAnimNode_FullBodyIK, RightHandOffset) == 0x0001A4, "Member 'FAnimNode_FullBodyIK::RightHandOffset' has a wrong offset!");
static_assert(offsetof(FAnimNode_FullBodyIK, HeadBoneOffset) == 0x0001B0, "Member 'FAnimNode_FullBodyIK::HeadBoneOffset' has a wrong offset!");
static_assert(offsetof(FAnimNode_FullBodyIK, HeadBone) == 0x0001C0, "Member 'FAnimNode_FullBodyIK::HeadBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_FullBodyIK, PrevisRootBone) == 0x0001D8, "Member 'FAnimNode_FullBodyIK::PrevisRootBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_FullBodyIK, LeftUpperLegBone) == 0x0001F0, "Member 'FAnimNode_FullBodyIK::LeftUpperLegBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_FullBodyIK, LeftLegBone) == 0x000208, "Member 'FAnimNode_FullBodyIK::LeftLegBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_FullBodyIK, LeftFootBone) == 0x000220, "Member 'FAnimNode_FullBodyIK::LeftFootBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_FullBodyIK, RightUpperLegBone) == 0x000238, "Member 'FAnimNode_FullBodyIK::RightUpperLegBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_FullBodyIK, RightLegBone) == 0x000250, "Member 'FAnimNode_FullBodyIK::RightLegBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_FullBodyIK, RightFootBone) == 0x000268, "Member 'FAnimNode_FullBodyIK::RightFootBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_FullBodyIK, LeftHandBone) == 0x000280, "Member 'FAnimNode_FullBodyIK::LeftHandBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_FullBodyIK, LeftArmBone) == 0x000298, "Member 'FAnimNode_FullBodyIK::LeftArmBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_FullBodyIK, LeftUpperArmBone) == 0x0002B0, "Member 'FAnimNode_FullBodyIK::LeftUpperArmBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_FullBodyIK, LeftClaArmBone) == 0x0002C8, "Member 'FAnimNode_FullBodyIK::LeftClaArmBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_FullBodyIK, RightHandBone) == 0x0002E0, "Member 'FAnimNode_FullBodyIK::RightHandBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_FullBodyIK, RightArmBone) == 0x0002F8, "Member 'FAnimNode_FullBodyIK::RightArmBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_FullBodyIK, RightUpperArmBone) == 0x000310, "Member 'FAnimNode_FullBodyIK::RightUpperArmBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_FullBodyIK, RightClaArmBone) == 0x000328, "Member 'FAnimNode_FullBodyIK::RightClaArmBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_FullBodyIK, BodyPrecision) == 0x000340, "Member 'FAnimNode_FullBodyIK::BodyPrecision' has a wrong offset!");
static_assert(offsetof(FAnimNode_FullBodyIK, BodyMaxIterations) == 0x000344, "Member 'FAnimNode_FullBodyIK::BodyMaxIterations' has a wrong offset!");
static_assert(offsetof(FAnimNode_FullBodyIK, LegPrecision) == 0x000348, "Member 'FAnimNode_FullBodyIK::LegPrecision' has a wrong offset!");
static_assert(offsetof(FAnimNode_FullBodyIK, LegMaxIterations) == 0x00034C, "Member 'FAnimNode_FullBodyIK::LegMaxIterations' has a wrong offset!");
static_assert(offsetof(FAnimNode_FullBodyIK, HandPrecision) == 0x000350, "Member 'FAnimNode_FullBodyIK::HandPrecision' has a wrong offset!");
static_assert(offsetof(FAnimNode_FullBodyIK, HandMaxIterations) == 0x000354, "Member 'FAnimNode_FullBodyIK::HandMaxIterations' has a wrong offset!");
static_assert(offsetof(FAnimNode_FullBodyIK, MaxHandLength) == 0x000358, "Member 'FAnimNode_FullBodyIK::MaxHandLength' has a wrong offset!");
static_assert(offsetof(FAnimNode_FullBodyIK, LimitBodyBones) == 0x000360, "Member 'FAnimNode_FullBodyIK::LimitBodyBones' has a wrong offset!");
static_assert(offsetof(FAnimNode_FullBodyIK, LimitLeftLegBones) == 0x000370, "Member 'FAnimNode_FullBodyIK::LimitLeftLegBones' has a wrong offset!");
static_assert(offsetof(FAnimNode_FullBodyIK, LimitRightLegBones) == 0x000380, "Member 'FAnimNode_FullBodyIK::LimitRightLegBones' has a wrong offset!");
static_assert(offsetof(FAnimNode_FullBodyIK, LimitLeftHandBones) == 0x000390, "Member 'FAnimNode_FullBodyIK::LimitLeftHandBones' has a wrong offset!");
static_assert(offsetof(FAnimNode_FullBodyIK, LimitRightHandBones) == 0x0003A0, "Member 'FAnimNode_FullBodyIK::LimitRightHandBones' has a wrong offset!");
static_assert(offsetof(FAnimNode_FullBodyIK, TargetLimitMax) == 0x0003B0, "Member 'FAnimNode_FullBodyIK::TargetLimitMax' has a wrong offset!");
static_assert(offsetof(FAnimNode_FullBodyIK, TargetLimitMin) == 0x0003BC, "Member 'FAnimNode_FullBodyIK::TargetLimitMin' has a wrong offset!");
static_assert(offsetof(FAnimNode_FullBodyIK, MovingValue) == 0x0003C8, "Member 'FAnimNode_FullBodyIK::MovingValue' has a wrong offset!");
static_assert(offsetof(FAnimNode_FullBodyIK, Sitting) == 0x0003CC, "Member 'FAnimNode_FullBodyIK::Sitting' has a wrong offset!");
static_assert(offsetof(FAnimNode_FullBodyIK, HeadRotatorSpeed) == 0x0003D0, "Member 'FAnimNode_FullBodyIK::HeadRotatorSpeed' has a wrong offset!");
static_assert(offsetof(FAnimNode_FullBodyIK, HandEnable) == 0x0003D4, "Member 'FAnimNode_FullBodyIK::HandEnable' has a wrong offset!");
static_assert(offsetof(FAnimNode_FullBodyIK, UpCrouchSpeed) == 0x0003D8, "Member 'FAnimNode_FullBodyIK::UpCrouchSpeed' has a wrong offset!");
static_assert(offsetof(FAnimNode_FullBodyIK, LeftHandDirection) == 0x0003DC, "Member 'FAnimNode_FullBodyIK::LeftHandDirection' has a wrong offset!");
static_assert(offsetof(FAnimNode_FullBodyIK, RightHandDirection) == 0x0003E0, "Member 'FAnimNode_FullBodyIK::RightHandDirection' has a wrong offset!");
static_assert(offsetof(FAnimNode_FullBodyIK, HeadDirection) == 0x0003E4, "Member 'FAnimNode_FullBodyIK::HeadDirection' has a wrong offset!");
static_assert(offsetof(FAnimNode_FullBodyIK, AdjustDownDis) == 0x0003E8, "Member 'FAnimNode_FullBodyIK::AdjustDownDis' has a wrong offset!");
static_assert(offsetof(FAnimNode_FullBodyIK, Save_Rig_Skeleton_DeltTransform) == 0x000500, "Member 'FAnimNode_FullBodyIK::Save_Rig_Skeleton_DeltTransform' has a wrong offset!");
static_assert(offsetof(FAnimNode_FullBodyIK, Save_RigSpaceTransform) == 0x000510, "Member 'FAnimNode_FullBodyIK::Save_RigSpaceTransform' has a wrong offset!");

}

