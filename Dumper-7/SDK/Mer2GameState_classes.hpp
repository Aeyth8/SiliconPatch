#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Mer2GameState

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "EnumDifficuty_structs.hpp"
#include "scoreType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Mer2GameState.Mer2GameState_C
// 0x01C8 (0x0530 - 0x0368)
class AMer2GameState_C final : public AGameStateBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0368(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FString                                 ServerName;                                        // 0x0378(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          ShowScoreBoard;                                    // 0x0388(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_389[0x3];                                      // 0x0389(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OneP_BulletScore;                                  // 0x038C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OneP_ScoreHelicopterMissile;                       // 0x0390(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OneP_ScoreBossDodge;                               // 0x0394(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OneP_ScoreBossPlsma;                               // 0x0398(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OneP_BulletShot;                                   // 0x039C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OneP_BulletHit;                                    // 0x03A0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OneP_PlayerHit;                                    // 0x03A4(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OneP_BulletHeadShot;                               // 0x03A8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OneP_KillNum;                                      // 0x03AC(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TwoP_BulletScore;                                  // 0x03B0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TwoP_ScoreHelicopterMissile;                       // 0x03B4(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TwoP_ScoreBossDodge;                               // 0x03B8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TwoP_ScoreBossPlsma;                               // 0x03BC(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TwoP_BulletShot;                                   // 0x03C0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TwoP_BulletHit;                                    // 0x03C4(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TwoP_PlayerHit;                                    // 0x03C8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TwoP_BulletHeadShot;                               // 0x03CC(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TwoP_KillNum;                                      // 0x03D0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         WaveCount;                                         // 0x03D4(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         StartTime;                                         // 0x03D8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DeadTime;                                          // 0x03DC(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TimeScore;                                         // 0x03E0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OneP_DodgeScore;                                   // 0x03E4(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         WaveTotal;                                         // 0x03E8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         gameTime;                                          // 0x03EC(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TwoP_DodgeScore;                                   // 0x03F0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Lv3_TotalAttackCar;                                // 0x03F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CheckPointScore;                                   // 0x03F8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EnumDifficuty                                 CurrentDifficulty;                                 // 0x03FC(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3FD[0x3];                                      // 0x03FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FscoreType                             Lv1_ScoreType;                                     // 0x0400(0x004C)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44C[0x4];                                      // 0x044C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ID_1P;                                             // 0x0450(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 ID_2P;                                             // 0x0460(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 NickName_1P;                                       // 0x0470(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 NickName_2P;                                       // 0x0480(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IsMultiPlayer;                                     // 0x0490(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_491[0x3];                                      // 0x0491(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AchievementKillCount;                              // 0x0494(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsChangeWeapon;                                    // 0x0498(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsUseContinue;                                     // 0x0499(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49A[0x2];                                      // 0x049A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FloatTime;                                         // 0x049C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<int32, float>                            KillTimeMap;                                       // 0x04A0(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	int32                                         AchievementKillCount_Bird;                         // 0x04F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HPBonusGetCount;                                   // 0x04F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HeadShotCount;                                     // 0x04F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HitMissileCount;                                   // 0x04FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HitBossMissileCount;                               // 0x0500(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PlayerHitCount;                                    // 0x0504(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBreakLv2AnyGlass;                                // 0x0508(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_509[0x3];                                      // 0x0509(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RevolveCount;                                      // 0x050C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         GunAyCount;                                        // 0x0510(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BossJumpDodgeCount;                                // 0x0514(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsUseAllWeaponClip;                                // 0x0518(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsUnlockHOT_GUNNER;                                // 0x0519(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51A[0x2];                                      // 0x051A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BreakCarGlassCount;                                // 0x051C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHurtNormalCarLv4;                                // 0x0520(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_521[0x3];                                      // 0x0521(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Lv4PassbyCarCount;                                 // 0x0524(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLv2Alert;                                        // 0x0528(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsLv2AlertShouldCheck;                             // 0x0529(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_Mer2GameState(int32 EntryPoint);
	void Lv2Alert();
	void AddPassByCarCount();
	void UnlockAssassin();
	void AddBreakCarGlassCount();
	void AddBossJumpDodgeCount();
	void AddGunAyCount();
	void AddRevolveCount();
	void AddPlayerHitCount();
	void AddHitBossMissileCount();
	void AddHitMissileCount();
	void AddHeadShotCount();
	void AddHPBonusGetCount();
	void AddAchievementLevel2KillBird();
	void AddAchievementKillCount();
	void SendPlayerID(const class FString& ID, const class FString& nickName, bool IsServer);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void ClearScore(bool OneP);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Mer2GameState_C">();
	}
	static class AMer2GameState_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMer2GameState_C>();
	}
};
static_assert(alignof(AMer2GameState_C) == 0x000008, "Wrong alignment on AMer2GameState_C");
static_assert(sizeof(AMer2GameState_C) == 0x000530, "Wrong size on AMer2GameState_C");
static_assert(offsetof(AMer2GameState_C, UberGraphFrame) == 0x000368, "Member 'AMer2GameState_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, DefaultSceneRoot) == 0x000370, "Member 'AMer2GameState_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, ServerName) == 0x000378, "Member 'AMer2GameState_C::ServerName' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, ShowScoreBoard) == 0x000388, "Member 'AMer2GameState_C::ShowScoreBoard' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, OneP_BulletScore) == 0x00038C, "Member 'AMer2GameState_C::OneP_BulletScore' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, OneP_ScoreHelicopterMissile) == 0x000390, "Member 'AMer2GameState_C::OneP_ScoreHelicopterMissile' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, OneP_ScoreBossDodge) == 0x000394, "Member 'AMer2GameState_C::OneP_ScoreBossDodge' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, OneP_ScoreBossPlsma) == 0x000398, "Member 'AMer2GameState_C::OneP_ScoreBossPlsma' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, OneP_BulletShot) == 0x00039C, "Member 'AMer2GameState_C::OneP_BulletShot' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, OneP_BulletHit) == 0x0003A0, "Member 'AMer2GameState_C::OneP_BulletHit' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, OneP_PlayerHit) == 0x0003A4, "Member 'AMer2GameState_C::OneP_PlayerHit' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, OneP_BulletHeadShot) == 0x0003A8, "Member 'AMer2GameState_C::OneP_BulletHeadShot' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, OneP_KillNum) == 0x0003AC, "Member 'AMer2GameState_C::OneP_KillNum' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, TwoP_BulletScore) == 0x0003B0, "Member 'AMer2GameState_C::TwoP_BulletScore' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, TwoP_ScoreHelicopterMissile) == 0x0003B4, "Member 'AMer2GameState_C::TwoP_ScoreHelicopterMissile' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, TwoP_ScoreBossDodge) == 0x0003B8, "Member 'AMer2GameState_C::TwoP_ScoreBossDodge' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, TwoP_ScoreBossPlsma) == 0x0003BC, "Member 'AMer2GameState_C::TwoP_ScoreBossPlsma' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, TwoP_BulletShot) == 0x0003C0, "Member 'AMer2GameState_C::TwoP_BulletShot' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, TwoP_BulletHit) == 0x0003C4, "Member 'AMer2GameState_C::TwoP_BulletHit' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, TwoP_PlayerHit) == 0x0003C8, "Member 'AMer2GameState_C::TwoP_PlayerHit' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, TwoP_BulletHeadShot) == 0x0003CC, "Member 'AMer2GameState_C::TwoP_BulletHeadShot' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, TwoP_KillNum) == 0x0003D0, "Member 'AMer2GameState_C::TwoP_KillNum' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, WaveCount) == 0x0003D4, "Member 'AMer2GameState_C::WaveCount' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, StartTime) == 0x0003D8, "Member 'AMer2GameState_C::StartTime' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, DeadTime) == 0x0003DC, "Member 'AMer2GameState_C::DeadTime' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, TimeScore) == 0x0003E0, "Member 'AMer2GameState_C::TimeScore' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, OneP_DodgeScore) == 0x0003E4, "Member 'AMer2GameState_C::OneP_DodgeScore' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, WaveTotal) == 0x0003E8, "Member 'AMer2GameState_C::WaveTotal' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, gameTime) == 0x0003EC, "Member 'AMer2GameState_C::gameTime' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, TwoP_DodgeScore) == 0x0003F0, "Member 'AMer2GameState_C::TwoP_DodgeScore' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, Lv3_TotalAttackCar) == 0x0003F4, "Member 'AMer2GameState_C::Lv3_TotalAttackCar' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, CheckPointScore) == 0x0003F8, "Member 'AMer2GameState_C::CheckPointScore' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, CurrentDifficulty) == 0x0003FC, "Member 'AMer2GameState_C::CurrentDifficulty' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, Lv1_ScoreType) == 0x000400, "Member 'AMer2GameState_C::Lv1_ScoreType' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, ID_1P) == 0x000450, "Member 'AMer2GameState_C::ID_1P' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, ID_2P) == 0x000460, "Member 'AMer2GameState_C::ID_2P' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, NickName_1P) == 0x000470, "Member 'AMer2GameState_C::NickName_1P' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, NickName_2P) == 0x000480, "Member 'AMer2GameState_C::NickName_2P' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, IsMultiPlayer) == 0x000490, "Member 'AMer2GameState_C::IsMultiPlayer' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, AchievementKillCount) == 0x000494, "Member 'AMer2GameState_C::AchievementKillCount' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, IsChangeWeapon) == 0x000498, "Member 'AMer2GameState_C::IsChangeWeapon' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, IsUseContinue) == 0x000499, "Member 'AMer2GameState_C::IsUseContinue' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, FloatTime) == 0x00049C, "Member 'AMer2GameState_C::FloatTime' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, KillTimeMap) == 0x0004A0, "Member 'AMer2GameState_C::KillTimeMap' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, AchievementKillCount_Bird) == 0x0004F0, "Member 'AMer2GameState_C::AchievementKillCount_Bird' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, HPBonusGetCount) == 0x0004F4, "Member 'AMer2GameState_C::HPBonusGetCount' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, HeadShotCount) == 0x0004F8, "Member 'AMer2GameState_C::HeadShotCount' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, HitMissileCount) == 0x0004FC, "Member 'AMer2GameState_C::HitMissileCount' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, HitBossMissileCount) == 0x000500, "Member 'AMer2GameState_C::HitBossMissileCount' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, PlayerHitCount) == 0x000504, "Member 'AMer2GameState_C::PlayerHitCount' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, IsBreakLv2AnyGlass) == 0x000508, "Member 'AMer2GameState_C::IsBreakLv2AnyGlass' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, RevolveCount) == 0x00050C, "Member 'AMer2GameState_C::RevolveCount' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, GunAyCount) == 0x000510, "Member 'AMer2GameState_C::GunAyCount' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, BossJumpDodgeCount) == 0x000514, "Member 'AMer2GameState_C::BossJumpDodgeCount' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, IsUseAllWeaponClip) == 0x000518, "Member 'AMer2GameState_C::IsUseAllWeaponClip' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, IsUnlockHOT_GUNNER) == 0x000519, "Member 'AMer2GameState_C::IsUnlockHOT_GUNNER' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, BreakCarGlassCount) == 0x00051C, "Member 'AMer2GameState_C::BreakCarGlassCount' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, IsHurtNormalCarLv4) == 0x000520, "Member 'AMer2GameState_C::IsHurtNormalCarLv4' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, Lv4PassbyCarCount) == 0x000524, "Member 'AMer2GameState_C::Lv4PassbyCarCount' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, IsLv2Alert) == 0x000528, "Member 'AMer2GameState_C::IsLv2Alert' has a wrong offset!");
static_assert(offsetof(AMer2GameState_C, IsLv2AlertShouldCheck) == 0x000529, "Member 'AMer2GameState_C::IsLv2AlertShouldCheck' has a wrong offset!");

}

