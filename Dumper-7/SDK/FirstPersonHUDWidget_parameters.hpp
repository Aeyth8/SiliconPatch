#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FirstPersonHUDWidget

#include "Basic.hpp"

#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function FirstPersonHUDWidget.FirstPersonHUDWidget_C.ExecuteUbergraph_FirstPersonHUDWidget
// 0x0044 (0x0044 - 0x0000)
struct FirstPersonHUDWidget_C_ExecuteUbergraph_FirstPersonHUDWidget final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0004(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FirstPersonHUDWidget_C_ExecuteUbergraph_FirstPersonHUDWidget) == 0x000004, "Wrong alignment on FirstPersonHUDWidget_C_ExecuteUbergraph_FirstPersonHUDWidget");
static_assert(sizeof(FirstPersonHUDWidget_C_ExecuteUbergraph_FirstPersonHUDWidget) == 0x000044, "Wrong size on FirstPersonHUDWidget_C_ExecuteUbergraph_FirstPersonHUDWidget");
static_assert(offsetof(FirstPersonHUDWidget_C_ExecuteUbergraph_FirstPersonHUDWidget, EntryPoint) == 0x000000, "Member 'FirstPersonHUDWidget_C_ExecuteUbergraph_FirstPersonHUDWidget::EntryPoint' has a wrong offset!");
static_assert(offsetof(FirstPersonHUDWidget_C_ExecuteUbergraph_FirstPersonHUDWidget, K2Node_Event_MyGeometry) == 0x000004, "Member 'FirstPersonHUDWidget_C_ExecuteUbergraph_FirstPersonHUDWidget::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(FirstPersonHUDWidget_C_ExecuteUbergraph_FirstPersonHUDWidget, K2Node_Event_InDeltaTime) == 0x00003C, "Member 'FirstPersonHUDWidget_C_ExecuteUbergraph_FirstPersonHUDWidget::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(FirstPersonHUDWidget_C_ExecuteUbergraph_FirstPersonHUDWidget, K2Node_Event_IsDesignTime) == 0x000040, "Member 'FirstPersonHUDWidget_C_ExecuteUbergraph_FirstPersonHUDWidget::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function FirstPersonHUDWidget.FirstPersonHUDWidget_C.Tick
// 0x003C (0x003C - 0x0000)
struct FirstPersonHUDWidget_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FirstPersonHUDWidget_C_Tick) == 0x000004, "Wrong alignment on FirstPersonHUDWidget_C_Tick");
static_assert(sizeof(FirstPersonHUDWidget_C_Tick) == 0x00003C, "Wrong size on FirstPersonHUDWidget_C_Tick");
static_assert(offsetof(FirstPersonHUDWidget_C_Tick, MyGeometry) == 0x000000, "Member 'FirstPersonHUDWidget_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(FirstPersonHUDWidget_C_Tick, InDeltaTime) == 0x000038, "Member 'FirstPersonHUDWidget_C_Tick::InDeltaTime' has a wrong offset!");

// Function FirstPersonHUDWidget.FirstPersonHUDWidget_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct FirstPersonHUDWidget_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FirstPersonHUDWidget_C_PreConstruct) == 0x000001, "Wrong alignment on FirstPersonHUDWidget_C_PreConstruct");
static_assert(sizeof(FirstPersonHUDWidget_C_PreConstruct) == 0x000001, "Wrong size on FirstPersonHUDWidget_C_PreConstruct");
static_assert(offsetof(FirstPersonHUDWidget_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'FirstPersonHUDWidget_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function FirstPersonHUDWidget.FirstPersonHUDWidget_C.ShowDead
// 0x0001 (0x0001 - 0x0000)
struct FirstPersonHUDWidget_C_ShowDead final
{
public:
	bool                                          IsShow;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FirstPersonHUDWidget_C_ShowDead) == 0x000001, "Wrong alignment on FirstPersonHUDWidget_C_ShowDead");
static_assert(sizeof(FirstPersonHUDWidget_C_ShowDead) == 0x000001, "Wrong size on FirstPersonHUDWidget_C_ShowDead");
static_assert(offsetof(FirstPersonHUDWidget_C_ShowDead, IsShow) == 0x000000, "Member 'FirstPersonHUDWidget_C_ShowDead::IsShow' has a wrong offset!");

// Function FirstPersonHUDWidget.FirstPersonHUDWidget_C.ShowMissionFail
// 0x0020 (0x0020 - 0x0000)
struct FirstPersonHUDWidget_C_ShowMissionFail final
{
public:
	bool                                          _show;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   _text;                                             // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(FirstPersonHUDWidget_C_ShowMissionFail) == 0x000008, "Wrong alignment on FirstPersonHUDWidget_C_ShowMissionFail");
static_assert(sizeof(FirstPersonHUDWidget_C_ShowMissionFail) == 0x000020, "Wrong size on FirstPersonHUDWidget_C_ShowMissionFail");
static_assert(offsetof(FirstPersonHUDWidget_C_ShowMissionFail, _show) == 0x000000, "Member 'FirstPersonHUDWidget_C_ShowMissionFail::_show' has a wrong offset!");
static_assert(offsetof(FirstPersonHUDWidget_C_ShowMissionFail, _text) == 0x000008, "Member 'FirstPersonHUDWidget_C_ShowMissionFail::_text' has a wrong offset!");

}

