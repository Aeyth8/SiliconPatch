#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LevelElevator

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_LevelElevator.BP_LevelElevator_C
// 0x00B8 (0x03E0 - 0x0328)
class ABP_LevelElevator_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0328(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USkeletalMeshComponent*                 ElevatorOutDoor;                                   // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Floor;                                             // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        OutDoor_Root;                                      // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      PlayerLocation;                                    // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 ElevatorDoor;                                      // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UProp_Elevator_Skeleton_AnimBlueprint_C* AnimBP;                                           // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_LevelElevator_C*                    NextElevator;                                      // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   ElevatorComplete;                                  // 0x0378(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UProp_Elevator_outDoor_Skeleton_AnimBlueprint_C* AnimBPOutDoor;                            // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         StartIndex;                                        // 0x0390(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldEnd;                                         // 0x0394(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_395[0x3];                                      // 0x0395(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        Sound;                                             // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldPlaySound;                                   // 0x03A0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A1[0x7];                                      // 0x03A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   DoTeleportPlayer;                                  // 0x03A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         ElevatorID;                                        // 0x03B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BC[0x4];                                      // 0x03BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnEndRoll;                                         // 0x03C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          ShouldContinue;                                    // 0x03D0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D1[0x7];                                      // 0x03D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_CaptionsTools_C*                    captions;                                          // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_LevelElevator(int32 EntryPoint);
	void PlaySound(int32 Index_0, bool Stop);
	void SetRolling(bool Value);
	void DoTeleport(const struct FTransform& TargetTrans);
	void CameraFade(bool IsFadeIn);
	void SetOutDoorVisibility(bool Value);
	void OnTeleportPlayer(const struct FTransform& TargetTransform);
	void EndRoll();
	void StartRoll();
	void TeleportPlayer();
	void CloseDoor();
	void OpenDoor();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_LevelElevator_C">();
	}
	static class ABP_LevelElevator_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_LevelElevator_C>();
	}
};
static_assert(alignof(ABP_LevelElevator_C) == 0x000008, "Wrong alignment on ABP_LevelElevator_C");
static_assert(sizeof(ABP_LevelElevator_C) == 0x0003E0, "Wrong size on ABP_LevelElevator_C");
static_assert(offsetof(ABP_LevelElevator_C, UberGraphFrame) == 0x000328, "Member 'ABP_LevelElevator_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_LevelElevator_C, ElevatorOutDoor) == 0x000330, "Member 'ABP_LevelElevator_C::ElevatorOutDoor' has a wrong offset!");
static_assert(offsetof(ABP_LevelElevator_C, Floor) == 0x000338, "Member 'ABP_LevelElevator_C::Floor' has a wrong offset!");
static_assert(offsetof(ABP_LevelElevator_C, OutDoor_Root) == 0x000340, "Member 'ABP_LevelElevator_C::OutDoor_Root' has a wrong offset!");
static_assert(offsetof(ABP_LevelElevator_C, Arrow) == 0x000348, "Member 'ABP_LevelElevator_C::Arrow' has a wrong offset!");
static_assert(offsetof(ABP_LevelElevator_C, PlayerLocation) == 0x000350, "Member 'ABP_LevelElevator_C::PlayerLocation' has a wrong offset!");
static_assert(offsetof(ABP_LevelElevator_C, ElevatorDoor) == 0x000358, "Member 'ABP_LevelElevator_C::ElevatorDoor' has a wrong offset!");
static_assert(offsetof(ABP_LevelElevator_C, DefaultSceneRoot) == 0x000360, "Member 'ABP_LevelElevator_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_LevelElevator_C, AnimBP) == 0x000368, "Member 'ABP_LevelElevator_C::AnimBP' has a wrong offset!");
static_assert(offsetof(ABP_LevelElevator_C, NextElevator) == 0x000370, "Member 'ABP_LevelElevator_C::NextElevator' has a wrong offset!");
static_assert(offsetof(ABP_LevelElevator_C, ElevatorComplete) == 0x000378, "Member 'ABP_LevelElevator_C::ElevatorComplete' has a wrong offset!");
static_assert(offsetof(ABP_LevelElevator_C, AnimBPOutDoor) == 0x000388, "Member 'ABP_LevelElevator_C::AnimBPOutDoor' has a wrong offset!");
static_assert(offsetof(ABP_LevelElevator_C, StartIndex) == 0x000390, "Member 'ABP_LevelElevator_C::StartIndex' has a wrong offset!");
static_assert(offsetof(ABP_LevelElevator_C, ShouldEnd) == 0x000394, "Member 'ABP_LevelElevator_C::ShouldEnd' has a wrong offset!");
static_assert(offsetof(ABP_LevelElevator_C, Sound) == 0x000398, "Member 'ABP_LevelElevator_C::Sound' has a wrong offset!");
static_assert(offsetof(ABP_LevelElevator_C, ShouldPlaySound) == 0x0003A0, "Member 'ABP_LevelElevator_C::ShouldPlaySound' has a wrong offset!");
static_assert(offsetof(ABP_LevelElevator_C, DoTeleportPlayer) == 0x0003A8, "Member 'ABP_LevelElevator_C::DoTeleportPlayer' has a wrong offset!");
static_assert(offsetof(ABP_LevelElevator_C, ElevatorID) == 0x0003B8, "Member 'ABP_LevelElevator_C::ElevatorID' has a wrong offset!");
static_assert(offsetof(ABP_LevelElevator_C, OnEndRoll) == 0x0003C0, "Member 'ABP_LevelElevator_C::OnEndRoll' has a wrong offset!");
static_assert(offsetof(ABP_LevelElevator_C, ShouldContinue) == 0x0003D0, "Member 'ABP_LevelElevator_C::ShouldContinue' has a wrong offset!");
static_assert(offsetof(ABP_LevelElevator_C, captions) == 0x0003D8, "Member 'ABP_LevelElevator_C::captions' has a wrong offset!");

}

