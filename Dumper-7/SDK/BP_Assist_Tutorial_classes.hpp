#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Assist_Tutorial

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "SiliconRising_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Assist_Tutorial.BP_Assist_Tutorial_C
// 0x0120 (0x0860 - 0x0740)
class ABP_Assist_Tutorial_C final : public ACharacter
{
public:
	uint8                                         Pad_738[0x8];                                      // 0x0738(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0740(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        HeadPoint;                                         // 0x0748(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 IKMesh;                                            // 0x0750(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   DamageSphere;                                      // 0x0758(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UKRVRMotionController_C*                LeftMotionController;                              // 0x0760(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UKRVRMotionController_C*                RightMotionController;                             // 0x0768(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       MainCamera;                                        // 0x0770(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        VRRoot;                                            // 0x0778(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         HitReaction_BlendWeight_8E3E676C4ED89E073E9FD49BC8D405F8; // 0x0780(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            HitReaction__Direction_8E3E676C4ED89E073E9FD49BC8D405F8; // 0x0784(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_785[0x3];                                      // 0x0785(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     HitReaction;                                       // 0x0788(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MouseInputSense;                                   // 0x0790(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_794[0x4];                                      // 0x0794(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABPWeaponBase_C*                        LeftWeapon;                                        // 0x0798(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	class ABPWeaponBase_C*                        RightWeapon;                                       // 0x07A0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	class ABPDefaultHand_C*                       LeftHand;                                          // 0x07A8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	class ABPRightHand_C*                         RightHand;                                         // 0x07B0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          OnSeat;                                            // 0x07B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CanMove;                                           // 0x07B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BA[0x6];                                      // 0x07BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TeamTag;                                           // 0x07C0(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, ExposeOnSpawn, HasGetValueTypeHash)
	TArray<class ABP_NPC_Base_C*>                 EnemyChars;                                        // 0x07D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ABP_CharacterPVP_Base_C*>        CompanionChars;                                    // 0x07E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          IsAIControlled;                                    // 0x07F0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F1[0x7];                                      // 0x07F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PVP_StartPosition_C*                CurrentStartTarget;                                // 0x07F8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PVP_StartPosition_C*                LastStartTarget;                                   // 0x0800(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HP;                                                // 0x0808(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxHP;                                             // 0x080C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DamageSphereMI;                                    // 0x0810(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Undead;                                            // 0x0818(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsDead;                                            // 0x0819(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UseKeyboardControl;                                // 0x081A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsHMDEnabled;                                      // 0x081B(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81C[0x4];                                      // 0x081C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BoneName;                                          // 0x0820(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IsInHitReaction;                                   // 0x0830(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_831[0x3];                                      // 0x0831(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TargetState;                                       // 0x0834(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SoundVolume;                                       // 0x0838(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInAttackLoop;                                    // 0x083C(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83D[0x3];                                      // 0x083D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitNormal;                                         // 0x0840(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HitDamage;                                         // 0x084C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCrouch;                                          // 0x0850(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsRightMControllerEnable;                          // 0x0851(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          IsLeftMControllerEnable;                           // 0x0852(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)

public:
	void ExecuteUbergraph_BP_Assist_Tutorial(int32 EntryPoint);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void InpAxisEvt_MoveRight_K2Node_InputAxisEvent_192(float AxisValue);
	void InpAxisEvt_MoveForward_K2Node_InputAxisEvent_181(float AxisValue);
	void InpAxisEvt_LookUp_K2Node_InputAxisEvent_172(float AxisValue);
	void InpAxisEvt_Turn_K2Node_InputAxisEvent_157(float AxisValue);
	void DropCharWeapon(bool IsRight, bool IsDestroy);
	void OnMotionControllerCheck();
	void SetMotionControllerEnable(bool IsRight, bool Value);
	void UnPoccessChar();
	void OnHitReaction(const class FString& BoneName_0, const struct FVector& HitLocation, const struct FVector& HitNormal_0, float HitDamage_0);
	void OnCrouch(bool Value);
	void BndEvt__IKMesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnServerCheckHMDStatus(bool Enabled);
	void CheckHMDStatus();
	void ResetControllerRotation(const struct FRotator& Rotation);
	void HealMe(float Health);
	void DamageMe(float Damage);
	void SetUndead(bool Value);
	void OnHPTick();
	void OnDead();
	void OnHapticEffect(class UHapticFeedbackEffect_Base* HapticEffect, EControllerHand hand, float Scale, bool Loop);
	void Reload(bool IsRightHand);
	void ReleaseTrigger(bool IsRightHand);
	void PullTrigger(bool IsRightHand);
	void SpawnWeapon(EItemTypes WeaponType, bool IsRight);
	void ResetRotation();
	void PauseAIControl();
	void SetAnimCrouch(bool Value);
	void AIControlTick(float DeltaSeconds);
	void EndAIControl();
	void StartAIControl();
	void InpActEvt_Decimal_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_NumPadTwo_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void InpActEvt_NumPadEight_K2Node_InputKeyEvent_2(const struct FKey& Key);
	void InpActEvt_LeftControl_K2Node_InputKeyEvent_3(const struct FKey& Key);
	void InpActEvt_LeftControl_K2Node_InputKeyEvent_4(const struct FKey& Key);
	void InpActEvt_Reload_L_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_Fire_L_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpActEvt_Fire_L_K2Node_InputActionEvent_2(const struct FKey& Key);
	void InpActEvt_Fire_K2Node_InputActionEvent_3(const struct FKey& Key);
	void InpActEvt_Fire_K2Node_InputActionEvent_4(const struct FKey& Key);
	void InpActEvt_Reload_K2Node_InputActionEvent_5(const struct FKey& Key);
	void InpActEvt_Jump_K2Node_InputActionEvent_6(const struct FKey& Key);
	void InpActEvt_Jump_K2Node_InputActionEvent_7(const struct FKey& Key);
	void InpActEvt_U_K2Node_InputKeyEvent_5(const struct FKey& Key);
	void InpActEvt_Three_K2Node_InputKeyEvent_6(const struct FKey& Key);
	void InpActEvt_Two_K2Node_InputKeyEvent_7(const struct FKey& Key);
	void InpActEvt_One_K2Node_InputKeyEvent_8(const struct FKey& Key);
	void HitReaction__UpdateFunc();
	void HitReaction__FinishedFunc();
	void UserConstructionScript();
	void GetAimPos(struct FVector* Pos);
	void OnRep_RightHand();
	void OnRep_LeftHand();
	void OnRep_RightWeapon();
	void OnRep_LeftWeapon();
	void WeaponInputAction();
	void FindTargetToShoot(class USceneComponent** Target);
	void GetAIAimPos(struct FVector* Pos);
	void UpdateHandUI();
	void OnRep_IsLeftMControllerEnable();
	void OnRep_IsRightMControllerEnable();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Assist_Tutorial_C">();
	}
	static class ABP_Assist_Tutorial_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Assist_Tutorial_C>();
	}
};
static_assert(alignof(ABP_Assist_Tutorial_C) == 0x000010, "Wrong alignment on ABP_Assist_Tutorial_C");
static_assert(sizeof(ABP_Assist_Tutorial_C) == 0x000860, "Wrong size on ABP_Assist_Tutorial_C");
static_assert(offsetof(ABP_Assist_Tutorial_C, UberGraphFrame) == 0x000740, "Member 'ABP_Assist_Tutorial_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Assist_Tutorial_C, HeadPoint) == 0x000748, "Member 'ABP_Assist_Tutorial_C::HeadPoint' has a wrong offset!");
static_assert(offsetof(ABP_Assist_Tutorial_C, IKMesh) == 0x000750, "Member 'ABP_Assist_Tutorial_C::IKMesh' has a wrong offset!");
static_assert(offsetof(ABP_Assist_Tutorial_C, DamageSphere) == 0x000758, "Member 'ABP_Assist_Tutorial_C::DamageSphere' has a wrong offset!");
static_assert(offsetof(ABP_Assist_Tutorial_C, LeftMotionController) == 0x000760, "Member 'ABP_Assist_Tutorial_C::LeftMotionController' has a wrong offset!");
static_assert(offsetof(ABP_Assist_Tutorial_C, RightMotionController) == 0x000768, "Member 'ABP_Assist_Tutorial_C::RightMotionController' has a wrong offset!");
static_assert(offsetof(ABP_Assist_Tutorial_C, MainCamera) == 0x000770, "Member 'ABP_Assist_Tutorial_C::MainCamera' has a wrong offset!");
static_assert(offsetof(ABP_Assist_Tutorial_C, VRRoot) == 0x000778, "Member 'ABP_Assist_Tutorial_C::VRRoot' has a wrong offset!");
static_assert(offsetof(ABP_Assist_Tutorial_C, HitReaction_BlendWeight_8E3E676C4ED89E073E9FD49BC8D405F8) == 0x000780, "Member 'ABP_Assist_Tutorial_C::HitReaction_BlendWeight_8E3E676C4ED89E073E9FD49BC8D405F8' has a wrong offset!");
static_assert(offsetof(ABP_Assist_Tutorial_C, HitReaction__Direction_8E3E676C4ED89E073E9FD49BC8D405F8) == 0x000784, "Member 'ABP_Assist_Tutorial_C::HitReaction__Direction_8E3E676C4ED89E073E9FD49BC8D405F8' has a wrong offset!");
static_assert(offsetof(ABP_Assist_Tutorial_C, HitReaction) == 0x000788, "Member 'ABP_Assist_Tutorial_C::HitReaction' has a wrong offset!");
static_assert(offsetof(ABP_Assist_Tutorial_C, MouseInputSense) == 0x000790, "Member 'ABP_Assist_Tutorial_C::MouseInputSense' has a wrong offset!");
static_assert(offsetof(ABP_Assist_Tutorial_C, LeftWeapon) == 0x000798, "Member 'ABP_Assist_Tutorial_C::LeftWeapon' has a wrong offset!");
static_assert(offsetof(ABP_Assist_Tutorial_C, RightWeapon) == 0x0007A0, "Member 'ABP_Assist_Tutorial_C::RightWeapon' has a wrong offset!");
static_assert(offsetof(ABP_Assist_Tutorial_C, LeftHand) == 0x0007A8, "Member 'ABP_Assist_Tutorial_C::LeftHand' has a wrong offset!");
static_assert(offsetof(ABP_Assist_Tutorial_C, RightHand) == 0x0007B0, "Member 'ABP_Assist_Tutorial_C::RightHand' has a wrong offset!");
static_assert(offsetof(ABP_Assist_Tutorial_C, OnSeat) == 0x0007B8, "Member 'ABP_Assist_Tutorial_C::OnSeat' has a wrong offset!");
static_assert(offsetof(ABP_Assist_Tutorial_C, CanMove) == 0x0007B9, "Member 'ABP_Assist_Tutorial_C::CanMove' has a wrong offset!");
static_assert(offsetof(ABP_Assist_Tutorial_C, TeamTag) == 0x0007C0, "Member 'ABP_Assist_Tutorial_C::TeamTag' has a wrong offset!");
static_assert(offsetof(ABP_Assist_Tutorial_C, EnemyChars) == 0x0007D0, "Member 'ABP_Assist_Tutorial_C::EnemyChars' has a wrong offset!");
static_assert(offsetof(ABP_Assist_Tutorial_C, CompanionChars) == 0x0007E0, "Member 'ABP_Assist_Tutorial_C::CompanionChars' has a wrong offset!");
static_assert(offsetof(ABP_Assist_Tutorial_C, IsAIControlled) == 0x0007F0, "Member 'ABP_Assist_Tutorial_C::IsAIControlled' has a wrong offset!");
static_assert(offsetof(ABP_Assist_Tutorial_C, CurrentStartTarget) == 0x0007F8, "Member 'ABP_Assist_Tutorial_C::CurrentStartTarget' has a wrong offset!");
static_assert(offsetof(ABP_Assist_Tutorial_C, LastStartTarget) == 0x000800, "Member 'ABP_Assist_Tutorial_C::LastStartTarget' has a wrong offset!");
static_assert(offsetof(ABP_Assist_Tutorial_C, HP) == 0x000808, "Member 'ABP_Assist_Tutorial_C::HP' has a wrong offset!");
static_assert(offsetof(ABP_Assist_Tutorial_C, MaxHP) == 0x00080C, "Member 'ABP_Assist_Tutorial_C::MaxHP' has a wrong offset!");
static_assert(offsetof(ABP_Assist_Tutorial_C, DamageSphereMI) == 0x000810, "Member 'ABP_Assist_Tutorial_C::DamageSphereMI' has a wrong offset!");
static_assert(offsetof(ABP_Assist_Tutorial_C, Undead) == 0x000818, "Member 'ABP_Assist_Tutorial_C::Undead' has a wrong offset!");
static_assert(offsetof(ABP_Assist_Tutorial_C, IsDead) == 0x000819, "Member 'ABP_Assist_Tutorial_C::IsDead' has a wrong offset!");
static_assert(offsetof(ABP_Assist_Tutorial_C, UseKeyboardControl) == 0x00081A, "Member 'ABP_Assist_Tutorial_C::UseKeyboardControl' has a wrong offset!");
static_assert(offsetof(ABP_Assist_Tutorial_C, IsHMDEnabled) == 0x00081B, "Member 'ABP_Assist_Tutorial_C::IsHMDEnabled' has a wrong offset!");
static_assert(offsetof(ABP_Assist_Tutorial_C, BoneName) == 0x000820, "Member 'ABP_Assist_Tutorial_C::BoneName' has a wrong offset!");
static_assert(offsetof(ABP_Assist_Tutorial_C, IsInHitReaction) == 0x000830, "Member 'ABP_Assist_Tutorial_C::IsInHitReaction' has a wrong offset!");
static_assert(offsetof(ABP_Assist_Tutorial_C, TargetState) == 0x000834, "Member 'ABP_Assist_Tutorial_C::TargetState' has a wrong offset!");
static_assert(offsetof(ABP_Assist_Tutorial_C, SoundVolume) == 0x000838, "Member 'ABP_Assist_Tutorial_C::SoundVolume' has a wrong offset!");
static_assert(offsetof(ABP_Assist_Tutorial_C, IsInAttackLoop) == 0x00083C, "Member 'ABP_Assist_Tutorial_C::IsInAttackLoop' has a wrong offset!");
static_assert(offsetof(ABP_Assist_Tutorial_C, HitNormal) == 0x000840, "Member 'ABP_Assist_Tutorial_C::HitNormal' has a wrong offset!");
static_assert(offsetof(ABP_Assist_Tutorial_C, HitDamage) == 0x00084C, "Member 'ABP_Assist_Tutorial_C::HitDamage' has a wrong offset!");
static_assert(offsetof(ABP_Assist_Tutorial_C, IsCrouch) == 0x000850, "Member 'ABP_Assist_Tutorial_C::IsCrouch' has a wrong offset!");
static_assert(offsetof(ABP_Assist_Tutorial_C, IsRightMControllerEnable) == 0x000851, "Member 'ABP_Assist_Tutorial_C::IsRightMControllerEnable' has a wrong offset!");
static_assert(offsetof(ABP_Assist_Tutorial_C, IsLeftMControllerEnable) == 0x000852, "Member 'ABP_Assist_Tutorial_C::IsLeftMControllerEnable' has a wrong offset!");

}

