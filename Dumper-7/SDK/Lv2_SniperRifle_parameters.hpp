#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Lv2_SniperRifle

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function Lv2-SniperRifle.Lv2-SniperRifle_C.ExecuteUbergraph_Lv2-SniperRifle
// 0x0068 (0x0068 - 0x0000)
struct Lv2_SniperRifle_C_ExecuteUbergraph_Lv2_SniperRifle final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_IsOpen;                         // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor1;                    // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_Lv2_characterBase_C*>        CallFunc_GetAllActorsOfClass_OutActors;            // 0x0040(0x0010)(ZeroConstructor, ReferenceParm)
	class ABP_Lv2_characterBase_C*                CallFunc_Array_Get_Item;                           // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_FOV;                            // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Lv2_SniperRifle_C_ExecuteUbergraph_Lv2_SniperRifle) == 0x000008, "Wrong alignment on Lv2_SniperRifle_C_ExecuteUbergraph_Lv2_SniperRifle");
static_assert(sizeof(Lv2_SniperRifle_C_ExecuteUbergraph_Lv2_SniperRifle) == 0x000068, "Wrong size on Lv2_SniperRifle_C_ExecuteUbergraph_Lv2_SniperRifle");
static_assert(offsetof(Lv2_SniperRifle_C_ExecuteUbergraph_Lv2_SniperRifle, EntryPoint) == 0x000000, "Member 'Lv2_SniperRifle_C_ExecuteUbergraph_Lv2_SniperRifle::EntryPoint' has a wrong offset!");
static_assert(offsetof(Lv2_SniperRifle_C_ExecuteUbergraph_Lv2_SniperRifle, CallFunc_Lerp_ReturnValue) == 0x000004, "Member 'Lv2_SniperRifle_C_ExecuteUbergraph_Lv2_SniperRifle::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(Lv2_SniperRifle_C_ExecuteUbergraph_Lv2_SniperRifle, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'Lv2_SniperRifle_C_ExecuteUbergraph_Lv2_SniperRifle::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Lv2_SniperRifle_C_ExecuteUbergraph_Lv2_SniperRifle, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'Lv2_SniperRifle_C_ExecuteUbergraph_Lv2_SniperRifle::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Lv2_SniperRifle_C_ExecuteUbergraph_Lv2_SniperRifle, Temp_int_Array_Index_Variable) == 0x000010, "Member 'Lv2_SniperRifle_C_ExecuteUbergraph_Lv2_SniperRifle::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Lv2_SniperRifle_C_ExecuteUbergraph_Lv2_SniperRifle, Temp_bool_Has_Been_Initd_Variable) == 0x000014, "Member 'Lv2_SniperRifle_C_ExecuteUbergraph_Lv2_SniperRifle::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(Lv2_SniperRifle_C_ExecuteUbergraph_Lv2_SniperRifle, K2Node_CustomEvent_IsOpen) == 0x000015, "Member 'Lv2_SniperRifle_C_ExecuteUbergraph_Lv2_SniperRifle::K2Node_CustomEvent_IsOpen' has a wrong offset!");
static_assert(offsetof(Lv2_SniperRifle_C_ExecuteUbergraph_Lv2_SniperRifle, K2Node_MakeStruct_LinearColor) == 0x000018, "Member 'Lv2_SniperRifle_C_ExecuteUbergraph_Lv2_SniperRifle::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(Lv2_SniperRifle_C_ExecuteUbergraph_Lv2_SniperRifle, K2Node_MakeStruct_LinearColor1) == 0x000028, "Member 'Lv2_SniperRifle_C_ExecuteUbergraph_Lv2_SniperRifle::K2Node_MakeStruct_LinearColor1' has a wrong offset!");
static_assert(offsetof(Lv2_SniperRifle_C_ExecuteUbergraph_Lv2_SniperRifle, Temp_bool_IsClosed_Variable) == 0x000038, "Member 'Lv2_SniperRifle_C_ExecuteUbergraph_Lv2_SniperRifle::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(Lv2_SniperRifle_C_ExecuteUbergraph_Lv2_SniperRifle, CallFunc_GetAllActorsOfClass_OutActors) == 0x000040, "Member 'Lv2_SniperRifle_C_ExecuteUbergraph_Lv2_SniperRifle::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(Lv2_SniperRifle_C_ExecuteUbergraph_Lv2_SniperRifle, CallFunc_Array_Get_Item) == 0x000050, "Member 'Lv2_SniperRifle_C_ExecuteUbergraph_Lv2_SniperRifle::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Lv2_SniperRifle_C_ExecuteUbergraph_Lv2_SniperRifle, CallFunc_Array_Length_ReturnValue) == 0x000058, "Member 'Lv2_SniperRifle_C_ExecuteUbergraph_Lv2_SniperRifle::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Lv2_SniperRifle_C_ExecuteUbergraph_Lv2_SniperRifle, CallFunc_Less_IntInt_ReturnValue) == 0x00005C, "Member 'Lv2_SniperRifle_C_ExecuteUbergraph_Lv2_SniperRifle::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Lv2_SniperRifle_C_ExecuteUbergraph_Lv2_SniperRifle, K2Node_CustomEvent_FOV) == 0x000060, "Member 'Lv2_SniperRifle_C_ExecuteUbergraph_Lv2_SniperRifle::K2Node_CustomEvent_FOV' has a wrong offset!");

// Function Lv2-SniperRifle.Lv2-SniperRifle_C.SetFov
// 0x0004 (0x0004 - 0x0000)
struct Lv2_SniperRifle_C_SetFov final
{
public:
	float                                         FOV;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Lv2_SniperRifle_C_SetFov) == 0x000004, "Wrong alignment on Lv2_SniperRifle_C_SetFov");
static_assert(sizeof(Lv2_SniperRifle_C_SetFov) == 0x000004, "Wrong size on Lv2_SniperRifle_C_SetFov");
static_assert(offsetof(Lv2_SniperRifle_C_SetFov, FOV) == 0x000000, "Member 'Lv2_SniperRifle_C_SetFov::FOV' has a wrong offset!");

// Function Lv2-SniperRifle.Lv2-SniperRifle_C.Open thermal imaging
// 0x0001 (0x0001 - 0x0000)
struct Lv2_SniperRifle_C_Open_thermal_imaging final
{
public:
	bool                                          IsOpen;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Lv2_SniperRifle_C_Open_thermal_imaging) == 0x000001, "Wrong alignment on Lv2_SniperRifle_C_Open_thermal_imaging");
static_assert(sizeof(Lv2_SniperRifle_C_Open_thermal_imaging) == 0x000001, "Wrong size on Lv2_SniperRifle_C_Open_thermal_imaging");
static_assert(offsetof(Lv2_SniperRifle_C_Open_thermal_imaging, IsOpen) == 0x000000, "Member 'Lv2_SniperRifle_C_Open_thermal_imaging::IsOpen' has a wrong offset!");

// Function Lv2-SniperRifle.Lv2-SniperRifle_C.AddWarningTarget
// 0x0068 (0x0068 - 0x0000)
struct Lv2_SniperRifle_C_AddWarningTarget final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRemove;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Index_0;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFind;                                            // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable1;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable1;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue1;                  // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item1;                          // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue1;     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue1;                // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue1;                 // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Lv2_SniperRifle_C_AddWarningTarget) == 0x000008, "Wrong alignment on Lv2_SniperRifle_C_AddWarningTarget");
static_assert(sizeof(Lv2_SniperRifle_C_AddWarningTarget) == 0x000068, "Wrong size on Lv2_SniperRifle_C_AddWarningTarget");
static_assert(offsetof(Lv2_SniperRifle_C_AddWarningTarget, Target) == 0x000000, "Member 'Lv2_SniperRifle_C_AddWarningTarget::Target' has a wrong offset!");
static_assert(offsetof(Lv2_SniperRifle_C_AddWarningTarget, IsRemove) == 0x000008, "Member 'Lv2_SniperRifle_C_AddWarningTarget::IsRemove' has a wrong offset!");
static_assert(offsetof(Lv2_SniperRifle_C_AddWarningTarget, Index_0) == 0x00000C, "Member 'Lv2_SniperRifle_C_AddWarningTarget::Index_0' has a wrong offset!");
static_assert(offsetof(Lv2_SniperRifle_C_AddWarningTarget, IsFind) == 0x000010, "Member 'Lv2_SniperRifle_C_AddWarningTarget::IsFind' has a wrong offset!");
static_assert(offsetof(Lv2_SniperRifle_C_AddWarningTarget, Temp_int_Array_Index_Variable) == 0x000014, "Member 'Lv2_SniperRifle_C_AddWarningTarget::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Lv2_SniperRifle_C_AddWarningTarget, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'Lv2_SniperRifle_C_AddWarningTarget::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Lv2_SniperRifle_C_AddWarningTarget, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'Lv2_SniperRifle_C_AddWarningTarget::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Lv2_SniperRifle_C_AddWarningTarget, Temp_int_Array_Index_Variable1) == 0x000020, "Member 'Lv2_SniperRifle_C_AddWarningTarget::Temp_int_Array_Index_Variable1' has a wrong offset!");
static_assert(offsetof(Lv2_SniperRifle_C_AddWarningTarget, Temp_int_Loop_Counter_Variable1) == 0x000024, "Member 'Lv2_SniperRifle_C_AddWarningTarget::Temp_int_Loop_Counter_Variable1' has a wrong offset!");
static_assert(offsetof(Lv2_SniperRifle_C_AddWarningTarget, CallFunc_Add_IntInt_ReturnValue1) == 0x000028, "Member 'Lv2_SniperRifle_C_AddWarningTarget::CallFunc_Add_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(Lv2_SniperRifle_C_AddWarningTarget, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00002C, "Member 'Lv2_SniperRifle_C_AddWarningTarget::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Lv2_SniperRifle_C_AddWarningTarget, CallFunc_Array_Add_ReturnValue) == 0x000030, "Member 'Lv2_SniperRifle_C_AddWarningTarget::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(Lv2_SniperRifle_C_AddWarningTarget, CallFunc_Array_Get_Item) == 0x000038, "Member 'Lv2_SniperRifle_C_AddWarningTarget::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Lv2_SniperRifle_C_AddWarningTarget, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000040, "Member 'Lv2_SniperRifle_C_AddWarningTarget::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(Lv2_SniperRifle_C_AddWarningTarget, CallFunc_Array_Get_Item1) == 0x000048, "Member 'Lv2_SniperRifle_C_AddWarningTarget::CallFunc_Array_Get_Item1' has a wrong offset!");
static_assert(offsetof(Lv2_SniperRifle_C_AddWarningTarget, CallFunc_EqualEqual_ObjectObject_ReturnValue1) == 0x000050, "Member 'Lv2_SniperRifle_C_AddWarningTarget::CallFunc_EqualEqual_ObjectObject_ReturnValue1' has a wrong offset!");
static_assert(offsetof(Lv2_SniperRifle_C_AddWarningTarget, CallFunc_Array_Length_ReturnValue) == 0x000054, "Member 'Lv2_SniperRifle_C_AddWarningTarget::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Lv2_SniperRifle_C_AddWarningTarget, CallFunc_Less_IntInt_ReturnValue) == 0x000058, "Member 'Lv2_SniperRifle_C_AddWarningTarget::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Lv2_SniperRifle_C_AddWarningTarget, CallFunc_Array_Length_ReturnValue1) == 0x00005C, "Member 'Lv2_SniperRifle_C_AddWarningTarget::CallFunc_Array_Length_ReturnValue1' has a wrong offset!");
static_assert(offsetof(Lv2_SniperRifle_C_AddWarningTarget, CallFunc_Less_IntInt_ReturnValue1) == 0x000060, "Member 'Lv2_SniperRifle_C_AddWarningTarget::CallFunc_Less_IntInt_ReturnValue1' has a wrong offset!");

// Function Lv2-SniperRifle.Lv2-SniperRifle_C.GetFov
// 0x0004 (0x0004 - 0x0000)
struct Lv2_SniperRifle_C_GetFov final
{
public:
	float                                         FOV;                                               // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Lv2_SniperRifle_C_GetFov) == 0x000004, "Wrong alignment on Lv2_SniperRifle_C_GetFov");
static_assert(sizeof(Lv2_SniperRifle_C_GetFov) == 0x000004, "Wrong size on Lv2_SniperRifle_C_GetFov");
static_assert(offsetof(Lv2_SniperRifle_C_GetFov, FOV) == 0x000000, "Member 'Lv2_SniperRifle_C_GetFov::FOV' has a wrong offset!");

}

