#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AttackDrone

#include "Basic.hpp"

#include "BP_AttackDrone_classes.hpp"
#include "BP_AttackDrone_parameters.hpp"


namespace SDK
{

// Function BP_AttackDrone.BP_AttackDrone_C.ExecuteUbergraph_BP_AttackDrone
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AttackDrone_C::ExecuteUbergraph_BP_AttackDrone(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackDrone_C", "ExecuteUbergraph_BP_AttackDrone");

	Params::BP_AttackDrone_C_ExecuteUbergraph_BP_AttackDrone Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AttackDrone.BP_AttackDrone_C.OnSilent
// (BlueprintCallable, BlueprintEvent)

void ABP_AttackDrone_C::OnSilent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackDrone_C", "OnSilent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AttackDrone.BP_AttackDrone_C.PlaySound
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AttackDrone_C::PlaySound(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackDrone_C", "PlaySound");

	Params::BP_AttackDrone_C_PlaySound Parms{};

	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AttackDrone.BP_AttackDrone_C.SetActorVisible
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AttackDrone_C::SetActorVisible(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackDrone_C", "SetActorVisible");

	Params::BP_AttackDrone_C_SetActorVisible Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AttackDrone.BP_AttackDrone_C.DoSetPlayer
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_CharacterBase_C*              Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AttackDrone_C::DoSetPlayer(class ABP_CharacterBase_C* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackDrone_C", "DoSetPlayer");

	Params::BP_AttackDrone_C_DoSetPlayer Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AttackDrone.BP_AttackDrone_C.OnSetPlayer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_AttackDrone_C::OnSetPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackDrone_C", "OnSetPlayer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AttackDrone.BP_AttackDrone_C.HitSheild
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   ImpactPoint                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Normal                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsRPG                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AttackDrone_C::HitSheild(const struct FVector& ImpactPoint, const struct FVector& Normal, bool IsRPG)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackDrone_C", "HitSheild");

	Params::BP_AttackDrone_C_HitSheild Parms{};

	Parms.ImpactPoint = std::move(ImpactPoint);
	Parms.Normal = std::move(Normal);
	Parms.IsRPG = IsRPG;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AttackDrone.BP_AttackDrone_C.OnMachineGunShoot
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   DeadlyBulletNum                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   TargetPoint                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsUseOffset                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsSpecial                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AttackDrone_C::OnMachineGunShoot(int32 DeadlyBulletNum, const struct FVector& TargetPoint, bool IsUseOffset, bool IsSpecial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackDrone_C", "OnMachineGunShoot");

	Params::BP_AttackDrone_C_OnMachineGunShoot Parms{};

	Parms.DeadlyBulletNum = DeadlyBulletNum;
	Parms.TargetPoint = std::move(TargetPoint);
	Parms.IsUseOffset = IsUseOffset;
	Parms.IsSpecial = IsSpecial;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AttackDrone.BP_AttackDrone_C.OnShowPrepare
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_AttackDrone_C::OnShowPrepare()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackDrone_C", "OnShowPrepare");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AttackDrone.BP_AttackDrone_C.ShowUpDone
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_AttackDrone_C::ShowUpDone()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackDrone_C", "ShowUpDone");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AttackDrone.BP_AttackDrone_C.OnShootMissile
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_AttackDrone_C::OnShootMissile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackDrone_C", "OnShootMissile");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AttackDrone.BP_AttackDrone_C.BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   NormalImpulse                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FHitResult&                Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_AttackDrone_C::BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackDrone_C", "BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature");

	Params::BP_AttackDrone_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AttackDrone.BP_AttackDrone_C.ResetAll
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_AttackDrone_C::ResetAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackDrone_C", "ResetAll");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AttackDrone.BP_AttackDrone_C.SetPoint
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AttackDrone_C::SetPoint(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackDrone_C", "SetPoint");

	Params::BP_AttackDrone_C_SetPoint Parms{};

	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AttackDrone.BP_AttackDrone_C.StartStage
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Stage_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AttackDrone_C::StartStage(int32 Stage_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackDrone_C", "StartStage");

	Params::BP_AttackDrone_C_StartStage Parms{};

	Parms.Stage_0 = Stage_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AttackDrone.BP_AttackDrone_C.StartFlying
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_AttackDrone_C::StartFlying()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackDrone_C", "StartFlying");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AttackDrone.BP_AttackDrone_C.Timeline_0_0__UpdateFunc
// (BlueprintEvent)

void ABP_AttackDrone_C::Timeline_0_0__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackDrone_C", "Timeline_0_0__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AttackDrone.BP_AttackDrone_C.Timeline_0_0__FinishedFunc
// (BlueprintEvent)

void ABP_AttackDrone_C::Timeline_0_0__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackDrone_C", "Timeline_0_0__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AttackDrone.BP_AttackDrone_C.FaceToTarget
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AttackDrone_C::FaceToTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackDrone_C", "FaceToTarget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AttackDrone.BP_AttackDrone_C.FaceTorTargetLocation
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AttackDrone_C::FaceTorTargetLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackDrone_C", "FaceTorTargetLocation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AttackDrone.BP_AttackDrone_C.GetPlayerHead
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UBoxComponent**                   BoxHead                                                (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AttackDrone_C::GetPlayerHead(bool* Success, class UBoxComponent** BoxHead)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackDrone_C", "GetPlayerHead");

	Params::BP_AttackDrone_C_GetPlayerHead Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;

	if (BoxHead != nullptr)
		*BoxHead = Parms.BoxHead;
}


// Function BP_AttackDrone.BP_AttackDrone_C.GetLocationAlongSpline
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class USplineComponent*                 Spline                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   SplineFinish                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AttackDrone_C::GetLocationAlongSpline(class USplineComponent* Spline, struct FVector* Location, bool* SplineFinish)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackDrone_C", "GetLocationAlongSpline");

	Params::BP_AttackDrone_C_GetLocationAlongSpline Parms{};

	Parms.Spline = Spline;

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);

	if (SplineFinish != nullptr)
		*SplineFinish = Parms.SplineFinish;
}


// Function BP_AttackDrone.BP_AttackDrone_C.GetTargetLocationSide
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FVector&                   Start                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   End                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsLeft_0                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float*                                  Delta                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AttackDrone_C::GetTargetLocationSide(const struct FVector& Start, const struct FVector& End, const struct FVector& Target, bool* IsLeft_0, float* Delta)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackDrone_C", "GetTargetLocationSide");

	Params::BP_AttackDrone_C_GetTargetLocationSide Parms{};

	Parms.Start = std::move(Start);
	Parms.End = std::move(End);
	Parms.Target = std::move(Target);

	UObject::ProcessEvent(Func, &Parms);

	if (IsLeft_0 != nullptr)
		*IsLeft_0 = Parms.IsLeft_0;

	if (Delta != nullptr)
		*Delta = Parms.Delta;
}


// Function BP_AttackDrone.BP_AttackDrone_C.CanMachineGunFire
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   Angle                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool*                                   CoolDown                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AttackDrone_C::CanMachineGunFire(bool* Angle, bool* CoolDown)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackDrone_C", "CanMachineGunFire");

	Params::BP_AttackDrone_C_CanMachineGunFire Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Angle != nullptr)
		*Angle = Parms.Angle;

	if (CoolDown != nullptr)
		*CoolDown = Parms.CoolDown;
}


// Function BP_AttackDrone.BP_AttackDrone_C.ShootMissile
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_AttackDrone_C::ShootMissile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackDrone_C", "ShootMissile");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AttackDrone.BP_AttackDrone_C.SetPlayer
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AttackDrone_C::SetPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackDrone_C", "SetPlayer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AttackDrone.BP_AttackDrone_C.OnRep_MachineGun
// (HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_AttackDrone_C::OnRep_MachineGun()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackDrone_C", "OnRep_MachineGun");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AttackDrone.BP_AttackDrone_C.GetConstraintBone
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class FName>*                    Constraints                                            (Parm, OutParm, ZeroConstructor)

void ABP_AttackDrone_C::GetConstraintBone(TArray<class FName>* Constraints)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackDrone_C", "GetConstraintBone");

	Params::BP_AttackDrone_C_GetConstraintBone Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Constraints != nullptr)
		*Constraints = std::move(Parms.Constraints);
}


// Function BP_AttackDrone.BP_AttackDrone_C.CheatDamge
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Damge                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AttackDrone_C::CheatDamge(float Damge)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackDrone_C", "CheatDamge");

	Params::BP_AttackDrone_C_CheatDamge Parms{};

	Parms.Damge = Damge;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AttackDrone.BP_AttackDrone_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AttackDrone_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackDrone_C", "ReceiveTick");

	Params::BP_AttackDrone_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AttackDrone.BP_AttackDrone_C.ReceiveAnyDamage
// (BlueprintAuthorityOnly, Event, Public, BlueprintEvent)
// Parameters:
// float                                   Damage_0                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class UDamageType*                DamageType                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AController*                      InstigatedBy                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AttackDrone_C::ReceiveAnyDamage(float Damage_0, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackDrone_C", "ReceiveAnyDamage");

	Params::BP_AttackDrone_C_ReceiveAnyDamage Parms{};

	Parms.Damage_0 = Damage_0;
	Parms.DamageType = DamageType;
	Parms.InstigatedBy = InstigatedBy;
	Parms.DamageCauser = DamageCauser;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AttackDrone.BP_AttackDrone_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_AttackDrone_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackDrone_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AttackDrone.BP_AttackDrone_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_AttackDrone_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AttackDrone_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}

}

