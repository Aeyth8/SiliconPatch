#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTT_HeavyRiotRangedAttack

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTT_HeavyRiotRangedAttack.BTT_HeavyRiotRangedAttack_C
// 0x0100 (0x01A0 - 0x00A0)
class UBTT_HeavyRiotRangedAttack_C final : public UBTTask_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FBlackboardKeySelector                 AttackSpeedMinBB;                                  // 0x00A8(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 AttackSpeedMaxBB;                                  // 0x00D0(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 SwitchIntervalMinBB;                               // 0x00F8(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 SwitchIntervalMaxBB;                               // 0x0120(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 TargetLocationBB;                                  // 0x0148(0x0028)(Edit, BlueprintVisible)
	float                                         CurrentAttackSpeed;                                // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_174[0x4];                                      // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 OwnerActor;                                        // 0x0178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WaitChangeState;                                   // 0x0180(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_181[0x3];                                      // 0x0181(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeltaTime;                                         // 0x0184(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SwitchCoverTime;                                   // 0x0188(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDefend;                                          // 0x018C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_18D[0x3];                                      // 0x018D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RandomAttackSpeed;                                 // 0x0190(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RandomSwitchInterval;                              // 0x0194(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSwitching;                                       // 0x0198(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BTT_HeavyRiotRangedAttack(int32 EntryPoint);
	void ReceiveTick(class AActor* OwnerActor_0, float DeltaSeconds);
	void ReceiveExecute(class AActor* OwnerActor_0);
	void OnSuccess_52778842480B53E3474263BE18C616B7(EPathFollowingResult MovementResult);
	void OnFail_52778842480B53E3474263BE18C616B7(EPathFollowingResult MovementResult);
	void FaceToViewTarget(class ABP_AIC_C* SelfController, class AActor* SelfActor);
	void FaceToTarget(class ABP_AIC_C* SelfController);
	void ChangeUseControllerRotation(class ABP_AIC_C* SelfController, bool IsUse);
	void ResetRandomSettings(bool IsAttackSpeed);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTT_HeavyRiotRangedAttack_C">();
	}
	static class UBTT_HeavyRiotRangedAttack_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTT_HeavyRiotRangedAttack_C>();
	}
};
static_assert(alignof(UBTT_HeavyRiotRangedAttack_C) == 0x000008, "Wrong alignment on UBTT_HeavyRiotRangedAttack_C");
static_assert(sizeof(UBTT_HeavyRiotRangedAttack_C) == 0x0001A0, "Wrong size on UBTT_HeavyRiotRangedAttack_C");
static_assert(offsetof(UBTT_HeavyRiotRangedAttack_C, UberGraphFrame) == 0x0000A0, "Member 'UBTT_HeavyRiotRangedAttack_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBTT_HeavyRiotRangedAttack_C, AttackSpeedMinBB) == 0x0000A8, "Member 'UBTT_HeavyRiotRangedAttack_C::AttackSpeedMinBB' has a wrong offset!");
static_assert(offsetof(UBTT_HeavyRiotRangedAttack_C, AttackSpeedMaxBB) == 0x0000D0, "Member 'UBTT_HeavyRiotRangedAttack_C::AttackSpeedMaxBB' has a wrong offset!");
static_assert(offsetof(UBTT_HeavyRiotRangedAttack_C, SwitchIntervalMinBB) == 0x0000F8, "Member 'UBTT_HeavyRiotRangedAttack_C::SwitchIntervalMinBB' has a wrong offset!");
static_assert(offsetof(UBTT_HeavyRiotRangedAttack_C, SwitchIntervalMaxBB) == 0x000120, "Member 'UBTT_HeavyRiotRangedAttack_C::SwitchIntervalMaxBB' has a wrong offset!");
static_assert(offsetof(UBTT_HeavyRiotRangedAttack_C, TargetLocationBB) == 0x000148, "Member 'UBTT_HeavyRiotRangedAttack_C::TargetLocationBB' has a wrong offset!");
static_assert(offsetof(UBTT_HeavyRiotRangedAttack_C, CurrentAttackSpeed) == 0x000170, "Member 'UBTT_HeavyRiotRangedAttack_C::CurrentAttackSpeed' has a wrong offset!");
static_assert(offsetof(UBTT_HeavyRiotRangedAttack_C, OwnerActor) == 0x000178, "Member 'UBTT_HeavyRiotRangedAttack_C::OwnerActor' has a wrong offset!");
static_assert(offsetof(UBTT_HeavyRiotRangedAttack_C, WaitChangeState) == 0x000180, "Member 'UBTT_HeavyRiotRangedAttack_C::WaitChangeState' has a wrong offset!");
static_assert(offsetof(UBTT_HeavyRiotRangedAttack_C, DeltaTime) == 0x000184, "Member 'UBTT_HeavyRiotRangedAttack_C::DeltaTime' has a wrong offset!");
static_assert(offsetof(UBTT_HeavyRiotRangedAttack_C, SwitchCoverTime) == 0x000188, "Member 'UBTT_HeavyRiotRangedAttack_C::SwitchCoverTime' has a wrong offset!");
static_assert(offsetof(UBTT_HeavyRiotRangedAttack_C, IsDefend) == 0x00018C, "Member 'UBTT_HeavyRiotRangedAttack_C::IsDefend' has a wrong offset!");
static_assert(offsetof(UBTT_HeavyRiotRangedAttack_C, RandomAttackSpeed) == 0x000190, "Member 'UBTT_HeavyRiotRangedAttack_C::RandomAttackSpeed' has a wrong offset!");
static_assert(offsetof(UBTT_HeavyRiotRangedAttack_C, RandomSwitchInterval) == 0x000194, "Member 'UBTT_HeavyRiotRangedAttack_C::RandomSwitchInterval' has a wrong offset!");
static_assert(offsetof(UBTT_HeavyRiotRangedAttack_C, IsSwitching) == 0x000198, "Member 'UBTT_HeavyRiotRangedAttack_C::IsSwitching' has a wrong offset!");

}

