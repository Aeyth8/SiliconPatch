#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Assist_Tutorial

#include "Basic.hpp"

#include "BP_Assist_Tutorial_classes.hpp"
#include "BP_Assist_Tutorial_parameters.hpp"


namespace SDK
{

// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.ExecuteUbergraph_BP_Assist_Tutorial
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Assist_Tutorial_C::ExecuteUbergraph_BP_Assist_Tutorial(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "ExecuteUbergraph_BP_Assist_Tutorial");

	Params::BP_Assist_Tutorial_C_ExecuteUbergraph_BP_Assist_Tutorial Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_Assist_Tutorial_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Assist_Tutorial_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "ReceiveTick");

	Params::BP_Assist_Tutorial_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.InpAxisEvt_MoveRight_K2Node_InputAxisEvent_192
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Assist_Tutorial_C::InpAxisEvt_MoveRight_K2Node_InputAxisEvent_192(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "InpAxisEvt_MoveRight_K2Node_InputAxisEvent_192");

	Params::BP_Assist_Tutorial_C_InpAxisEvt_MoveRight_K2Node_InputAxisEvent_192 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.InpAxisEvt_MoveForward_K2Node_InputAxisEvent_181
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Assist_Tutorial_C::InpAxisEvt_MoveForward_K2Node_InputAxisEvent_181(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "InpAxisEvt_MoveForward_K2Node_InputAxisEvent_181");

	Params::BP_Assist_Tutorial_C_InpAxisEvt_MoveForward_K2Node_InputAxisEvent_181 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.InpAxisEvt_LookUp_K2Node_InputAxisEvent_172
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Assist_Tutorial_C::InpAxisEvt_LookUp_K2Node_InputAxisEvent_172(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "InpAxisEvt_LookUp_K2Node_InputAxisEvent_172");

	Params::BP_Assist_Tutorial_C_InpAxisEvt_LookUp_K2Node_InputAxisEvent_172 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.InpAxisEvt_Turn_K2Node_InputAxisEvent_157
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Assist_Tutorial_C::InpAxisEvt_Turn_K2Node_InputAxisEvent_157(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "InpAxisEvt_Turn_K2Node_InputAxisEvent_157");

	Params::BP_Assist_Tutorial_C_InpAxisEvt_Turn_K2Node_InputAxisEvent_157 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.DropCharWeapon
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsRight                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsDestroy                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Assist_Tutorial_C::DropCharWeapon(bool IsRight, bool IsDestroy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "DropCharWeapon");

	Params::BP_Assist_Tutorial_C_DropCharWeapon Parms{};

	Parms.IsRight = IsRight;
	Parms.IsDestroy = IsDestroy;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.OnMotionControllerCheck
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_Assist_Tutorial_C::OnMotionControllerCheck()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "OnMotionControllerCheck");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.SetMotionControllerEnable
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsRight                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Assist_Tutorial_C::SetMotionControllerEnable(bool IsRight, bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "SetMotionControllerEnable");

	Params::BP_Assist_Tutorial_C_SetMotionControllerEnable Parms{};

	Parms.IsRight = IsRight;
	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.UnPoccessChar
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_Assist_Tutorial_C::UnPoccessChar()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "UnPoccessChar");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.OnHitReaction
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    BoneName_0                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// const struct FVector&                   HitLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   HitNormal_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   HitDamage_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Assist_Tutorial_C::OnHitReaction(const class FString& BoneName_0, const struct FVector& HitLocation, const struct FVector& HitNormal_0, float HitDamage_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "OnHitReaction");

	Params::BP_Assist_Tutorial_C_OnHitReaction Parms{};

	Parms.BoneName_0 = std::move(BoneName_0);
	Parms.HitLocation = std::move(HitLocation);
	Parms.HitNormal_0 = std::move(HitNormal_0);
	Parms.HitDamage_0 = HitDamage_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.OnCrouch
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Assist_Tutorial_C::OnCrouch(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "OnCrouch");

	Params::BP_Assist_Tutorial_C_OnCrouch Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.BndEvt__IKMesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   NormalImpulse                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FHitResult&                Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_Assist_Tutorial_C::BndEvt__IKMesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "BndEvt__IKMesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature");

	Params::BP_Assist_Tutorial_C_BndEvt__IKMesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.OnServerCheckHMDStatus
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enabled                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Assist_Tutorial_C::OnServerCheckHMDStatus(bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "OnServerCheckHMDStatus");

	Params::BP_Assist_Tutorial_C_OnServerCheckHMDStatus Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.CheckHMDStatus
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_Assist_Tutorial_C::CheckHMDStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "CheckHMDStatus");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.ResetControllerRotation
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FRotator&                  Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Assist_Tutorial_C::ResetControllerRotation(const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "ResetControllerRotation");

	Params::BP_Assist_Tutorial_C_ResetControllerRotation Parms{};

	Parms.Rotation = std::move(Rotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.HealMe
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Health                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Assist_Tutorial_C::HealMe(float Health)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "HealMe");

	Params::BP_Assist_Tutorial_C_HealMe Parms{};

	Parms.Health = Health;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.DamageMe
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Assist_Tutorial_C::DamageMe(float Damage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "DamageMe");

	Params::BP_Assist_Tutorial_C_DamageMe Parms{};

	Parms.Damage = Damage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.SetUndead
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Assist_Tutorial_C::SetUndead(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "SetUndead");

	Params::BP_Assist_Tutorial_C_SetUndead Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.OnHPTick
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_Assist_Tutorial_C::OnHPTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "OnHPTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.OnDead
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_Assist_Tutorial_C::OnDead()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "OnDead");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.OnHapticEffect
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UHapticFeedbackEffect_Base*       HapticEffect                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EControllerHand                         hand                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Loop                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Assist_Tutorial_C::OnHapticEffect(class UHapticFeedbackEffect_Base* HapticEffect, EControllerHand hand, float Scale, bool Loop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "OnHapticEffect");

	Params::BP_Assist_Tutorial_C_OnHapticEffect Parms{};

	Parms.HapticEffect = HapticEffect;
	Parms.hand = hand;
	Parms.Scale = Scale;
	Parms.Loop = Loop;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.Reload
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsRightHand                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Assist_Tutorial_C::Reload(bool IsRightHand)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "Reload");

	Params::BP_Assist_Tutorial_C_Reload Parms{};

	Parms.IsRightHand = IsRightHand;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.ReleaseTrigger
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsRightHand                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Assist_Tutorial_C::ReleaseTrigger(bool IsRightHand)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "ReleaseTrigger");

	Params::BP_Assist_Tutorial_C_ReleaseTrigger Parms{};

	Parms.IsRightHand = IsRightHand;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.PullTrigger
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsRightHand                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Assist_Tutorial_C::PullTrigger(bool IsRightHand)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "PullTrigger");

	Params::BP_Assist_Tutorial_C_PullTrigger Parms{};

	Parms.IsRightHand = IsRightHand;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.SpawnWeapon
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// EItemTypes                              WeaponType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsRight                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Assist_Tutorial_C::SpawnWeapon(EItemTypes WeaponType, bool IsRight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "SpawnWeapon");

	Params::BP_Assist_Tutorial_C_SpawnWeapon Parms{};

	Parms.WeaponType = WeaponType;
	Parms.IsRight = IsRight;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.ResetRotation
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_Assist_Tutorial_C::ResetRotation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "ResetRotation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.PauseAIControl
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_Assist_Tutorial_C::PauseAIControl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "PauseAIControl");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.SetAnimCrouch
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Assist_Tutorial_C::SetAnimCrouch(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "SetAnimCrouch");

	Params::BP_Assist_Tutorial_C_SetAnimCrouch Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.AIControlTick
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Assist_Tutorial_C::AIControlTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "AIControlTick");

	Params::BP_Assist_Tutorial_C_AIControlTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.EndAIControl
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_Assist_Tutorial_C::EndAIControl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "EndAIControl");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.StartAIControl
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_Assist_Tutorial_C::StartAIControl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "StartAIControl");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.InpActEvt_Decimal_K2Node_InputKeyEvent_0
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_Assist_Tutorial_C::InpActEvt_Decimal_K2Node_InputKeyEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "InpActEvt_Decimal_K2Node_InputKeyEvent_0");

	Params::BP_Assist_Tutorial_C_InpActEvt_Decimal_K2Node_InputKeyEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.InpActEvt_NumPadTwo_K2Node_InputKeyEvent_1
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_Assist_Tutorial_C::InpActEvt_NumPadTwo_K2Node_InputKeyEvent_1(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "InpActEvt_NumPadTwo_K2Node_InputKeyEvent_1");

	Params::BP_Assist_Tutorial_C_InpActEvt_NumPadTwo_K2Node_InputKeyEvent_1 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.InpActEvt_NumPadEight_K2Node_InputKeyEvent_2
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_Assist_Tutorial_C::InpActEvt_NumPadEight_K2Node_InputKeyEvent_2(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "InpActEvt_NumPadEight_K2Node_InputKeyEvent_2");

	Params::BP_Assist_Tutorial_C_InpActEvt_NumPadEight_K2Node_InputKeyEvent_2 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.InpActEvt_LeftControl_K2Node_InputKeyEvent_3
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_Assist_Tutorial_C::InpActEvt_LeftControl_K2Node_InputKeyEvent_3(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "InpActEvt_LeftControl_K2Node_InputKeyEvent_3");

	Params::BP_Assist_Tutorial_C_InpActEvt_LeftControl_K2Node_InputKeyEvent_3 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.InpActEvt_LeftControl_K2Node_InputKeyEvent_4
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_Assist_Tutorial_C::InpActEvt_LeftControl_K2Node_InputKeyEvent_4(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "InpActEvt_LeftControl_K2Node_InputKeyEvent_4");

	Params::BP_Assist_Tutorial_C_InpActEvt_LeftControl_K2Node_InputKeyEvent_4 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.InpActEvt_Reload_L_K2Node_InputActionEvent_0
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_Assist_Tutorial_C::InpActEvt_Reload_L_K2Node_InputActionEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "InpActEvt_Reload_L_K2Node_InputActionEvent_0");

	Params::BP_Assist_Tutorial_C_InpActEvt_Reload_L_K2Node_InputActionEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.InpActEvt_Fire_L_K2Node_InputActionEvent_1
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_Assist_Tutorial_C::InpActEvt_Fire_L_K2Node_InputActionEvent_1(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "InpActEvt_Fire_L_K2Node_InputActionEvent_1");

	Params::BP_Assist_Tutorial_C_InpActEvt_Fire_L_K2Node_InputActionEvent_1 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.InpActEvt_Fire_L_K2Node_InputActionEvent_2
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_Assist_Tutorial_C::InpActEvt_Fire_L_K2Node_InputActionEvent_2(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "InpActEvt_Fire_L_K2Node_InputActionEvent_2");

	Params::BP_Assist_Tutorial_C_InpActEvt_Fire_L_K2Node_InputActionEvent_2 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.InpActEvt_Fire_K2Node_InputActionEvent_3
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_Assist_Tutorial_C::InpActEvt_Fire_K2Node_InputActionEvent_3(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "InpActEvt_Fire_K2Node_InputActionEvent_3");

	Params::BP_Assist_Tutorial_C_InpActEvt_Fire_K2Node_InputActionEvent_3 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.InpActEvt_Fire_K2Node_InputActionEvent_4
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_Assist_Tutorial_C::InpActEvt_Fire_K2Node_InputActionEvent_4(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "InpActEvt_Fire_K2Node_InputActionEvent_4");

	Params::BP_Assist_Tutorial_C_InpActEvt_Fire_K2Node_InputActionEvent_4 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.InpActEvt_Reload_K2Node_InputActionEvent_5
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_Assist_Tutorial_C::InpActEvt_Reload_K2Node_InputActionEvent_5(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "InpActEvt_Reload_K2Node_InputActionEvent_5");

	Params::BP_Assist_Tutorial_C_InpActEvt_Reload_K2Node_InputActionEvent_5 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.InpActEvt_Jump_K2Node_InputActionEvent_6
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_Assist_Tutorial_C::InpActEvt_Jump_K2Node_InputActionEvent_6(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "InpActEvt_Jump_K2Node_InputActionEvent_6");

	Params::BP_Assist_Tutorial_C_InpActEvt_Jump_K2Node_InputActionEvent_6 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.InpActEvt_Jump_K2Node_InputActionEvent_7
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_Assist_Tutorial_C::InpActEvt_Jump_K2Node_InputActionEvent_7(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "InpActEvt_Jump_K2Node_InputActionEvent_7");

	Params::BP_Assist_Tutorial_C_InpActEvt_Jump_K2Node_InputActionEvent_7 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.InpActEvt_U_K2Node_InputKeyEvent_5
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_Assist_Tutorial_C::InpActEvt_U_K2Node_InputKeyEvent_5(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "InpActEvt_U_K2Node_InputKeyEvent_5");

	Params::BP_Assist_Tutorial_C_InpActEvt_U_K2Node_InputKeyEvent_5 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.InpActEvt_Three_K2Node_InputKeyEvent_6
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_Assist_Tutorial_C::InpActEvt_Three_K2Node_InputKeyEvent_6(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "InpActEvt_Three_K2Node_InputKeyEvent_6");

	Params::BP_Assist_Tutorial_C_InpActEvt_Three_K2Node_InputKeyEvent_6 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.InpActEvt_Two_K2Node_InputKeyEvent_7
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_Assist_Tutorial_C::InpActEvt_Two_K2Node_InputKeyEvent_7(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "InpActEvt_Two_K2Node_InputKeyEvent_7");

	Params::BP_Assist_Tutorial_C_InpActEvt_Two_K2Node_InputKeyEvent_7 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.InpActEvt_One_K2Node_InputKeyEvent_8
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_Assist_Tutorial_C::InpActEvt_One_K2Node_InputKeyEvent_8(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "InpActEvt_One_K2Node_InputKeyEvent_8");

	Params::BP_Assist_Tutorial_C_InpActEvt_One_K2Node_InputKeyEvent_8 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.HitReaction__UpdateFunc
// (BlueprintEvent)

void ABP_Assist_Tutorial_C::HitReaction__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "HitReaction__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.HitReaction__FinishedFunc
// (BlueprintEvent)

void ABP_Assist_Tutorial_C::HitReaction__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "HitReaction__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_Assist_Tutorial_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.GetAimPos
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector*                         Pos                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Assist_Tutorial_C::GetAimPos(struct FVector* Pos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "GetAimPos");

	Params::BP_Assist_Tutorial_C_GetAimPos Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Pos != nullptr)
		*Pos = std::move(Parms.Pos);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.OnRep_RightHand
// (BlueprintCallable, BlueprintEvent)

void ABP_Assist_Tutorial_C::OnRep_RightHand()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "OnRep_RightHand");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.OnRep_LeftHand
// (BlueprintCallable, BlueprintEvent)

void ABP_Assist_Tutorial_C::OnRep_LeftHand()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "OnRep_LeftHand");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.OnRep_RightWeapon
// (HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_Assist_Tutorial_C::OnRep_RightWeapon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "OnRep_RightWeapon");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.OnRep_LeftWeapon
// (HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_Assist_Tutorial_C::OnRep_LeftWeapon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "OnRep_LeftWeapon");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.WeaponInputAction
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Assist_Tutorial_C::WeaponInputAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "WeaponInputAction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.FindTargetToShoot
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class USceneComponent**                 Target                                                 (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Assist_Tutorial_C::FindTargetToShoot(class USceneComponent** Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "FindTargetToShoot");

	Params::BP_Assist_Tutorial_C_FindTargetToShoot Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Target != nullptr)
		*Target = Parms.Target;
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.GetAIAimPos
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector*                         Pos                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Assist_Tutorial_C::GetAIAimPos(struct FVector* Pos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "GetAIAimPos");

	Params::BP_Assist_Tutorial_C_GetAIAimPos Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Pos != nullptr)
		*Pos = std::move(Parms.Pos);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.UpdateHandUI
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Assist_Tutorial_C::UpdateHandUI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "UpdateHandUI");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.OnRep_IsLeftMControllerEnable
// (BlueprintCallable, BlueprintEvent)

void ABP_Assist_Tutorial_C::OnRep_IsLeftMControllerEnable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "OnRep_IsLeftMControllerEnable");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Assist_Tutorial.BP_Assist_Tutorial_C.OnRep_IsRightMControllerEnable
// (BlueprintCallable, BlueprintEvent)

void ABP_Assist_Tutorial_C::OnRep_IsRightMControllerEnable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Assist_Tutorial_C", "OnRep_IsRightMControllerEnable");

	UObject::ProcessEvent(Func, nullptr);
}

}

